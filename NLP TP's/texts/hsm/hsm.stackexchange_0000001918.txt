Q:

Who created Agile programming and why?

I semi-recently went to work for a workplace that employs Agile development instead of Waterfall. I have my own reasons for appreciating it, but who was the original creator of Agile? What problems were they hoping to solve with it?

A:

A tiny bit of research is all it takes to find who and when. Agile was conceived between February 11-13, 2001 by Kent Beck, Mike Beedle, Arie van Bennekum, Alistair Cockburn, Ward Cunningham, Martin Fowler, James Grenning, Jim Highsmith, Andrew Hunt, Ron Jeffries, Jon Kern, Brian Marick, Robert C. Martin, Steve Mellor, Ken Schwaber, Jeff Sutherland, and Dave Thomas.
With regard to why: The waterfall model doesn't work. It never has; it's pure fiction. Per the waterfall model, all an organization has to do is specify the requirements. After that everything is easy. The design necessarily follows from the requirements, the implementation necessarily follows from the design, and testing demonstrates that everything went according to plan. The waterfall model assumes that what the ultimate software product is supposed to do is fully known from the onset, and that nothing will never, ever go bump in the night (From ghoulies and ghosties / And long-leggedy beasties / And things that go bump in the night, / Good Lord, deliver us!) during the design, development, and test processes.
Good luck with that!
In reality, people are close to clueless with regard to what the product is supposed to do early on, and things always go bump in the night. Every once in a while, projects developed per the waterfall model are completed on-time and on-budget, but the typical result is that software projects are late, over budget, and buggy. 
That said, I'm not a big fan of Agile, either. Some of the Agile concepts drive me crazy. These include big huge dehumanizing cube farms, pair programming, meetings galore, and an utter lack of requirements and documentation.

