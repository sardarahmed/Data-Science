Q:

Persistent Service reconnection

I'm using ros hydro.
I call a persistence service in this way:
connectToClassificationServer()
{
     classificationService = n.serviceClient<c_fuzzy::Classification>("classification", true);
}

then I use my service:
if (classificationService.isValid())
{
    
    classificationService.call(serviceCall);
}
else
{
    ROS_ERROR("Service down, waiting reconnection...");
    classificationService.waitForExistence();
    connectToClassificationServer(); //Why this??
}

the method isValid return always false if I don't re-create the service handler. And apparently there's no way to restart a persistent service (such as a 'reconnect' method).
it is correct to always recreate the ServiceClient? why I need to use the nodeHandler if I've already all the information needed inside the ServiceClient object?

Originally posted by Boris_il_forte on ROS Answers with karma: 96 on 2014-05-21
Post score: 1

A:

A persistent service client refers specifically to keeping the TCP connection between the client and the server open; if the server shuts down and comes back, you have to re-establish the connection.
It may be worth filing a feature request against roscpp to make the API for this easier to use and more failure-tolerant.

Originally posted by ahendrix with karma: 47576 on 2014-05-21
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by Adolfo Rodriguez T on 2014-05-21:
+1 Persistent services that (optionally) try to re-establish the connection would be very valuable. Working your way around the existing API is possible, but can indeed be cumbersome. An added inconvenience is that currently it's not possible to query if a ServiceClient is persistent or not.
Comment by Adolfo Rodriguez T on 2014-05-21:
Feature request created: https://github.com/ros/ros_comm/issues/416
Comment by Boris_il_forte on 2014-05-22:
so, up to now, the "best" way is to recreate the ServiceClient from nodeHanlder?
Comment by Adolfo Rodriguez T on 2014-05-22:
I know of no other option.
Comment by mihir3445@gmail.com on 2020-06-10:
This feature was implemented in Kinetic release. discussion  Code  Changes can be found here
Comment by JWCS on 2021-02-02:
Actually, it was not implemented. The PR died without getting added. The referenced source files, from kinetic to noetic, don't include that code.

