Q:

Accessing pixel pointer

Hi guys
Can you explain to me how the accessing pixel has been done in the double loop ? how do they change rows and cols and pixel's value?
for(int i=0;i<cv_ptr->image.rows;i++)
    {   
        float* ptr_img_A = cv_ptr->image.ptr<float>(i); 
        
        for(int j=0;j<cv_ptr->image.cols;j++)
        {                   
            *ptr_img_B=255*(*ptr_img_A)/3.5;
             ptr_img_A++;   
        }           
    }

Thank you.

Originally posted by ROSkinect on ROS Answers with karma: 751 on 2014-07-03
Post score: 0

Original comments
Comment by dornhege on 2014-07-03:
ptr_img_B seems to be missing here.
Comment by ROSkinect on 2014-07-04:
how so ?..
Comment by dornhege on 2014-07-04:
It is neither declared nor advanced ever.
Comment by ROSkinect on 2014-07-04:
Ya I just pick up this part of code just to understand the accessing pixel

A:

This is fairly normal pointer arithmetic, usually explained in a second or third computer science/C++ course.
This page explains it fairly well: http://www.cs.umd.edu/class/sum2003/cmsc311/Notes/BitOp/pointer.html
The OpenCV Mat Documentation describes how to access data in OpenCV images.

Originally posted by ahendrix with karma: 47576 on 2014-07-03
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by ROSkinect on 2014-07-04:
I don't want courses in pointer, my question was how we can use pointer to access to pixel.
Anyway thank you
Comment by ahendrix on 2014-07-04:
The sample you posed uses pointer arithmetic to access the value of each pixel in row-major order.
Comment by ROSkinect on 2014-07-04:
and what about the cols ? because as I know the image is like a two dimension table we can access to each pixel via i,j.. but using pointer I can't see clearly how we do that !
Comment by Wolf on 2014-07-04:
Same as in the question you asked here http://answers.ros.org/question/173933/accessing-pixel-image-c/ ptr_img_A = cv_ptr->image.ptr(i); Gives you a pointer to the first element in the i'th row. ptr_img_A++ changes ptr_img_A from pointing to one column to pointing the next column...

