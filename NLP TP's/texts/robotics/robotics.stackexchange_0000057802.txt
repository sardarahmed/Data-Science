Q:

How does ros execute my nodes on a remote machine?

When specifying the machine-tag for a ros-node in a launch-file one is principally able to run a ros-node on any reachable machine in the network that is configured for ros. Do I get this right? If yes, I am wondering about the following questions:

How does this work when I developped the code for my node on machine A and I execute it on machine B. Somehow, the binary must be transmitted, doesn't it?
What happens, if machine B contains a conflicting older version of the same node, which version will be executed?
Given the case that a team of programmers develops ros-nodes on different machines and all nodes are finally executed using a launch-file on another machine - let's name it master-machine - that runs the roscore:
Although they merge their changes using a VCS and this could theoretically be checkout and built on the master-machine in advance of every execution of the launch-file, is there a possibility to simply update the code on the master-machine (e.g. using roscp)?

(the wiki told me to include this: http://wiki.ros.org/ROS/Tutorials/MultipleMachines)

Originally posted by rilke on ROS Answers with karma: 35 on 2014-03-10
Post score: 3

A:

ROS assumes that you have your workspace set up on machine B. The remote launch syntax allows you to specify an environment-loader script on the remote machine, which is responsible for sourcing the appropriate setup files to set up your ROS environment on the remote machine. ROS does not transfer any code or binaries to the remote machine.

If there is an older version of the node on machine B, it will run the older version.

I'm not quite sure I understand what you're proposing.

In short: roslaunch does not copy anything to the remote machine when doing remote launches. It assumes you're keeping your code in sync outside of roslaunch.
I've seen teams and projects do this in two ways:

Assuming all of your machines have the same architecture (i386, x86_64, ARM, etc), you can put the shared code onto a shared file server, and run it directly from the file server.
Keep code in sync manually, and build on each machine

It sounds like you have a more complex use case than most other users. It may be worth writing some of your own tools and releasing them for the rest of the community once you have something that works well.

Originally posted by ahendrix with karma: 47576 on 2014-03-10
This answer was ACCEPTED on the original site
Post score: 6

