Q:

common-msgs vs std-msgs?

When various message handling packages like actionlib, navigation, sensor, geometry are included in the common_msgs stack, why is std_msgs package separated? How is std_msgs package different from the others mentioned above, for it to be excluded from the common_msgs stack?

Originally posted by sam26 on ROS Answers with karma: 231 on 2017-02-27
Post score: 1

A:

I can only guess, but to me the following seems to be the rational behind it:
Description on std_msgs:

Contains minimal messages of primitive data types and multiarrays. Intended for quick prototyping, not production use.

The full explanation/discussion can be found on discourse.
EDIT
With semantics is meant that you can derive from the message name and the names of it fields what it transports. To give an example (stolen more or less from discourse ;-) ):
If you would like to send a temperature, you could just use a std_msgs/Float message. However, if you would inspect the message, it is not clear what this should be. Is it a temperature, and if yes in Celsius, Fahrenheit, ..., or rather air pressure or the distance to an object? All the messages says is it is a float and contains a field data.
If you however use a dedicated sensor_msgs/Temperature message, you are fairly certain that this should actually be a temperature and that this temperature should be in degree celsius (check the source for the full description).

Originally posted by mgruhler with karma: 12390 on 2017-02-27
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by gvdhoorn on 2017-02-27:
Msgs in std_msgs wrap primitive data types, but don't add any semantics. The msg pkgs in common_msgs do add semantics.
Comment by sam26 on 2017-02-27:
and by semantics , you mean ??
Comment by mgruhler on 2017-02-28:
see edit above.
Comment by sam26 on 2017-02-28:
That helped!! Thanks

