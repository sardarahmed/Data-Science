Q:

estimated pose by hector mapping and robot_pose_ekf

Hello
Im using three methods for my robot localisation and needs some helps regarding the estimated pose and the outcomes of those methods. First I tried AMCL and hector Mapping. There is significant improvements of the estimated pose by the Hector Mapping as the scan matching make a better performance. Than I tried the robot_pose_ekf package. First I fuse IMU and the virtual odometry from Hector Mapping. My virtual odometry contains also velocity massages. So the estimates pose from robot_pose_ekf almost does not differs from the Hector Mapping ones. When I used robot_pose_ekf fusing IMU with a real odometry from my wheel encoders the estimated pose follows the odometry but still is not so good as the from Hector Mapping. The odometry coming from the encoders also contains velocity. So is there any explonation about my results. And also when I extracted the velocity profiles (linear and angular velocity) of the robot runs there is almost no difference in all 4 methods.
Any help?

Originally posted by Astronaut on ROS Answers with karma: 330 on 2013-03-10
Post score: 0

A:

Real odometry suffers from drift as it doesn't use any feedback.
Hector mapping actually aligns scans in the world and matches them against past observations, so it can greatly reduce the drift. Fusing both methods with an IMU thus will only be able to slightly correct the output, but not counter any drift.

Originally posted by dornhege with karma: 31395 on 2013-03-11
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by Astronaut on 2013-03-11:
Well Im fusing IMU and real odometry with the robot_pose_ekf package and here the outcome is just slightly improve, the best is when Im fusing virtual odometry coming from Hector Mapping and IMU. But why robot_pose_ekf does not provide such good localisation when Im using real odometry and IMU ?
Comment by dornhege on 2013-03-12:
Because robot_pose_ekf does NOT do localization. There is no feedback. It does sensor fusion.
Comment by Astronaut on 2013-03-12:
ok.. So which approach is most appropriately one? If I use the hector_localization can I achieve better localization?? I tried this but there is no documentation and I got some errors regarding Ignoring poseupdate for twist as the a-priori state covariance is zero!. So dont know how to get work that

