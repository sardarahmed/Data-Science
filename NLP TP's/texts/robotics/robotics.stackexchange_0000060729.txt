Q:

Input to robot_pose_ekf from IMU and Encoder frames IDs?

Hi,
I'm running the robot_pose_ekf node subscribing to the /imu and /encoder. What should be the frame ID's of the msgs on those topics?
Currently, my /encoder has frame_id: odom_combined and child_frame_id: base_footprint while my /imu has frame_id: base_link. My tf tree is odom->base_footprint->base_link
Will that ^ be a problem considering that my /encoder msg has a frame_id which is not even on my tree (not being broadcast). The node doesn't throw any errors so I am wondering if robot_pose_ekf actually uses the frame_id?
Thank you very much

Originally posted by 2ROS0 on ROS Answers with karma: 1133 on 2014-07-09
Post score: 0

A:

Edited response after the original question changed:
Given that you said that everything is working, you may be fine, but personally, I would want the frame_id of my input odometry data (in your case, the /encoder messages) to be identical to the frame that is being broadcast by robot_pose_ekf (i.e., the frame_id of its output odometry messages). I'm guessing robot_pose_ekf transforms all measurement data into the target frame before integrating them, and I'm presuming you don't have any transforms defined from odom_combined->odom, so it's probably a good idea to make sure the frames match. Just make sure that whatever is producing /encoder is not also publishing a transform from its frame_id to its child_frame_id.
Then again, if those frames didn't match, and you didn't have a transform from odom_combined->odom defined, and robot_pose_ekf was, in fact, transforming input messages into the target frame_id, then I don't see how it could all be working.

Originally posted by Tom Moore with karma: 13689 on 2014-07-15
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by 2ROS0 on 2014-07-15:
Thank you for your answer. I meant that the frame_id of the /encoder "odom_combined" is not on my tree and not the child_frame_id. I only have "odom" in the tree. I have made the edit in the question. Thanks.
Comment by 2ROS0 on 2014-07-15:
My guess was that robot_pose_ekf doesn't really look at the frame and assumes they are in a certain frame. In any case, I changed the frame_id and child_frame_id of the /encoder msg to be odom and base_footprint respectively. And I changed the /imu frame_id to be base_footprint.
Comment by 2ROS0 on 2014-07-15:
Should this be fine? Or does /imu have to be in odom? I am asking because although the output seems to be alright, I don't want it to have a problem later on.
Thank you for your responses :)
Comment by Tom Moore on 2014-07-15:
You can make the frame_id of the IMU base_footprint, but that assumes it has no rotational or translational offset from the base_footprint frame. The IMU typically has its own frame that is a child of base_link or base_footprint. I'd use static_transform_publisher to define that transform.
Comment by 2ROS0 on 2014-07-15:
I would have thought so too. But the robot I am working with (Clearpath Husky) publishes the IMU info in the base_footprint frame. So I don't think they have a frame defined for the IMU in the default start-up.
Comment by 2ROS0 on 2014-07-15:
Also, I am assuming that since the IMU is mounted fairly securely to the robot, there will be no rotational or translational offset from the base_footprint.
Comment by Tom Moore on 2014-07-16:
It's not really a question of the security of the mount. If you had a robot (and I realize you don't) whose IMU was mounted, say, upside-down, you'd have to define a transform from base_link to imu with pi radians of roll. If the Husky reports the IMU in base_footprint, you're fine.
Comment by Tom Moore on 2014-07-16:
@pmukherj, can you verify?
Comment by 2ROS0 on 2014-07-16:
I did a little more searching. As far as I understand, the IMU is mounted at a different orientation. But Clearpath has a dead_reckoning node which takes in the raw IMU data and converts it into the orientation of the base_link and publishes that at startup.

