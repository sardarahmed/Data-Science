Q:

Use ros2-FastRTPS with standalone FastRTPS programs

Hi,
is it possible to create some publisher in ros2 with Fast-RTPS as middleware and on the other side receive published topics on the standalone (non ros2) FastRTPS programs?
I've even created an .idl file with simple string message (compiles with colcon and copied to eProsima project directory. Next I've created header with fastrtpsgen tool). But the topics don't see each other...
Knows somewhere the right rules/setting for my goal?
Many thanks!

Originally posted by murokill on ROS Answers with karma: 21 on 2019-03-27
Post score: 2

Original comments
Comment by tfoote on 2019-03-27:
Duplicate: https://github.com/ros2/rmw_fastrtps/issues/269
Please don't ask multiple versions of questions that's poor etiquette as it potentially causes multiple people to try to help you. Also your other question has much more helpful details that might be able to help someone answer your question here. Please see our support guidelines: https://wiki.ros.org/Support
Since this is a question this is the right place so I'll close the other one. Please edit your question here to add more details. The easier it is for someone to reproduce your problem the easier it is for them to help you.
Comment by slmat27 on 2019-04-03:
@murokill were you able to reach a solution for the issue or is it still pending?

A:

@murokill, I've been fighting the same battle. I was just able to get the ROS2 examples_rclcpp_minimal_publisher and examples_rclcpp_minimal_subscriber working with a variant of the eProsima Fast-RTPS code generated by pretty much following the steps on the eProsima Fast-RTPS Getting Started page. I pulled the String.idl IDL file from my ROS2 installation in place of the sample IDL snippet shown in the webpage. On my system, it was at /opt/ros/crystal/share/std_msgs/msg. I'm running Ubuntu 18.04.2 LTS. There were two things I had to do to get it to work beyond the basic stuff you find fairly easily in tutorials. I used WireShark to dig into the RTPS UDP and Multicast packets to help clue me in on these updates.
1. In eProsima's code generated from your String.idl file, you'll need to prefix your topic in StringPublisher::init() and StringSubscriber::init() with rt. This tells eProsima Fast-RTPS that you are trying to talk with ROS2 nodes. I found this tidbit here in ROS2 documentation. For example, my topic was /hailstate for the ROS2 publisher/subscriber and I wanted it to be the same on the eProsima publisher/subscriber, but it wasn't showing up that way. Once I prefixed my topic with rt, the topic names matched. Code below is the updated code that was generated using fastrtpsgen -example CMake String.idl in generated file StringPublisher.cxx. The same change on the last line would need to be made in the StringSubscriber.cxx:
 bool StringPublisher::init() {
     ParticipantAttributes PParam;
     PParam.rtps.builtin.domainId = 0;
     PParam.rtps.builtin.leaseDuration = c_TimeInfinite;
     PParam.rtps.setName("epro_publisher");
     mp_participant = Domain::createParticipant(PParam);
     if(mp_participant == nullptr)
     {
         return false;
     }
 
     Domain::registerType(mp_participant,
     static_cast<TopicDataType*>(&myType));
 
     // Create Publisher
 
     PublisherAttributes Wparam;
     Wparam.topic.topicKind = NO_KEY;
     Wparam.topic.topicDataType = myType.getName();
     Wparam.topic.topicName = "rt/hailstate";

2. My next problem was that my types didn't match. When running four nodes (ROS2 examples_rclcpp_minimal_publisher, ROS2 examples_rclcpp_minimal_subscriber, eProsima subscriber, and eProsima publisher), the ros2 topic list -t command would show my topic with two different types. One type for the eProsima topic std_msgs::msg::String and a different type for the ROS2 topic std_msgs/String even though I used the ROS String.idl file to create the eProsima logic. Because of this type mismatch, the topics were still technically different. I changed the topic in the constructor, StringPubSubType::StringPubSybType(), in the fastrtpsgen generated file, StringPubSubTypes.cxx, with the line setName("std_msgs::msg::dds_::String_"); line shown in the code snippet below. I just changed the type from the default specified by eProsima to what it shows now. After this, all four nodes started communicating with each other. The key is inserting the dds_:: and adding the _ at the end of the String base type.

namespace std_msgs {
    namespace msg  {
        StringPubSubType::StringPubSubType() 
        {
            setName("std_msgs::msg::dds_::String_");

If there is a way to do this without feeling like I had to hack it, I'd be very interested to know what it is. I've started digging a little deeper into ROS2 msg and srv files to see if there is a better way to generate code that will work for ROS2 and eProsima without having to manually update files.

Originally posted by WeekendWar with karma: 56 on 2019-05-14
This answer was ACCEPTED on the original site
Post score: 4

Original comments
Comment by Alyasko on 2019-05-16:
@WeekendWar hi!
I am facing the same problem with mismatching types (FastRTPS publisher type and ROS2 subscriber type). Would you please provide more details about how to create the same types for FastRTPS standalone app and ROS2 node?
For example if I want to send ROS2 std_msgs/String type, what should I put to FastRTPS IDL file?
If possible, provide code examples please.
Help would be much appreciated. Thank you.
Comment by WeekendWar on 2019-05-16:
@Alyasko, I updated my answer with some formatting to help highlight the answers. I also added a few code snippets. These will make sense if you've generated your code using the fastrtpsgen tool from eProsima using the -example option. If not, then I recommend you go through the Getting Started mentioned in my posting above. Hope it helps.
Comment by Bearnd on 2019-05-28:
This post was very good and helped me to solve this my communication problem as well - thank you so much! Is there any way to adapt the way fastrtpsgen is generating the type name convention, e.g. changing the way ROS2 generates the IDL file?
Comment by david.hodo on 2019-06-08:
There's an example project that demonstrates talking between native FastRTPS and ROS2 here if it's useful to anyone.

