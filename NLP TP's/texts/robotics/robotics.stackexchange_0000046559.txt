Q:

In what way(s) has wxWidgets failed to maintain good cross-platform compatibility?

Hi!
On the DevelopersGuide page (http://www.ros.org/wiki/DevelopersGuide) it says the following.
"We are targeting all new GUI development at Qt. Much of the existing code is instead built using wxWidgets, but we are migrating to Qt as wxWidgets has not maintained good cross-platform compatibility."
I'm wondering in what way(s) wxWidgets has failed to maintain good cross-platform compatibility. To be clear, I've never used it myself.  It's just that everything I read claims that wxWidgets is extremely portable.  Does anyone have any examples or references?
Thanks,
Kevin

Originally posted by leblanc_kevin on ROS Answers with karma: 357 on 2012-12-13
Post score: 5

A:

ROS has been using wxWidgets for a lot of tools in the past. In 2011 the design of an integrated user interface (http://ros.org/wiki/rqt) was started and several existing GUI toolkits have been considered.
Based on the experience with various tools and the available features, licenses etc. the decision has been made to use Qt for that project. The reasons behind that are:

it supports all platforms well: Linux, Max, Windows (potentially even mobile devices)
works well with cross-language programming: mixing Python and C++ in a single application
very rich feature set: Model/View framework, cross platform libraries, signals and slots
high-level widgets: Graphics View framework, X11 embed, i.e. Qwt
easy to use: QtDesigner, QtLinguist
large and active community, extensive documentation

The experience of several developers was that Qt was (much) easier to work with than wxWidgets (may be since it is less similar to MFC? may be due to signals and slots?). Based on the success of this project further tools will be converted to Qt for easier maintenance.
As mentioned by Jack before: this is just the decision for the GUIs we develop in our group. Any user can freely choose based on personal preference and what is most efficient for him.
Anyway the advantage of using a single toolkit across several tools should not be neglected: you can share code (and even UI fragments) between different tools and build integrated tools more easily and the developer team gains deeper knowledge by focusing on one technology.

Originally posted by Dirk Thomas with karma: 16276 on 2012-12-18
This answer was ACCEPTED on the original site
Post score: 7

