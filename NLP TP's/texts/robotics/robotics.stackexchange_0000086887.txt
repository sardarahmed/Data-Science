Q:

Should I put all header files inside the include dir?

I've been trying to find the answer to this question using the search function, but only came accross questions about missing header files etc.
Background: in the past 10 years of coding C/C++ I've learned that it's important to think about the (external) interface of the code I write. It's generally a good idea to keep it small and simple, hiding implementation details as much as I can. As a result, typically a software package/library that I would develop would have an include directory that only contains the header files that I want to expose to the users of that package/library, while the rest of the headers that are only intended for internal use are located in the src directory.
Now I'm getting started with ROS and I see quite a few packages that seem to put .h files in include and .cpp files in src. Is there are specific reason to do this?

Originally posted by Mbuijs on ROS Answers with karma: 247 on 2018-05-09
Post score: 0

A:

This will be an opiniated answer, but just to provide you with my own insight / experience:

Now I'm getting started with ROS and I see quite a few packages that seem to put .h files in include and .cpp files in src. Is there are specific reason to do this?

include directories are only exported (ie: added to the public interface of a ROS package) if that directory is explicitly passed to the catkin_package(.. INCLUDE_DIRS ..) call as an argument. Packages which have no headers that should be part of the public interface should not do this. Packages which just provide 'top level' nodes, but no libraries are examples of pkgs that should probably not have their include directory exposed by catkin_package(..).
So if we accept that, any header in $pkg_dir/include (or any other folder with headers that is passed to catkin_package(..)) always defines the public interface of a package. And inverting this: $pkg_dir/include should only contain headers that are intended to be part of that same public interface (again: assuming that $pkg_dir/include is actually passed to catkin_package(..)).
Now as to whether this 'best practice' is adopted by the ROS community as a whole I cannot say. It is however how I've structured my packages, and it works well for me.
I believe this would align with what you already wrote yourself: only add public headers to a publicly-visible include folder, and keep the rest private. So I would recommend you to keep doing what you already have been doing, and consider the $pkg_dir/include directory as the default location for the public interface of any/your package(s).

Originally posted by gvdhoorn with karma: 86574 on 2018-05-09
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by gvdhoorn on 2018-05-09:
Note that there are other techniques to hide implementation details (that you're probably familiar with). Following a specific file/directory layout/structure is a rather coarse, but effective, first step.
Comment by Mbuijs on 2018-05-09:
Thanks for the extensive explanation.
The first packages I was setting up were 'top level' nodes, so I did not pass include to catkin_package(..). In practice I didn't have any public header files and therefore didn't even create the include dir, instead just put everything in src.

