Q:

Which constructor of tf2_ros::TransformListener should I use?

There are two constructors of tf2_ros::TransformListener:

TransformListener(tf2::BufferCore& buffer, const ros::NodeHandle& nh, bool spin_thread)

TransformListener(tf2::BufferCore& buffer, bool spin_thread)

It seems that nh parameter in the first one is ignored, so they are equivalent. Is it accurate?

Originally posted by pauljurczak on ROS Answers with karma: 85 on 2020-03-19
Post score: 0

A:

If you pass in the NodeHandle it will use that nodehandle passed. If you don't pass one it will default construct a NodeHandle to be used.
For most common use cases where the user has a default constructed NodeHandle, it will not make a difference. However by passing in the NodeHandle you have more control of things like the Callback Queue and other NodeHandle level settings that can be modified on the passed in NodeHandle.

Originally posted by tfoote with karma: 58457 on 2020-03-19
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by stevemacenski on 2020-03-19:
Just from glancing at it -- the nodehandle is only used to create subscribers. If the /tf is globally namespaced, what other nodehandle parameterizations would effect the listener? I genuinely don't see where it could be used unless the / in the topic was removed.
Comment by tfoote on 2020-03-19:
As I mentioned above the first thing that comes to mind is being able to control the threading via the use of custom callback queues. For example if you set it up right you can run the whole system in a single thread or at the other end enable a multi threaded callback queue.

