Q:

Problem Using Class function as callback

I'm trying to encapsulate nodes to support dynamic node creation.  When I try to register a callback from inside a class using one of that classes functions I get a compile error. The following code works correctly if I do static callback().
class node {
    private:
        ros::NodeHandle *n;
    public:
        node(int argc, char **argv, std::string s) {
            n = NULL;
            ros::init(argc, argv, s);
        }

        bool node::create() {
        if (n == NULL) {
        n = new ros::NodeHandle();
        return true;
        }

        return false;
        }

    ros::NodeHandle getHandle() {return *n;}
};

class coordinator
{
    private:
        node myNode;
        ros::Subscriber sub;

    public:
        void setup() {
            //assume myNode() has been called correctly
            myNode.create();
            //this does not compile
            sub = myNode.getHandle().subscribe("telemetry", 1000, &coordinator::callback);
        }
        void callback(const TelemetryUpdate::ConstPtr& msg) {;/** stuff */}
};

Originally posted by kaoao on ROS Answers with karma: 17 on 2013-06-06
Post score: 1

A:

If you review the ROS Cpp Publisher and Subscriber Overview, you will find that you need to also pass a reference to the instance of the object.
In this case, you would probably want to do:
sub = myNode.getHandle().subscribe("telemetry", 1000, &coordinator::callback, this);

Originally posted by mjcarroll with karma: 6414 on 2013-06-06
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by kaoao on 2013-06-06:
Thanks, I forgot about the this keyword.

