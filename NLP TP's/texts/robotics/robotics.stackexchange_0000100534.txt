Q:

Timeout and tf Error Before Running Costmap

Hello,
I am trying to launch a navigation stack on multiple robots, so they can navigate autonomously in gazebo.
I have cloned the following turtlebot3 githubs to access models, descriptions, costmaps, and how to set up the launch files.
https://github.com/ROBOTIS-GIT/turtlebot3/tree/melodic-devel
https://github.com/ROBOTIS-GIT/turtlebot3_simulations/tree/melodic-devel
https://github.com/ROBOTIS-GIT/turtlebot3_msgs/tree/melodic-devel

My problem is that when I add namespaces for the robots, the following error occurs.
Timed out waiting for transform from base_footprint to map to become available before running costmap, tf error: canTransform: source_frame base_footprint does not exist.

I have placed everything in a single launch file to make it easier to troubleshoot:
<launch>
<!-- Model and namespace-->
  <arg name="model"       default="burger"/>  <!-- Model, change for process/products -->
  <arg name="robot"       default="bot"/>     <!-- Name space, change for each robot  -->

<!-- Visualization and map location -->
  <arg name="map_file"    default="$(find gazebo_worlds)/maps/factory_map.yaml"/>
  <arg name="open_rviz"   default="true"/>
  <arg name="open_gazebo" default="true"/>

<!-- Positions -->
  <arg name="x_pos" default=" 0.0"/>
  <arg name="y_pos" default=" 0.0"/>
  <arg name="z_pos" default=" 0.0"/>
  <arg name="yaw"   default=" 1.57"/>

<!-- Robot group -->
  <group ns = "$(arg robot)">
    <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_$(arg model).urdf.xacro" />

    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
      <param name="publish_frequency" type="double" value="50.0" />
      <param name="tf_prefix" value="$(arg robot)" />
    </node>
    
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model $(arg robot) -x $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos) -Y $(arg yaw) -param robot_description" />
  </group>

<!-- Map server -->
  <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)" >
    <param name="frame_id" value="map"/>
  </node>

<!-- Tf transformer -->
  <node pkg="tf" type="static_transform_publisher" name="world_to_$(arg robot)_tf_broadcaster"  args="0 0 0 0 0 0 /map /$(arg robot)/map 100"/>

<!-- AMCL -->
  <node pkg="amcl" type="amcl" name="$(arg robot)_amcl">

    <param name="min_particles"             value="500"/>
    <param name="max_particles"             value="3000"/>
    <param name="kld_err"                   value="0.02"/>
    <param name="update_min_d"              value="0.20"/>
    <param name="update_min_a"              value="0.20"/>
    <param name="resample_interval"         value="1"/>
    <param name="transform_tolerance"       value="0.5"/>
    <param name="recovery_alpha_slow"       value="0.00"/>
    <param name="recovery_alpha_fast"       value="0.00"/>
    <param name="initial_pose_x"            value="$(arg x_pos)"/>
    <param name="initial_pose_y"            value="$(arg y_pos)"/>
    <param name="initial_pose_a"            value="$(arg yaw)"/>
    <param name="gui_publish_rate"          value="50.0"/>

    <remap from="scan"                      to="$(arg robot)/scan"/>
    <param name="laser_max_range"           value="3.5"/>
    <param name="laser_max_beams"           value="180"/>
    <param name="laser_z_hit"               value="0.5"/>
    <param name="laser_z_short"             value="0.05"/>
    <param name="laser_z_max"               value="0.05"/>
    <param name="laser_z_rand"              value="0.5"/>
    <param name="laser_sigma_hit"           value="0.2"/>
    <param name="laser_lambda_short"        value="0.1"/>
    <param name="laser_likelihood_max_dist" value="2.0"/>
    <param name="laser_model_type"          value="likelihood_field"/>

    <param name="odom_model_type"           value="diff"/>
    <param name="odom_alpha1"               value="0.1"/>
    <param name="odom_alpha2"               value="0.1"/>
    <param name="odom_alpha3"               value="0.1"/>
    <param name="odom_alpha4"               value="0.1"/>
    <param name="odom_frame_id"             value="$(arg robot)/odom"/>
    <param name="base_frame_id"             value="$(arg robot)/base_footprint"/>

  </node>

<!-- Move_base -->
  <node pkg="move_base" type="move_base" respawn="false" name="$(arg robot)_move_base" output="screen">
    <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
    <rosparam file="$(find turtlebot3_navigation)/param/costmap_common_params_$(arg model).yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find turtlebot3_navigation)/param/costmap_common_params_$(arg model).yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find turtlebot3_navigation)/param/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find turtlebot3_navigation)/param/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find turtlebot3_navigation)/param/move_base_params.yaml" command="load" />
    <rosparam file="$(find turtlebot3_navigation)/param/dwa_local_planner_params_$(arg model).yaml" command="load" />
    <remap from="cmd_vel" to="$(arg robot)/cmd_vel"/>
    <remap from="odom" to="$(arg robot)/odom"/>
  </node>

<!-- Rviz -->
  <group if="$(arg open_rviz)"> 
    <node pkg="rviz" type="rviz" name="rviz" output="screen"/>
          <!-- args="-d $(find pkg)/dir/file.rviz" -->
  </group>

<!-- Gazebo -->
  <group if="$(arg open_gazebo)"> 
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="world_name" value="$(find gazebo_worlds)/worlds/factory_floor.sdf"/>
    </include> 
  </group>

</launch>

I have looked at a lot of answers and docs, but nothing seems to relate to this. In Rviz, I have a fixed frame map, which is good, and the laser topic works.
Looking at the tf tree using
rosrun tf view_frames

I get the following:
https://imgur.com/a/EINXb74
As it can be seen, the map connects to both bot/odom and bot/map
I think maybe it will work if the connection goes from map -> bot/map -> bot/odom -> ...
but I do not know how to achieve this.
Using the launch files included in the turtlebot3 repositories, such as
roslaunch turtlebot3_gazebo turtlebot3_house.launch

and
roslaunch turtlebot3_navigation turtlebot3_navigation.launch

it works flawlessly, with a tf tree that transforms map -> odom -> ... in a straight line.
Any help would be appreciated.

Originally posted by WarTurtle on ROS Answers with karma: 170 on 2021-11-12
Post score: 0

A:

I made it work by doing this.
First, a launch file to create the basics functionalities of each robot.
<launch>
  <!-- Variable Arguments -->
  <arg name="model"/> <!-- waffle_pi, waffle, burger-->
  <arg name="namespace"/>
  <arg name="initial_pose_x"/>
  <arg name="initial_pose_y"/>
  <arg name="initial_pose_a"     default="0.0"/>       <!-- yaw -->

  <!-- Static Arguments -->
  <arg name="move_forward_only" default="false"/>
  <arg name="use_map_topic"     default="false"/>
  <arg name="scan_topic"        default="$(arg namespace)/scan"/>
  <arg name="odom_frame_id"     default="$(arg namespace)/odom"/>
  <arg name="base_frame_id"     default="$(arg namespace)/base_footprint"/>
  <arg name="cmd_vel_topic"     default="$(arg namespace)/cmd_vel" />
  <arg name="odom_topic"        default="$(arg namespace)/odom" />
  <arg name="init_pose"         default="-x $(arg initial_pose_x) -y $(arg initial_pose_y) -z 0.0"/>
  <arg name="global_frame_id"   default="map"/>

  <!-- Create robots -->
  <param name="robot_description"
    command="$(find xacro)/xacro.py $(find deploy)/param/models/$(arg model).urdf.xacro" />

  <group ns="$(arg namespace)">
    <param name="tf_prefix"  value="$(arg namespace)"/>
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model"
        args="$(arg init_pose) -urdf -param /robot_description -model $(arg namespace)"
        respawn="false" output="screen"/>

    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
      <param name="publish_frequency" type="double" value="50.0" />
    </node>
  </group>

  <!-- AMCL -->
  <node pkg="amcl" type="amcl" name="$(arg namespace)_amcl">
    <param name="use_map_topic"             value="$(arg use_map_topic)"/>

    <param name="min_particles"             value="500"/>
    <param name="max_particles"             value="3000"/>
    <param name="kld_err"                   value="0.02"/>
    <param name="update_min_d"              value="0.20"/>
    <param name="update_min_a"              value="0.20"/>
    <param name="resample_interval"         value="1"/>
    <param name="transform_tolerance"       value="0.5"/>
    <param name="recovery_alpha_slow"       value="0.00"/>
    <param name="recovery_alpha_fast"       value="0.00"/>
    <param name="initial_pose_x"            value="$(arg initial_pose_x)"/>
    <param name="initial_pose_y"            value="$(arg initial_pose_y)"/>
    <param name="initial_pose_a"            value="$(arg initial_pose_a)"/>
    <param name="gui_publish_rate"          value="50.0"/>

    <remap from="scan"                      to="$(arg scan_topic)"/>
    <param name="laser_max_range"           value="3.5"/>
    <param name="laser_max_beams"           value="180"/>
    <param name="laser_z_hit"               value="0.5"/>
    <param name="laser_z_short"             value="0.05"/>
    <param name="laser_z_max"               value="0.05"/>
    <param name="laser_z_rand"              value="0.5"/>
    <param name="laser_sigma_hit"           value="0.2"/>
    <param name="laser_lambda_short"        value="0.1"/>
    <param name="laser_likelihood_max_dist" value="2.0"/>
    <param name="laser_model_type"          value="likelihood_field"/>

    <param name="odom_model_type"           value="diff"/>
    <param name="odom_alpha1"               value="0.1"/>
    <param name="odom_alpha2"               value="0.1"/>
    <param name="odom_alpha3"               value="0.1"/>
    <param name="odom_alpha4"               value="0.1"/>
    
    <param name="odom_frame_id"             value="$(arg odom_frame_id)"/>
    <param name="base_frame_id"             value="$(arg base_frame_id)"/>
    <param name="global_frame_id"           value="$(arg global_frame_id)"/>

    <remap from="initialpose"               to="$(arg namespace)/initialpose"/>
    <remap from="amcl_pose"                 to="$(arg namespace)/amcl_pose"/>
    <remap from="particlecloud"             to="$(arg namespace)/particlecloud"/>
  </node>

  <!-- move_base -->
  <node pkg="move_base" type="move_base" respawn="false" name="$(arg namespace)_move_base" output="screen">
    <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
    <param name="DWAPlannerROS/min_vel_x" value="0.0" if="$(arg move_forward_only)" />
    
    <rosparam file="$(find deploy)/param/costmap_common_params_$(arg model).yaml"    command="load" ns="global_costmap" />
    <rosparam file="$(find deploy)/param/costmap_common_params_$(arg model).yaml"    command="load" ns="local_costmap" />
    <rosparam file="$(find deploy)/param/local_costmap_params.yaml"                  command="load" />
    <rosparam file="$(find deploy)/param/global_costmap_params.yaml"                 command="load" />
    <rosparam file="$(find deploy)/param/move_base_params.yaml"                      command="load" />
    <rosparam file="$(find deploy)/param/dwa_local_planner_params_$(arg model).yaml" command="load" />
    <rosparam file="$(find deploy)/param/global_planner_params.yaml"                 command="load" />
    <rosparam file="$(find deploy)/param/navfn_global_planner_params.yaml"           command="load" />

    <!-- reset frame_id parameters using user input data -->
    <param name="global_costmap/global_frame"     value="$(arg global_frame_id)"/>
    <param name="global_costmap/robot_base_frame" value="$(arg base_frame_id)"/>
    <param name="local_costmap/global_frame"      value="$(arg odom_frame_id)"/>
    <param name="local_costmap/robot_base_frame"  value="$(arg base_frame_id)"/>
    <param name="DWAPlannerROS/global_frame_id"   value="$(arg odom_frame_id)"/>

    <remap from="cmd_vel"                                                            to="$(arg cmd_vel_topic)"/>
    <remap from="odom"                                                               to="$(arg odom_topic)"/>
    <remap from="scan"                                                               to="$(arg scan_topic)"/>
    <remap from="map"                                                                to="map" />
    <remap from="move_base_simple/goal"                                              to="$(arg namespace)/move_base_simple/goal" />
    <remap from="move_base/DWAPlannerROS/cost_cloud"                                 to="$(arg namespace)/move_base/DWAPlannerROS/cost_cloud" />
    <remap from="move_base/DWAPlannerROS/global_plan"                                to="$(arg namespace)/move_base/DWAPlannerROS/global_plan" />
    <remap from="move_base/DWAPlannerROS/local_plan"                                 to="$(arg namespace)/move_base/DWAPlannerROS/local_plan" />
    <remap from="move_base/DWAPlannerROS/parameter_descriptions"                     to="$(arg namespace)/move_base/DWAPlannerROS/parameter_descriptions" />
    <remap from="move_base/DWAPlannerROS/parameter_updates"                          to="$(arg namespace)/move_base/DWAPlannerROS/parameter_updates" />
    <remap from="move_base/DWAPlannerROS/trajectory_cloud"                           to="$(arg namespace)/move_base/DWAPlannerROS/trajectory_cloud" />
    <remap from="move_base/NavfnROS/plan"                                            to="$(arg namespace)/move_base/NavfnROS/plan" />
    <remap from="move_base/cancel"                                                   to="$(arg namespace)/move_base/cancel" />
    <remap from="move_base/current_goal"                                             to="$(arg namespace)/move_base/current_goal" />
    <remap from="move_base/feedback"                                                 to="$(arg namespace)/move_base/feedback" />
    <remap from="move_base/global_costmap/costmap"                                   to="$(arg namespace)/move_base/global_costmap/costmap" />
    <remap from="move_base/global_costmap/costmap_updates"                           to="$(arg namespace)/move_base/global_costmap/costmap_updates" />
    <remap from="move_base/global_costmap/footprint"                                 to="$(arg namespace)/move_base/global_costmap/footprint" />
    <remap from="move_base/global_costmap/inflation_layer/parameter_descriptions"    to="$(arg namespace)/move_base/global_costmap/inflation_layer/parameter_descriptions" />
    <remap from="move_base/global_costmap/inflation_layer/parameter_updates"         to="$(arg namespace)/move_base/global_costmap/inflation_layer/parameter_updates" />
    <remap from="move_base/global_costmap/obstacle_layer/parameter_descriptions"     to="$(arg namespace)/move_base/global_costmap/obstacle_layer/parameter_descriptions" />
    <remap from="move_base/global_costmap/obstacle_layer/parameter_updates"          to="$(arg namespace)/move_base/global_costmap/obstacle_layer/parameter_updates" />
    <remap from="move_base/global_costmap/parameter_descriptions"                    to="$(arg namespace)/move_base/global_costmap/parameter_descriptions" />
    <remap from="move_base/global_costmap/parameter_updates"                         to="$(arg namespace)/move_base/global_costmap/parameter_updates" />
    <remap from="move_base/global_costmap/static_layer/parameter_descriptions"       to="$(arg namespace)/move_base/global_costmap/static_layer/parameter_descriptions" />
    <remap from="move_base/global_costmap/static_layer/parameter_updates"            to="$(arg namespace)/move_base/global_costmap/static_layer/parameter_updates" />
    <remap from="move_base/goal"                                                     to="$(arg namespace)/move_base/goal" />
    <remap from="move_base/local_costmap/costmap"                                    to="$(arg namespace)/move_base/local_costmap/costmap" />
    <remap from="move_base/local_costmap/costmap_updates"                            to="$(arg namespace)/move_base/local_costmap/costmap_updates" />
    <remap from="move_base/local_costmap/footprint"                                  to="$(arg namespace)/move_base/local_costmap/footprint" />
    <remap from="move_base/local_costmap/inflation_layer/parameter_descriptions"     to="$(arg namespace)/move_base/local_costmap/inflation_layer/parameter_descriptions" />
    <remap from="move_base/local_costmap/inflation_layer/parameter_updates"          to="$(arg namespace)/move_base/local_costmap/inflation_layer/parameter_updates" />
    <remap from="move_base/local_costmap/obstacle_layer/parameter_descriptions"      to="$(arg namespace)/move_base/local_costmap/obstacle_layer/parameter_descriptions" />
    <remap from="move_base/local_costmap/obstacle_layer/parameter_updates"           to="$(arg namespace)/move_base/local_costmap/obstacle_layer/parameter_updates" />
    <remap from="move_base/local_costmap/parameter_descriptions"                     to="$(arg namespace)/move_base/local_costmap/parameter_descriptions" />
    <remap from="move_base/local_costmap/parameter_updates"                          to="$(arg namespace)/move_base/local_costmap/parameter_updates" />
    <remap from="move_base/parameter_descriptions"                                   to="$(arg namespace)/move_base/parameter_descriptions" />
    <remap from="move_base/parameter_updates"                                        to="$(arg namespace)/move_base/parameter_updates" />
    <remap from="move_base/recovery_status"                                          to="$(arg namespace)/move_base/recovery_status" />
    <remap from="move_base/result"                                                   to="$(arg namespace)/move_base/result" />
    <remap from="move_base/status"                                                   to="$(arg namespace)/move_base/status" />
  </node>

</launch>

Then I made another launch file to simulate n robots
<launch>
  <param name="/use_sim_time" value="true" />

  <include file="$(find deploy)/launch/make_robot.launch" >
    <arg name="model"          value="burger"/>
    <arg name="namespace"      value="Bot1" />
    <arg name="initial_pose_x" value="0.0"/>
    <arg name="initial_pose_y" value="0.0"/>
  </include>

  <include file="$(find deploy)/launch/make_robot.launch" >
    <arg name="model"          value="waffle"/>
    <arg name="namespace"      value="Bot2" />
    <arg name="initial_pose_x" value="1.0"/>
    <arg name="initial_pose_y" value="0.0"/>
  </include>

  <include file="$(find deploy)/launch/make_robot.launch" >
    <arg name="model"          value="waffle_pi"/>
    <arg name="namespace"      value="Bot3" />
    <arg name="initial_pose_x" value="2.0"/>
    <arg name="initial_pose_y" value="0.0"/>
  </include>

<!-- Visualization and map location -->
  <arg name="map_file"    default="$(find deploy)/maps/factory_map.yaml"/>
  <arg name="open_rviz"   default="true"/>
  <arg name="open_gazebo" default="true"/>

<!-- Map server -->
  <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)" >
    <param name="frame_id" value="map"/>
  </node>

<!-- Rviz -->
  <group if="$(arg open_rviz)"> 
    <node pkg="rviz" type="rviz" name="rviz" output="screen" args="-d $(find deploy)/rviz/basic_config.rviz"/>
  </group>

<!-- Gazebo -->
  <group if="$(arg open_gazebo)"> 
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="world_name" value="$(find deploy)/worlds/factory_floor.sdf"/>
    </include> 
  </group>

</launch>

Originally posted by WarTurtle with karma: 170 on 2021-11-15
This answer was ACCEPTED on the original site
Post score: 0

