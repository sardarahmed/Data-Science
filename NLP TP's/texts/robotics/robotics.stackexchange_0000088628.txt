Q:

mono16 image is wrongly formed when using compressed image_transport

I am dealing with a 16-bit mono image, publishing it using image_transport. I have no issues with the raw data topic, I can view it directly, bag it, replay it, and view again. If I run rostopic echo /cam/image | grep step I get 1280 as the result.
When I'm using image_view _image_transport:=compressed, I get an error message saying this:
Unable to convert 'mono16' image for display: : 'Image is wrongly formed: step < width * byte_depth * num_channels or 640 != 640 * 2 * 1

I'm using a vanilla image_transport publisher without changing any parameters. Am I missing something or is this a bug in the image_transport plugins?

Originally posted by autonomy on ROS Answers with karma: 435 on 2018-08-21
Post score: 0

A:

Compressed image transport only supports 8 bit image formats, so the 16 bit image you're using cannot be compressed by it. Is the image you're trying to compress a depth image? The compressed depth image transport package is designed specifically for this.
Hopefully this package will get this working for you.
EDIT : This may be OpenCV doing something a bit strange. It uses the OS codecs for image encoding/decoding so it's possible it behaves differently on different systems. You could make a simple node to receive the compressed image and debug the formatting and memory layout of the resulting cv::Mat object.

Originally posted by PeteBlackerThe3rd with karma: 9529 on 2018-08-21
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by autonomy on 2018-08-22:
Is that documented? I don't see it on the wiki. I am dealing with an actual 16-bit image in the wild, not depth. Compressed depth image transport seems like it might work, though I was able to solve my problem by switching to PNG
Comment by autonomy on 2018-08-22:

Comment by PeteBlackerThe3rd on 2018-08-22:
This was from a project a while ago. I've just had a look into the source code and the OpenCV documentation, and it looks as though it should support 16 bit images with PNG compression without any problems. It uses cv::imencode and cv::imdecode under the hood.

