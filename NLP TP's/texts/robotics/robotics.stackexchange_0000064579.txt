Q:

Why do I need to enter a loop to display a marker?

I followed the tutorial on publishing markers in Rviz, I am wondering why I need to enter a loop to publish a marker that has an infinite lifetime (ros::Duration)
I would expect the following code to display the marker but it does not:
#include <ros/ros.h>
#include <visualization_msgs/Marker.h>

int main(int argc, char **argv)
{
  ros::init(argc, argv, "ros_test");
  ros::NodeHandle node;
  ros::Rate r(1);

  // Test marker
  ros::Publisher marker_pub = node.advertise<visualization_msgs::Marker>("my_marker", 1);
  visualization_msgs::Marker marker;

  marker.header.frame_id = "/base_link";
  marker.header.stamp = ros::Time::now();
  marker.type = visualization_msgs::Marker::CUBE;
  marker.action = visualization_msgs::Marker::ADD;
  marker.lifetime = ros::Duration();
  // Pose
  marker.pose.position.x = 0.5;
  marker.pose.position.y = 0;
  marker.pose.position.z = 0;
  marker.pose.orientation.x = 0;
  marker.pose.orientation.y = 0;
  marker.pose.orientation.z = 0;
  marker.pose.orientation.w = 1;
  // Scale
  marker.scale.x = marker.scale.y = marker.scale.z = 0.1;
  // Color
  marker.color.r = marker.color.b = 0.2;
  marker.color.g = 0.6f;
  marker.color.a = 1.0;
  marker_pub.publish(marker);
  return 0;
}

Adding a loop enables to visualize the marker:
  while (ros::ok())
  {
    marker_pub.publish(marker);
  }

I don't want to loop; how to publish the marker once in Rviz?

Originally posted by VictorLamoine on ROS Answers with karma: 1505 on 2014-12-11
Post score: 1

A:

The problem is not that the marker is not published; the problem is that Rviz didn't have time to be started at the first marker publishing.
The solution is to give time to Rviz to start before publishing anything:
  // Color
  marker.color.r = marker.color.b = 0.2;
  marker.color.g = 0.6f;
  marker.color.a = 1.0;
  sleep(5); // TODO: Give time to Rviz to be fully started
  marker_pub.publish(marker);
  return 0;

As @dornhege mentioned this is not ideal. Another option is to use a latched publisher.

Originally posted by VictorLamoine with karma: 1505 on 2014-12-11
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by dornhege on 2014-12-11:
It's actually not startup time, but the time to create a connection between both nodes. Without the sleep you immediately quit before that's happened. The correct way is to wait for marker_pub.getNumSubscribers() > 0.
Comment by VictorLamoine on 2014-12-11:
That's right, I created a pull request to add the changes into the tutorial.
Comment by dornhege on 2015-01-29:
I don't think that a latched publisher will help at all. The problem is that you binary is gone before rviz is connected. Between you creating the publisher and the program quitting are only a couple of C++ calls. The latching happens in the node, not on the server, so the publish will be lost.

