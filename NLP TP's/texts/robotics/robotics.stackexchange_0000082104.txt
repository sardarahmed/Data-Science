Q:

Can navsat_transform be used to transform a pose from latlong to odom?

I'm using a gps to localize a mobile robot and ekf_localization_node together with a navsat_transform_node to transform the robot location into a local odom frame.
I would like to be able to send the robot gps-coordinates and use the functions from robot_localization to transform them into the odom frame. However, navsat_transform only publishes odom->utm and I don't think there are any latlong->utm conversion exposed to the user.
What I'm trying right now is to use the utm package in python to convert latlong coodrinates into utm and then using the utm->odom transform provided by navsat_transform_node to get the local coordinates:
utm_coords = utm.from_latlon(latlong[0], latlong[1])

# create PoseStamped message to set up for do_transform_pose 
utm_pose = PoseStamped()
utm_pose.header.frame_id = 'utm'
utm_pose.position.x = utm_coords[0]
utm_pose.position.y = utm_coords[1]

# get the utm->odom transform using tf2_ros
tfbuffer = tf2_ros.Buffer() 
tflistener = tf2_ros.TransformListener(tfbuffer)
T = tfbuffer.lookup_transform('odom', 'utm', rospy.Time())

# apply the transform
odom_pose = tf2_geometry_msgs.do_transform_pose(utm_pose, T)    

It seems to work, but I would prefer to use the conversions implemented in robot_localization if possible, for consistency.

Originally posted by linusnie on ROS Answers with karma: 98 on 2017-08-01
Post score: 0

Original comments
Comment by ufr3c_tjc on 2017-08-01:
There is a c++ header file in the robot_localization package that allows you to convert from lat/lon to utm. You can replace your python node to use this instead.
Comment by ufr3c_tjc on 2017-08-01:
Also just be aware, that different lat/lon -> utm conversion packages use very slightly different estimates, that can throw off measurements by a few meters. Make sure that you always use the exact same package/function to do your converting throughout your system.

A:

Are you saying that you'd like to be able to do this conversion in code, or are you saying you'd like to expose some kind of service? We can't just add a lat_long->utm transform to the transform tree, because the conversion from LL to UTM is much more complex than the standard rotation + translation that each link of the transform tree represents. If you just want to do it in code, @ufr3c_tjc is correct.

Originally posted by Tom Moore with karma: 13689 on 2017-10-03
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by linusnie on 2017-10-03:
It would for sure be nice if it was exposed to the user somehow (as a service node for example). In my case the utm package in python worked fine though. But since the code for converting is already implemented it would be helpful to have easy access to it without having to set up a c++ node
Comment by ufr3c_tjc on 2017-10-03:
A while ago I converted the code in the robot_localization header file to Python, in case that helps you. See here.
Comment by Tom Moore on 2017-10-11:
@linusnie care to open a ticket on the GitHub project page?

