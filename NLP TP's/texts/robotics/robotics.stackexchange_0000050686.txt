Q:

PointNormal to PointXYZ transfer problem

I want to transfer some PointNormal values to PointXYZ. I tried by following way, but it gave error. How can I do this?
int main(...) 
{ 
......... 
........ 
pcl::PointCloud<pcl::PointNormal> mls_points; 

// Init object (second point type is for the normals, even if unused) 
pcl::MovingLeastSquares<pcl::PointXYZ, pcl::PointNormal> mls; 
...................................... 
..................................... 
mls.process (mls_points); 
pcl::PointCloud<pcl::PointXYZ>::Ptr mls_cloud (new pcl::PointCloud<pcl::PointXYZ>); 

                  for (size_t i = 0; i < mls_points.points.size(); ++i) 
                  { 
                          mls_cloud->points[i].x=mls_points.points[i].x; //error 
                          mls_cloud->points[i].y=mls_points.points[i].y; //error 
                          mls_cloud->points[i].z=mls_points.points[i].z; //error 
                  } 
................................ 

}

Originally posted by Nihad on ROS Answers with karma: 22 on 2013-04-26
Post score: 0

Original comments
Comment by Wjwhynot on 2014-12-02:
Thanks ,xoxo

A:

You probably need to resize your target point cloud (mls_cloud).  The constructor creates the cloud object, but doesn't know how many points you want to store.  You can't just start assigning point data by index until you first allocate space to store them.
Try this:
pcl::PointCloud<pcl::PointXYZ>::Ptr mls_cloud (new pcl::PointCloud<pcl::PointXYZ>); 
mls_cloud->resize(mls_points.size());

for (size_t i = 0; i < mls_points.points.size(); ++i) 
{ 
    mls_cloud->points[i].x=mls_points.points[i].x; //error 
    mls_cloud->points[i].y=mls_points.points[i].y; //error 
    mls_cloud->points[i].z=mls_points.points[i].z; //error 
} 

Alternatively, you can dynamically build the cloud if you don't know ahead-of-time how many points it will contain:
pcl::PointCloud<pcl::PointXYZ>::Ptr mls_cloud (new pcl::PointCloud<pcl::PointXYZ>); 

for (size_t i = 0; i < mls_points.points.size(); ++i) 
{
    const pcl::PointNormal &mls_pt = mls_points.points[i];
    pcl::PointXYZ pt(mls_pt.x, mls_pt.y, mls_pt.z);
    mls_cloud.push_back(pt);
}

Or, even better, don't re-create the wheel, and use the built-in PCL copyPointCloud function to convert cloud types:
pcl::PointCloud<pcl::PointXYZ>::Ptr mls_cloud (new pcl::PointCloud<pcl::PointXYZ>);
copyPointCloud(cloud_xyz, cloud_xyzrgb);

Originally posted by Jeremy Zoss with karma: 4976 on 2013-04-27
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by Nihad on 2013-04-27:
Thnx. First one works fine.

