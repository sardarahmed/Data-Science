Q:

PointCloud library publishing

I have a pcl::PointCloud cloud and I need to publish it. It is NOT a kinect camera. Does anyone know how to do this? Is there some good sample code out there? I really need help here....
Thanks in advance,
-Hunter A.
int main(int argc, char **argv)
{
    ros::init(argc , argv , "laser_ReadOut");

    ros::NodeHandle handler;

    ros::Subscriber laserReader = handler.subscribe("scan", 10000, scanCallBack);
    ros::Publisher  laserOutput = handler.advertise<pcl::PointCloud<pcl::PointXYZ> >("/cloud_pcl", 100);

    laserOutput.publish(correctedCloud.makeShared());
    ros::spin();

    return 0;
}//end main.

correctedCloud is declared above. It is modified after the scan call back is called.

I am publishing the topic here (This is my research, so I'm afraid the whole code cannot be posted publicly)
    void makeOneCloud()
{
    PointCloud combined;
    //matchSlopes();

    for (unsigned int x = 0; x < scans.size(); ++x)
    {
        PointCloud currentCorrected = scans.at(x).getCorrections();
        for (unsigned int y = 0; y < currentCorrected.points.size(); ++y)
        {
            double py = currentCorrected.points.at(y).y;
            double px = currentCorrected.points.at(y).x;
            double pZ = Z;

            pcl::PointXYZ toPush;
            toPush.x = px; toPush.y = py; toPush.z = pZ;

            combined.points.push_back(toPush);
        }//end for y
    }//end for x.

    correctedCloud = combined;
    combined.height = 1;
    combined.width = combined.points.size();

    pcl::PCDWriter writer;
    writer.write<pcl::PointXYZ> ("FinalCorrections.pcd", combined, false);
    laserOutput.publish(combined.makeShared());
    ROS_INFO("Corrections Saved!");

    scans.clear();
}//this method combines all the corrected shapes to a single point cloud.

Originally posted by allenh1 on ROS Answers with karma: 3055 on 2012-05-31
Post score: 2

Original comments
Comment by Eric Perko on 2012-06-01:
Do you ever set the frame_id of the cloud? You'll need to set it to something in order for rviz to display it.
Comment by allenh1 on 2012-06-01:
Thank you! It works now!

A:

I use the following code for this...

Include the following:
#include <pcl_ros/point_cloud.h>

Set up your publisher:
typedef pcl::PointCloudpcl::PointXYZ PCLCloud;
ros::Publisher output_pub_ = node_.advertise (output_topic_name.c_str(), 100);

Publish your cloud:
pcl::PointCloudpcl::PointXYZ my_cloud;
output_pub_.publish(my_cloud.makeShared());

NOTE: When you attempt to publish the cloud, you must publish it as a pcl::PointCloudpcl::PointXYZ::Ptr (that's the purpose of the makeShared() function.

Originally posted by DimitriProsser with karma: 11163 on 2012-05-31
This answer was ACCEPTED on the original site
Post score: 6

Original comments
Comment by allenh1 on 2012-05-31:
Why can't I visualize this in RVIZ?
Comment by DimitriProsser on 2012-05-31:
It is visualized as the sensor_msgs/PointCloud2 datatype.
Comment by allenh1 on 2012-05-31:
Yes, but I'm not getting messages... I see the topic, but I don't get the data.
Comment by Eric Perko on 2012-05-31:
Could  you post a minimal example of your publisher? Is the publisher object long-lived or do you destruct it right after calling .publish?
Comment by allenh1 on 2012-05-31:
I added the code to my post. It isn't part of a class. That could be the reason it's troubled.
Comment by piyushk on 2012-05-31:
What are you exactly trying to do here? The way you have your publish call setup, it will be called once before scanCallback has a chance of getting called (through spin()). You might be publishing an empty cloud only once. Perhaps you want the publish call inside the scan callback function?
Comment by allenh1 on 2012-05-31:
Yes. Could you help me with that?
Comment by piyushk on 2012-05-31:
Take a look at this example: http://cs.utexas.edu/~piyushk/share/messenger.cpp This example extends the basic talker/listener roscpp tutorial (http://www.ros.org/wiki/roscpp_tutorials/Tutorials/WritingPublisherSubscriber) in the way you want, by republishing the string message.
Comment by piyushk on 2012-05-31:
Hopefully between the tutorial and this example, you can see how to use the publish call inside the callback, and setup the publisher as a global variable.
Comment by allenh1 on 2012-05-31:
Thank you so much. Still problems... I can see the data being published; however, RVIZ won't display it. Can I give you any info to help solve this?
Comment by piyushk on 2012-05-31:
Sure. Could you link your exact code and a screenshot of rviz to the original question.
Comment by allenh1 on 2012-06-01:
I have added your screen shots.
Comment by DimitriProsser on 2012-06-01:
The frame_id of your cloud is ' '. This cannot be displayed in Rviz. You must provide a frame_id to your cloud to visualize it.

