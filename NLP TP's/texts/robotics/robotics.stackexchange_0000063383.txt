Q:

How to distribute a package which is not a ROS package but could interest ROS community?

Hello everybody !
I am currently an intern in a research center which developed a programming language for signal processing : Faust. My goal is to write some code in order to allow ROS users to use faust applications.
My question is : should I create a specific ROS package, following the DevelopersGuide,  in order to distribute my work to ROS Community ? This implies some maintenance issues, because two separate packages aren't that easy to maintain.
The other possibility could be to integrate my codes to the faust package, available on Source Forge and git, and tell ROS Community "Hey there ! Let's try this wonderful new programming language ! It's available for ROS, you just have to download faust package !". The problem would be that users would have to download an entire package with files concerning Windows, for instance, and use only 5 or 6 files...
What do you think ?
Your ideas would be very helpful to me =)
Brune
EDIT : I wrote some documentation to explain how to use Faust in a ROS package. It is available here (using-faust-with-ros.pdf). In the current state, you compile a Faust file into a cpp file, which is created in a catkin package - in a catkin workspace or in a zip file. Then, you just have to make your catkin workspace and run the generated executable.
For instance, I tested it on a kinect and harpe node : using the depth values, I could play harpe by subscribing to a depth value topic (after some image processing). Don't know if it's clearer now ?

Originally posted by bchiffreville on ROS Answers with karma: 53 on 2014-10-17
Post score: 5

A:

The optimal route would be to release Faust into the ubuntu ecosystem (which would allow adoption/usage outside of ROS ), and then release a package with ROS-specific wrappers, APIs and documentation as a ROS package with a system dependency on libfaust.
The other option, which may involve (slightly) less work is to release Faust as a 3rd party package, however this would limit the library's exposure to ROS users only.
IMO maintaining an ubuntu package would not actually involve twice the maintenace, as the ROS wrapper would be unaffected as long as the API is stable.

Originally posted by paulbovbel with karma: 4518 on 2014-10-17
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by 130s on 2014-10-17:
+1 for introducing multiple options. But the following sentence isn't accurate:

however this would limit the library's exposure to ROS users only.

To obtain the packages released as 3rd party in ROS, your machine should point to ROS repository. But that's the only limitation for using them IMO.
Comment by bchiffreville on 2014-10-22:
Hi! Thanks for your answer! In fact, there already exists a faust Ubuntu package.
It's quite long to explain what I did, but I tried to write some documentation. It is the file called using-faust-with-ros.pdf :  here
Comment by paulbovbel on 2014-10-22:
Well, then option 1 becomes even easier, assuming that the faust API is relatively stable/mature. Uou should be able to create a ROS wrapper/convenience package, with faust as a system dependency (add it to rosdep).
Comment by bchiffreville on 2014-10-23:
Great ! Thank you very much for your help !
I'll work on my package now ;)

