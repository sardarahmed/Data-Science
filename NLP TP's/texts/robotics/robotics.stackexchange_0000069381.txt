Q:

Raspberry Pi 2, ROS and GPIO access

Hi!
I just created two nodes:

One is on my notebook to send status updates of a LED (the message is of type Bool)
The other is on my RPi2 and sets the GPIO 17 to high/low according to value in the Bool message received

Both platforms are running ROS Indigo (notebook has Debian Jessie and  RPi2 has Raspbian Wheezy). I'm also using only Python (especially on the RPi2 this seems to be the much easier way to do things related to the GPIO).
My problem is the GPIO access requires superuser privileges, which rosrun doesn't seem to like (in fact rosrun obviously is not a known command when using sudo). My question is in what best way am I to handle this situation? Should ROS on such an embedded system actually be installed as root because of all the low level access to the hardware underneath or is it possible to execute rosrun in superuser temporarily just for that the time the specific node that requires such privileges is running?

Originally posted by rbaleksandar on ROS Answers with karma: 299 on 2015-08-24
Post score: 1

A:

After a long struggle I finally got it. There is actually no need to use sudo at all (or modify user/user groups) if you use the wiringPi library. It has a command line utility called gpio which has an export function that makes the GPIOs accessible without the need for sudo both in Python and C/C++.
UPDATE: Since Raspbian Jessie the access to the GPIOs no longer requires sudo.

Originally posted by rbaleksandar with karma: 299 on 2015-08-27
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by dinesh on 2016-05-30:
dont we have to subscribe the gpio pin values or something ? Can u directly access the gpio pins inside the ros node, just by using the library, and using its name at header file? thanks for giving easy answer, by the way.
Comment by rbaleksandar on 2016-05-30:
If I recall correctly you don't have to use any command line tools but you do have to set the pins you want to use as ins or outs. Code-wise you can put the calls to the wiringPi library anywhere in your node since this has nothing to do with ROS.
Comment by rbaleksandar on 2016-05-30:
How you control the pins remotely is a different topic. You can create a service for example, which runs on your ROS on the Pi and then trigger it remotely from your PC where another ROS is running (don't forget the master-slave thing with multiple ROS in the same network).
Comment by zweistein on 2018-04-13:
I have the same issue but exporting the pin is not helping: $ gpio export 17 out, same error: wiringPinSetup: Must be root. gpio v 2.32 and ROS kinetic. What am I missing?

