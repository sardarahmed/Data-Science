Q:

Quaternion transformations in Python

I'm trying to place some Markers in RViz, using a node written in Python. To this end, I need to create a geometry_msgs.mgs.Pose with an orientation Quaternion.
But I can't for the life of me find the utility and conversion functions that I need for Quaternions. There are some in tf.transformations, but those produce numpy Quaternions, which I would have to manually split up and throw into the geometry_msgs.msg.Quaternion constructor.
Considering that Quaternions are of little use without a set of functions to work with them, my question is: Where are the proper conversion functions for Quaternions? That is, functions to  create and modify geometry_msgs.msg.Quaternion or to convert between a numpy Quaternion (4-tuple) and geometry_msgs.msg.Quaternion (object with x,y,z,w attributes).
My environment is Ubuntu 12.04 Precise, with ROS fuerte (using fuerte is currently mandatory for this project; I'm already looking into upgrading, but that's not at all easy).

Originally posted by nevik on ROS Answers with karma: 241 on 2013-07-29
Post score: 22

A:

I also remember having problems with this a few months back, the documentation is not overly clear; but in the end it is very simple.
To convert from euler to quaternion:
quaternion = tf.transformations.quaternion_from_euler(roll, pitch, yaw)
#type(pose) = geometry_msgs.msg.Pose
pose.orientation.x = quaternion[0]
pose.orientation.y = quaternion[1]
pose.orientation.z = quaternion[2]
pose.orientation.w = quaternion[3]

And to convert from quaternion to euler:
#type(pose) = geometry_msgs.msg.Pose
quaternion = (
    pose.orientation.x,
    pose.orientation.y,
    pose.orientation.z,
    pose.orientation.w)
euler = tf.transformations.euler_from_quaternion(quaternion)
roll = euler[0]
pitch = euler[1]
yaw = euler[2]

Originally posted by Miguel S. with karma: 1114 on 2013-07-30
This answer was ACCEPTED on the original site
Post score: 47

Original comments
Comment by vtalpaert on 2016-08-16:
As an update in 2016, it could be written as:
pose.orientation = geometry_msgs.msg.Quaternion(*tf_conversions.transformations.quaternion_from_euler(roll, pitch, yaw))

Comment by Combinacijus on 2021-03-22:
Also remember to import
import tf
import geometry_msgs

And for someone who doesn't know star "*" here *tf_conversions in python is an unpacking operator which as name suggests unpacks list to separate argument for the function

