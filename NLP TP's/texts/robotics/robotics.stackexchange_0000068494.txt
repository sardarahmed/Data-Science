Q:

Kalman filter of opencv doesnt work in ROS

Hi, im trying to adapt a Kalman filter cpp code to a node cpp in ROS, but in the very beginning, the initialization goes wrong, more precisly, when i try to set  the matrices, this is the relevant part of the code.
int stateSize = 4;
int measSize = 2;
int contrSize = 0;
unsigned int type = CV_32F;
cv::KalmanFilter kf(stateSize, measSize, contrSize, type);
cv::Mat state(stateSize, 1, type);  // [x,y,v_x,v_y,w,h]
cv::Mat meas(measSize, 1, type);
setIdentity(kf.measurementMatrix);

The compiler shows me the next error:
error: expected constructor, destructor, or type conversion before ‘(’ token
setIdentity(kf.measurementMatrix);

I really have no idea what is happening, because those lines show no problem in the "pure" cpp code.
Hope someone can help me, thanks.
EDIT 1:
#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <sensor_msgs/image_encodings.h>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <cv_bridge/cv_bridge.h>
#include <geometry_msgs/Twist.h>
#include <std_msgs/Empty.h>
#include <std_msgs/String.h>
#include <sstream>
#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>
#include <stdio.h>
#include <iostream>
#include <cmath>
#include "opencv2/core/core.hpp"
#include "opencv2/features2d/features2d.hpp"
#include "opencv2/nonfree/features2d.hpp"
#include "opencv2/nonfree/nonfree.hpp"
#include <ros/package.h>
#include "opencv2/calib3d/calib3d.hpp"
#include <geometry_msgs/Point.h>
#include <fstream>
#include <opencv2/video/video.hpp>
#include "opencv2/video/tracking.hpp"

Originally posted by erivera1802 on ROS Answers with karma: 59 on 2015-07-07
Post score: 0

A:

Where is setIdentity defined? It looks like the compiler can't find it. Can you do something like this instead?
kf.measurementMatrix = Mat::eye(kf.measurementMatrix.rows, kf.measurementMatrix.cols, CV_64F);

Originally posted by Tom Moore with karma: 13689 on 2015-07-07
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by erivera1802 on 2015-07-08:
I tried your solution, but it shows me the next error:
error: ‘kf’ does not name a type

kf.measurementMatrix = Mat::eye(kf.measurementMatrix.rows, kf.measurementMatrix.cols, CV_64F);
^
setIdentity is defined in opencv operations.
Comment by Tom Moore on 2015-07-08:
Sorry, I didn't mean that you should only use that line of code. Just replace the line where you were calling setIdentity with the line I gave you. You declared kf in the line just before it.
Comment by erivera1802 on 2015-07-08:
Yeah thats what I have done. I didnt delete the KalmanFilter kf linea, but it showed me that
Comment by Tom Moore on 2015-07-08:
What do your includes look like?
Comment by erivera1802 on 2015-07-12:
The include is in the question, dont know why the format crushed
Comment by gvdhoorn on 2015-07-12:\

dont know why the format crushed

Because you didn't use the Preformatted text toolbar button to format it properly (it's the ony with 101010 on it).

