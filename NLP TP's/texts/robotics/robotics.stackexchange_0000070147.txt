Q:

Adding Executables, Dependencies and Target Link Libraries - Client Example

I'm running Indigo on Ubuntu 14.04 and in the tutorial [http://wiki.ros.org/actionlib_tutorials/Tutorials/SimpleActionClient], under section 1.3, CMakeLists.txt is modified to add Executables, Dependencies and Target Link Libraries.  Since this builds on the work of the SimpleActionServer, should these be ADDED to this file or should they replace what was used for the prior lesson:
http://wiki.ros.org/actionlib_tutorials/Tutorials/SimpleActionServer%28ExecuteCallbackMethod%29

add_executable(fibonacci_server src/fibonacci_server.cpp)

target_link_libraries(
  fibonacci_server
  ${catkin_LIBRARIES}
)

add_dependencies(
  fibonacci_server
  ${learning_actionlib_EXPORTED_TARGETS}
)

I can get the tutorial for the client working fine when I replace the above dependencies, link libraries and executables. But, the directions seem to say ADD the new dependencies, link libraries and executables to what was used for the client example.  If that is the case, how do you add multiple dependencies, executables and link libraries.  I haven't found the correct syntax.

Originally posted by d7x on ROS Answers with karma: 53 on 2015-10-30
Post score: 0

A:

Yes; you should be adding to the CMakeLists from the previous tutorial.
You shouldn't be trying to combine multiple statements from the different tutorials.
For example, each call to add_executable() in cmake defines a new executable that you're trying to compile, and you want to compile each tutorial, so you should have two separate calls to add_executable()
Your final CMakeLists should look something like:
cmake_minimum_required(VERSION 2.8.3)
project(learning_actionlib)

find_package(catkin REQUIRED COMPONENTS roscpp actionlib actionlib_msgs)
find_package(Boost REQUIRED COMPONENTS system)

add_action_files(
  DIRECTORY action
  FILES Fibonacci.action
)

generate_messages(
  DEPENDENCIES actionlib_msgs std_msgs
)

catkin_package(
  CATKIN_DEPENDS actionlib_msgs
)

include_directories(include ${catkin_INCLUDE_DIRS} ${Boost_INCLUDE_DIRS})

add_executable(fibonacci_server src/fibonacci_server.cpp)

target_link_libraries(
  fibonacci_server
  ${catkin_LIBRARIES}
)

add_dependencies(
  fibonacci_server
  ${learning_actionlib_EXPORTED_TARGETS}
)

add_executable(fibonacci_client src/fibonacci_client.cpp)

target_link_libraries( 
  fibonacci_client
  ${catkin_LIBRARIES}
)

add_dependencies(
  fibonacci_client
  ${learning_actionlib_EXPORTED_TARGETS}
)

Originally posted by ahendrix with karma: 47576 on 2015-10-30
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by d7x on 2015-10-30:
Perfect, thanks for explaining this.

