Q:

avr_bridge help

I tried to run the the 'hello' example given in the tutorial. I first generated avr_ros library which i then included in the libraries folder in arduino(/usr/share/arduino).I then edited the files to make all header refference local by removing "avr-ros/" from all headers. This the final program i got
#include&nbsp;<stdio.h>
#include&nbsp;<span style="color: #006699;">"ros.h"</span> <span style="color: #7E7E7E;">//main avrRos library</span>
#include&nbsp;<span style="color: #006699;">"String.h"</span> <span style="color: #7E7E7E;">//std_msg/String library</span>

namespace&nbsp;ros&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #CC6600;">int</span> fputc(<span style="color: #CC6600;">char</span> c, FILE *stream) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #CC6600;"><b>Serial</b></span>.<span style="color: #CC6600;">write</span>(c);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #CC6600;">return</span> 0;
&nbsp;&nbsp;&nbsp;&nbsp;}
}

<span style="color: #7E7E7E;">//Define&nbsp;global&nbsp;message&nbsp;objects&nbsp;to&nbsp;use&nbsp;in</span>
<span style="color: #7E7E7E;">//the&nbsp;callback&nbsp;functions&nbsp;and&nbsp;throughout&nbsp;the&nbsp;program</span>
<span style="color: #7E7E7E;"><b>ros:</b></span>:Publisher resp;
<span style="color: #7E7E7E;"><b>std_msgs:</b></span>:String call_msg;
<span style="color: #7E7E7E;"><b>std_msgs:</b></span>:String response_msg;

<span style="color: #CC6600;">void</span> toggle()
{&nbsp;<span style="color: #7E7E7E;">//toggle an led to debug the program</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #CC6600;">static</span> <span style="color: #CC6600;">char</span> t=0;
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #CC6600;">if</span> (!t ) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #CC6600;">digitalWrite</span>(13, <span style="color: #006699;">HIGH</span>);   <span style="color: #7E7E7E;">// set the LED on</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t&nbsp;=&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span style="color: #CC6600;">else</span> {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #CC6600;">digitalWrite</span>(13, <span style="color: #006699;">LOW</span>);    <span style="color: #7E7E7E;">// set the LED off</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t&nbsp;=&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;}
}

<span style="color: #CC6600;">void</span> response(Msg *msg){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;toggle();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #7E7E7E;">//make sure that if you are manipulating the raw string,</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #7E7E7E;">//there is enough space in it</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #7E7E7E;">//to handle all of the data</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sprintf(response_msg.data.getRawString(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #006699;">"You sent : %s"</span>, call_msg.data.getRawString());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.publish(resp,&nbsp;&response_msg);
}

<span style="color: #7E7E7E;">//&nbsp;Since&nbsp;we&nbsp;are&nbsp;hooking&nbsp;into&nbsp;a&nbsp;standard</span>
<span style="color: #7E7E7E;">//&nbsp;arduino&nbsp;sketch,&nbsp;we&nbsp;must&nbsp;define&nbsp;our&nbsp;program&nbsp;in</span>
<span style="color: #7E7E7E;">//&nbsp;terms&nbsp;of&nbsp;the&nbsp;arduino&nbsp;setup&nbsp;and&nbsp;loop&nbsp;functions.</span>

<span style="color: #CC6600;">void</span> <span style="color: #CC6600;"><b>setup</b></span>()
{
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #CC6600;"><b>Serial</b></span>.<span style="color: #CC6600;">begin</span>(57600);

&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #CC6600;">pinMode</span>(13, <span style="color: #006699;">OUTPUT</span>); <span style="color: #7E7E7E;">//set up the LED</span>
&nbsp;&nbsp;&nbsp;&nbsp;resp&nbsp;=&nbsp;node.advertise(<span style="color: #006699;">"response"</span>);
&nbsp;&nbsp;&nbsp;&nbsp;node.subscribe(<span style="color: #006699;">"call"</span>,response(&call_msg));

&nbsp;&nbsp;&nbsp;&nbsp;call_msg.data.setMaxLength(30);
&nbsp;&nbsp;&nbsp;&nbsp;response_msg.data.setMaxLength(60);
}

<span style="color: #CC6600;">void</span> <span style="color: #CC6600;"><b>loop</b></span>()
{
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #CC6600;">for</span>(;;) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #CC6600;">int</span> c = <span style="color: #CC6600;"><b>Serial</b></span>.<span style="color: #CC6600;">read</span>();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #CC6600;">if</span> (c == EOF)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #CC6600;">break</span>;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.spin(c);
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #7E7E7E;">/* Do other work */</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #CC6600;">delay</span>(10);
}

but i get the following error
error: variable or field ‘response’ declared void In function ‘void setup()’:
what should i do
P.S: I did try to configure in eclipse but was not able to.

Originally posted by rinosh1989 on ROS Answers with karma: 1 on 2011-02-18
Post score: 0

A:

Not sure of this one but you wrote:
node.subscribe("call",response(&call_msg));

instead of:
node.subscribe("call",response,&call_msg);

Originally posted by Homer Manalo with karma: 475 on 2011-02-21
This answer was ACCEPTED on the original site
Post score: 0

