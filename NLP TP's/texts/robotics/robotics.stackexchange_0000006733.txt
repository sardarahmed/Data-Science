Q:

Minimising lateral drift in a PID (Arduino) controlled quadcopter using a 6DOF IMU

I'm developing a stabilisation system for an 'off-the-shelf' quadcopter by using an Arduino Mega and an IMU. The IMU is reading the angle of the quad, calculating motor commands by using a PID controller and applying them to the motors. It works well when constrained in a test bed, however in reality, although the quad is straight and level, it's drifting to one side because of its recent motor commands correcting the pitch/yaw. Is there any way I can (without using a vision system) keep the quad in one place without drifting?
I've looked into obtaining velocity by integrating the acceleration value, however it's extremely noisy and doesn't give a meaningful reading.

A:

Unfortunately, with just an IMU there's virtually no way for your quad to know that it's drifting so it can't stop it. 
For outdoor flight you can add a GPS to detect the drift. For indoor flight, many people use vision systems to detect the drift. Depending on how close you are to walls, you could also look at ultrasonic range sensors to detect drift.

A:

IMUs have accumulating error and can not be a reliable sensors by themselves if you want to measure velocity or even worse, position.
I believe your safest bet would be doing a sensor fusion between an IMU and a vision sensor using feature extraction and Kalman filter. Using only a camera can introduce unpredictable errors specially in featureless environments.
The best resources would be finding monocular SLAM(Simultaneous Localization And Mapping) papers.

