Q:

Can't find python script of different ros package in Pycharm

Hello,
I was following this guide to be able to access a python script from one ros package in another one. I am trying to execute the following script in Pycharm:
#!/usr/bin/env python

import rospy
from robot_control.moveclass import MoveClass
if __name__ == '__main__':
    rospy.init_node("test")
    mc = MoveClass()
    mc.move_cart_rel((0.0, 0.0, -0.1, 0, 0, 0))

Executing the script works fine and pycharm is able to resolve the rospy import, but can Not resolve from robot_control.moveclass import MoveClass.
I also followed this guide to get Pycharm running for ROS.
I really dont know, what I did wrong. This is the content of my setup.py file:
## ! DO NOT MANUALLY INVOKE THIS setup.py, USE CATKIN INSTEAD

from distutils.core import setup
from catkin_pkg.python_setup import generate_distutils_setup

# fetch values from package.xml
setup_args = generate_distutils_setup(
    packages=['robot_control'],
    package_dir={'': 'src'},
)
setup(**setup_args)

The setup.py file is located in the catkin package robot_control and the __init__.py and moveclass.py files are located relative to that catkin package in src/robot_control.
How am I able to get Pycharm to resolve my script, which I wanna use in multiple other packages?

Originally posted by nmelchert on ROS Answers with karma: 143 on 2018-03-22
Post score: 1

A:

See the better solution on EDIT and EDIT2
Finally "solved" ! I'm not sure if this is a limitation of catkin or if it's the intended behavior. Here's what I observed:

Under External Libraries in pycharm, you can find the libraries that the software can find, and it gets the ROS libraries via PYTHONPATH.
If you find and check under your robot_control library, you will see that only the __init__.py file (and possibly messages, services) are listed, but not the modules of your package. This is why pycharm can't find the files - catkin is not installing them

One way of solving:

Change your catkin build configuration to also install (if using catkin-python-tools), or perform catkin_make install for the packages you want to import. Now, if you search under the install space, you will notice that your modules are actually there as well.
Add install/lib/python2.7/dist-packages/ to your PYTHONPATH. To do this, either source install/setup.bash before running pycharm, or add them manually in Settings->Project->Project Interpreter->Gear->Show All->(Last Icon, it's a dir tree)

Now pycharm will find your modules. You may also want to edit the __init__.py file of your modules, see here a good reference: http://mikegrouchy.com/blog/2012/05/be-pythonic-__init__py.html

EDIT
Same issue reported here. It is Pycharm's fault of not parsing catkin's __init__.py file to go find the available modules. The solution is provided in that link, which for me is better than my previous solution, but very tedious.
EDIT2
Solution pasted (adapted) here in case it gets lost:

Open PyCharm's settings
Open your project on the left of the settings window
Open Project Structure
Select your project
Click on Add Content Root
Add the root of your package, where CMakeLists is located
Click on OK, the package will now show up on the Project Tree view on the left
On the Project view, find the top-most src directory of the module you want to add, Right-Click -> Mark Directory As -> Source Root

Originally posted by dotcom with karma: 120 on 2018-03-27
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by nmelchert on 2018-03-29:
Thanks for your answer.
I also prefer the solution you mentioned here. It worked perfectly for me.
Thanks for your help.

