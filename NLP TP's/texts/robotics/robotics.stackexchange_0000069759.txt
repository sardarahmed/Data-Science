Q:

Theorycrafting: "Virtual" walls for husky navigation

Hello ROS community!
I just got into ROS through a project I'm participating in at my University. My job is to navigate the husky given a set of breadcrumbs (waypoints) and a zone (like a "virtual corridor") where it's OK to maneuver in.
Whilst playing around with the husky gazebo simulation and investigating how the move_base local and global planner work, I thought of an idea. Would it be possible to add a "virtual corridor" to the global occupancy grid cost map, which would make the husky think it was trapped and not navigate outside of the corridor, but still navigating through the breadcrumbs and avoiding obstacles inside? My hopes is that the laser distance sensor could still see through this virtual wall in order to navigate itself in the world.
Or do you know of any more convenient way to do this?
Thanks in advance,
wbr
EDIT: Basically what I'm asking is: Is it possible to add area restrictions on the path planner in order to keep the robot inside a certain region while going to goal?

Originally posted by mattiasb채x on ROS Answers with karma: 1 on 2015-09-23
Post score: 0

A:

(This is too long for a comment, so I had to put it into a new answer)
To elaborate on solution 1:
This really depends on how you want to define/detect the "impassable" areas. So the idea is to create a node which subscribes to the current laser scan readings, and then modifies it to suit your needs, e.g. "shorten" the beams on the sides of the robot to create a virtual wall and republish it under a new topic.
You would feed only the original laser scan to AMCL, so your localization is would not be affected at all. In the costmap configuration file you would then subscribe only to the modified laser scan data. The problem you might run into is that the robot then of course constantly thinks that there is an obstacle so it cannot drive through there, even though it might be the only path.
Thus, the tricky part would be to decide, when to modify the laser readings and when to leave them untouched, i.e. you would need an algorithm or lookup table that can decide if the region is unsafe or free to pass.
So to sum up, solution 2 is the quick and dirty, but also easy solution. If you have the map anyway and do not want the robot to drive through certain parts, close them with dotted lines in the static map. Otherwise, you need some kind of decision algorithm that you use to create the virtual walls for the laser scanner modification.

Originally posted by daenny with karma: 376 on 2015-09-24
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by mattiasb채x on 2015-09-24:
I don't think that the only path being through the virtual walls and the robot not taking it is a problem, it's actually the behavior I'm looking for. The robot is supposed to be a system in a system, where the decision of "move through these waypoints in this area" is made on a higher lvl, and ...
Comment by mattiasb채x on 2015-09-24:
if it is not possible to do so, the robot should request another path and/or area. Is it possible though, to clear the previous virtual walls once a new set of waypoints and a new "corridor" is recieved?
Comment by daenny on 2015-09-28:
Yes, that would be possible. In your "Virtual wall node" you would just need a service call to "clear current corridor" or something similar. This you could call in your program or via the commandline.
Comment by mattiasb채x on 2015-09-29:
I have managed to create a node that publishes fake sensor data to an obstacle layer i created myself in the global of move_base. But I have no idea how to clear this layer to completely remove all the virtual walls.

