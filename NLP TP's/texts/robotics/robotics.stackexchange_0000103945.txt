Q:

Ubuntu 20.04 64bits - Unknown CMake command "ament_auto_find_test_dependencies"

this project builds fine on a rapsberry pi 4
https://github.com/fmrico/book_ros2

Now I try to build this on a virtual box VM using this image
ubuntu-20.04.6-desktop-amd64.iso
I have been installing any package conceivable, yet this does not build
phil@ROS2:~/WORK/bookros2_ws$ colcon build --symlink-install
Starting >>> launch_pal
Finished <<< launch_pal [4.17s]           
Starting >>> pmb2_controller_configuration
Finished <<< pmb2_controller_configuration [5.45s]                    
Starting >>> pal_gripper_controller_configuration
Finished <<< pal_gripper_controller_configuration [4.27s]                    
Starting >>> pmb2_laser_sensors
--- stderr: pmb2_laser_sensors                           
CMake Error at CMakeLists.txt:8 (ament_auto_find_test_dependencies):
  Unknown CMake command "ament_auto_find_test_dependencies".

---
Failed   <<< pmb2_laser_sensors [3.63s, exited with code 1]

Summary: 3 packages finished [18.0s]
  1 package failed: pmb2_laser_sensors
  1 package had stderr output: pmb2_laser_sensors
  33 packages not processed

thanks for your help
[edit]
phil@ROS2:~/WORK/bookros2_ws$ cat /home/phil/WORK/bookros2_ws/src/ThirdParty/pmb2_navigation/pmb2_laser_sensors/CMakeLists.txt 
cmake_minimum_required(VERSION 3.5)
project(pmb2_laser_sensors)

find_package(ament_cmake_auto REQUIRED)
ament_auto_find_build_dependencies()

if(BUILD_TESTING)
  ament_auto_find_test_dependencies()
  ament_lint_auto_find_test_dependencies()
endif()

ament_auto_package(INSTALL_TO_SHARE config launch)

A:

When something works on one machine but not the other, it's generally a configuiration/versioning issue. It appears that ament_auto_find_test_dependencies wasn't added until two years ago (check the git blame), so if you're on 20.04, it's likely that the "unknown CMake command" is because that command simply doesn't exist on your 20.04 computer.
You can try these three things:

Upgrading CMake, Catkin, Ament, and whatever else in the build chain
Using CMake's if statement, which can be used to check if a command/macro is available, to first check if testing can be performed using that command before attempting it
Both of the above, to maximize both your environment and portability of your project.

