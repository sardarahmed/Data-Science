Q:

Exception problem that is related to time issue

I have 2 nodes that all read/deal with time from a recorded dataset(It doesn't start with ros::Time::now() and the like). After I successfully build the point cloud using those data then, I've just realized that I caught a lot of exceptions(after looking at the rxconsole output) that is related to time issue. I would prefer to solve this problem because it will be useful if I want to use with other nodes that are normally expect ROS time. I copied some information from the debug info as below:
Is there any solution for this:
header: 
  seq: 11
  stamp: 1327570083.262721196
  frame_id: 
level: 4
name: /pointcloud_builder_node
msg: Problem: Lookup would require extrapolation into the past.  Requested time 24.553000000 but the earliest data is at time 1327570080.147540118, when looking up transform from frame [/laser] to frame [/base_link].

If I interpret correctly, 24.553000000 is the one in my dataset and 1327570080.147540118 is the one that ROS was using.
Thanks in advance.

Originally posted by alfa_80 on ROS Answers with karma: 1053 on 2012-01-25
Post score: 0

A:

I see two possible solutions here. Either you can use rosbag play --clock <bag> and set the ros parameter use_sim_time to true (link) or you write your own rosbag playback node (e.g. using the python API, link) and set the time stamps manually to current time before publishing them.
The former solution causes all your nodes (don't forget to restart them after setting use_sim_time) to run on the timestamps recorded in the bag. That only works if you don't run on a real robot and want to use real sensors. The latter solution is more work to implement but is also more flexible. It would be just a few lines of python code though.

Originally posted by Lorenz with karma: 22731 on 2012-01-25
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by alfa_80 on 2012-01-26:
Looks good, I'll try it later..Thanks a lot.
Comment by Lorenz on 2012-01-26:
That's one way. Another one is to provide similar functionality in your publisher node. Click on the link :) You basically need to publish time on the /clock topic. I've never done that however.
Comment by alfa_80 on 2012-01-26:
"..you need to do something similar, i.e. provide simulation time (link on more information in my answer)", you mean, in this case I need to generate a rosbag first right in order to use the --clock parameter?
Comment by alfa_80 on 2012-01-26:
Nevermind, I'll stick to having those warnings/exceptions first, but later on when I need to use with other packages, I'll change the one that you suggested using ros::Time::now(). Thanks anyway.
Comment by Lorenz on 2012-01-26:
Sure. You lose something by setting the laser stamp time to current time. That's one reason why rosbag has the --clock parameter. If you need to use correct laser timestamps in your application , you need to do something similar, i.e. provide simulation time (link on more information in my answer).
Comment by alfa_80 on 2012-01-26:
Somebody told me, that way is also problematic. I think so too. Because if we set using ros::Time::now(), it's very different from the original timestamp as the original one has uneven step size, the sequence is not really like (23.3, 23.4, 23.5) but rather like (23.3, 24.0, 24.2)..somthg like that.
Comment by Lorenz on 2012-01-26:
Yes. that's exactly what I meant.
Comment by alfa_80 on 2012-01-26:
Currently, I set it like this [ros::Time scan_time(double(data_set[t][1]/1000)); scan.header.stamp =  scan_time;]. Do you mean, instead of doing that I should set it this way [scan.header.stamp = ros::Time::now();] and of course, both cases are running in a loop. Did you mean that?
Comment by Lorenz on 2012-01-25:
Then use just ros::Time::now() instead of that one of the dataset :). Just make sure to set it not when you are reading from the file but just before publishing.
Comment by alfa_80 on 2012-01-25:
I'm the one who wrote this publisher. So, I just use the timestamp from the dataset when I publish it.
Comment by alfa_80 on 2012-01-25:
The output: "  seq: 32
stamp:
secs: 25
nsecs: 348000000
frame_id: laser
"
Comment by Lorenz on 2012-01-25:
If the time stamps are set using ros::Time::now() right before the laser package is published, the stamps should be fine at least. Do a rostopic echo /your/laser/topic to check what they are set to.
Comment by alfa_80 on 2012-01-25:
It contains many data from some sensors, say for laser scanner data, I write a publisher node that reads certain columns and all rows in a dataset. The timestamps are generated by somebody else which I use it to publish those laser data.
Comment by Lorenz on 2012-01-25:
How do you play it back then and how are the time stamps generated?
Comment by alfa_80 on 2012-01-25:
My dataset is not in rosbag anyway. it's just in "normal" .txt format.
Comment by alfa_80 on 2012-01-25:
For the latter solution also, what do you mean by "set the time stamps manually to current time before publishing them..", how do I convert say for my timestamp of 2 row say "24.553" into ROS-type one?
Comment by alfa_80 on 2012-01-25:
For the latter solution, does that mean, all my data indices like x-value, say stored in [:,3] will be changed right?

