Q:

C++ Code is giving an error that I can't understand:

This code is a very simple extract from what I am really writing. But I am getting stuck on references and dereferencing. To explain this. NodeHandle stands in for a very large class from my framework. Arm is a class I am writing which should contain a reference to a NodeHandle. I want a variable globalArm to be of type Arm. Then in the main program I want to create a NodeHandle and I want to use setNodeHandle to store the reference to that NodeHandle into the Arm.
Here is the code that won't work as is. I've tried a lot of permutations. (p.s. ChatGPT is no help!)
#include <array>

class NodeHandle {
public:
    std::array<int, 10000> data;

    NodeHandle() {
        // Initialize the array to zero
        data.fill(0);
    }
};

class Arm {
public:
    NodeHandle* nodeHandle;

    Arm() : nodeHandle(nullptr) {}

    void setNodeHandle(NodeHandle& nh) {
        nodeHandle = &nh;
    }

};

// Global variable of type Arm
Arm globalArm;

int main() {
    // Allocate NodeHandle on the heap
    NodeHandle* nodeHandle = new NodeHandle();

    // Set the NodeHandle reference in globalArm
    globalArm.setNodeHandle(*nodeHandle);

    return 0;
}

When I compile and Link it I get this:
Starting build...
/usr/bin/gcc -fdiagnostics-color=always -g /Users/pitosalas/mydev/gpg_bran4/deleteme.cpp -o /Users/pitosalas/mydev/gpg_bran4/deleteme
ld: Undefined symbols:
  operator delete(void*), referenced from:
      _main in deleteme-907409.o
  operator new(unsigned long), referenced from:
      _main in deleteme-907409.o
  ___gxx_personality_v0, referenced from:
      /private/var/folders/g0/kks4z5dx6hbfhwvrw0zsgbn00000gn/T/deleteme-907409.o
clang: error: linker command failed with exit code 1 (use -v to see invocation)

Build finished with error(s).

A:

This error is because you are compiling C++ code with GCC (C compiler). The meaning of the error is that GCC can not find new and delete operators during the linking phase, which is because GCC does not link to the C++ standard library by default.
When compiling your C++ file, replace gcc with g++. It should be:
/usr/bin/g++ -g /path/to/file.cpp -o /path/to/desired_name

I just tried your code sample with g++, and it works with no problems.
If this is a small example, and you want to apply changes to a bigger project, the compiler should be correctly set in the package/project's CMakeLists.txt file. Please let me know if my suggestion did not fix this issue.

