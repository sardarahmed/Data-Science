Q:

Modification to the CMakeLists txt file in order to build a project with many source files

Hi everyone,
I was wondering how to build a project which contains 3.cpp files and 2.h headers. First, I create a package called test. Then I defined a 3.cpp files: main , ROSMath and Math.cpp. But when I try to build with catkin, I got this error  :
1/CMakeLits:
cmake_minimum_required(VERSION 2.8.3)
project(test)

## Compile as C++11, supported in ROS Kinetic and newer
# add_compile_options(-std=c++11)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  roscpp
  rospy
  std_msgs
  message_generation
)

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)

## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend tag for "message_generation"
##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in
##     but can be declared for certainty nonetheless:
##     * add a run_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
add_message_files(
   FILES
   
 )

## Generate services in the 'srv' folder
add_service_files(
   FILES
   TwoInts.srv
 )

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
generate_messages(
   DEPENDENCIES
   std_msgs
 )

################################################
## Declare ROS dynamic reconfigure parameters ##
################################################

## To declare and build dynamic reconfigure parameters within this
## package, follow these steps:
## * In the file package.xml:
##   * add a build_depend and a run_depend tag for "dynamic_reconfigure"
## * In this file (CMakeLists.txt):
##   * add "dynamic_reconfigure" to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * uncomment the "generate_dynamic_reconfigure_options" section below
##     and list every .cfg file to be processed

## Generate dynamic reconfigure parameters in the 'cfg' folder
# generate_dynamic_reconfigure_options(
#   cfg/DynReconf1.cfg
#   cfg/DynReconf2.cfg
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if your package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES test
#  CATKIN_DEPENDS roscpp rospy std_msgs
#  DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(
# include
  ${catkin_INCLUDE_DIRS}
)

## Declare a C++ library
# add_library(${PROJECT_NAME}
#   src/${PROJECT_NAME}/test.cpp
# )

## Add cmake target dependencies of the library
## as an example, code may need to be generated before libraries
## either from message generation or dynamic reconfigure
# add_dependencies(${PROJECT_NAME} ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Declare a C++ executable
## With catkin_make all packages are built within a single CMake context
## The recommended prefix ensures that target names across packages don't collide
# add_executable(${PROJECT_NAME}_node src/test_node.cpp)

## Rename C++ executable without prefix
## The above recommended prefix causes long target names, the following renames the
## target back to the shorter version for ease of user use
## e.g. "rosrun someones_pkg node" instead of "rosrun someones_pkg someones_pkg_node"
# set_target_properties(${PROJECT_NAME}_node PROPERTIES OUTPUT_NAME node PREFIX "")

## Add cmake target dependencies of the executable
## same as for the library above
# add_dependencies(${PROJECT_NAME}_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Specify libraries to link a library or executable target against
# target_link_libraries(${PROJECT_NAME}_node
#   ${catkin_LIBRARIES}
# )

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS ${PROJECT_NAME} ${PROJECT_NAME}_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_test.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)

add_executable(main src/main.cpp src/ROSMath.cpp)
target_link_libraries(main ${catkin_LIBRARIES})
add_dependencies(main test_gencpp)

2/Math.h:
#ifndef TEST_MATH_H
#define TEST_MATH_H

class Math
{

public:

static int add (int a , int b ) ;
    
};

#endif

3/ROSMath.h:
#ifndef TEST_ROSMATH_H
#define TEST_ROSMATH_H
#include "test/Math.h"

class ROSMath 
{

private: 
Math theMath;

public:
 
  ROSMath(Math* aMath);

  bool ROSadd(test::TwoInts::Request &req,
           test::TwoInts::Response &res);
};

#endif

4/Math.cpp:
#include "test/Math.h"

    
int add(int a, int b)
{

return a+b;

}

5/ROSMath.cpp:
#include "test/Math.h"
#include "test/ROSMath.h"
#include "ros/ros.h"
#include "test/TwoInts.h"

ROSMath::ROSMath(Math* aMath) {
theMath = aMath;

}

bool ROSMath:: ROSadd(test::TwoInts::Request &req,
                  test::TwoInts::Response &res);
{

res.sum = theMath->add( req.a , req.b);
ROS_INFO("request: x=%ld, y=%ld", (long int)req.a, (long int)req.b);
ROS_INFO("  sending back response: [%ld]", (long int)res.sum);
return true;

}

6/main.cpp:

#include "ros/ros.h"
#include "test/TwoInts.h"
#include "test/ROSMath.h"
#include "test/Math.h"

int main(int argc, char **argv)
{
  ros::init(argc, argv, "add_two_ints_test_server");
  ros::NodeHandle n;

// %Tag(SERVICE_SERVER)%

  Math op; 
  ROSMath ROSop(&op);
  ros::ServiceServer ss = n.advertiseService("add_two_ints_test", &ROSMath::ROSadd, &ROSop);
// %EndTag(SERVICE_SERVER)%

  ros::spin();

  return 0;
}

error:
CMakeFiles/main.dir/src/main.cpp.o : Dans la fonction « main » :
main.cpp:(.text+0x107) : référence indéfinie vers « ROSMath::ROSMath(Math*) »
main.cpp:(.text+0x10d) : référence indéfinie vers « ROSMath::ROSadd(test::TwoIntsRequest_<std::allocator<void> >&, test::TwoIntsResponse_<std::allocator<void> >&) »
collect2: error: ld returned 1 exit status
test/CMakeFiles/main.dir/build.make:113 : la recette pour la cible « /home/hamza/catkin_ws/devel/lib/test/main » a échouée
make[2]: *** [/home/hamza/catkin_ws/devel/lib/test/main] Erreur 1
CMakeFiles/Makefile2:7184 : la recette pour la cible « test/CMakeFiles/main.dir/all » a échouée
make[1]: *** [test/CMakeFiles/main.dir/all] Erreur 2
Makefile:138 : la recette pour la cible « all » a échouée
make: *** [all] Erreur 2

I think that is related to my CmakeLists.txt. Which modification shall I do to build my project successfully.
Thank You very much for your help

Originally posted by Hamza on ROS Answers with karma: 1 on 2017-12-29
Post score: 0

Original comments
Comment by PeteBlackerThe3rd on 2017-12-29:
Can you post the CMakeLists.txt file you're using along with the 5 source files you've mentioned. It looks like there are some errors in your code as well main.cpp:(.text+0x107) : référence indéfinie vers « ROSMath::ROSMath(Math*) looks like you're missing some #include 's
Comment by Hamza on 2017-12-30:
Hi Peter, thank you for your response, I edited my question in order to add the Cmakelist.txt file and the source files. I modified the add_excutables in the Cmakelist.txt as indicated by nrparikh and I got errors
Comment by gvdhoorn on 2017-12-30:
@Hamza: could you please take care to format things properly next time when copying code/build scripts/console output? Just select and use ctrl+k or press the Preformatted Text button (the one with 101010 on it).
Also: please don't include the boilerplate comments in your CMakeLists.txt.

A:

If you haven't linked your *.cpp files in the CMakeLists, you will face this error. As far as I understand, you are including ROSMath.cpp and Math.cpp in your main file and you will only have one executable. You should follow ROS C++ tutorial. The modification here will be instead of adding just one file to your node, you will need to have more than one files linked to the same node. For e.g.
add_executable(foo src/foo.cpp src/bar.cpp src/foo2.cpp)

Originally posted by nrparikh with karma: 16 on 2017-12-29
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by Hamza on 2017-12-30:
Thank you for your response , I test what you suggested and I got errors :
In file included from /home/hamza/catkin_ws/src/test/src/ROSMath.cpp:2:0:
/home/hamza/catkin_ws/devel/include/test/ROSMath.h:14:15: error: ‘test’ has not been declared
bool ROSadd(test::TwoInts::Request & req,
/home/hamza
Comment by PeteBlackerThe3rd on 2018-01-03:
Hi it looks like a code error somewhere. Can you post the source of ROSMath.cpp and ROSMath.h and we'll be able to help you get this fixed.
Comment by Hamza on 2018-01-08:
Thank you very much for your reply, I already manage to fix all errors.

