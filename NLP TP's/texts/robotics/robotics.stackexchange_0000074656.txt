Q:

What is the use of CATKIN_DEPENDS in catkin_package (CMakeLists.txt)?

CATKIN_DEPENDS parameter for the catkin_package function reads "a list of catkin projects which this project depends on".
Isn't this information already available in package.xml?

Originally posted by khatribharat on ROS Answers with karma: 23 on 2016-06-18
Post score: 2

A:

The catkin_package macro is specifically for building C++ code; the CATKIN_DEPENDS (and DEPENDS) parameters to it  specify the packages that are needed (via their include directories, flags, and libraries) for other packages to compile against this package.
There is some overlap with the dependencies listed in package.xml, but package.xml also includes dependencies for all languages, and run-time as well as build dependencies. The dependencies listed with CATKIN_DEPENDS are always a subset of these dependencies, but frequently are not everything that is listed in package.xml.

Originally posted by ahendrix with karma: 47576 on 2016-06-18
This answer was ACCEPTED on the original site
Post score: 4

Original comments
Comment by khatribharat on 2016-06-18:
B depends on A & C depends on B. B find_package-s, build_depend-s & run_depend-s A. C find_package-s, build_depend-s & run_depend-s B. Installing B gets B's runtime dependencies & find_package-ing B find_package-s A, so C gets A's headers & libraries as well. So B CATKIN_DEPEND-ing A isn't required.
Comment by ahendrix on 2016-06-18:
False. In the example that you give, if B provides a header that depends on a header in A, and C uses that header, C will fail to compile if B does not specify a CATKIN_DEPENDS on A. (particularly if building a three packages from source)
Comment by ahendrix on 2016-06-18:
C does not get A's headers and libraries included in the B_INCLUDE_DIRS and B_LIBRARIES unless B explicitly lists them in CATKIN_DEPENDS (most times this goes unnoticed if A and B are installed from binaries and their includes are installed in the same directory)
Comment by khatribharat on 2016-06-19:
@^ Can you update the answer with this example? This'll be really helpful for others who visit the page.
Comment by khatribharat on 2016-06-19:
@ahendrix One more question, dependencies tagged using <build_export_depend> in package.xml, and dependencies tagged using CATKIN_DEPENDS and DEPENDS in catkin_package in CMakeLists.txt would always be the same set, right? So including them just in package.xml should suffice.
Comment by ahendrix on 2016-06-20:
No. package.xml defines WHEN dependencies should be installed (which circumstances, such as build or run), and CMakeLists.txt and the catkin_package function define HOW to use those dependencies in C++. (catkin_package does not apply to Python, for example)
Comment by khatribharat on 2016-06-20:
Got the WHEN and HOW. I wanted to confirm that dependencies tagged with <build_export_depend> in package.xml, & dependencies tagged with CATKIN_DEPENDS, & DEPENDS in CMakelists.txt are the same set. Thought catkin could automatically populate CMakelists.txt with this info from package.xml
Comment by ahendrix on 2016-06-20:
Obviously you don't get it or you wouldn't still be trying to contradict my answer. catkin does not automatically populate any of that information in the CMakeLists.txt from the package.xml

