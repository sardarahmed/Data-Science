Q:

How to design a behavior tree with ROS1 framework

I am confused about how high level my behavior tree has to be. For example, if I want to create an autonomous robot that goes from point A to point, what would be a reasonable behavior tree?
For now, I think one of the first actions should be something like, loading parameter / configure nodes but I don't know if that's way lower level than the behavior tree is supposed to take care of.

A:

A behaviour tree in robotics is in most cases used instead of an application program. It already assumes a running robot and a set of behaviours which are available at programming time.
I am not sure if ROS supports an application program based programming model, like industrial robots. If yes, the behaviour tree would represent the application program and would not include any steps, which are infrastructure relevant (like node config). But this is only through analogy with the current behaviour tree use-cases, not a technical limitation.
Other use-cases can be found for behaviour trees, so there is no rule on how granular a behaviour tree "has to be" or what it "has to do". For sure it could include configuration steps also, it might also make sense, the only limitation is that the entity interpreting/executing the behaviour tree instance has to support the defined behaviour. This is the only technical limitation.

