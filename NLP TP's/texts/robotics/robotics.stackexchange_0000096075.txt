Q:

How to call spin_some or spin_until_future_complete in member functions

Hi together,
my coding style of ROS2 is to put all stuff into an object and member functions.
Now I wonder how to use spin_some or spin_until_future_complete inside a member function of my object?
I tried with this, but that doesn't work.
Here is how I create the object:
int main(int argc, char * argv[])
{
  rclcpp::init(argc, argv);
  rclcpp::spin(std::make_shared<myNode>());
  rclcpp::shutdown();
  return 0;
}

Example for a service call I want to make:
auto request = std::make_shared<std_srvs::srv::SetBool::Request>();
request->data = true;

auto result = client_->async_send_request(request);
 if (rclcpp::spin_until_future_complete(this, result) != rclcpp::executor::FutureReturnCode::SUCCESS)
{
  RCLCPP_ERROR(this->get_logger(), "Failed");
}

Originally posted by MrCheesecake on ROS Answers with karma: 272 on 2020-06-05
Post score: 4

A:

Ok, I did a little bit more of research and had a look into the node class reference here: http://docs.ros2.org/dashing/api/rclcpp/classrclcpp_1_1Node.html
I found the function get_node_base_interface() which is what spin_some and spin_until_future_complete need.
example:
auto request = std::make_shared<std_srvs::srv::SetBool::Request>();
request->data = true;

auto result = client_->async_send_request(request);
if (rclcpp::spin_until_future_complete(this->get_node_base_interface(), result) 
    != rclcpp::executor::FutureReturnCode::SUCCESS)
{
  RCLCPP_ERROR(this->get_logger(), "Failed");
}

Originally posted by MrCheesecake with karma: 272 on 2020-06-05
This answer was ACCEPTED on the original site
Post score: 8

Original comments
Comment by tnz on 2022-03-03:
Hello,
I recently ended up in a similar design pattern as your answer. Is there any downside to this approach?
Based on the references that I have it is not clear to me whether or not this is a safe pattern to use, or if there are unintended consequences of spinning a node from with in its own member function.
Comment by dottant on 2022-04-09:
It's ok, it returns a rclcpp::node_interfaces::NodeBaseInterface::SharedPtr needed by the spin_until_future_complete function. 
I'm using this solution without problems

