Q:

Architecture using `ur_modern_driver`

I'm building an architecture for my application and I'd like to know if the functionality represented in the ur_modern_driver part (image below) is correct. This is follow-up of action-completion.

I've put Joint velocities as by-default the driver publishes speedj commands.
Many thanks to @gvdhoorn and Thomas Timm in advance!

Originally posted by prajval10 on ROS Answers with karma: 92 on 2018-03-15
Post score: 0

A:

No, this is not correct.
ur_modern_driver only provides an action server.
Your node(s) is (are) the action client(s).

I've put Joint velocities as by-default the driver publishes speedj commands.

that is also not correct.
When not using ros_control, the driver uses servoj(..) in a small program that runs on the controller.
When using ros_control, it either uses speedj(..) when the velocity interface of the hw iface is used, or servoj(..) again for the position part.
The driver also doesn't publish anything to the controller. It's a regular TCP/IP connection over which a minimal, custom protocol is run.

Edit: it's a bit lame, but "read the source" is probably still good advice in this case: ThomasTimm/ur_modern_driver.
But as I wrote before: you might want to look into the Zagitta fork (PR#120).

Originally posted by gvdhoorn with karma: 86574 on 2018-03-15
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by prajval10 on 2018-03-15:
I'll change the Action client node. The action server takes robot parameters (robot IP, max payload, max velocity etc) from the ROS Param server, am I correct?
Comment by gvdhoorn on 2018-03-15:
Well, that depends a bit on how you interpret things: "the action server" is a small part of the driver node. Personally I would say that the driver reads ROS parameters from the parameter server. The action server is just one way to interact with the driver.

