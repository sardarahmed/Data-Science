Q:

Using message_filters::Synchronizer inside class

Hi all!
Thanks to @ravijoshi,I have solved this one topic receiving problem,the link about that is here #q406915
But when I try to receive two topics at the same time, I don't know how to put the function message_filters::Synchronizer in my class member. The code is shown below.
message_filters::Subscriber<sensor_msgs::Image> rgb_sub(mNh, "/camera/rgb/image_color", 1);
message_filters::Subscriber<sensor_msgs::Image> depth_sub(mNh, "/camera/depth/image", 1);
typedef message_filters::sync_policies::ApproximateTime<sensor_msgs::Image, sensor_msgs::Image> sync_pol;
message_filters::Synchronizer<sync_pol> sync(sync_pol(10), rgb_sub,depth_sub);
sync.registerCallback(boost::bind(&ClientHandler::GrabRGBD,this,_1,_2));

Does anyone know how to solve this problem?
Please help me, thank you so much!

Originally posted by Janebek on ROS Answers with karma: 5 on 2022-09-26
Post score: 0

Original comments
Comment by Janebek on 2022-09-26:
Hi @ravijoshi, can you please help me on this? Thank you so much!

A:

Generally, I would like to see some progress or efforts instead of answering directly because this is how we learn new things by exploring and trying. Anyway, below is the code which is extended from the previous answer. In order to test it, I used image and camera info. So please change the camera info to depth accordingly.
#include <message_filters/subscriber.h>
#include <message_filters/sync_policies/approximate_time.h>
#include <message_filters/synchronizer.h>
#include <ros/ros.h>
#include <sensor_msgs/CameraInfo.h>
#include <sensor_msgs/Image.h>

#include <memory>

using namespace sensor_msgs;
using namespace message_filters;

class ClientHandler
{
public:
  ClientHandler(ros::NodeHandle& nh, std::string& rgb_topic, std::string& cam_info_topic);
  void MyCallback(const ImageConstPtr& image, const CameraInfoConstPtr& cam_info);

private:
  using MySyncPolicy = sync_policies::ApproximateTime<Image, CameraInfo>;

  ros::NodeHandle _nh;
  message_filters::Subscriber<Image> _rgb_sub;
  message_filters::Subscriber<CameraInfo> _camera_info_sub;
  std::shared_ptr<message_filters::Synchronizer<MySyncPolicy> > _sync;
};

ClientHandler::ClientHandler(ros::NodeHandle& nh, std::string& rgb_topic, std::string& cam_info_topic) : _nh(nh)
{
  _rgb_sub.subscribe(_nh, rgb_topic, 1);
  _camera_info_sub.subscribe(_nh, cam_info_topic, 1);

  _sync = std::make_shared<message_filters::Synchronizer<MySyncPolicy> >(10);
  _sync->connectInput(_rgb_sub, _camera_info_sub);
  _sync->registerCallback(boost::bind(&ClientHandler::MyCallback, this, _1, _2));
}

void ClientHandler::MyCallback(const ImageConstPtr& image, const CameraInfoConstPtr& cam_info)
{
  ROS_INFO("Sequence: [%d] [%d]", image->header.seq, cam_info->header.seq);
}

int main(int argc, char** argv)
{
  ros::init(argc, argv, "image_listener");
  ros::NodeHandle n;

  std::string rgbTopic = "/usb_cam/image_raw";
  std::string camInfoTopic = "/usb_cam/camera_info";
  ClientHandler ClientHandler(n, rgbTopic, camInfoTopic);

  ros::spin();
  return 0;
}

I used the usb_cam package to publish my webcam and used the above node to subscribe, as shown below:
$ rosrun usb_cam usb_cam_node
$ rosrun beginner_tutorials listener_class_filter_sync 
[ INFO] [1664204780.217148024]: Sequence: [0] [368]
[ INFO] [1664204780.249005396]: Sequence: [1] [369]
[ INFO] [1664204780.280544030]: Sequence: [2] [370]
[ INFO] [1664204780.316463488]: Sequence: [3] [371]
[ INFO] [1664204780.348469919]: Sequence: [4] [372]
[ INFO] [1664204780.380547970]: Sequence: [5] [373]
[ INFO] [1664204780.416397331]: Sequence: [6] [374]
[ INFO] [1664204780.448968855]: Sequence: [7] [375]
[ INFO] [1664204780.484444885]: Sequence: [8] [376]
[ INFO] [1664204780.516418570]: Sequence: [9] [377]
[ INFO] [1664204780.548350255]: Sequence: [10] [378]

Originally posted by ravijoshi with karma: 1744 on 2022-09-26
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by Janebek on 2022-09-26:
Thank you so much! And thank you for you suggestion, I already changed the answer to a more specific and general way to present the solution!
Comment by ravijoshi on 2022-09-26:
I am glad you made it work.

