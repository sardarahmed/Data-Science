Q:

Specify the order in which nodes should start up in ROS2 launch file

Hi everyone,
I have a launch file which starts up my entire ROS2 application. This includes a planner node, a GUI node, a database node, and a vision node, amongst other things. What I observe most of the time is that even though my GUI node has started, I have to wait quite some time for the database node to come online. Is there a way I could specify the order in which the nodes should start?
I tried to edit the order in which I pushed them into the LaunchDescription object, but that did not really affect much.

I illustrate my problem with an example below:
 import os
 import yaml
 from launch import LaunchDescription
 from launch_ros.actions import Node
 from launch.actions import DeclareLaunchArgument
 from launch.substitutions import LaunchConfiguration, Command
 from launch.launch_description_sources import PythonLaunchDescriptionSource
 from ament_index_python.packages import get_package_share_directory
 from launch.launch_context import LaunchContext
 from typing import List

 def generate_launch_description():

    # Static TF (to emulate the TF between world and end-effector)
    static_tf = Node(package='tf2_ros',
                     executable='static_transform_publisher',
                     name='static_transform_publisher',
                     output='log',
                     arguments=['0.0', '0.0', '1.0', '1.57', '0.0', '0.0', 'world', 'link8'])

    # HMI node
    gui_node = Node(
                   package="my_awesome_application",
                   executable="ros2_hmi_node",
                   output="screen"
    )

     # database node
     db_node = Node(
                   package="my_awesome_db",
                   executable="ros2_db_node",
                   output="screen"
     )

     return LaunchDescription([static_tf, gui_node, db_node])

Let's say that I want my database node to start up first, and the GUI node should not start until the database is up and running. Do you guys have any idea on how/if I can enforce that in the launch file?
Thanks for the help!

Originally posted by sampreets3 on ROS Answers with karma: 230 on 2022-08-01
Post score: 1

A:

You can try using Licycle Nodes:

https://github.com/ros2/demos/blob/foxy/lifecycle/README.rst

Introduction
ROS2 introduces the concept of managed
nodes, also called LifecycleNodes. In
the following tutorial, we explain the
purpose of these nodes, what makes
them different from regular nodes and
how they comply to a lifecycle
management. Managed nodes are scoped
within a state machine of a finite
amount of states. These states can be
changed by invoking a transition id
which indicates the succeeding
consecutive state. The state machine
is implemented as described at the
ROS2 design page.
Our implementation differentiates
between Primary States and Transition
States. Primary States are supposed to
be steady states in which any node can
do the respected task. On the other
hand, Transition States are meant as
temporary intermediate states attached
to a transition. The result of these
intermediate states are used to
indicate whether a transition between
two primary states is considered
successful or not. Thus, any managed
node can be in one of the following
states:
Primary States (steady states):
unconfigured
inactive
active
shutdown

Transition States (intermediate
states):
configuring
activating
deactivating
cleaningup
shuttingdown

The possible transitions to invoke
are:
configure
activate
deactivate
cleanup
shutdown

https://design.ros2.org/articles/node_lifecycle.html (ROS2 Design for LN)

https://index.ros.org/p/lifecycle/github-ros2-demos/ (demo example)

https://www.youtube.com/watch?v=ikmTPO9GoJc (short video tutorial)

Originally posted by ljaniec with karma: 3064 on 2022-08-02
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by sampreets3 on 2022-08-02:
Hi, thanks for your answer. I am going to try using LifeCycle nodes to see if it makes my life easier. There is also something called event handlers which I found out yesterday that might help me achieve this. I am going to try out the two approaches and maybe come back in a couple weeks to let you guys know which one worked best for my use case.
Comment by ljaniec on 2022-08-02:
Yes, your feedback will be valuable for future readers for sure!
Comment by TinyTurtle on 2023-03-14:
@sampreets3: Did you have some luck using the event handlers to achieve your task
Comment by sampreets3 on 2023-03-15:
Hey @TinyTurtle, yes I did find a way to exactly what I wanted with event handlers. Since it's a part of the launch file, I only had to modify a very small section of my code.
Comment by TinyTurtle on 2023-03-16:
@sampreets3: Can you share an example launch file here please
Comment by sampreets3 on 2023-03-27:
Hey @TinyTurtle, here you go. I just prepared two very simple ROS2 nodes called simple_ros_node and another_ros_node, and used the following launch file:
from launch_ros.actions import Node
from launch import LaunchDescription
from launch.actions import LogInfo, RegisterEventHandler
from launch.event_handlers import OnProcessStart

def generate_launch_description():
    simple_node = Node(
          package='test_pkg',
          executable='simple_ros_node',
          output='both'
    ) 
    
    another_node = Node(
          package='test_pkg',
          executable='another_ros_node',
          output='both'
    ) 

return LaunchDescription(
      [simple_node, 
       RegisterEventHandler(
             OnProcessStart(
                     target_action=simple_node,
                     on_start=[LogInfo(msg="Started the simple node. "), 
                                     another_node]
             )
       )]
   )

