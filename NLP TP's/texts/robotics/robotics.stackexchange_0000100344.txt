Q:

Multiple Cmakelist.txt

I have a Cmakelist.txt that looks as follows in my project
cmake_minimum_required(VERSION 3.0.2)
project(softmanbot)
add_compile_options(-std=c++11)

find_package(catkin REQUIRED COMPONENTS roscpp rospy)
include_directories(SYSTEM ${Boost_INCLUDE_DIRS})
find_package(Boost REQUIRED COMPONENTS serialization)
catkin_package()

include_directories( ${catkin_INCLUDE_DIRS})

add_executable(softmanbot_supervisor_node
    common/genericSupervisor.cpp common/genericSupervisor.hpp common/genericLogic.hpp
    supervisor/specificSupervisor.cpp supervisor/specificSupervisor.hpp
    )

add_executable(softmanbot_genericDeformationControl_node 
    common/genericDeformationControl.cpp common/genericDeformationControl.hpp common/genericLogic.hpp   
    deformationControl/specificDeformationControl.cpp deformationControl/specificDeformationControl.hpp
    )

add_executable(softmanbot_genericSkilledWorkcell_node
    common/genericSkilledWorkcell.cpp common/genericSkilledWorkcell.hpp common/genericLogic.hpp
    skilledWorkcell/specificSkilledWorkcell.cpp skilledWorkcell/specificSkilledWorkcell.hpp 
    )

add_executable(softmanbot_genericPerception_node
    common/genericPerception.cpp common/genericPerception.hpp common/genericLogic.hpp
    perception/specificPerception.cpp perception/specificPerception.hpp
    )

target_link_libraries(softmanbot_supervisor_node
    ${catkin_LIBRARIES}
    ${Boost_LIBRARIES}
)

target_link_libraries(softmanbot_genericDeformationControl_node
   ${catkin_LIBRARIES}
   ${Boost_LIBRARIES}
)

target_include_directories(softmanbot_genericSkilledWorkcell_node PUBLIC ${EIGEN3_INCLUDE_DIRS})

target_link_libraries(softmanbot_genericSkilledWorkcell_node
   ${catkin_LIBRARIES}
   ${Boost_LIBRARIES}
)

target_link_libraries(softmanbot_genericPerception_node
   ${catkin_LIBRARIES}
   ${Boost_LIBRARIES}
)

Is this possible to split it in several Cmakelists.txt? I have project-requirement reasons to do this.
I'd like to have one by node, which have sources in different folders.
Anyone knows how to make so the main project Cmakelists act as a "orchestra chief" that just calls the other one so I can put specific includes in each nodes?

Originally posted by Vic on ROS Answers with karma: 71 on 2021-10-19
Post score: 0

A:

There has always been the include() command in CMake, so you can just do:
include(buildLibA.txt)
include(LibB/CMakeLists.txt)

Or, for the second case, add_subdirectory() would be better:
include(buildLibA.txt)
add_subdirectory(LibB)

Originally posted by KenYN with karma: 541 on 2021-10-19
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by Vic on 2021-10-20:
Will try that and accept answer if that works. Would also update files in a separate answer so someone with same problem can solve in the future

