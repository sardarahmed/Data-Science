Q:

How to compile/execute ROS with modified source code

Good afternoon,
I am in the process of creating a custom version of rosout. I have successfully followed the tutorial to install ros from source, and have a modified version of the rosout.cpp file. I am not sure how to integrate this into ros's prebuilt compiling mechanism "catkin_make_isolated".
What I have:

makefile(.ccp -> exe)
rosout.cpp
rosout.exe

What I need:
A way to permanently integrate the new rosout file into ros. I curretly have a workaround to test, but cannot figure out how to properly add my rosout file to roscore.
Is there a directory that I could just drop the rosout executable into? If I do that are there other variables that need to be set?
Thank you!
Edit: I can place the executable in ~/ros_catkin_ws/install_isolated/lib/rosout/ and everything works fine, but I am looking for the proper method of accomplishing this rather than a workaround. I am guessing there is a makefile/cmakefile but I cannot find the correct one.

Originally posted by corcorant on ROS Answers with karma: 67 on 2017-04-12
Post score: 0

Original comments
Comment by ahendrix on 2017-04-12:
You have rosout.exe? Are you using Windows?
Comment by corcorant on 2017-04-12:
No, ubuntu, I compiled rosout manually into a program file. This was a temporary solution for development.

A:

I figured out my problem, so I will update here for anyone who comes across this.
Since I was able to compile rosout.cpp into an executable, all I needed to do was replace the pre-existing rosout.exe with the version I modified and compliled. This file is located by default in opt/ros/indigo/lib/rosout(non-source ros). I didn't realize I had access to the exectables in non-source versions of ros, with this information I was able to complete my build.

Originally posted by corcorant with karma: 67 on 2017-04-26
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by spooner-dev on 2017-04-28:
A cleaner solution would be creating an overlay catkin workspace, building there core packages you need and sourcing its devel/setup.bash after the main distribution setup.bash

