Q:

Ros eats up RAM while recording rosbag remotely

I am running my ros application on a robot (arm) with limited RAM (1 GB).
I configured my robot as the rosmaster. The rosbag recording was happening on my local linux machine whoser Ros master was the robot.
Whenever I start my rosbag record, I can see that the available RAM space on my arm board shoots down eventually causing a bad alloc error.
I do not understand why invoking a subscriber (rosbag) on my local computer would consume RAM on the robot.
Any thoughts or pointers would be much appreciated.
This is a cross compiled ros kinetic version on QNX running within a realtime loop. The data to be sent over to the ros are written to a lock free ring buffer from which ros publisher running on a separate thread reads and publishes.

Originally posted by mhariharasudan on ROS Answers with karma: 70 on 2018-01-11
Post score: 2

A:

The ROS publisher has an outbound queue. If messages are published more quickly than they can be transferred over the network, the outbound queue will fill up until it starts dropping messages.
You can compute the rough amount of ram that the queue will use by multiplying the average message size by the queue size.
Note the publisher queues are per-subscriber, so if you have multiple subscribers you should budget for each subscriber separately.

Originally posted by ahendrix with karma: 47576 on 2018-01-12
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by mhariharasudan on 2018-01-12:
Wouldnt this queue size be fixed at compile time. If so, why would the RAM usage slowly spike up causing memory crash. This seems to be either memory leak or dynamic allocation.
Also, the RAM usage starts only when the rosbag record is run on the client machine.
Comment by gvdhoorn on 2018-01-12:\

Wouldnt this queue size be fixed at compile time.

no, it's configured upon publisher creation.

This seems to be either memory leak or dynamic allocation

it's dynamic allocation.

RAM usage starts only when the rosbag record is run on the client machine.

yes. That's when queueing starts.
Comment by mhariharasudan on 2018-01-12:
Does this mean that the messages published by the publishers are actually "published" only when there is a subscriber for them. I am more interested in understanding why the RAM usage dynamically increases at runtime and is not fixed at compile time.
Comment by mhariharasudan on 2018-01-12:
Even if it is dynamically allocated, they should be pre-allocated when the publishers are created and not when the execution starts?
Comment by ahendrix on 2018-01-12:
No. ROS does not do any pre-allocation of buffers.
Comment by ahendrix on 2018-01-12:
Since the number of subscribers is not known at compile time and buffers are per-subscriber, there's no way to know how many buffers to pre-allocate. Since the message size is not always known, there isn't enough information to know the buffer size to pre-allocate.
Comment by ahendrix on 2018-01-12:
If you want control over this type of feature, perhaps you should look at ROS2, which is based on DDS.

