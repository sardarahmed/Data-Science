Q:

Can I store the Subscriber object on the heap?

Hi,
I'd like to subscribe to topics dynamically.
This is a simplified version of my current solution:
class MyClass {
    std::vector<ros::Subscriber> rosSubscriberList;
    void doSubscribe() {
        ros::Subscriber sub = n.subscribe("chatter", 1000, &whatevercallback);
        rosSubscriberList.push_back(sub);
    }
}

Which works, but I was just wondering whether if it is safe to do this.
I believe the subscriber object gets copied to the vector, then gets destructed.
So for a short time there are two subscribers? Also, when the MyClass object gets destructed, does the subscriber in the list gets destructed too?
I was wondering if it would be better to have a vector of type
std::vector<ros::Subscriber*>

and handle object (subscriber) destruction manually. But then there is a copy in that solution too.
Which one would you suggest?

Originally posted by Gabor Juhasz on ROS Answers with karma: 13 on 2013-04-08
Post score: 0

A:

Yes, the rosSubscriberList will also be destroyed with the class and thus all its subscribers.
Using Subscriber* in the list would solve that, but:

You'll get some undestroyable pointers/memory leaks
You could use shared_ptr here in the list, but still you'd need to copy those out to somewhere.
Given the list belongs to the class intuitively I'd say that this is the behaviour you'd want. If not, maybe a redesign might be better suited.

Originally posted by dornhege with karma: 31395 on 2013-04-08
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by Gabor Juhasz on 2013-04-14:
Yes, that is the behavior I want.I want to clean up everything when my class gets destroyed. Thanks for explaining.

