Q:

how to access the msg in the subscriber callback in ros2 rclpy

Hello,
I am trying to run the following ros2 node. however, it seems that I cannot access the msg inside the callback function.
import rclpy
from rclpy.node import Node

import time
from std_msgs.msg import String

class MinimalSubscriber(Node):

    def __init__(self):
        super().__init__('minimal_subscriber')
        self.subscription = self.create_subscription(
            String,
            'topic',
            self.listener_callback,
            10)
        self.subscription  # prevent unused variable warning
        self.topub = 0

    def listener_callback(self, msg):
        self.topub = msg.data

    def printmsg (self):
        while True:
            self.get_logger().info('I heard: "%s"' % self.topub)
            time.sleep(0.5)

def main(args=None):
    rclpy.init(args=args)

    minimal_subscriber = MinimalSubscriber()
    minimal_subscriber.printmsg()

    rclpy.spin(minimal_subscriber)
    

if __name__ == '__main__':
    
    main()

if anyone has a clue, please help.
Thank you

Originally posted by ShehabAldeen on ROS Answers with karma: 97 on 2021-06-27
Post score: 0

Original comments
Comment by abhishek47 on 2021-06-27:
Have you tried ros2 topic echo to verify if publication is working as you expect?
Comment by gvdhoorn on 2021-06-28:\

def printmsg (self):

    while True:
        self.get_logger().info('I heard: "%s"' % self.topub)
        time.sleep(0.5)

when would printmsg(..) return?
Comment by ShehabAldeen on 2021-06-28:
Yes, the topic is published
Comment by ShehabAldeen on 2021-06-28:
actually I want to have acess to the msg subscribed within a loop.

A:

The problem you are running into is you are calling the minimal_subscriber.printmsg() function which sits in an infinite loop and you haven't started spinning the node to let the callbacks start receiving messages.
What you are trying to do is probably better done with a rclpy Timer. Here is a python example of one being used. Just pass your desired frequency to the timer constructor (which seems to be 2 for you, since you sleep for half a second), remove the while loop inside your printmsgfunction, and remove the call in the main function.
Spin should block so your program won't exit, and it should print the value of self.topub every half second.

Originally posted by 404RobotNotFound with karma: 331 on 2021-07-04
This answer was ACCEPTED on the original site
Post score: 3

