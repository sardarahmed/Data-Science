Q:

tf_prefix in fake_localization and move_base

I've been examining a strange issue with multiple robots in stage and move_base. Move_base and costmap2D use tf::resolve with tf_prefix to resolve global frames. However fake_localization does not - this leads to the message:
Waiting on transform from robot_0/base_link to robot_0/map to become available before running costmap, tf error:

A few people have had trouble with this. I have examined fake_localization and I believe the following lines (as done in costmap_2d_ros.cpp) need to be added:
// get our tf prefix
ros::NodeHandle prefix_nh;
std::string tf_prefix = tf::getPrefixParam(prefix_nh);
global_frame_id_ = tf::resolve(tf_prefix, global_frame_id_);
base_frame_id_ = tf::resolve(tf_prefix, base_frame_id_);
odom_frame_id_ = tf::resolve(tf_prefix, odom_frame_id_);

Furthermore I had another problem in move_base. tf_prefix is resolved too many times in the Costmap2D and NavFN. Here is the exact situation in navfn_ros.cpp::makePlan()
ros::NodeHandle n;
costmap_2d::Costmap2D* costmap = costmap_ros_->getCostmap();
std::string global_frame = costmap_ros_->getGlobalFrameID();

//until tf can handle transforming things that are way in the past... we'll require the goal to be in our global frame
if(tf::resolve(tf_prefix_, goal.header.frame_id) != tf::resolve(tf_prefix_, global_frame)){
  ROS_ERROR("The goal pose passed to this planner must be in the %s frame.  It is instead in the %s frame.", tf::resolve(tf_prefix_, global_frame).c_str(), tf::resolve(tf_prefix_, goal.header.frame_id).c_str());
  return false;
}

if(tf::resolve(tf_prefix_, start.header.frame_id) != tf::resolve(tf_prefix_, global_frame)){
  ROS_ERROR("The start pose passed to this planner must be in the %s frame.  It is instead in the %s frame.", tf::resolve(tf_prefix_, global_frame).c_str(), tf::resolve(tf_prefix_, start.header.frame_id).c_str());
  return false;
}

What happens is that global_frame has already been resolved (removed preceding slash) inside the Costmap2D class. Now we resolve again, and since the slash is gone it appends the prefix. Thus we get /robot_0/robot_0/map I do not have a solution for this as I expect that this might be done on purpose?
Are there any thoughts on the problems presented here and a possible solution to the over resolving? Thanks!

Here's an example launch file for one robot of a multi robot stage sim. Note that under fake_localization I can adjust the global_frame_id via parameter. However, this is a hacky fix.
<launch>
  <!-- BEGIN ROBOT 0 -->
  <group ns="robot_0">
    <param name="tf_prefix" value="robot_0"/>
    
    <arg name="map_file" default="$(find some_path)/launch/move_base_config/cost_map.yaml"/>
    <node pkg="map_server" type="map_server" name="map_server" args="$(arg map_file)">
        <param name="frame_id" value="map"/>
    </node>
    
    <node pkg="fake_localization" type="fake_localization" name="fake_localization" respawn="false" output="screen">
        Uncomment here for success - without making above changes
      <!--param name="global_frame_id" value="/robot_0/map"/-->
       <param name="global_frame_id" value="map" /> Need this to be in a relative frame
    </node>
   
    <node pkg="move_base" type="move_base" respawn="false" name="move_base_node" output="screen">
      <param name="controller_frequency" value="10.0"/>
      <param name="recovery_behavior_enabled" value="true"/>
      <param name="oscillation_timeout" value="5.0"/>
      <param name="oscillation_distance" value="1.0"/>
      <rosparam file="$(find some_path)/launch/move_base_config/costmap_common_params.yaml" command="load" ns="global_costmap"  />
      <rosparam file="$(find some_path)/launch/move_base_config/costmap_common_params.yaml" command="load" ns="local_costmap"  />
      <rosparam file="$(find some_path)/launch/move_base_config/global_costmap_params.yaml" command="load" />
      <rosparam file="$(find some_path)/launch/move_base_config/local_costmap_params.yaml" command="load" />
      <rosparam file="$(find some_path)/launch/move_base_config/base_global_planner_params.yaml" command="load" ns="NavfnROS" />
    </node>
  </group>
</launch>

Originally posted by Constantin S on ROS Answers with karma: 296 on 2014-01-29
Post score: 1

A:

As far as I'm aware, tf_prefix isn't supported any more, and has been removed or deprecated in tf2.
From what I understand, most packages (something like 80-90%) didn't use it, and of the packages that did try to use it, most of the didn't use it correctly, so it was dropped.

Originally posted by ahendrix with karma: 47576 on 2014-01-29
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by Constantin S on 2014-01-30:
Well that's good to know - is this documented anywhere? Also what's the new approach for having multiple robots in stage with move_base? Also while deprecated, it still seems to be used in the navigation_stack.
Comment by 130s on 2015-06-29:
For the change in tf2, it's documented in the migration doc.

