Q:

pcl::io module not working on Indigo

Hello all;
I have a previous question opened in the forum related to the same topic, using the same system based on Ubuntu 14.04 x64 + Ros Indigo.
http://answers.ros.org/question/211532/problems-linking-pclio-in-ros-indigo/
Writting another different node, I have the same problem with the pcl function: pcl::io::loadPolygonFileSTL
PCL forums give a clue saying that:
#include <pcl/io/pcd_io.h>

must be substituted by:
#include <pcl/io/vtk_lib_io.h>

In the first case I obtain:
/home/alberto/indigo_catkin_ws/src/miror_referencing/src/miror_referencing_match.cpp:62:2: error: ‘loadPolygonFileSTL’ is not a member of ‘pcl::io’
  pcl::io::loadPolygonFileSTL(Path, *stl_mesh);

While in the second:
//usr/lib/libpq.so.5: undefined reference to `SSL_get_peer_certificate@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `CRYPTO_num_locks@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `SSL_CTX_use_certificate_chain_file@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `SSL_use_certificate_file@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `ENGINE_free@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `OPENSSL_config@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `SSL_get_error@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `SSL_use_PrivateKey_file@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `X509_STORE_load_locations@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `SSL_set_ex_data@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `SSL_read@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `X509_STORE_set_flags@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `SSLv23_method@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `ENGINE_load_private_key@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `X509_get_subject_name@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `CRYPTO_set_id_callback@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `SSL_CTX_new@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `SSL_CTX_get_cert_store@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `SSL_check_private_key@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `ENGINE_by_id@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `ERR_get_error@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `CRYPTO_set_locking_callback@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `SSL_load_error_strings@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `SSL_new@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `X509_NAME_get_text_by_NID@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `SSL_write@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `X509_free@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `SSL_CTX_load_verify_locations@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `SSL_free@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `SSL_ctrl@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `SSL_set_verify@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `ENGINE_init@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `SSL_set_fd@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `SSL_connect@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `ERR_reason_error_string@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `SSL_CTX_ctrl@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `SSL_pending@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `SSL_use_PrivateKey@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `ENGINE_finish@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `SSL_library_init@OPENSSL_1.0.0'
//usr/lib/libpq.so.5: undefined reference to `SSL_shutdown@OPENSSL_1.0.0'

CmakeLists.txt and package.xml are correct. I paste them also:
cmake_minimum_required(VERSION 2.8.3)
project(miror_referencing)

find_package(catkin REQUIRED COMPONENTS
        roscpp
        roslib
        std_msgs
        sensor_msgs
        geometry_msgs
    message_generation
)
find_package(Boost REQUIRED COMPONENTS system)
find_package(PCL REQUIRED)

add_message_files(
   FILES
   SmartRay.msg
 )

add_service_files(
   FILES
   PerformReferencing.srv
  )

generate_messages(
   DEPENDENCIES
   geometry_msgs
   std_msgs
 )

catkin_package(
  CATKIN_DEPENDS roscpp roslib std_msgs geometry_msgs sensor_msgs message_runtime
)

include_directories(
    include 
  ${catkin_INCLUDE_DIRS}
  #${EIGEN_INCLUDE_DIRS}
  ${PCL_INCLUDE_DIRS}
)

add_executable(miror_generate_referencing_pointcloud src/miror_generate_referencing_pointcloud.cpp)
add_executable(miror_referencing_match src/miror_referencing_match.cpp)

add_dependencies(miror_generate_referencing_pointcloud miror_referencing_generate_messages_cpp)
add_dependencies(miror_referencing_match miror_referencing_generate_messages_cpp)

target_link_libraries(miror_generate_referencing_pointcloud ${catkin_LIBRARIES} ${PCL_LIBRARIES})
target_link_libraries(miror_referencing_match ${catkin_LIBRARIES} ${PCL_LIBRARIES})

and package.xml:
<?xml version="1.0"?>
<package>
  <name>miror_referencing</name>
  <version>0.0.0</version>
  <description>The miror_referencing package</description>
  <maintainer email="alberto@todo.todo">alberto</maintainer>
  <license>TODO</license>
  
  <buildtool_depend>catkin</buildtool_depend>
  
  <build_depend>roscpp</build_depend>
  <build_depend>roslib</build_depend>
  <build_depend>std_msgs</build_depend>
  <build_depend>geometry_msgs</build_depend>
  <build_depend>sensor_msgs</build_depend>
  <build_depend>message_generation</build_depend>
  
  <run_depend>roscpp</run_depend>
  <run_depend>roslib</run_depend>
  <run_depend>std_msgs</run_depend>
  <run_depend>geometry_msgs</run_depend>
  <run_depend>sensor_msgs</run_depend>
  <run_depend>message_runtime</run_depend>
 
  <export>
  </export>
</package>

No one is having the same issues with PCL and Indigo?
Is this a known bug, or something to be fixed?
I need a quite an urgent solution for this problem appearing in different nodes and projects....
Any help will be highly appreciated !
Best regards,
Alberto

Originally posted by altella on ROS Answers with karma: 149 on 2015-06-23
Post score: 0

A:

Your example seems to work fine for me with a test pcd file that I downloaded off of the internet. Here is a gist that you can use for testing. If the node that comes from my package runs okay on your machine, then that points to there being something strange about your specific pcd file. If it doesn't run on your machine, then there is likely something wrong with your install of PCL.
For reference, all of my packages are up-to-date binaries from the standard repos. Versions:

ros-indigo-pcl-conversions  ~ 0.2.1-0trusty-20150608-1600-+0000 amd64
ros-indigo-pcl-msgs         ~ 0.2.0-0trusty-20150522-1310-+0000 amd64
ros-indigo-pcl-ros          ~ 1.2.7-0trusty-20150608-1607-+0000 amd64
ros-indigo-desktop-full     ~ 1.1.4-0trusty-20150611-0640-+0000 amd64
libpcl-1.7-all              ~ 1.7.1-3+trusty2 all
libpcl-1.7-all-dev          ~ 1.7.1-3+trusty2 all
libpcl-1.7-bin              ~ 1.7.1-3+trusty2 amd64

Originally posted by jarvisschultz with karma: 9031 on 2015-06-24
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by altella on 2015-06-29:
The problem comes from pcl::io linking to libpq, and libpq linking to libssl.
Working examples  link to /lib/x86_64-linux-gnu/libssl.so.1.0.0, but when adding Halcon library, this library has its own version of libssl.
How can I make in CMakeLists to link to the original libssl library?

