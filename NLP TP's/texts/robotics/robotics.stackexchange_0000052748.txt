Q:

Qtcreator with Catkin

I've been using Qtcreator for a long time with rosbuild packages, where it puts the executables in the package/bin/ directory just like rosmake. Using Qtcreator with catkin packages, I can edit and compile the code just fine, but since the binaries aren't put in the catkin_workspace/devel/ path, I still have to run catkin_make by hand for the binaries to be usable. Is there a solution to this that lets Qtcreator put the libraries and executables in the correct location?

Originally posted by Calder on ROS Answers with karma: 161 on 2013-07-12
Post score: 5

Original comments
Comment by William on 2013-07-12:
In catkin we support out of source builds, which is something that QtCreator usually does by default. Why do you think that the bin and lib folders need to be in the package directory?
Comment by Calder on 2013-07-12:
I didn't say that - I'm well aware that catkin puts them outside the package directory. As I noted, the problem is that qtcreator is putting them in the wrong place relative to where catkin_make puts them, which means that the executables aren't used properly.
Comment by William on 2013-07-12:
I see what you are asking now.

A:

The problem is that caktin_make calls cmake with -DCATKIN_DEVEL_PREFIX=/path/to/catkin_workspace/devel, but QtCreator is just calling cmake without any arguments. This causes catkin to place the develspace in the default location which is inside the build folder. You can probably add arguments to cmake in the QtCreator settings somewhere.
What I would do is build your workspace once with catkin_make, then open the CMakeLists.txt in the src folder with QtCreator and point QtCreator to the build folder created by catkin_make, then it should inherit all of the CMake settings catkin_make passed along.

Originally posted by William with karma: 17335 on 2013-07-12
This answer was ACCEPTED on the original site
Post score: 9

Original comments
Comment by Calder on 2013-07-12:
That solves the problem. It's not the prettiest solution to put all the packages in one Qtcreator project, but I guess it fits the usage model of catkin better.
Comment by William on 2013-07-12:
I think you can also point QtCreator to the CMakeLists.txt for a single package and then point it at the build/package_name folder for the build space, but I am not sure if that will work.
Comment by Calder on 2013-07-12:
I believe I've tried that, and it doesn't work. Qtcreator ends up making a miniature copy of the devel/ directory structure inside build/package_name directory.
Comment by Augusto Luis Ballardini on 2017-04-12:
I solved the problem by adding CMAKE_PREFIX_PATH + CATKIN_INSTALL_PREFIX + CATKIN_DEVEL_PREFIX inside the "Cmake Configuration" of the QtCreator KIT. Please note that i initially wrote the cmake-prefix using the standard "linux" colon (:) punctuation mark to separate the folders like /pathA:/pathB
Comment by Augusto Luis Ballardini on 2017-04-12:
but inside the QtCreator you need to separate the two paths using the semi-colon ... imho there's a little mess there, since the Cmake path prefix loaded from the environment have the (:) ... maybe this is the reason why it does not automagically works ? CMAKE_PREFIX_PATH is also set in the env

