Q:

How to pass service parameters in ROSLib.js

According to the ROSLib.js documentation I did this class
import { Ros, Param, Message, Topic, Service, ServiceRequest } from "roslib";

export default class ROSInterface {
  constructor() {
    this.ros = new Ros({
      url: "ws://localhost:9090",
    });
  }
  createService(service_name, service_type) {
    const service = new Service({
      ros: this.ros,
      name: service_name,
      serviceType: service_type,
    });

    return service;
  }

  callService(service_name, service_type, params) {
    const service = this.createService(service_name, service_type);
    const request = new ServiceRequest(params);
    service.callService(request, function (result) {
      return result;
    });
  }
}

But I'm confused how can I pass a complex parameters to my service!
My Service looks like this:
geometry_msgs/Point pick
geometry_msgs/Point place
std_msgs/UInt16 speed
std_msgs/Bool arm

I have tried let params = {pick:{x:0.1,y:0.2,z:0.3}, place:{x:-0.1,y:-0.2,z:-0.3},speed: 200, arm: 1} and it didn't work! can you please tell me how can I form my params variabile properly to make my service works well? thanks in advance.

Originally posted by bhomaidan on ROS Answers with karma: 114 on 2022-11-24
Post score: 0

Original comments
Comment by Ranjit Kathiriya on 2022-11-24:
Can you add service_name and service_type to this? What are you passing
Comment by bhomaidan on 2022-11-24:
@RanjitKathiriya that is straight forward const service_name = "/pick_place"; const service_type = "my_interface/PickPlace";

A:

The solution is:

Simpler ROS Message representation:
 geometry_msgs/Point pick
 geometry_msgs/Point place
 int16 speed
 bool arm
 ---
 bool success

Function Name different from callService to remove ambiguity, for example: callService_:
  import { Ros, Param, Message, Topic, Service, ServiceRequest } from "roslib";

  export default class ROSInterface {

    constructor() {

      this.ros = new Ros({
        url: "ws://localhost:9090",
      });
    }

    createService=(service_name, service_type) =>{
      let service = new Service({
        ros: this.ros,
        name: service_name,
        serviceType: service_type,
      });
      return service;
    }

   requestService=(params) =>{
      let request = new ServiceRequest(params);
      return request;
    }

    callService_ = (service_name, service_type, params) => {
      const srv = this.createService(service_name, service_type);
      const req = this.requestService(params);
      srv.callService(
        req,
        (result) => {
          console.log(result);
        },
        (error) => {
          console.log(error);
        }
      );
     }
  }

Finally the parameters can be passed as object with children objects:
 const params_ = {
 pick: {x: 1, y: 2, z: 3},
 place: {x: -1, y: -2, z: -3},
 speed: 10,
 arm: false,
 };
 ROSInterface.callService_(service_name, service_type, params_);

Originally posted by bhomaidan with karma: 114 on 2022-11-30
This answer was ACCEPTED on the original site
Post score: 0

