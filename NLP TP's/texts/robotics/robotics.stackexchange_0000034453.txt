Q:

How to link a nodelet to external libraries?

I'm trying to use a nodelet with an external library. But when running the nodelet, it obviously complaints that it can't find some symbol which is in this external library.
I can link the regular node the library without problems. However, when I use the nodelet version, it complains. I'm certain that I'm not linking the nodelet to the library. I don't know how to.
If you know how to link a nodelet to an external library, please share your know-how-to.
The proposed SOLUTION in CMakeLists.txt relevant piece looks like the following:
set(MVIMPACT_LIBRARIES   mvDeviceManager)

# Nodelet:  
rosbuild_add_library(mv_bluefox_driver_nodelet src/nodelets.cpp src/camera.cpp) 
# Linking the nodelet to the mvDeviceManager library
target_link_libraries(mv_bluefox_driver_nodelet ${MVIMPACT_LIBRARIES})  

# Regular Node:
rosbuild_add_executable(camera_node src/camera_node.cpp src/camera.cpp)
target_link_libraries(camera_node ${MVIMPACT_LIBRARIES})

Originally posted by ubuntuslave on ROS Answers with karma: 347 on 2011-09-23
Post score: 1

Original comments
Comment by ubuntuslave on 2011-09-25:
Runtime problem with the error pointing at some function (DMR_Init) from the external library as:  symbol lookup error: /DIR_TO_MY_PACKAGE/mv_bluefox_driver/lib/libmv_bluefox_driver_nodelet.so: undefined symbol: DMR_Init
Comment by Daniel Stonier on 2011-09-24:
Compile time problem or runtime problem?
Comment by joq on 2011-09-24:
Please show snippets of your CMakeLists.txt for both the node and the nodelet versions. That should help diagnose your problem.

A:

target_link_libraries(mv_bluefox_driver_nodelet ${MVIMPACT_LIBRARIES})

The nodelet is basically a library with some programming voodoo that tells the nodelet manager which class to instantiate.
The target_link_libraries command links libraries against the binary that you name in its first argument. You already did it for the camera_node executable, and it works the same way for the mv_bluefox_driver_nodelet library.

Originally posted by roehling with karma: 1951 on 2011-09-26
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by ubuntuslave on 2011-09-26:
Thanks, this was the solution.
Comment by Hendrik Wiese on 2018-01-15:
Does this work with statically linked 3rd party libraries? Like, libs of which I only have a .a and a .hpp? If not, what else can I do to achieve that linkage?
Comment by roehling on 2018-05-04:
It will probably work for x86_64, but not for i386, because static 32 bit libraries are usually not compiled with -fPIC for position independent code.

