Q:

Force Rebuild of Base Package

All, I want to add some debug statements to fake_localization for some tests. I can't get  the build system to build it. This is very aggravating:

Adjust $ROS_PACKAGE_PATH to hold my packages first
roscd fake_localization moves me to my local sources
rosmake complains about ROS_NOBUILD
find  /opt/ros -iname '*ROS_NOBUILD*' returns nothing
find /home/me/workspace/navigation -iname '*ROS_NOBUILD*' returns nothing

There is no ROS_NOBUILD in my directory. There is no documentation explaining where this ROS_NOBUILD is coming. I am having trouble finding documentation on how to remove supplied packages from the original installation due to the this strange organization of ../share and ../include and ../bin folders in ros root.

I managed to build it, it was a catkin issue. However, to setup an entire workspace for catkin builds and move all my projects into a src folder is redundant to me. My solution:
roscd fake_localization
mkdir build
cd build
cmake ..
make

Finally you need to move the executable out of the build directory otherwise rosrun will not find it...
cp devel/lib/fake_localization/fake_localization ..

or
cmake -DCMAKE_INSTALL_PREFIX=../bin ..
make install

But the second option adds all these bloated scripts in the bin directory. (But rosrun will find it).

Originally posted by Constantin S on ROS Answers with karma: 296 on 2014-01-28
Post score: 0

Original comments
Comment by joq on 2014-01-28:
What version of ROS are you using?
Comment by Constantin S on 2014-01-28:
Hydro - I managed to build it - this was a catkin issue.

A:

In Hydro fake_localization is not a rosbuild package so rosmake isn't going to work.
The "strange" organization of ../bin, ../include and ../share is called FHS:
http://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard
And is the recommended way of installing files in linux.

But the second option adds all these bloated scripts in the bin directory.

You shouldn't set your CMAKE_INSTALL_PREFIX to a bin folder.
The bloated scripts you are referring to are there to help you extend your environment by running source path/to/bloated/scripts/setup.bash you will have that path extended on to your PATH, PYTHONPATH, CMAKE_PREFIX_PATH, PKG_CONFIG_PATH, etc... However, if you do not want to use them, simply pass -DCATKIN_BUILD_BINARY_PACKAGE="1" to cmake and catkin will not generate them. They are on by default because most people find them useful.

Finally you need to move the executable out of the build directory for who knows why ...

You don't need to move anything. You can either set the CMAKE_INSTALL_PREFIX to something already on your path, like /usr or /usr/local, or you can source the resulting setup.bash file, e.g. source devel/setup.bash.

However, to setup an entire workspace for catkin builds and move all my sources in a weird hierarchy is completely unacceptable to me.

So, what weird hierarchy are you referring to, the default suggestion to put source code under the src folder? If you do not want to do that you can organize your code how ever you like. If you can you describe to me how you like your source to be setup and then I can probably tell you how to build them in that layout.
In the simplest form you can just source whatever workspace you have navigation in, i.e. source /opt/ros/hydro/setup.bash or source /home/me/workspace/navigation/.../setup.bash. And then build fake_localization as if it were a normal CMake project:
source /opt/ros/hydro/setup.bash
cd /path/to/fake_localization_source
mkdir build
cd build
cmake .. -DCMAKE_INSTALL_PREFIX=./install
make
make install
source ./install/setup.bash
rosrun ...

I have found catkin to be quite conventional and that it imposes very few requirements on your workflow, but that's just my opinion. I hope this answer helps you with your problems and allows you to use catkin however you like.

Originally posted by William with karma: 17335 on 2014-01-28
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by Constantin S on 2014-01-28:
I appreciate the answer, it's very indepth. What is the point of the new shell scripts? Is the old standard of setting your ROS_PACKAGE_PATH in the .bashrc not necessary anymore? My typical workflow - as I work on tons of projects - is to have a workspace/[project] folder with 'src' and include folders. Now I need a workspace/src/project/src folder? That is my frustration with a "catkin" workspace. I don't see the advantages of catkin over rosbuild - which was a great system.
Comment by Constantin S on 2014-01-28:
Also where is the documentation for this magical CATKIN_BUILD_BINARY_PACKAGE ... Here's your documentation: http://docs.ros.org/api/catkin/html/user_guide/variables.html
Comment by William on 2014-01-28:
The shell scripts are created for each "devel" or "install" space. The scripts do two things, firs they add their space to the important ROS agnostic environment variables like PATH, PYTHONPATH, etc... rosbuild never set these, which is why tools like rosrun are necessary and it is why all python scripts had to start with import roslib; roslib.load_manifest('pkg_name'). The other thing they do is allow packages to add environment hooks, through these hooks things like ROS_PACKAGE_PATH, ROS_DISTRO and other things can be set. So sourcing them is important and that's why they are on by default. That is also why the CATKIN_BUILD_BINARY_PACKAGE is not very well documented, because it is basically only used for building binary packages where those files aren't needed for each binary package.
Comment by William on 2014-01-28:
I'm not going to go into every reason we decided to use catkin instead of rosbuild, and so all I will say is that we recommend you setup catkin workspaces this way for good reasons and I recommend you do that. If you still want to use rosbuild for your packages and do not care about releasing them, then that's fine too.
Comment by Constantin S on 2014-01-28:
William, thank you for the responses. They are very enlightening. I have every intention to use catkin as expected/suggested in my upcoming projects. My final question is, in the catkin workspace does the folder have to be called "src"? TIA
Comment by William on 2014-01-28:
No, you can specify the source space to the catkin_make_* family of tools using the --source option. If you are building your catkin workspace using just cmake (no special tools) then a workspace is simply any folder where you have called catkin_init_workspace (which symbolically links a boiler plate CMakeLists.txt to the current directory). The boiler plate CMakeLists.txt basically finds all the packages below it, and calls CMake's add_subdir on each of them.
Comment by Constantin S on 2014-01-29:
William, I have been playing around with catkin today using the navigation stack source. I can not for the life of me get it to run my fake_localization. roslaunch and rosrun complain about not being able to find my new fake_localization. I can't source the setup.bash in devel because it overwrites my ros path. I need that to remain the same as I have older rosbuild packages that need to be run from a launch file.
Comment by Constantin S on 2014-01-29:
What environment variables do I need to set so rosrun finds the binary in devel/lib ? Thanks in advance!
Comment by Constantin S on 2014-01-29:
Found it CMAKE_PREFIX_PATH
Comment by William on 2014-01-29:
You can also set your ROS_PACKAGE_PATH after source'ing the setup.bash.
Comment by William on 2014-01-29:
You have to source rosws setup files or append paths to ROS_PACKAGE_PATH after source'ing catkin setup.bash files because rosbuild always has to go on top of catkin packages. catkin setup.bash files set the environment rather than extending it to prevent linking and overlaying problems. You can also send the --extend argument to setup.bash when sourcing it to prevent it from overwriting the ROS_PACKAGE_PATH.
Comment by William on 2014-01-29:
But the --extend option can be problematic if used incorrectly.
Comment by Constantin S on 2014-01-29:
William, thanks for the information. I think I'll adjust my bashrc to sourcing my catkin workspace and adjust my ROS_PACKAGE_PATH there so it can find my "dry" packages? Is this approach more inline with the new build system?
Comment by William on 2014-01-29:
Yup, that would be the recommended way to build dry (rosbuild) packages on top of catkin packages.

