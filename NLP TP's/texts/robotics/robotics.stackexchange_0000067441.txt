Q:

Align endeffector of robot with vector

Hi!
as it says in the header I want to align my endeffector with a vector in space. In my case the z-axis of the EE should be aligned with the vector. This means that the x-, and y-axis are not specified.
Right now I only manage to navigate the EE to a certain pose where the x-, y-, and z-axis are all determined. But sometimes the robot cannot reach this pose due to collisions or being out of reach. A simple turn around the z-axis would do the trick that the pose can be reached and still the goal "aligning with the vector" is achieved.
My question: Is there an implementation in ROS or particularly in Moveit to automatically solve this?
Best regards!
Edit:
My approach right now is to calculate the path to the target with angles from -180째 till +180째 in steps of 10째 (All of them fullfill the requirement of alignment with the vector, but not all of them are possible for the robot). After that I know which angels are possible and can choose. But this takes some minutes as I have to set up the planner each time.
So again the question: I'm looking for a way to this faster. And maybe there is an implementation? For example constraints for the target pose or something?

Originally posted by bluefish on ROS Answers with karma: 236 on 2015-05-07
Post score: 2

Original comments
Comment by HannesIII on 2017-02-03:
Hey bluefish,
I know the questin is rather old, but could you tell me a bit of how you managed it to align your end-effector with a given vector?
I tried to getRPY->CurrentVector (using sin, cos) ->
create quaternion between CurrentVector <> given goal vector.
Failed due to wrong current vector...

A:

Perhaps you can use the goal tolerance part of the planning request for this. See MotionPlanRequest: Setting up a Pose Request - Define a tolerance on the MoveIt wiki.

Edit:

Hi, thanks for your answer! This solution really seems to be interesting. However the C++API described here seems to different to the one described on the moveit-c++-tutorial.

Can I use them side by side? Using the move-group-interface there I can just find the command group.setGoalTolerance(0.001), which sets both angle and position tolerance at the same time, I think

Oh! No I was wrong! There is also group.setGoalOrientationTolerance(). But there I can't limit the tolerance to one angle around an axis, can I?

The page I linked is a bit more low-level. The page you linked describes using moveit_msgs::OrientationConstraint, but as far as I know such a constraint will influence planning of the whole trajectory, not just the state at the end. The methods you mention don't seem to support what you want. From the moveit::planning_interface::MoveGroup::setGoalTolerance docs:

Set the tolerance that is used for reaching the goal. For joint state goals, this will be distance for each joint, in the configuration space (radians or meters depending on joint type). For pose goals this will be the radius of a sphere where the end-effector must reach. [..]

I don't think this can then be used to express a rotational tolerance around a single axis.

Perhaps you could use the Descartes planner from ROS-Industrial for your use case. Afaiu that does support 'toleranced frames', which could be used to indicate a "don't care" for orientation along a particular axis. See wiki/descartes_trajectory - AxialSymmetricPt.

Originally posted by gvdhoorn with karma: 86574 on 2015-05-08
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by bluefish on 2015-05-08:
Hi, thanks for your answer! This solution really seems to be interesting. However the C++API described here seems to different to the one described on the moveit-c++-tutorial.
Comment by bluefish on 2015-05-08:
Can I use them side by side? Using the move-group-interface there I can just find the command group.setGoalTolerance(0.001);, which sets both angle and position tolerance at the same time, I think
Comment by bluefish on 2015-05-08:
Oh! No I was wrong! There is also group.setGoalOrientationTolerance();. But there I can't limit the tolerance to one angle around an axis, can I?
Comment by bluefish on 2015-05-11:
that sounds really like what I'm looking for. I'll try it and will report :)
Comment by bluefish on 2015-05-20:
Hi! I didn't manage to set up the descartes package. However, I came up with another solution. Again I turn around the axis in steps of 10째. But this time I use the InverseKinematik. This takes only 1 or 2 seconds and perfectly suits for my implementation. Thanks for your support!!
Comment by gvdhoorn on 2015-05-20:
Ok. Did you encounter specific difficulties getting it to work? It would be very valuable if you could report those then.
Comment by bluefish on 2015-05-21:
I stated my problem here. However, I didn't try to hard to solve it, as I found another convenient solution for my problem regarding aligning with the vector. Anyway thanks again @gvdhoorn for help on all channels!!

