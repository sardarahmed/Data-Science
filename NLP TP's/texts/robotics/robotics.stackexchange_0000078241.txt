Q:

Recursive mimic joint?

It seems that the joint_state_publisher is not able to mimic another mimic joint.
Traceback (most recent call last):
File "/usr/lib/python2.7/threading.py", line 801, in __bootstrap_inner self.run()
File "/usr/lib/python2.7/threading.py", line 754, in run self.__target(*self.__args, **self.__kwargs)
File "/opt/ros/kinetic/lib/joint_state_publisher/joint_state_publisher", line 212, in loop joint = self.free_joints[parent]
KeyError: u'<recursive_joint_name>'

The problem is addressable to the clear distinction between free and dependent joints, i.e. if a joint is dependent, it cannot be taken as reference for anyone else.
I see that this is not a real problem as I can mimic the base joint with the proper reduction multiplier. Nonetheless it becomes annoying with a long chain and it also could be not very intuitive at first glance.
I think that the best solution is to implement this workaround without creating an extra non-free-but-neither-only-dependent category which could only mess up with the code.
I also think that I'm going to create a pull request in the following days, have you got any suggestions?

EDIT:
Here is (possible?) simple modification of the part of interest:
# Add Dependent Joint
elif name in self.dependent_joints:
    param = self.dependent_joints[name]
    parent = param['parent']
    factor = param.get('factor', 1)
    offset = param.get('offset', 0)
    while parent in self.dependent_joints:
        param = self.dependent_joints[parent]
        parent = param['parent']
        factor *= param.get('factor', 1)
        # the offset is relative only to the first parent
    joint = self.free_joints[parent]

@David Lu, do you think it could work?

Originally posted by alextoind on ROS Answers with karma: 217 on 2017-01-09
Post score: 0

Original comments
Comment by David Lu on 2017-01-11:
Go ahead and make a pull request and we'll go from there.
Comment by alextoind on 2017-01-12:
Perfect, I'm going to create it this evening

A:

That's a use case I did not consider when originally implementing it. The code has been relatively ignored for years, so I'm sure it could use freshening up.
The frustrating part is that how different URDF tags are handled across different nodes is inconsistent, so there's not a great understanding of how mimic tags are used in different places, i.e. whether you should just mimic the base joint or not. In the context of this one node however, I think you should be able to recurse.

Originally posted by David Lu with karma: 10932 on 2017-01-09
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by alextoind on 2017-01-09:
Thank you very much for your quick response! I know the problems, but I also believe that mimic joints are very helpful with some specific robotic mechanisms, e.g. when replicating a pure rolling motion among two meshes. If you have time I would be glad if you could have a look at the above proposal

