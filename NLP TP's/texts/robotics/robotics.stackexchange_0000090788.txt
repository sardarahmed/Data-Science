Q:

package.xml: use 'replace' tag for non-ROS package

When I do this:
foo/package.xml:
...
<replace>bar</replace>
...

I get this:
$ dpkg-deb --info ros-kinetic-foo_0.1.0_amd64.deb
...
 Replaces: ros-kinetic-bar
...

What do I do if I don't want that ros-kinetic- prefix on the replaced package name?

Originally posted by rubicks on ROS Answers with karma: 193 on 2019-03-05
Post score: 0

Original comments
Comment by gvdhoorn on 2019-03-06:
I believe that ros-kinetic- prefix is added there by the rosdebian generator in Bloom. I'm not sure it can be removed.
Perhaps @William can add something here.
Comment by gvdhoorn on 2019-03-06:
REP 127 does say this though (here):

Declares a rosdep key or ROS package name that your package replaces

"rosdep key" could only mean "system dependency" (ie: non-ROS pkg), so it would seem this should work.
Is bar a ROS pkg?
Comment by rubicks on 2019-03-06:
@gvdhoorn , in this example, bar need not be a ROS package. It's better (for my use case, at least) if bar is not a ROS package. This would allow me to <replace> arbitrary packages by name and not just the proper subset of packages known to rosdep.
Comment by gvdhoorn on 2019-03-06:
Hm.
I can think of one reason why we would not want to do/support/allow this (but this is just me speculating): if arbitrary pkgs could be replaced that way, I would create a "rogue" package.xml, release it and replace any arbitrary pkg on a system. That wouldn't be very nice.
Comment by rubicks on 2019-03-06:
...unless, of course, that was the desired behavior. Any person (or software tool) capable of creating and/or editing a debian/control file can effect package removal. Maintainers and system administrators are responsible for package hygiene and installation, respectively.
Comment by gvdhoorn on 2019-03-06:
In principle I agree. But we have to remember that releasing a ROS pkg and getting it distributed through the package repositories to thousands of user's machines is way easier than getting something into Debian/Ubuntu -- which have stricter quality control mechanisms.
Comment by gvdhoorn on 2019-03-06:
But again: it was just me speculating.
What you've observed could just be a bug in the generator.
Comment by rubicks on 2019-03-06:
Submitted issue asking for clarification: https://github.com/ros-infrastructure/bloom/issues/520
Comment by Dirk Thomas on 2019-03-06:
I assume bar isn't a rosdep key in your case? Have you tried using an existing rosdep key? I would expect that to get resolved to whatever system package(s) the rosdep db maps it to on the target platform.
Comment by rubicks on 2019-03-06:
I have not tried using an existing rosdep key because the package I want to replace is not a ROS package.

A:

The strings used for dependencies are not system packages. Every name is a rosdep key which is then resolves by the rosdep database to a actual package name. So even if your package is not a ROS package you need a rosdep key for it in order to be able to use it in the manifest.

Originally posted by Dirk Thomas with karma: 16276 on 2019-03-06
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by rubicks on 2019-03-06:
@dirk-thomas, okay, that explains it. I'll see if I can work around this with some rosdep trickery and (if successful) post an answer. Thanks very much for clarifying.
Comment by gvdhoorn on 2019-03-06:
I'd actually assumed that @rubicks was already using recognised rosdep keys, but if that wasn't the case then that would indeed explain it.

