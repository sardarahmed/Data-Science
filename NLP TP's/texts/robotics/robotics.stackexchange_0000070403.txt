Q:

Using the same data structure in multiple nodes

I am designing a system which consists of multiple nodes. Among others there is a "gui" node for visualization and a "controls" node for controlling the whole application. During runtime I need to keep and update the information about a so called camera_unit for which I created a class CameraUnit (.h + .cpp files). The thing is I need to use this class both in "gui" and "controls" node, as the gui uses the info for visualization and the controls for other computations, but I do not want to duplicate the code. What are my options? I have thought of these:
1. Duplicate the code (Probably the worst option as I would have to always copy .h and .cpp file between nodes when editing them)
2. Make the static library out of the CameraUnit class which would be linked to both "controls" and "gui" node (That seems possible but I still feel there is a more elegant option)
3. Merge "gui" and "controls" nodes to one node and make the gui run in a separate thread (I would like to prevent this option as it would change my architecture)
Thank you for any advice!

Originally posted by anoman on ROS Answers with karma: 1 on 2015-11-16
Post score: 0

Original comments
Comment by Mehdi. on 2015-11-16:
Why don't you just include your CameraUnit.h in both nodes? #include <your_package/CameraUnit.h>
Comment by anoman on 2015-11-16:
That would work but it would mean referencing the code from the different package and I thought this would not be really clean either. Or do you consider such an approach alright?

A:

Use a variant of number 2. Make the CameraUnit a class in a shared library. Basically with catkin, don't think about it and just use add_library. This change should just be 2-3 lines in your cmake file and it should work.

Originally posted by dornhege with karma: 31395 on 2015-11-16
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by anoman on 2015-11-16:
It works, I just had to make a few more adjustments. You have to add lines
INCLUDE_DIRS ${PROJECT_SOURCE_DIR}/src LIBRARIES name_of_your_lib
in catkin_packege() in the node which builds the library to make it work. Is there any specific reason why to use SHARED and not STATIC library?
Comment by dornhege on 2015-11-16:
static libraries would be linked into every dependent package. It probably doesn't matter for smaller projects. But you don't need to worry about it. catkin should do everything correctly here.

