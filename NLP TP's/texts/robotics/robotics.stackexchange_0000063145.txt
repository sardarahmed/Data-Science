Q:

undefined reference to `mysql_init' ... etc

ros indigo
ubuntu 14.04 trusty
at 100% build i get :
CMakeFiles/command_action_server.dir/src/commandserver.cpp.o: In function `__static_initialization_and_destruction_0(int, int)':
commandserver.cpp:(.text+0x52b): undefined reference to `mysql_init'
commandserver.cpp:(.text+0x595): undefined reference to `mysql_real_connect'
CMakeFiles/command_action_server.dir/src/commandserver.cpp.o: In function `hal_command_server::commandServer::~commandServer()':
commandserver.cpp:(.text._ZN18hal_command_server13commandServerD2Ev[_ZN18hal_command_server13commandServerD5Ev]+0x1a): undefined reference to `mysql_close'
CMakeFiles/command_action_server.dir/src/commandserver.cpp.o: In function `hal_command_server::commandServer::executeCB(boost::shared_ptr<hal_main::sendcommandGoal_<std::allocator<void> > const> const&)':
commandserver.cpp:(.text._ZN18hal_command_server13commandServer9executeCBERKN5boost10shared_ptrIKN8hal_main16sendcommandGoal_ISaIvEEEEE[_ZN18hal_command_server13commandServer9executeCBERKN5boost10shared_ptrIKN8hal_main16sendcommandGoal_ISaIvEEEEE]+0x28d): undefined reference to `mysql_query'
commandserver.cpp:(.text._ZN18hal_command_server13commandServer9executeCBERKN5boost10shared_ptrIKN8hal_main16sendcommandGoal_ISaIvEEEEE[_ZN18hal_command_server13commandServer9executeCBERKN5boost10shared_ptrIKN8hal_main16sendcommandGoal_ISaIvEEEEE]+0x2a9): undefined reference to `mysql_store_result'
commandserver.cpp:(.text._ZN18hal_command_server13commandServer9executeCBERKN5boost10shared_ptrIKN8hal_main16sendcommandGoal_ISaIvEEEEE[_ZN18hal_command_server13commandServer9executeCBERKN5boost10shared_ptrIKN8hal_main16sendcommandGoal_ISaIvEEEEE]+0x2e4): undefined reference to `mysql_fetch_row'
commandserver.cpp:(.text._ZN18hal_command_server13commandServer9executeCBERKN5boost10shared_ptrIKN8hal_main16sendcommandGoal_ISaIvEEEEE[_ZN18hal_command_server13commandServer9executeCBERKN5boost10shared_ptrIKN8hal_main16sendcommandGoal_ISaIvEEEEE]+0x59d): undefined reference to `mysql_free_result'
commandserver.cpp:(.text._ZN18hal_command_server13commandServer9executeCBERKN5boost10shared_ptrIKN8hal_main16sendcommandGoal_ISaIvEEEEE[_ZN18hal_command_server13commandServer9executeCBERKN5boost10shared_ptrIKN8hal_main16sendcommandGoal_ISaIvEEEEE]+0x657): undefined reference to `mysql_query'
commandserver.cpp:(.text._ZN18hal_command_server13commandServer9executeCBERKN5boost10shared_ptrIKN8hal_main16sendcommandGoal_ISaIvEEEEE[_ZN18hal_command_server13commandServer9executeCBERKN5boost10shared_ptrIKN8hal_main16sendcommandGoal_ISaIvEEEEE]+0x673): undefined reference to `mysql_store_result'
commandserver.cpp:(.text._ZN18hal_command_server13commandServer9executeCBERKN5boost10shared_ptrIKN8hal_main16sendcommandGoal_ISaIvEEEEE[_ZN18hal_command_server13commandServer9executeCBERKN5boost10shared_ptrIKN8hal_main16sendcommandGoal_ISaIvEEEEE]+0x697): undefined reference to `mysql_num_rows'
commandserver.cpp:(.text._ZN18hal_command_server13commandServer9executeCBERKN5boost10shared_ptrIKN8hal_main16sendcommandGoal_ISaIvEEEEE[_ZN18hal_command_server13commandServer9executeCBERKN5boost10shared_ptrIKN8hal_main16sendcommandGoal_ISaIvEEEEE]+0xcd9): undefined reference to `mysql_free_result'
commandserver.cpp:(.text._ZN18hal_command_server13commandServer9executeCBERKN5boost10shared_ptrIKN8hal_main16sendcommandGoal_ISaIvEEEEE[_ZN18hal_command_server13commandServer9executeCBERKN5boost10shared_ptrIKN8hal_main16sendcommandGoal_ISaIvEEEEE]+0x1018): undefined reference to `mysql_fetch_row'
collect2: error: ld returned 1 exit status

cmakelists.txt :
cmake_minimum_required(VERSION 2.8.3)
project(hal_main)

find_package(cmake_modules REQUIRED)
find_package(Eigen REQUIRED)
find_package(Boost REQUIRED thread date_time system filesystem program_options python )

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  actionlib
  actionlib_msgs
  message_generation
  roscpp
  rospy
  std_msgs
  genmsg
  visualization_msgs 
  clam_controller 
  clam_msgs
  pcl_ros
  cv_bridge
  eigen_conversions
  moveit_msgs
  geometry_msgs
  moveit_ros_planning 
  moveit_ros_planning_interface
  tf
  tf_conversions
  moveit_simple_grasps
  cmake_modules
  moveit_core 
  # eigen_conversions
)

find_package(OpenCV REQUIRED)

include_directories(${EIGEN_INCLUDE_DIRS})

add_definitions(${EIGEN_DEFINITIONS})

#SET( CMAKE_MODULE_PATH "/usr/share/cmake-2.8/Modules/" )
#set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/share/cmake_modules/cmake/Modules/")

find_package(MySQL REQUIRED)
include_directories(${MYSQL_INCLUDE_DIRS})
add_definitions(${MYSQL_DEFINITIONS})
#link_directories(/usr/lib/mysql/plugin/${MYSQL_LIBRARY_DIRS})

#find_package(OpenCV2 REQUIRED)
#find_package(mysql REQUIRED)
## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)

## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependencies might have been
##     pulled in transitively but can be declared for certainty nonetheless:
##     * add a build_depend tag for "message_generation"
##     * add a run_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
     #find_package(catkin REQUIRED COMPONENTS actionlib_msgs geometry_msgs moveit_msgs )
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
 add_message_files(
   FILES
   instr_set_arm.msg
   instr_set_legs.msg
   object.msg
 )

## Generate services in the 'srv' folder
# add_service_files(
#   FILES
#   Service1.srv
#   Service2.srv
# )

## Generate actions in the 'action' folder
 add_action_files(
   FILES
   arminstr.action
   leginstr.action
   objrecog_posit.action
   sendcommand.action

 )

## Generate added messages and services with any dependencies listed here
 generate_messages(
   DEPENDENCIES
   actionlib_msgs
   std_msgs
   geometry_msgs
   moveit_msgs
   
 )

 catkin_package(
  CATKIN_DEPENDS
  actionlib
  actionlib_msgs
  message_generation
  roscpp
  rospy
  std_msgs
  genmsg
  visualization_msgs 
  clam_controller 
  clam_msgs
  pcl_ros
  cv_bridge
  eigen_conversions 
  moveit_msgs
  geometry_msgs
  moveit_ros_planning 
  moveit_ros_planning_interface
  tf
  tf_conversions
  moveit_simple_grasps
  moveit_core
#  INCLUDE_DIRS include
)
###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: include/hal_main
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
#  INCLUDE_DIRS include include/hal_main ${CMAKE_INSTALL_PREFIX}/include/hal_main
#  LIBRARIES hal_main
#   CATKIN_DEPENDS actionlib actionlib_msgs message_generation roscpp rospy std_msgs message_runtime geometry_msgs moveit_msgs 
#  DEPENDS 
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
# include_directories(include)
include_directories( ${catkin_INCLUDE_DIRS})
include_directories( /usr/include/mysql ${MYSQL_INCLUDE_DIRS})
add_definitions(${MYSQL_DEFINITIONS})
link_directories(/usr/lib )
#${MYSQL_LIBRARY_DIRS}
include_directories(SYSTEM ${Boost_INCLUDE_DIR} ${EIGEN_INCLUDE_DIRS})
## Declare a cpp library
# add_library(hal_main
#   src/${PROJECT_NAME}/hal_main.cpp
# )

## Declare a cpp executable
add_executable(command_action_client src/commandclient.cpp)
add_dependencies(command_action_client hal_main_generate_messages_cpp)
target_link_libraries(command_action_client ${catkin_LIBRARIES})

add_executable(command_action_server src/commandserver.cpp)
add_dependencies(command_action_server hal_main_generate_messages_cpp)
target_link_libraries(command_action_server ${catkin_LIBRARIES})

add_executable(arms_action_server src/arms_server.cpp)
add_dependencies(arms_action_server hal_main_generate_messages_cpp)
target_link_libraries(arms_action_server ${catkin_LIBRARIES})

add_executable(object_recog_pos_server src/obj_recog_posit_server.cpp)
add_dependencies(object_recog_pos_server hal_main_generate_messages_cpp)
target_link_libraries(object_recog_pos_server ${catkin_LIBRARIES})

## Add cmake target dependencies of the executable/library
## as an example, message headers may need to be generated before nodes

## Specify libraries to link a library or executable target against
#target_link_libraries(tf_listener ${catkin_LIBRARIES})

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS hal_main hal_main_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_hal_main.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)

package.xml :
<?xml version="1.0"?>
<package>
  <name>hal_main</name>
  <version>0.0.0</version>
  <description>The hal_main package</description>

  <!-- One maintainer tag required, multiple allowed, one person per tag --> 
  <!-- Example:  -->
  <!-- <maintainer email="jane.doe@example.com">Jane Doe</maintainer> -->
  <maintainer email="jaysin@todo.todo">jaysin</maintainer>

  <!-- One license tag required, multiple allowed, one license per tag -->
  <!-- Commonly used license strings: -->
  <!--   BSD, MIT, Boost Software License, GPLv2, GPLv3, LGPLv2.1, LGPLv3 -->
  <license>TODO</license>

  <!-- Url tags are optional, but mutiple are allowed, one per tag -->
  <!-- Optional attribute type can be: website, bugtracker, or repository -->
  <!-- Example: -->
  <!-- <url type="website">http://wiki.ros.org/hal_main</url> -->

  <!-- Author tags are optional, mutiple are allowed, one per tag -->
  <!-- Authors do not have to be maintianers, but could be -->
  <!-- Example: -->
  <!-- <author email="jane.doe@example.com">Jane Doe</author> -->

  <!-- The *_depend tags are used to specify dependencies -->
  <!-- Dependencies can be catkin packages or system dependencies -->
  <!-- Examples: -->
  <!-- Use build_depend for packages you need at compile time: -->
  <!-- <build_depend>message_generation</build_depend> -->
  <!-- Use buildtool_depend for build tool packages: -->
  <!--   <buildtool_depend>catkin</buildtool_depend> -->
  <!-- Use run_depend for packages you need at runtime: -->
  
  
  <!-- Use test_depend for packages you need only for testing: -->
  <!--   <test_depend>gtest</test_depend> -->
  <buildtool_depend>catkin</buildtool_depend>
  
  <build_depend>actionlib</build_depend>
  <build_depend>actionlib_msgs</build_depend>
  <build_depend>message_generation</build_depend>
  <build_depend>roscpp</build_depend>
  <build_depend>rospy</build_depend>
  <build_depend>std_msgs</build_depend>
  <build_depend>geometry_msgs</build_depend>
  <build_depend>moveit_msgs</build_depend>
  <build_depend>message_runtime</build_depend>
  <build_depend>eigen_conversions</build_depend>
  <build_depend>visualization_msgs</build_depend>
  <build_depend>clam_controller</build_depend>
  <build_depend>clam_msgs</build_depend>
  <build_depend>pcl_ros</build_depend>
  <build_depend>moveit_ros_planning</build_depend>
  <build_depend>moveit_ros_planning_interface</build_depend>
  <build_depend>cv_bridge</build_depend>
  <build_depend>tf</build_depend>
  <build_depend>tf_conversions</build_depend>
  <build_depend>moveit_simple_grasps</build_depend>
  <build_depend>cmake_modules</build_depend>
  <build_depend>moveit_core</build_depend>
  <build_depend>genmsg</build_depend>
  
  <run_depend>actionlib</run_depend>
  <run_depend>actionlib_msgs</run_depend>
  <run_depend>roscpp</run_depend>
  <run_depend>rospy</run_depend>
  <run_depend>std_msgs</run_depend>
  <run_depend>geometry_msgs</run_depend>
  <run_depend>moveit_msgs</run_depend>
  <run_depend>message_runtime</run_depend> 
  <run_depend>message_generation</run_depend>
  <run_depend>eigen_conversions</run_depend>
  <run_depend>visualization_msgs</run_depend>
  <run_depend>clam_controller</run_depend>
  <run_depend>clam_msgs</run_depend>
  <run_depend>pcl_ros</run_depend>
  <run_depend>moveit_ros_planning</run_depend>
  <run_depend>moveit_ros_planning_interface</run_depend>
  <run_depend>cv_bridge</run_depend>
  <run_depend>tf</run_depend>
  <run_depend>tf_conversions</run_depend>
  <run_depend>moveit_simple_grasps</run_depend>
  <run_depend>moveit_core</run_depend>
  <run_depend>genmsg</run_depend>
  
    
  <!--rosdep name="libmysqlclient-dev"/-->
  <!-- The export tag contains other, unspecified, tags -->
  <export>
    <cpp lflags="-lmysqlclient"/>
   
    <!-- You can specify that this package is a metapackage here: -->
    <!-- <metapackage/> -->

    <!-- Other tools can request additional information be placed here -->

  </export>
</package>

Originally posted by jay75 on ROS Answers with karma: 259 on 2014-10-07
Post score: 0

A:

I don't see any target_link_libraries(your_target ${MySQL_LIBRARIES}) (or whatever variable contains the libraries for MySQL) in your CMakeLists.txt: how is the linker going to find those symbols if you don't supply it with the appropriate libraries?

Strictly speaking, this isn't even a ROS question, it's all CMake.

Originally posted by gvdhoorn with karma: 86574 on 2014-10-07
This answer was ACCEPTED on the original site
Post score: 0

