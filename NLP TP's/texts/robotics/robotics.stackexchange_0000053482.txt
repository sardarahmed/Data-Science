Q:

Undefined references after catkinizing an old fuerte package

Hi, i am trying to use "arm_3d_cb_calib" which is part of the "gt-ros-pkg.cpl" to calibrate a Kinect with my workspace.
In order to use it i had to catkinize the package since i am using ROS Groovy. The Problem is when trying to compile it i get a lot of undefined references errors.
I feel like i missed some dependencies but i am too inexperienced to figure out what i have to add where.
Alternatively a different, working package to calibrate a Kinect with any Robot would work as well.
Cmakelists.txt:
cmake_minimum_required(VERSION 2.8.3)
project(arm_3d_cb_calib)
# Load catkin and all dependencies required for this package
# TODO: remove all from COMPONENTS that are not catkin packages.
find_package(catkin REQUIRED COMPONENTS roscpp cv_bridge stereo_msgs sensor_msgs tf camera_calibration)

include_directories(include ${Boost_INCLUDE_DIR} ${catkin_INCLUDE_DIRS})
# CATKIN_MIGRATION: removed during catkin migration
# cmake_minimum_required(VERSION 2.4.6)

# CATKIN_MIGRATION: removed during catkin migration
# include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)

#set the default path for built executables to the "bin" directory
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
#set the default path for built libraries to the "lib" directory
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

find_package(GTSAM)

find_package(PCL 1.3 REQUIRED COMPONENTS common io)
include_directories(${PCL_INCLUDE_DIRS})
link_directories(${PCL_LIBRARY_DIRS})
add_definitions(${PCL_DEFINITIONS})

add_library(${PROJECT_NAME} src/calib_3d_cbs.cpp)
add_executable(test_cb_calib src/test_cb_calib.cpp)
target_link_libraries(test_cb_calib ${PROJECT_NAME} gtsam-static)
add_executable(find_cb_calib src/find_cb_calib.cpp)
target_link_libraries(find_cb_calib ${PROJECT_NAME} gtsam-static)

# TODO: fill in what other packages will need to use this package
## DEPENDS: system dependencies of this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## INCLUDE_DIRS: 
## LIBRARIES: libraries you create in this project that dependent projects also need
catkin_package(
    DEPENDS roscpp cv_bridge opencv2 stereo_msgs sensor_msgs tf camera_calibration
    CATKIN_DEPENDS opencv2# TODO
    INCLUDE_DIRS # TODO include
    LIBRARIES # TODO
)

Package.xml:
<package>
  <name>arm_3d_cb_calib</name>
  <version>1.0.0</version>
  <description>Utility for calibrating cameras and RGB-D sensors to a robot arm
      holding a checkerboard.  The optimization procedure takes a set of 
      3D checkerboard corner detections and corresponding end effector
      poses to find the both, the transformation between the end effector 
      and the checkerboard frame, and the transformation between the /base_link
      and the sensor's frame. The assumption is that the pose of the checkerboard
      with respect to the end effector is fixed, and that enough samples are obtained
      such that the checkerboard offset can be uniquely determined.  In practice,
      having over 12 checkerboard captures is recommended such that all 6 degrees of 
      freedom of its pose are expressed in the sensor.</description>
  <!-- <maintainer>Kelsey</maintainer> -->

  <license>BSD</license>
  <maintainer email="kelsey@todo.todo">kelsey</maintainer>
  <url type="website"></url>
  <!-- <url type="bugtracker"></url> -->

  <author>Kelsey</author>

<buildtool_depend>catkin</buildtool_depend>

  <build_depend>roscpp</build_depend> 
  <build_depend>cv_bridge</build_depend> 
 <build_depend>opencv2</build_depend> 
 <build_depend>stereo_msgs</build_depend> 
  <build_depend>sensor_msgs</build_depend>
 <build_depend>tf</build_depend> 
 <build_depend>camera_calibration</build_depend> 
  <run_depend>roscpp</run_depend> 
  <run_depend>cv_bridge</run_depend> 
 <run_depend>opencv2</run_depend> 
 <run_depend>stereo_msgs</run_depend>
 <run_depend>sensor_msgs</run_depend> 
 <run_depend>tf</run_depend> 
  <run_depend>camera_calibration</run_depend>
  <!-- <test_depend>roscpp</test_depend> -->
  <!-- <test_depend>cv_bridge</test_depend> -->
  <!-- <test_depend>opencv2</test_depend> -->
  <!-- <test_depend>stereo_msgs</test_depend> -->
  <!-- <test_depend>sensor_msgs</test_depend> -->
  <!-- <test_depend>tf</test_depend> -->
  <!-- <test_depend>camera_calibration</test_depend> -->

  <export>
    <cpp lflags="-L${prefix}/lib -Wl,-rpath,${prefix}/lib -larm_3d_cb_calib" cflags="-I${prefix}/include"/>
  </export>
</package>

Errors:
Scanning dependencies of target find_cb_calib
[ 75%] Building CXX object gt-ros-pkg.cpl/arm_3d_cb_calib/CMakeFiles/find_cb_calib.dir/src/find_cb_calib.cpp.o
Linking CXX executable /home/faps/catkin_ws/src/gt-ros-pkg.cpl/arm_3d_cb_calib/bin/find_cb_calib
CMakeFiles/find_cb_calib.dir/src/find_cb_calib.cpp.o: In function `readCBPoseBag(char*, std::vector<boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> >, std::allocator<boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > > >&, std::vector<gtsam::Pose3, std::allocator<gtsam::Pose3> >&, int)':
find_cb_calib.cpp:(.text+0x54): undefined reference to `rosbag::Bag::Bag(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)'
find_cb_calib.cpp:(.text+0x10f): undefined reference to `rosbag::TopicQuery::TopicQuery(std::vector<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)'
find_cb_calib.cpp:(.text+0x138): undefined reference to `ros::TIME_MAX'
find_cb_calib.cpp:(.text+0x140): undefined reference to `ros::TIME_MIN'
find_cb_calib.cpp:(.text+0x15f): undefined reference to `rosbag::View::View(rosbag::Bag const&, boost::function<bool (rosbag::ConnectionInfo const*)>, ros::Time const&, ros::Time const&, bool const&)'
find_cb_calib.cpp:(.text+0x2b9): undefined reference to `rosbag::MessageInstance::getTopic() const'
find_cb_calib.cpp:(.text+0x367): undefined reference to `rosbag::MessageInstance::getTopic() const'
find_cb_calib.cpp:(.text+0x4c5): undefined reference to `rosbag::Bag::close()'
find_cb_calib.cpp:(.text+0x4df): undefined reference to `rosbag::View::~View()'
find_cb_calib.cpp:(.text+0x50e): undefined reference to `rosbag::Bag::~Bag()'
find_cb_calib.cpp:(.text+0x534): undefined reference to `rosbag::Bag::~Bag()'
find_cb_calib.cpp:(.text+0x590): undefined reference to `rosbag::View::~View()'
find_cb_calib.cpp:(.text+0x5b4): undefined reference to `rosbag::View::~View()'
find_cb_calib.cpp:(.text+0x66a): undefined reference to `rosbag::View::~View()'
find_cb_calib.cpp:(.text+0x6a9): undefined reference to `rosbag::Bag::~Bag()'
CMakeFiles/find_cb_calib.dir/src/find_cb_calib.cpp.o: In function `main':
find_cb_calib.cpp:(.text+0x73c): undefined reference to `ros::init(int&, char**, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)'
CMakeFiles/find_cb_calib.dir/src/find_cb_calib.cpp.o: In function `boost::foreach_detail_::auto_any<rosbag::View::iterator>::~auto_any()':
find_cb_calib.cpp:(.text._ZN5boost15foreach_detail_8auto_anyIN6rosbag4View8iteratorEED2Ev[_ZN5boost15foreach_detail_8auto_anyIN6rosbag4View8iteratorEED5Ev]+0xd): undefined reference to `rosbag::View::iterator::~iterator()'
CMakeFiles/find_cb_calib.dir/src/find_cb_calib.cpp.o: In function `boost::foreach_detail_::auto_any<boost::foreach_detail_::foreach_iterator<rosbag::View, mpl_::bool_<false> >::type> boost::foreach_detail_::begin<rosbag::View, mpl_::bool_<false> >(boost::foreach_detail_::auto_any_base const&, boost::foreach_detail_::type2type<rosbag::View, mpl_::bool_<false> >*, mpl_::bool_<false>*)':
find_cb_calib.cpp:

etc. etc.

Originally posted by Schluchti on ROS Answers with karma: 1 on 2013-08-13
Post score: 0

A:

The linker needs link your code with the ros libraries you use. The cmake macro find_package(catkin REQUIRED COMPONENTS whatever-package) loads the libraries from whatever-package into a variable called catkin_LIBRARIES. So then you need to tell the linker to use these libraries with the macro target_link_libraries(whatever-executable ${catkin_LIBRARIES})
EDIT:
Overlays let you roll your own stack on top of an existing one. For example, if you'd like to add a new feature to roscpp, you could make your own version and use environment variables to make your system find that one instead of the default one.  You could just as easily change it back.  However, I guess if you don't know what it is, it likely isn't your current problem!

Originally posted by thebyohazard with karma: 3562 on 2013-08-13
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by Schluchti on 2013-08-14:
I modified my cmakelists with the line "find_package(catkin REQUIRED COMPONENTS pcl pcl_ros rosbag roscpp)" and the target_link_libraries macro and it solved 95% of the reference errors.
I still get undefined reference to ros::param::has and ros::param::get though. I thought this was part of roscpp?
Comment by thebyohazard on 2013-08-14:
Yeah, it is. I don't know why it wouldn't find them.  You're not overlaying on top of roscpp, are you?
Comment by Schluchti on 2013-08-16:
I have no idea what you mean by that. :)
Comment by Schluchti on 2013-08-20:
Is there any other explanation to these undefined reference to ros:param:has errors?
Comment by thebyohazard on 2013-08-20:
That's a linker error rather than a compilation one. Did you build from source? The only other thing would be if roscpp didn't build correctly.  If you're successfully linking against the right library, you shouldn't have any problems.  I'd hesitate to say "bug" unless somebody else has the problem.

