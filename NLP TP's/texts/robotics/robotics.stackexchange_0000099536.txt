Q:

Running Turtlebot Navigation Stack on multiple floors

I currently have a Gazebo world that I generated with two levels. Level 9 (z=0) and Level 10 (z= 20).

When I am using the navigation stack on level 9, the local costmap and global costmap is being generated. It is able to navigate successfully.
However, when I move to level 10, the local costmap is not being generated and the robot relies purely on the global costmap to avoid obstacles. Is there a way to fix this. I am using the turtlebot simulation stack found on github. Would appreciate any pointers as I have started playing with the local cost params but that does not seem to be affecting anything.

Originally posted by kidRobot on ROS Answers with karma: 21 on 2021-07-07
Post score: 2

Original comments
Comment by 130s on 2021-07-07:
Possible partial/whole duplicate of https://answers.ros.org/question/246854/multi-floor-navigation/
Comment by kidRobot on 2021-07-08:
Unfortunately those implementations don't seem to work right now and don't solve my problem. My problem is specifically with the local costmap not updating on floors that are not set at z=0 in gazebo
Comment by prince on 2021-07-08:
Which package are you currently running for transistions between floors/level specific navigation?
Comment by Mike Scheutzow on 2021-07-09:
Do you need this to work for real physical robots, or is this simulation-only?
Comment by Mike Scheutzow on 2021-07-09:
Please edit your question and append your config for the local costmap. Use the 101010 button to format yaml text.
Comment by Mike Scheutzow on 2021-07-16:
Have you figured out how to get this to work?
Comment by kidRobot on 2021-08-13:
Just managed to get it to work, have added the answer below.

A:

Hi, So I think I have found the solution, although it seems to be a patch more than an actual solution. As I said before, if the z-coordinate of the robot was 0, there was no problem, but when the robot went to a certain level, the scans were not returning anything despite obstacles being present.
The patch was essentially to add a "tf_fixer" where I set the z-coordinate of the robot to always be zero, regardless of the level it was on. That seemed to have fixed the problem, will continue to edit this answer if I come across a better solution.

Originally posted by kidRobot with karma: 21 on 2021-08-13
This answer was ACCEPTED on the original site
Post score: 0

