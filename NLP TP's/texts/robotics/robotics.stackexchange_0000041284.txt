Q:

Trouble configuring libdc1394 for Bumblebee2

OS: Ubuntu 11.10 
ROS: Fuerte 
Camera: Point Grey's Bumblebee2 BB2-08S2M 
Other software: 

Columbia University's bumblebee2 ROS package (with a few modifications described below) 
libdc1394-22 (ver. 2.1.3-4) 
Coriander (for checking that the camera can communicate with the computer)

I'm running into errors and I believe they stem from configuring the libdc1394 library. I installed the bumblebee2 package from above, following the excellent tutorial found here. I modified a few parts of the package code to update it to work with Fuerte, which involved a few additional #includes and commenting out the sensor_msgs::Image.set_data_size() function calls, as that function no longer exists. Also, my camera's resolution is 1024x768 @ 20 fps, and I made changes from the tutorial accordingly.
So, when I run the roslaunch camera1394 startcamera.launch, I get the following kicked back from libdc1394:
libdc1394 error: Format_7 Error_flag_1 is set: in _dc1394_v130_handshake (format7.c, line 122): invalid image position, size, color coding or ISO speed
I know that it is possible to get it to work; using Coriander (which makes use of the same library), I've seen stereo images streaming from the camera. I narrowed it down to a call to the function dc1394_format7_set_roi() from dev_camera1394.cpp within the bumblebee2 package. This function appears to set multiple options the specify the camera configuration, and by splitting these up in to separate function calls, I believe it is the color coding that is causing it.  My current code:
.... 
dc1394_format7_set_image_size(camera_, videoMode_, 1024, 768);
dc1394_format7_set_packet_size(camera_, videoMode_, DC1394_USE_MAX_AVAIL);
dc1394_format7_set_color_coding(camera_, videoMode_, DC1394_COLOR_CODING_RAW16); 
....
And the last call there results in the following errors:
libdc1394 error: Format_7 Error_flag_1 is set: in _dc1394_v130_handshake (format7.c, line 122): invalid image position, size, color coding or ISO speed
libdc1394 error: Format_7 Error_flag_1 is set: in dc1394_format7_set_color_coding (format7.c, line 493): F7 handshake failure
So, it appears to be the color coding, but the camera's spec says it uses Raw16. I've tried Raw8 and Mono8 with the same results.  Now I'm at a loss.  Anyone have any ideas, or experience with Bumblebees and ROS?  Thanks, and let me know if more information will help!

Originally posted by tbernhard on ROS Answers with karma: 80 on 2012-06-11
Post score: 2

A:

So, this is more of a placeholder answer for the time being.  I'm working on a more long-term fix with more official support.

Short story: Point Grey doesn't want to play nice with the ROS community (or modern Linux distros, in general), if this bothers you, please don't buy their products.
This has been kind of a problem for a while (just search "Bumblebee" on rosanswers or ros-users).

For the autonomous lawnmower, we wanted to be able to use the stereo camera to detect obstacles in an outdoor (read: no Kinect) environment.  Here is an example of the data that we were able to achieve using the following method: Bumblebee2 Point Cloud
As it stands, the best way I have found is to start with the Electric camera1394 driver, and modify it for a stereo camera based on this ticket.  The patch isn't going to apply cleanly, because it was based on a much older version of camera1394.  To take out some of the headache, you can use my pre-modified camera_drivers, which is what was used for the lawnmower (in the previous video).
This modification will allow the stereo deinterlacing to take place, and each camera will be broadcast on it's own topic (along with corresponding CameraInfo).  I currently use Format7 for my capture, then use the image_proc pipeline for the rest.  Format7 is odd in that you set the frame rate by setting the packet size, which is a supported dynamic_reconfigure parameter, but you will have to do the math yourself using this.
From there, you can do the stereo camera calibration
You can then use image_proc and stereo_image_proc to debayer, bin (to decimate), rectify, disparity, and point clouds.  Here's an example pipeline from the lawnmower
So, I hope this helps you for now, until I can get something more permanent in.

Originally posted by mjcarroll with karma: 6414 on 2012-06-11
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by tbernhard on 2012-06-12:
Thanks for the help! I first tried your driver, but compilation fails because it cannot find camera_info_manager/camera_info_manager.h .  Was there something I missed?  I'll start messing with the Electric drivers as an alternative
Comment by mjcarroll on 2012-06-13:
It's probably due to it being based on Electric.  I'm bringing up a 12.04/Fuerte install as I type this, so I'll look into it for you.
Comment by mjcarroll on 2012-06-26:
Sorry for the delay.  Okay, it builds against Fuerte, but I don't have any hardware to test it out.  Can you give it a shot and see what happens for me?

