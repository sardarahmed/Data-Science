Q:

robot_localization with GPS,IMU and odometry , in Gazebo simulation

Hello,
I have been working to configure the dual_ekf_navsat setup from robot_localization(brilliant piece of software) for using it with my simulated robot in Gazebo,
I have all sensors, thanks to gazebo_plugins, I have ;

Ackermann drive plugin that also provides odom
IMU plugin provides  imu/data
GPS sensor plugin provides gps/fix

I have identical sensor setup with the basic example provided in dual_ekf_navsat, but so far for some reason the second instance of EKF that is responsible for GPS, shifts dramatically and finally explodes.  The first EKF instance responsible for continues
odom->base_link transform seems doing fine.
I really don't know what I am missing here, I checked all the topics names and data published under these topics. Everything is in simulation , so I will expect it to work ideally. y dual_ekf_navsat.yaml is ;
# For parameter descriptions, please refer to the template parameter files for each node.
    
ekf_local_filter_node:
  ros__parameters:
    use_sim_time: true
    clear_params: true
    publish_tf: true
    filter_type: "ekf"
    frequency: 30.0
    sensor_timeout: 0.1
    odom0: /odometry/wheel
    imu0: /imu/data
    odom_frame: odom
    base_link_frame: base_link
    world_frame: odom
    map_frame: map
    odom0_config: [false,  false, false, # X , Y , Z
                    false, false, false, # roll , pitch ,yaw
                    true,  true,  true,  # dX , dY , dZ
                    false, false, false, # droll , dpitch ,dyaw
                    false, false, false] # ddX , ddY , ddZ
    odom0_relative: false
    odom0_differential: false
    odom0_queue_size: 10
    imu0_config: [false,  false, false,  # X , Y , Z
                  false,  false,  true,  # roll , pitch ,yaw
                  false,  false, false,  # dX , dY , dZ
                  false,  false,  true,  # droll , dpitch ,dyaw
                  false,  false,  false] # ddX , ddY , ddZ
    imu0_relative: false                
    imu0_differential: false
    imu0_queue_size: 10
    imu0_remove_gravitational_acceleration: true
    process_noise_covariance: [0.03, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                0.0,    0.03, 0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                0.0,    0.0,    0.04, 0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                0.0,    0.0,    0.0,    0.03, 0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                0.0,    0.0,    0.0,    0.0,    0.03, 0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                0.0,    0.0,    0.0,    0.0,    0.0,    0.06, 0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.025, 0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.025, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.05, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.002, 0.0,    0.0,    0.0,    0.0,    0.0,
                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.002, 0.0,    0.0,    0.0,    0.0,
                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.004, 0.0,    0.0,    0.0,
                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.01, 0.0,    0.0,
                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.01, 0.0,
                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.01]

ekf_global_filter_node:
  ros__parameters:
    use_sim_time: true
    clear_params: true
    publish_tf: true
    filter_type: "ekf"
    frequency: 30.0
    sensor_timeout: 0.1
    odom0: /odometry/wheel
    #odom1: /odometry/gps
    imu0: /imu/data
    map_frame: map
    odom_frame: odom
    base_link_frame: base_link
    world_frame: map
    odom0_config: [false,  false,  false, # X , Y , Z
                    false, false, false,  # roll , pitch ,yaw
                    true, true, true,     # dX , dY , dZ
                    false, false, true,   # droll , dpitch ,dyaw
                    false, false, false]  # ddX , ddY , ddZ
    odom0_relative: false
    odom0_differential: false
    odom0_queue_size: 10
    odom1_config: [true,  true,  false, # X , Y , Z
                  false, false, false, # roll , pitch ,yaw
                  false, false, false, # dX , dY , dZ
                  false, false, false,  # droll , dpitch ,dyaw
                  false, false, false] # ddX , ddY , ddZ
    odom1_relative: false
    odom1_differential: false
    odom1_queue_size: 10
    imu0_config: [false,  false, false,  # X , Y , Z
                  false,  false,  true,  # roll , pitch ,yaw
                  false,  false, false,  # dX , dY , dZ
                  false,  false,  true,  # droll , dpitch ,dyaw
                  false,  false,  false] # ddX , ddY , ddZ
    imu0_relative: false
    imu0_differential: false
    imu0_queue_size: 10
    imu0_remove_gravitational_acceleration: true
    process_noise_covariance: [0.05, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                              0.0,    0.05, 0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                              0.0,    0.0,    0.06, 0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                              0.0,    0.0,    0.0,    0.03, 0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                              0.0,    0.0,    0.0,    0.0,    0.03, 0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                              0.0,    0.0,    0.0,    0.0,    0.0,    0.06, 0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                              0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.025, 0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                              0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.025, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                              0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.04, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                              0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.01, 0.0,    0.0,    0.0,    0.0,    0.0,
                              0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.01, 0.0,    0.0,    0.0,    0.0,
                              0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.02, 0.0,    0.0,    0.0,
                              0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.01, 0.0,    0.0,
                              0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.01, 0.0,
                              0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.015]      

navsat_transform_node:
  ros__parameters:
    frequency: 10.0
    delay: 1.0
    magnetic_declination_radians: 0.0  # For lat/long 55.944831, -3.186998
    yaw_offset: 3.14  # IMU reads 0 facing magnetic north, not east
    zero_altitude: false
    broadcast_utm_transform: false
    publish_filtered_gps: true
    use_odometry_yaw: true
    #wait_for_datum: true
    #datum: [-2.846001584706555e-09, -8.984332830094866e-06, 0.0]

and I have the launch file which launches 3 nodes as;
launch_ros.actions.Node(
        package='robot_localization', 
        executable='ekf_node', 
        name='ekf_filter_node_odom',
            output='screen',
        prefix=['gdb -ex run --args'],
        parameters=[
            parameters_file_path,
            str(parameters_file_path),
            [EnvironmentVariable(name='FILE_PATH'), os.sep, 'dual_ekf_navsat.yaml'],
       ],
       ),

launch_ros.actions.Node(
        package='robot_localization', 
        executable='ekf_node', 
        name='ekf_filter_node_map',
            output='screen',
        prefix=['gdb -ex run --args'],
        parameters=[
            parameters_file_path,
            str(parameters_file_path),
            [EnvironmentVariable(name='FILE_PATH'), os.sep, 'dual_ekf_navsat.yaml'],
       ],
       ),           
launch_ros.actions.Node(
        package='robot_localization',

    executable='navsat_transform_node', 
    name='navsat_transform_node',
        output='screen',
    prefix=['gdb -ex run --args'],
    parameters=[
        parameters_file_path,
        str(parameters_file_path),
        [EnvironmentVariable(name='FILE_PATH'), os.sep, 'dual_ekf_navsat.yaml'],
   ],
   )       

All of this is run under ROS2 foxy. What could be the reason for GPS node not working ?
I suspect IMU but the why it will work fine with the first instance and not working second instance of ekf_node. Here is a sample output from IMU imu/data ;
---
header:
  stamp:
    sec: 9
    nanosec: 490000000
  frame_id: imu_link
orientation:
  x: -0.00024423281376312827
  y: 0.0001338847940976829
  z: 5.868791771640484e-05
  w: 0.9999999594904608
orientation_covariance:
- 0.0
- 0.0
- 0.0
- 0.0
- 0.0
- 0.0
- 0.0
- 0.0
- 0.0
angular_velocity:
  x: 0.00026785022443697696
  y: 0.00015795833523746822
  z: 7.888021074642064e-05
angular_velocity_covariance:
- 4.0e-08
- 0.0
- 0.0
- 0.0
- 4.0e-08
- 0.0
- 0.0
- 0.0
- 4.0e-08
linear_acceleration:
  x: -0.007726162869526735
  y: -0.05101889647338159
  z: 9.827498195058377
linear_acceleration_covariance:
- 0.00028900000000000003
- 0.0
- 0.0
- 0.0
- 0.00028900000000000003
- 0.0
- 0.0
- 0.0
- 0.00028900000000000003
---

Sample data from odometry/wheel
---
header:
  stamp:
    sec: 146
    nanosec: 190000000
  frame_id: odom
child_frame_id: base_link
pose:
  pose:
    position:
      x: 3.967015206701289e-05
      y: 0.00011970118998026622
      z: 0.23422261452622936
    orientation:
      x: -0.00024423571408215005
      y: 0.00013388131048337062
      z: 5.884081943105727e-05
      w: 0.9999999594812334
  covariance:
  - 1.0e-05
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 1.0e-05
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 1000000000000.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 1000000000000.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 1000000000000.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.001
twist:
  twist:
    linear:
      x: 3.340897820043051e-07
      y: 4.476726234468732e-08
      z: 0.0
    angular:
      x: 0.0
      y: 0.0
      z: 3.833660757668348e-08
  covariance:
  - 1.0e-05
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 1.0e-05
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 1000000000000.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 1000000000000.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 1000000000000.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.001
---

Finally sample data from gps/fix
---
header:
  stamp:
    sec: 216
    nanosec: 457000000
  frame_id: gps_link
status:
  status: 0
  service: 1
latitude: -1.6770145488796068e-09
longitude: 2.2482592059421074e-10
altitude: 0.6342573435977101
position_covariance:
- 4.0e-08
- 0.0
- 0.0
- 0.0
- 4.0e-08
- 0.0
- 0.0
- 0.0
- 4.0e-08
position_covariance_type: 2
---

Originally posted by Fetullah Atas on ROS Answers with karma: 819 on 2020-11-13
Post score: 1

A:

Your IMU data is provided in the imu_link frame and your GPS data is in the gps_link frame. Do you have transforms defined from those frames to the robot's base_link frame?
Also, your only reference for Z or its velocity is your odometry data, and you're fusing absolute Z, rather than Z velocity. So that means

Tier 2 EKF (map frame EKF) gets an odometry measurement. frame_id on the pose data in that measurement is odom
EKF attempts to transform from odom->map, because all pose data needs to be transformed into its world_frame. However, that instance of the EKF itself is generating that transform. I'm not totally convinced this is your issue, but it is an issue.

What I would recommend is that your turn off your GPS data as an input to the T2 EKF. See if its state estimate still explodes and report back. Exploding state estimates/covariance usually means some dimension is not being measured.
EDIT in response to comments:
If your two state estimates align perfectly when you don't fuse GPS data, then the inclusion of the GPS data is obviously causing a problem. Can you bag the sensor data, and then play back the bag against a live EKF? Then you can step through each measurement and identify the one that causes the state estimate to explode.
Also, what do you mean by explode? What is the EKF output after an 'explosion'? Do the covariances increase massively?

Originally posted by Tom Moore with karma: 13689 on 2020-12-09
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by Fetullah Atas on 2020-12-09:
Hello @Tom Moore, thanks for your answer, actually I resolved explosion problem.
But now I have one issue with navsat_transfrom_node, when i convert GPS way points to map frame, the points are sometimes hugely off, maybe I should open another question but if you have any rough thoughts on possible reasons I would appreciate.
Comment by Tom Moore on 2020-12-09:
You should probably open another question. Provide sample GPS messages that lead to good poses, and sample GPS messages that lead to the erroneous ones.
Comment by Fetullah Atas on 2020-12-09:
Oh, actually.. I still hit on this time to time. I turned of the GPS to second EKF instance at that case map and odom are perfectly aligned with each other. I updated my latest config file in the original question.
Comment by Fetullah Atas on 2020-12-11:
I also think that the GPS is obviously source of the problem here... , by explosion what I mean is;
the odometry/gps, initially will be aligned with odometry/global  but after I move robot a little bit then suddenly the pose coming from odometry/gps will jump to over 1e6+ ,a hugely off value. And the covariance also becomes enourmous. I will actually try to use another GPS plugin, maybe this is caused by the gazebo plugin for the GPS I use. Thank you for taking time to reply, I will update here and hopefully I will get feedback from you.

