Q:

Advanced Line Following Robot of Maze Solving

I know how to make a line follower. But in this video what have they done exactly? They are giving the source and destination in the map but how the robot moves based on the instruction given in map?
What is the procedure to do it? They have mapped the path. Please do watch the video.

A:

See this similar question and my answer to it. The question I linked asks for how to handle an unknown starting position, but it seems similar in that you and the other OP are both asking "how do I go from Dijkstra's algorithm to implementation?" 
Essentially, Dijkstra's algorithm only requires to you give a digraph with a set of distances or "costs" between the two points. Dijkstra's algorithm gives you the series of waypoints that will get you/your vehicle from any one arbitrary point to another arbitrary point at the lowest cost, based on the cost information you provided. If you don't give it correct cost information it won't give you the optimal route; this is akin (actually) a map routing program that might send you on a back road because it only looked at distance and not distance at a given speed limit, or through a downtown area in rush hour because it doesn't account for traffic. 
So it is up to you to calculate the distances between points and to know the physical relationship between two points. (read:heading) 
So, for example, if you store all of the coordinates for the points in addition to the digraph and distances, you could try:
currentWaypoint = [x0,y0];
nextWaypoint = [x1,y1];
currentHeading = theta0;

nextHeadingAbsolute = atan2( (y1-y0) , (x1-x0) );
nextHeadingRelative = nextHeadingAbsolute - currentHeading;

driveDistance = sqrt( (x1-x0)^2 + (y1-y0)^2 );

turnRobot(nextHeadingRelative);
driveRobot(drivieDistance);

This snippet/example assumes that you measure heading as 0 radians as the +x-axis, with angle increasing in a counter-clockwise direction. You can make any other axis be the zero by adding an offset, and can convert to degrees if you desire. 
Basically you just find the angle between the coordinates relative to the global x/y axes, then subtract your current heading from that. Drive distance would then be along the hypotenuse, which you can calculate using the Pythagorean Theorem.

