Q:

Prerelease melodic Qt5 cmake error

Hey, I am currently trying to do my prerelease tests for a melodic version of my meta-package robot_statemachine which was already released for kinetic.
Unfortunately, when running the prerelease tests for melodic, I encountered various errors related to Qt5 dependencies.  The meta-package includes two packages which are basically plugins, one for rqt and the other for rviz. Unfortunately, when running the prerelease script on docker, both fail with the below errors:
rsm_rviz_plugins error:
CMake Error at CMakeLists.txt:31 (find_package):
  By not providing "FindQt5.cmake" in CMAKE_MODULE_PATH this project has
  asked CMake to find a package configuration file provided by "Qt5", but
  CMake did not find one.

  Could not find a package configuration file provided by "Qt5" (requested
  version 5.9.5) with any of the following names:

    Qt5Config.cmake
    qt5-config.cmake

  Add the installation prefix of "Qt5" to CMAKE_PREFIX_PATH or set "Qt5_DIR"
  to a directory containing one of the above files.  If "Qt5" provides a
  separate development package or SDK, be sure it has been installed.

rsm_rqt_plugins error:
CMake Error at CMakeLists.txt:17 (find_package):
  By not providing "FindQt5Widgets.cmake" in CMAKE_MODULE_PATH this project
  has asked CMake to find a package configuration file provided by
  "Qt5Widgets", but CMake did not find one.

  Could not find a package configuration file provided by "Qt5Widgets" with
  any of the following names:

    Qt5WidgetsConfig.cmake
    qt5widgets-config.cmake

  Add the installation prefix of "Qt5Widgets" to CMAKE_PREFIX_PATH or set
  "Qt5Widgets_DIR" to a directory containing one of the above files.  If
  "Qt5Widgets" provides a separate development package or SDK, be sure it has
  been installed.

After some research I found this question. Following the answer I added a build dependency for qtbase5-dev. Unfortunately, this only lead to the following new error:
CMake Error at /opt/ros/melodic/share/catkin/cmake/catkinConfig.cmake:83 (find_package):
  Could not find a package configuration file provided by "qtbase5-dev" with
  any of the following names:

    qtbase5-devConfig.cmake
    qtbase5-dev-config.cmake

  Add the installation prefix of "qtbase5-dev" to CMAKE_PREFIX_PATH or set
  "qtbase5-dev_DIR" to a directory containing one of the above files.  If
  "qtbase5-dev" provides a separate development package or SDK, be sure it
  has been installed.
Call Stack (most recent call first):
  CMakeLists.txt:6 (find_package)

Therefore, my question: Could someone point me out how to correctly include the Qt5 dependencies for rviz and rqt plugins in ROS melodic? Below you can see my CMakeLists and package files for the two packages throwing errors.
rsm_rqt_plugins:
CMakeLists.txt:
cmake_minimum_required(VERSION 2.8.3)
project(rsm_rqt_plugins)

add_compile_options(-std=c++11)

find_package(catkin REQUIRED COMPONENTS
  roscpp
  rqt_gui
  rqt_gui_cpp
  rsm_msgs
  std_msgs
  std_srvs
)

set(CMAKE_AUTORCC ON)
find_package(cmake_modules REQUIRED)
find_package(Qt5Widgets REQUIRED)
include_directories(${Qt5Widgets_INCLUDE_DIRS} include)

###################################
## catkin specific configuration ##
###################################

catkin_package(
  INCLUDE_DIRS ${INC_DIR}
  LIBRARIES ${PROJECT_NAME}
  ${CMAKE_CURRENT_BINARY_DIR}/..
  ${CMAKE_CURRENT_BINARY_DIR}
  CATKIN_DEPENDS roscpp rqt_gui rqt_gui_cpp
)

###########
## Build ##
###########

## set variables for Statemachine Control node
set(SRCS_CONTROLS
  src/RSMControls.cpp
)
set(HDRS_CONTROLS
  src/RSMControls.h
)
set(UIS_CONTROLS
  src/rsm_controls.ui
)

set(INC_DIR
  include
  ${CMAKE_CURRENT_BINARY_DIR}
)

##########################################################################################
# qt5_wrap_cpp produces moc files for all headers listed
# qt5_wrap_ui produces .h files for all .ui files listed

## Statemachine Control:
qt5_wrap_cpp(MOCS_SRCS_CONTROLS ${HDRS_CONTROLS})
qt5_wrap_ui(UI_HEADER_CONTROLS ${UIS_CONTROLS})

##########################################################################################

include_directories(${INC_DIR} ${catkin_INCLUDE_DIRS})

## Statemachine Control:
add_library(rsm_rqt_plugins ${SRCS_CONTROLS} ${MOCS_SRCS_CONTROLS} ${UI_HEADER_CONTROLS})
target_link_libraries(rsm_rqt_plugins ${catkin_LIBRARIES} ${QT_QTCORE_LIBRARY} ${QT_QTGUI_LIBRARY})
add_dependencies(rsm_rqt_plugins ${catkin_EXPORTED_TARGETS})
  
install(TARGETS rsm_rqt_plugins
        ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
        LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
        RUNTIME DESTINATION ${CATKIN_GLOBAL_BIN_DESTINATION})
          
install(FILES
  rsm_rqt_plugins.xml
  DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION})

package.xml:
<?xml version="1.0"?>
<package format="2">
    <name>rsm_rqt_plugins</name>
    <version>1.2.0</version>
    <description>The rsm_rqt_plugins package includes the Robot
        Statemachine GUI plugin for rqt</description>
    <license>BSD</license>    

    <buildtool_depend>catkin</buildtool_depend>
    <build_depend>roscpp</build_depend>
    <build_depend>rqt_gui</build_depend>
    <build_depend>rqt_gui_cpp</build_depend>
    <build_export_depend>roscpp</build_export_depend>
    <build_export_depend>rqt_gui</build_export_depend>
    <build_export_depend>rqt_gui_cpp</build_export_depend>
    <exec_depend>roscpp</exec_depend>
    <exec_depend>rqt_gui</exec_depend>
    <exec_depend>rqt_gui_cpp</exec_depend>
    <build_depend>rsm_msgs</build_depend>
    <build_export_depend>rsm_msgs</build_export_depend>
    <exec_depend>rsm_msgs</exec_depend>
    <build_depend>cmake_modules</build_depend>
    <build_export_depend>cmake_modules</build_export_depend>
    <exec_depend>cmake_modules</exec_depend>
    <build_depend>std_msgs</build_depend>
    <build_export_depend>std_msgs</build_export_depend>
    <exec_depend>std_msgs</exec_depend>
    <build_depend>std_srvs</build_depend>
    <build_export_depend>std_srvs</build_export_depend>
    <exec_depend>std_srvs</exec_depend>
    <build_depend>qtbase5-dev</build_depend>

    <export>
        <rqt_gui plugin="${prefix}/rsm_rqt_plugins.xml" />
    </export>
</package>

rsm_rviz_plugin:
CMakeLists.txt:
cmake_minimum_required(VERSION 2.8.12)
project(rsm_rviz_plugins)

# C++ 11
add_definitions(-std=c++11)

find_package(catkin REQUIRED COMPONENTS
  rviz
  rsm_msgs
  visualization_msgs
  interactive_markers
  std_msgs
  std_srvs
  pluginlib
  tf
)

# Qt Stuff
if(rviz_QT_VERSION VERSION_LESS "5")
  find_package(Qt4 ${rviz_QT_VERSION} REQUIRED QtCore QtGui)
  include(${QT_USE_FILE})
  macro(qt_wrap_ui)
    qt4_wrap_ui(${ARGN})
  endmacro()
  macro(qt_wrap_cpp)
    qt4_wrap_cpp(${ARGN})
  endmacro()
else()
  find_package(Qt5 ${rviz_QT_VERSION} REQUIRED Core Widgets)
  set(QT_LIBRARIES Qt5::Widgets)
  macro(qt_wrap_ui)
    qt5_wrap_ui(${ARGN})
  endmacro()
  macro(qt_wrap_cpp)
    qt5_wrap_cpp(${ARGN})
  endmacro()
endif()

set(CMAKE_AUTORCC ON)
find_package(cmake_modules REQUIRED)
find_package(Qt5Widgets REQUIRED)
include_directories(${Qt5Widgets_INCLUDE_DIRS} include)

catkin_package(
  INCLUDE_DIRS ${INC_DIR}
  LIBRARIES ${PROJECT_NAME}
  ${CMAKE_CURRENT_BINARY_DIR}/..
  ${CMAKE_CURRENT_BINARY_DIR}
  CATKIN_DEPENDS roscpp
)

###########
## Build ##
###########

## set variables for Statemachine Control node
set(SRCS_CONTROLS
  src/PlantWaypointTool.cpp
  src/RSMControls.cpp
)
set(HDRS_CONTROLS
  src/RSMControls.h
)
set(UIS_CONTROLS
  src/rsm_controls.ui
)

set(INC_DIR
  include
  ${CMAKE_CURRENT_BINARY_DIR}
)

##########################################################################################
# qt5_wrap_cpp produces moc files for all headers listed
# qt5_wrap_ui produces .h files for all .ui files listed

## Statemachine Control:
qt5_wrap_cpp(MOCS_SRCS_CONTROLS ${HDRS_CONTROLS})
qt5_wrap_ui(UI_HEADER_CONTROLS ${UIS_CONTROLS})

include_directories(${INC_DIR} ${catkin_INCLUDE_DIRS})

## Statemachine Control:
add_library(${PROJECT_NAME} ${SRCS_CONTROLS} ${MOCS_SRCS_CONTROLS} ${UI_HEADER_CONTROLS})
add_executable(waypointFollowingVisualizationNode
    src/WaypointFollowingVisualizationNode.cpp
    src/WaypointFollowingVisualization.cpp)

target_link_libraries(${PROJECT_NAME} ${rviz_DEFAULT_PLUGIN_LIBRARIES} ${QT_LIBRARIES} ${catkin_LIBRARIES})
target_link_libraries(waypointFollowingVisualizationNode ${catkin_LIBRARIES})
  
add_dependencies(${PROJECT_NAME} ${catkin_EXPORTED_TARGETS})
add_dependencies(waypointFollowingVisualizationNode ${catkin_EXPORTED_TARGETS})

#############
## Install ##
#############

## Mark executables and/or libraries for installation
install(TARGETS ${PROJECT_NAME}
  ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
)

# Mark cpp header files for installation
install(DIRECTORY include/${PROJECT_NAME}/
  DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
  )
  
install(TARGETS waypointFollowingVisualizationNode
  RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION})

# Mark config files for installation
install(FILES
  rsm_rviz_plugins.xml
  DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
)

install(DIRECTORY launch/
  DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}/launch)

install(DIRECTORY icons/
  DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}/icons)
  
install(DIRECTORY media/
  DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}/media)

package.xml:
<?xml version="1.0"?>
<package format="2">
    <name>rsm_rviz_plugins</name>
    <version>1.2.0</version>
    <description>The rsm_rviz_plugins package includes the Robot
        Statemachine GUI plugin for RViz and the waypoint visualization
    </description>
    <license>BSD</license>

    <buildtool_depend>catkin</buildtool_depend>
    <build_depend>roscpp</build_depend>
    <build_export_depend>roscpp</build_export_depend>
    <exec_depend>roscpp</exec_depend>
    <build_depend>rviz</build_depend>
    <build_export_depend>rviz</build_export_depend>
    <exec_depend>rviz</exec_depend>
    <build_depend>interactive_markers</build_depend>
    <build_export_depend>interactive_markers</build_export_depend>
    <exec_depend>interactive_markers</exec_depend>
    <build_depend>visualization_msgs</build_depend>
    <build_export_depend>visualization_msgs</build_export_depend>
    <exec_depend>visualization_msgs</exec_depend>
    <build_depend>rsm_msgs</build_depend>
    <build_export_depend>rsm_msgs</build_export_depend>
    <exec_depend>rsm_msgs</exec_depend>
    <build_depend>cmake_modules</build_depend>
    <build_export_depend>cmake_modules</build_export_depend>
    <exec_depend>cmake_modules</exec_depend>
    <build_depend>std_msgs</build_depend>
    <build_export_depend>std_msgs</build_export_depend>
    <exec_depend>std_msgs</exec_depend>
    <build_depend>std_srvs</build_depend>
    <build_export_depend>std_srvs</build_export_depend>
    <exec_depend>std_srvs</exec_depend>
    <build_depend>pluginlib</build_depend>
    <build_export_depend>pluginlib</build_export_depend>
    <exec_depend>pluginlib</exec_depend>
    <build_depend>tf</build_depend>
    <build_export_depend>tf</build_export_depend>
    <exec_depend>tf</exec_depend>   
    <build_depend>qtbase5-dev</build_depend>
    
    <export>
        <rviz plugin="${prefix}/rsm_rviz_plugins.xml" />
    </export>
</package>

Originally posted by MarcoStb on ROS Answers with karma: 80 on 2020-11-19
Post score: 0

A:

Seems like I was testing with a detached git head or something when trying to add <build_depend>qtbase5-dev</build_depend> to the package.xml. I tried the prerelease test on a different machine and it worked with the above packge.xml and CMakeLists.txt. So, adding the build dependency on qtbase5-dev fixed it.

Originally posted by MarcoStb with karma: 80 on 2020-11-25
This answer was ACCEPTED on the original site
Post score: 0

