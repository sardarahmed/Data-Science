Q:

Rosservice Kinetic vs Melodic

I'm currently working on a project that was left partly complete by someone else, a while ago. The project is written with ROS Kinetic, but I'd like to make it compatible with melodic too (running on ubuntu 16.04 and 18.04 respectively, both on VMs). I've had some issues, though. Rosservice commands in particular don't work with Melodic, while they do work with Kinetic. I get errors saying "String has no len()" (this is a std_msgs String) but I never called len() in my code! Are there any differences between the implementation of Rosservice that I should be aware of? Sorry if it's something simple; I'm completely new to ROS.
The code:
import rospy
import ethernetcommunicator
import serialcommunicator
from std_msgs.msg import Bool
from std_msgs.msg import Float64
from std_msgs.msg import String
from mswrapper.srv import *

cm = serialcommunicator.Serialcommunicator()

def send_command_callback(data):
    return cm.send_command(data.data)

def set_speed_callback(data):
    cm.motor_jog(data.data)

def handle_send_command(req):
    controller_response = cm.send_command(str(req.command)[6:])
    if not controller_response:
        controller_response = ""
    return SendCommandResponse(String(controller_response))

def loop():
    input_1_pub = rospy.Publisher('mswrapper/input_1', Bool, queue_size=10)
    rospy.Subscriber('mswrapper/set_speed', Float64, set_speed_callback)
    rospy.Subscriber('mswrapper/send_command', String, send_command_callback)
    rospy.init_node('asciicom', anonymous=False)
    send_command_service = rospy.Service('mswrapper/send_command', SendCommand, handle_send_command)
    rate = rospy.Rate(1)
    while not rospy.is_shutdown():
        input_1_pub.publish(cm.get_input_1())
        rate.sleep()

if __name__ == '__main__':
    try:
        loop()
    except rospy.ROSInterruptException:
        pass

The error message is quite odd:
ERROR: Unable to send request. One of the fields has an incorrect type: 

     <type 'exceptions.TypeError'>: 'object of type 'String' has no len()' when writing 'data: 'mtr on''

srv file:
std_msgs/String command
    string data
---
std_msgs/String result
    string data

As you can see, there is no line number provided, only an error and a printout of my .srv file.
Meanwhile, on the node I'm running this from, I get another error message:
[ERROR] [numbers]: incoming connection failed: unable to receive data from sender, check sender's logs for details

So I have no idea where the error is coming from since I don't get a line number or even a file where this is taking place. Any help would be much appreciated!

Originally posted by Qwertazertyl on ROS Answers with karma: 1 on 2019-07-02
Post score: 0

Original comments
Comment by 130s on 2019-07-02:
Please describe how rosservice "doesn't work". Please check in with the support guideline  http://wiki.ros.org/Support#Do
Comment by Qwertazertyl on 2019-07-02:
Edited, is this ok?
Comment by jayess on 2019-07-02:
Can you please update your question with your code?
Comment by Qwertazertyl on 2019-07-03:
Code has been added
Comment by jayess on 2019-07-03:
Does it really say
[ERROR] [some numbers]:

? I've never seen any error like this. Can you please update your question with the full error (not redacted) and the full code (not abbreviated).
Comment by Qwertazertyl on 2019-07-03:
The error numbers change every time...
Comment by jayess on 2019-07-03:
Correct, but my point was more along the lines of what else are we missing from the error, if anything?
Comment by Qwertazertyl on 2019-07-03:
That's the full error. I'll update the whole program if you want.

A:

def handle_send_command(req):

    controller_response = cm.send_command(str(req.command)[6:])

this is most likely your problem: req.command is a std_msgs.String, not a str.
A std_msgs.String contains a data field, which is a str.
So you'll probably want to do something like:
 def handle_send_command(req):
    controller_response = cm.send_command(str(req.command.data)[6:])

Additionally:
def loop():
    ...
    send_command_service = rospy.Service('mswrapper/send_command', SendCommand, handle_send_command)

Are you (re)creating Service servers in a loop? That's probably not something you want to do.

Originally posted by gvdhoorn with karma: 86574 on 2019-07-03
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by gvdhoorn on 2019-07-03:
PS: I'm also uncertain why you are using std_msgs/String in your custom .srv: why not use the string type directly for the command and result fields?
PPS: using some other than a string may actually be better, as a string can contain any arbitrary string, not just valid ones.
And PPPS: I'm not sure how this would've ever worked. Afaik this hasn't changed between Kinetic and Melodic.
Comment by Qwertazertyl on 2019-07-03:
I tried changing to req.command.data but still get the same "String has no len()" error. Also, I tried adding some print statements in handle_send_command but nothing appears.
Comment by Qwertazertyl on 2019-07-03:
And should I just move the service definition out of loop? Or should I put it in main, another function, etc?

