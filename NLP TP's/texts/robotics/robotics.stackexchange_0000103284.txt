Q:

Nav2 robot bouncing

Hi everyone.
I have some issue.

When I start NAV2, the robot starts bouncing around.
Is that issue of nav2 parameter?
I'm completely lost and would appreciate some help.
amcl:
ros__parameters:
use_sim_time: False
alpha1: 0.1
alpha2: 0.1
alpha3: 0.1
alpha4: 0.1
alpha5: 0.1
base_frame_id: "base_footprint"
beam_skip_distance: 0.5
beam_skip_error_threshold: 0.9
beam_skip_threshold: 0.3
do_beamskip: false
global_frame_id: "map"
lambda_short: 0.1
laser_likelihood_max_dist: 3.0
laser_max_range: 15.9
laser_min_range: 0.16
laser_model_type: "likelihood_field"
max_beams: 60
max_particles: 2000
min_particles: 500
odom_frame_id: "odom"
pf_err: 0.5
pf_z: 0.99
recovery_alpha_fast: 0.0
recovery_alpha_slow: 0.0
resample_interval: 1
robot_model_type: "omnidirectional"
save_pose_rate: 0.5
sigma_hit: 0.2
tf_broadcast: true
transform_tolerance: 1.0
update_min_a: 0.2
update_min_d: 0.25
z_hit: 0.5
z_max: 0.05
z_rand: 0.5
z_short: 0.05
scan_topic: scan

controller_server:
ros__parameters:
use_sim_time: False
controller_frequency: 20.0
#이동속도 가 임계값보다 낮으면 컨트롤러는 이동 회전을 멈춤
min_x_velocity_threshold: 0.005 
min_y_velocity_threshold: 0.005
min_theta_velocity_threshold: 0.005
#######
failure_tolerance: 0.3 #로봇이 목표 지점에 도달하지 못했을 때 허용되는 거리 좀 더 정밀한 제어를 위한다면 더 작은 값으로.
progress_checker_plugin: "progress_checker" #진행 상태를 확인하기 위해 사용되는 플러그인.
goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
controller_plugins: ["FollowPath"]

# Progress checker parameters
progress_checker:
  plugin: "nav2_controller::SimpleProgressChecker"
  required_movement_radius: 0.5
  movement_time_allowance: 10.0
# Goal checker parameters
#정밀한 제어를 위해 필요한 파라미터 나중에 주석 풀고 해보기
#precise_goal_checker:
#  plugin: "nav2_controller::SimpleGoalChecker"
#  xy_goal_tolerance: 0.25
#  yaw_goal_tolerance: 0.25
#  stateful: True
general_goal_checker:
  stateful: True
  plugin: "nav2_controller::SimpleGoalChecker"
  xy_goal_tolerance: 0.25
  yaw_goal_tolerance: 0.25
# DWB parameters
FollowPath:
  plugin: "dwb_core::DWBLocalPlanner"
  debug_trajectory_details: True
  min_vel_x: 0.0
  min_vel_y: 0.0
  max_vel_x: 0.10
  max_vel_y: 0.10
  max_vel_theta: 0.5
  min_speed_xy: 0.0
  max_speed_xy: 0.10
  min_speed_theta: 0.0
  # Add high threshold velocity for turtlebot 3 issue.
  # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
  acc_lim_x: 1.25
  acc_lim_y: 1.25
  acc_lim_theta: 1.62
  decel_lim_x: -1.25
  decel_lim_y: -1.25
  decel_lim_theta: -1.62
  vx_samples: 20
  vy_samples: 5
  vtheta_samples: 20
  sim_time: 1.7
  # granularity 높을수록 이동경로가 세분화 되어 부드럽고 정교한 이동이 이뤄짐 하지만 계산비용 증가
  linear_granularity: 0.05
  angular_granularity: 0.05
  transform_tolerance: 0.2
  xy_goal_tolerance: 0.25
  trans_stopped_velocity: 0.01 #로봇이 정지상태로 간주되는 선속도
  short_circuit_trajectory_evaluation: True
  stateful: True
  critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
  #아래는 크리틱스랑 관련된 파라미터
  BaseObstacle.scale: 0.02
  PathAlign.scale: 32.0
  PathAlign.forward_point_distance: 0.1
  GoalAlign.scale: 24.0
  GoalAlign.forward_point_distance: 0.1
  PathDist.scale: 32.0
  GoalDist.scale: 24.0
  RotateToGoal.scale: 32.0
  RotateToGoal.slowing_factor: 5.0
  RotateToGoal.lookahead_time: -1.0

local_costmap:
local_costmap:
ros__parameters:
  update_frequency: 5.0
  publish_frequency: 2.0
  global_frame: odom
  robot_base_frame: base_footprint
  use_sim_time: False
  rolling_window: true
  width: 3
  height: 3
  resolution: 0.05
  robot_radius: 0.58
  plugins: ["obstacle_layer", "voxel_layer", "inflation_layer"]
  inflation_layer:
    plugin: "nav2_costmap_2d::InflationLayer"
    cost_scaling_factor: 1.0
    inflation_radius: 0.58 #로봇 중심으로 주변 장애물에 대해 인플레이션. 로봇 반경 주변으로 장애물과의 접촉 반경.
  obstacle_layer:
    plugin: "nav2_costmap_2d::ObstacleLayer"
    enabled: True
    observation_sources: scan
    scan:
      topic: /scan
      max_obstacle_height: 2.0
      clearing: True
      marking: True
      data_type: "LaserScan"
  voxel_layer:
    plugin: "nav2_costmap_2d::VoxelLayer"
    enabled: True
    publish_voxel_map: True
    origin_z: 0.0
    z_resolution: 0.05
    z_voxels: 16
    max_obstacle_height: 2.0
    mark_threshold: 0
    observation_sources: scan
    scan:
      topic: /scan
      max_obstacle_height: 2.0
      clearing: True
      marking: True
      data_type: "LaserScan"
      raytrace_max_range: 3.0
      raytrace_min_range: 0.0
      obstacle_max_range: 2.5
      obstacle_min_range: 0.1
  static_layer:
    map_subscribe_transient_local: True
  always_send_full_costmap: True
local_costmap_client:
ros__parameters:
  use_sim_time: False
local_costmap_rclcpp_node:
ros__parameters:
  use_sim_time: False

global_costmap:
global_costmap:
ros__parameters:
  update_frequency: 1.0
  publish_frequency: 1.0
  global_frame: map
  robot_base_frame: base_footprint
  use_sim_time: False
  robot_radius: 0.58
  resolution: 0.05
  track_unknown_space: true
  plugins: ["static_layer", "obstacle_layer", "voxel_layer", "inflation_layer"]
  obstacle_layer:
    plugin: "nav2_costmap_2d::ObstacleLayer"
    enabled: True
    observation_sources: scan
    scan:
      topic: /scan
      max_obstacle_height: 2.0
      clearing: True
      marking: True
      data_type: "LaserScan"
      raytrace_max_range: 3.0
      raytrace_min_range: 0.0
      obstacle_max_range: 1.25 #2.5
      obstacle_min_range: 0.0
  static_layer:
    plugin: "nav2_costmap_2d::StaticLayer"
    map_subscribe_transient_local: True
  voxel_layer:
    plugin: "nav2_costmap_2d::VoxelLayer"
    enabled: True
    publish_voxel_map: True
    origin_z: 0.0
    z_resolution: 0.05
    z_voxels: 16
    max_obstacle_height: 2.0
    mark_threshold: 0
    observation_sources: scan
    scan:
      topic: /scan
      max_obstacle_height: 2.0
      clearing: True
      marking: True
      data_type: "LaserScan"
      raytrace_max_range: 3.0
      raytrace_min_range: 0.0
      obstacle_max_range: 2.5
      obstacle_min_range: 0.0
  inflation_layer:
    plugin: "nav2_costmap_2d::InflationLayer"
    cost_scaling_factor: 3.0
    inflation_radius: 0.58
  always_send_full_costmap: True

global_costmap_client:
ros__parameters:
use_sim_time: False
global_costmap_rclcpp_node:
ros__parameters:
use_sim_time: False

Originally posted by Robobo on ROS Answers with karma: 36 on 2023-05-19
Post score: 1

A:

It seems that there was confusion due to the mixing of wheel odometry and EKF (Extended Kalman Filter) odometry. Even though I had named different topic names for the wheel and EKF odometry, there was still confusion. To resolve the issue, I replaced it with a more accurate odometry source and used only one odometry.

Originally posted by Robobo with karma: 36 on 2023-05-21
This answer was ACCEPTED on the original site
Post score: 0

