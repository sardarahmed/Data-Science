Q:

Writing a tf broadcaster (Python)

I don't really understand this tutorial. Link to the tutorial :- Click here
I can understand how broadcaster code works but the launch code seems too strange.
    <node name="turtle1_tf_broadcaster" pkg="learning_tf" type="turtle_tf_broadcaster.py" respawn="false" output="screen" >
  <param name="turtle" type="string" value="turtle1" />
</node>
<node name="turtle2_tf_broadcaster" pkg="learning_tf" type="turtle_tf_broadcaster.py" respawn="false" output="screen" >
  <param name="turtle" type="string" value="turtle2" /> 
</node>

To my understanding, the above code creates two instances of the node right? So we should have turtle1 and turtle2 right?
But they mentioned,
"If you run tf_echo for the transform between the world and turtle 2, you should not see a transform, because the second turtle is not there yet."
I really don't understand how this works. Please explain.

Originally posted by Chan on ROS Answers with karma: 15 on 2021-05-12
Post score: 0

Original comments
Comment by jayess on 2021-05-12:
What tutorial? Can you please update your question to a link to the tutorial?
Comment by Chan on 2021-05-12:
Updated the question with link. Thanks.

A:

The above code creates 2 instances of the turtle_tf_brodcaster.py node.
By running rosnode list, you would find the two nodes, named as turtle1_tf_broadcaster and turtle2_tf_broadcaster respectively.
We are pasing the values of the param named turtle to the two nodes. For the first node, we are setting the value of the turtle param to turtle1, and for the second node, we are setting it to turtle2.
Each node is responsible for finding the value of world -> turtleX transform and then printing it.
world -> turtle1 transform exists because of the following lines present in the launch file -
<node pkg="turtlesim" type="turtlesim_node" name="sim"/>
<node pkg="turtlesim" type="turtle_teleop_key" name="teleop" output="screen"/>

That's why, world -> turtle1 transform would be printed by the turtle1_tf_brodcaster node.
world -> turtle2 transform is not being being published on the tf tree at the moment. You can run another instance of turtlesim_node so that world -> turtle2 transform starts getting published. Once you do that, turtle2_tf_brodcaster node would be able to print the same.
Does that make sense?

Originally posted by skpro19 with karma: 310 on 2021-05-12
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by Chan on 2021-05-12:
Great explanation. I tried another one. I removed one instance and kept that param name as turtle2. When I viewed the tf tree, there is no tf data published. Only if I keep the param name as turtle1, it's working. Why is that happening?
Comment by skpro19 on 2021-05-12:
<node pkg="turtlesim" type="turtlesim_node" name="sim"/>  is responsible for generating the world -> turtle1  transform.
If you run turtle_tf_brodcaster node with the turtle param set to turtle2, it won't work because it would try to find the transform between world -> turtle2 and then publish it. But, the turtlesim_node is publishing world -> turtle1 transform on the tf tree.
Comment by skpro19 on 2021-05-12:
Delete everything from the launch file and just keep this -
<node pkg="turtlesim" type="turtlesim_node" name="sim"/>
<node pkg="turtlesim" type="turtle_teleop_key" name="teleop" output="screen"/>

Now, visualise the tf tree.
Comment by Chan on 2021-05-12:
Oh cool. Still I don't understand few things. If turtlesim is publishing the world to turtle1 transform, what is the broadcaster code given in the tutorial used for? Isn't it the reason to publish a transform? Am I confusing myself?
Comment by skpro19 on 2021-05-12:
Could you please attach the tf tree you see when you just keep this in your launch file -
<node pkg="turtlesim" type="turtlesim_node" name="sim"/>
<node pkg="turtlesim" type="turtle_teleop_key" name="teleop" output="screen"/>

Comment by Chan on 2021-05-12:
Sorry for the late reply. I'm getting as "no tf data received" for those two lines.
Comment by tryan on 2021-05-12:
turtlesim_node only publishes the turtle's pose to a topic--not an actual transform.  When you run the launch file, turtlesim_node spawns one turtle automatically (use the spawn service to make more) and publishes the pose for turtle1 (default name in the source code) on the /turtle1/pose topic.  The turtle1_tf_broadcaster node subscribes to that topic, gets the pose, and publishes the corresponding transform to the tf tree.
Until you spawn a second turtle, turtlesim_node doesn't publish on the /turtle2/pose topic, so the second broadcaster won't get a pose and won't publish the transform for turtle2.  Therefore, the transform won't exist in the tf tree.
Comment by Chan on 2021-05-13:
That explains all. Thanks a lot both..!
Comment by skpro19 on 2021-05-13:
@tryan makes sense. I will update the original answer to reflect this.

