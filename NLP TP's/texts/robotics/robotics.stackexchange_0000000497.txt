Q:

Collaborative Behavior: Implementing a Bucket Brigade With Robot Arms

I was wondering whether something like this is possible: A block of ice(say) needs to be transferred piece by piece from a source to a destination with the help of 5 robots standing in a straight line between the source and destination. The first robot picks up a piece of the block from the source and checks if the next robot in line is busy. If yes, it waits for it to complete its task and proceeds, otherwise it transfers the piece and goes back to collect another piece. Please help me on implementing this if it is possible, as I am thinking to make it a project topic.
to clear out the confusions, here's a smaller prototype of the project i'm thinking,
i have two cars, one wired, another wireless. the wired car is the master here, the wireless, the slave. through a remote, i send a command to the wired car to instead command the wireless car to move forward. the wired car will then check if the wireless slave is already executing some previously given command or no, and accordingly send the command.
conversely, the master may send the command as soon as it receives it, it's on the slave now to complete the task it's doing, and then execute the command it just received.

A:

The generic answer is yes, such a project could be implemented using existing hardware and frameworks (ROS, MRDS, something else, or none).  The collaboration part is pretty simple in this scenario, it's a straightforward handshake between producer & consumer.  
The hard part would be first defining each of the jobs in detail, procuring hardware that meets the requirements, and actually getting each robot to do his assigned task reliably.  As others have pointed out, you'll need to be a lot more specific.

A:

A standard way to model that kind of discrete-event behavior is through Petri Nets or a Parallel Composition of Automata. 
An interesting start might be to simply create the model and see if it works in simulation first. That will help you solve the high-level logic of your problem. After that is dealt with, you can begin to think about which robot you want to use (or whether you want to build your own) and how you'll implement that high-level logic in your programming language of choice.
The good thing about using these models is that you have means to systematically evaluate whether you have solved your problem or not. Ad-hoc programming might work if the problem is simple enough, but as soon as you incorporate more difficult situations it becomes too error-prone IMO.

