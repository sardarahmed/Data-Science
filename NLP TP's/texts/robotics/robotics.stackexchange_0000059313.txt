Q:

Best practice for tf on an arm with fixed base

Hi
I'm running a program on two very similar robot arms, with a fixed base. One of the issues is the fact that one robot is mounted at an angle compared to the other one, so obviously I need to transform my task to a different frame. I've set it up using tf and tf_broadcaster, as this is the only way I know how, but the solution is pretty inelegant (and still somewhat buggy). Thing is that I only really need to perform transformations when I program my plan (or once for every waypoint), while all the code I can find assumes that I would like to continuously publish the transforms, which seems a little overkill, and constantly running a node that is only really needed for the first 0.5s of the application.
I've tried looking at tf::Transformer to make my own "service" solution, but I haven't made that work yet, and I want to know if it's a bad idea, before I continue. Is it really necessary to use a broadcaster, when all I need is a transformation from a fixed point?

Originally posted by paturdc on ROS Answers with karma: 157 on 2014-05-12
Post score: 0

A:

If you're only transforming at a single point in time you only need to publish once. If you're doing it at different points in time you will need to publish around the interval when you want to query for the transform.
Note the overhead for a static transform publisher is very low. You can publish at very low rates.
tf2 adds support for static transforms.

Originally posted by tfoote with karma: 58457 on 2014-05-12
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by paturdc on 2014-05-12:
Thanks, that makes sense. Ideally, I wouldn't want separate nodes for broadcasting and listening at all, as 5 lines of code in my main app would do the same job. But if publishing at low rates is the easiest solution I'll just take it.

