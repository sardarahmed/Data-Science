Q:

How best to write base driver for turtlebot variant with a custum hardware base?

Hi
I am developing a turtlebot variant that does not use an existing turtlebot base.  I want to write a driver for it, but am unsure of turtlebot architecture.  It seems like the code is tied to the create base or even more so to the kubuki base.  I would like to keep base code contained to a single node and new_base_driver.py.  Is the turtlebot node the central point used to communicate with the base driver code?  Is there a generic base driver module I should work off of?  What do you think would be the best way to proceed?
The base will be non-holonomic in one configuration and holonomic in another.  In short it can spin about it's center point but also go backwards to pull and push a cart that can be attached to it to carry instruments, sensors, etc.

Originally posted by billtecteacher on ROS Answers with karma: 101 on 2014-03-19
Post score: 0

Original comments
Comment by billtecteacher on 2014-03-19:
Any comments welcome perhaps this is not the way to create your own base?
Comment by dornhege on 2014-03-20:
It would be a good idea to put your question in the text instead of the title.
Comment by dornhege on 2014-03-20:
Is your base very similar to the create, especially on the driver/connection level? (i.e. not only that it looks similar)
Comment by billtecteacher on 2014-03-20:
This particular base works somewhat like create except can go backwards without turning around.  Would like to have students build a wide variety of bases with different kinematics of there own design.  So want to write the driver so it can be easily adapted by students for there own design.  So really would prefer not to use the connect for newer base interface.  But did not want to have to re-write a major part of turtlebot just to use a custum base and also want to stay as compatible with turtlebot as possible.

A:

You will probably want to write the controller from scratch.
The create driver spends most of it's complexity interacting with the Create serial interface. Your students should be able to design a simpler serial interface and write a few dozen lines of python to translate from the cmd_vel topic to the motor commands and publish the odometry in the same way as the create_driver does.

Originally posted by tfoote with karma: 58457 on 2014-03-20
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by billtecteacher on 2014-03-21:
Thankyou!!!!

