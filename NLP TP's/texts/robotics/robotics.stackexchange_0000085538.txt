Q:

Another question about extrapolation in the past

Hello all,
That's a question that has been asked multiple times but none of the solution have worked so far.  I'm playing data from a rosbag and when trying to query the tf I have this error:
[ERROR] [1519650555.804462800, 1504014242.149115352]: Lookup would require extrapolation into the past.  Requested time 1504014237.046037623 but the earliest data is at time 1504014237.201914971, when looking up transform from frame [base_link] to frame [world]

Here is the code I'm using to query it :
ros::Time stamp = scan->header.stamp;
//Read transformation UGLY TRICK :P
tf::TransformListener listener(ros::Duration(50.0));
std::cout <<  listener.DEFAULT_CACHE_TIME << " " << listener.getCacheLength() << std::endl;
tf::StampedTransform transform;
try {
    listener.waitForTransform(odom_frame_, "/base_link", stamp, ros::Duration(5.0));
    listener.lookupTransform(odom_frame_, "/base_link", stamp, transform);
} catch (tf::TransformException ex) {
    ROS_ERROR("%s",ex.what());
}

As visible in the code, I tried to change the buffer size to some higher number but it seems this is ignored :/ ?
Also this function is in the callback to a messageFilter in gmappings code:
scan_filter_ = new tf::MessageFilter<sensor_msgs::LaserScan>(*scan_filter_sub_, tf_, odom_frame_, 1);
scan_filter_->registerCallback(boost::bind(&SlamGMapping::laserCallback, this, _1));

I'm running the rosbag with clock and I've set use_sim_time to true. I've also tried slowing down the rosbag to try have my algorithm catch up but I still have the same problem. So I'm at a loss on what the actual problem is. Using `ros::Time(0) instead of the haeder time stamp works.
What is wrong in the approach I'm having ?

Originally posted by Maya on ROS Answers with karma: 1172 on 2018-02-26
Post score: 0

Original comments
Comment by lucasw on 2018-02-26:
Do you get that error for every lookup or just the first few?  Surely once the stamp gets past 1504014237.201914971 it starts working?
Comment by Maya on 2018-02-26:
For all of them. That was the weird thing, it kept moving forward...

A:

It looks like you are creating the tf listener in the callback that is receiving the scan, when it needs to be created as early as possible when your node starts and persist throughout (e.g. be a class member or a global).
I'm working on creating a set of boiler plate tf examples: https://github.com/lucasw/tf_demo
It will only be tf2, it's only python now but will get C++ next, and have examples with and without classes, and be linked to from the wiki pages.  There are so many similar tf questions it'll be useful to point out at least my take on how it ought to be done, contributions are welcome also.

Originally posted by lucasw with karma: 8729 on 2018-02-26
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by Maya on 2018-02-26:
I'll try that ! That's most probably the problem
Comment by tfoote on 2018-02-26:
@lucasw Might I suggest extending/improving the tf2 tutorials here: https://github.com/ros/geometry_tutorials/tree/indigo-devel/turtle_tf2 instead of a new resource?
Comment by lucasw on 2018-02-26:
Sure I'll take a look

