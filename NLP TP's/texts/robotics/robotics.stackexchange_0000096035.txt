Q:

Is there a REP or standard for the /cmd_vel topic?

Is there anything that says "Thou shalt only use geometry_msgs/Twist on the /cmd_vel topic"?
Is there anything that says how a robot might indicate, "I have 2 wheels and can only move in the X direction or rotate about the Z axis"?
What should a robot do if it is commanded to move in the Y or Z axis and it is not capable of doing so?  Should it halt and catch fire?  Should it silently ignore such commands?
Oh yeah, how about some way to indicate "If you ask me to go 3e8 m/s, I'm not going to be able to achieve that.  The best I can do is 1e-2 m/s, and that's only on a good day".
I feel like I read a REP about this once before, but all I'm seeing today is REP-103.
Thanks.
--wpd

Originally posted by wpd on ROS Answers with karma: 249 on 2020-06-02
Post score: 0

Original comments
Comment by gvdhoorn on 2020-06-03:
Related discussion on ROS Discourse which seems to raise the same/similar points: Is “Twist” (still) a good velocity command interface (especially about the lack of a "return channel" in this interface).
And a related Q&A: #q332587 (which references the same REP).

A:

Is there anything that says "Thou shalt only use geometry_msgs/Twist on the /cmd_vel topic"?

You can always do whatever you want, but you are clearly aware of the general convention around this so its good to follow it when you can and it makes sense to. No, there isn't an   REP specifically listing cmd_vel as the "official" base driver topic, its just a sane default we typically use, similar to camera_info and image for working with camera streams. There are tools like image transport that will help you if you do it that way, but you don't have to.
What should a robot do if it is commanded to move in the Y or Z axis and it is not capable of doing so? Should it halt and catch fire? Should it silently ignore such commands?

That's up to your application and needs. If you have an omni robot, then Y could be a real command so you don't want to ignore it. If Differential, then its obviously bogus and you could either silently fail or throw something and both would be reasonable in context. If you're in control of your trajectory planners, you shouldn't have a situation ever with an invalid twist.
Oh yeah, how about some way to indicate "If you ask me to go 3e8 m/s, I'm not going to be able to achieve that. The best I can do is 1e-2 m/s, and that's only on a good day".

Lookup various forms of the velocity smoother package, that should be what you want.

Originally posted by stevemacenski with karma: 8272 on 2020-06-02
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by gvdhoorn on 2020-06-03:
Sorry Steve for the additional answer, but I couldn't fit it in a comment, as there actually sort-of is a REP about this :)
I do agree with most of what you write though.
Comment by stevemacenski on 2020-06-03:
That's not really an REP on using cmd_vel, that's a description of the TB mechanism including other stuff and not generalized for "thou shall...". I don't think that's the intent of the standard to be interpreted that way.
Comment by gvdhoorn on 2020-06-03:
Technically you're correct.
However it's the only official documentation about cmd_vel afaict.

I don't think that's the intent of the standard to be interpreted that way.

I don't completely understand this part of your comment. Interpreted how?
Even though REP-119 is not specifically about cmd_vel, it does give information on how that topic should be used, which is what a REP about it would also do.
Comment by stevemacenski on 2020-06-03:
That REP is just an explanation of the TB topic / node structure, I don’t think that any particular element from it should be selectively pulled out and thought of as the “right way” to do things or quoting that REP as a standard for how to do things. The scope of the REP is pretty clear and its not written to be a “thou shalt...” in any of the elements of it.
Comment by gvdhoorn on 2020-06-03:\

I don’t think that any particular element from it should be selectively pulled out and thought of as the “right way” to do things or quoting that REP as a standard for how to do things

again, technically correct.
However, I don't believe it's a stretch to assume many implementations of base drivers since that time have either been modelled on the TB implementation or the PR2's (which essentially uses the same semantics).
If that's the case, we're not selectively lifting anything here: that has already been done by the authors of those drivers. We're referring to the parts of the REP which relate to the behaviour (and sometimes implementation) of the driver on which many others are modelled.

The scope of the REP is pretty clear and its not written to be a “thou shalt...” in any of the elements of it.

Really? The two pieces I quoted seem pretty normative / prescriptive to me @stevemacenski.
Comment by stevemacenski on 2020-06-03:
For the TB, I think we’re both on the same page

