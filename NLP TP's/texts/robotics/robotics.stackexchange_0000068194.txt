Q:

ROS compatibility for accurate UWB positioning sensor [discussion]

Hello,
my name is Samuel and I am one of the creators of Pozyx, an indoor positioning system that I would like to make ROS compatible. Our system is currently running on kickstarter. We are using ultra-wideband (UWB) radio signals to accurately measure the distances to some anchors for positioning (the signals can pass through walls or objects). This allows us to accurately estimate the position indoor. We have recently achieved our funding goal and as a stretch goal we are going to make sure the system is ROS compatible.
By means of this post I would like to know what kind of functionalities should be supported by the Pozyx platform to make it compatible for ROS?
Some more information about the platform:
The tag is equipped with an UWB transceiver, a gyroscope, accelerometer, magnetometer and pressure sensor. The onboard microcontroller (STM32F4) is in charge of the ranging protocol, messaging protocol, the tracking algorithm, sensor fusion, anchor calibration and all the other stuff to make the board act like a sensor: communication, configuration, etc.
Any input would be much appreciated.
Thanks

Originally posted by Samuel on ROS Answers with karma: 11 on 2015-06-19
Post score: 1

Original comments
Comment by NicoNie on 2017-09-18:
Hi Samuel, I am very interested in your Pozyx project, can I have your Email for more details, my email is "nozeroxue@gmail.com".
Comment by Filippo on 2020-04-09:
Hi @Samuel, can you please share your driver? I'm also using an UWB sensor but I don't know how to use the data that I received in localization package

A:

Have you thought about how you actually want to integrate with a ROS node graph (ie: communicate with the master and other nodes)? rosserial or any of the other minimal bridging approaches come to mind. Two options you might want to look at are cROS and the work Bosch is doing for the STM32F4. The former is a 'full' ROS client library implementation in C, while the latter is more rosserial inspired.

Edit: An alternative to running a full Node on your device (either through bridging, or a client lib) could be to provide a ROS driver for your device. If you have a byte stream or something that you can make available to the 'other end' of a serial (or other easy to establish) connection, a ROS Node dedicated to de-serialising that stream, interacting with your device and publishing msgs to appropriate topics (like the ones suggested by @dornhege) could also work. Examples of this approach are the nmea_navsat_driver, urg_node, velodyne or any of the IMU drivers (um7, razor_imu_9dof fi).
Having said that, your sensor as a node is both sexier and has a higher degree of plug-and-play than any bridging or driver approach. It is also technically more challenging though.

Originally posted by gvdhoorn with karma: 86574 on 2015-06-19
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by Samuel on 2015-06-19:
Because our system is Arduino compatible, rosserial_arduino looks like a very straightforward approach. However, directly implementing it on the board would be more elegant. We are using FreeRTOS already so the last library looks very interesting, thank you.
Comment by Samuel on 2015-06-19:
Just wondering though, we are using I2C now for communication. Is it possible to connect this directly to a ROS platform?
Comment by gvdhoorn on 2015-06-19:
I'm not sure I completely understand you: most ROS systems are run on normal desktop PCs. I'd say that there are very few that have i2c capability out-of-the-box. Perhaps you should clarify what you mean with "make it ROS compatible": should it be a standalone node, or depend on an additional PC?
Comment by Samuel on 2015-06-19:
Ok :) I thought ROS was primarily used on robots. So people could add sensors (like Pozyx) to the robot, connected by means of I2C, SPI, USB .. and then get all the measurements centrally and organized within the ROS framework to make intelligent decisions and steer the robot.
Comment by gvdhoorn on 2015-06-19:
It is used on robots, but those robots still need computers :). And those computers (could be desktop PC hw) don't necessarily have I2C or SPI. USB, serial, ethernet: yes. Bridging is an accepted strategy for connecting embedded devices to a device running a full ROS (node).
Comment by Samuel on 2015-06-21:
Ok√© thanks. Love it by the way that you are using the word sexier :)
Comment by dornhege on 2015-06-22:
When you're thinking about rosserial, test the Imu message before. I have not yet seen someone getting that size of message to work with rosserial directly, so you might need an extra driver-node anyways. Maybe that is fixed by now, it's been a while since I tested it.

