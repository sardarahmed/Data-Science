Q:

Segfault using xvfb with Gazebo but not with xnest

Hello everyone, I'm trying to get a little further with running Gazebo remotely.
On the remote machine, one display (:1) is provided by Xvfb, while the other (:2) is provided by Xnest.
glxinfo says both displays provide direct rendering.
Xnest works, but Xvfb segfaults
Any suggestions as to what's happening?
The remote machine does not have a supported graphics card (yet Xnest works).
The local machine is a mac (running Snow Lepoard) with an nvidia card.
I hope Xvfb is going to be an option because it permits glxgears to operate at 487 FPS vs 4 FPS with Xnest.
I'm starting with gazebo on electric because this error message is more meaningful than what I see on fuerte (gazebo 1.0.1).
Program received signal SIGSEGV, Segmentation fault.
0x00007fffe40f5ad5 in Ogre::GLXWindow::create (this=0x7ffff7eb8288, name=..., width=542, height=305, 
    fullScreen=<value optimized out>, miscParams=<value optimized out>)
    at /tmp/buildd/ros-electric-visualization-common-1.6.3/debian/ros-electric-visualization-common/opt/ros/electric/stacks/visualization_common/ogre/build/ogre_src_v1-7-3/RenderSystems/GL/src/GLX/OgreGLXWindow.cpp:326
326 /tmp/buildd/ros-electric-visualization-common-1.6.3/debian/ros-electric-visualization-common/opt/ros/electric/stacks/visualization_common/ogre/build/ogre_src_v1-7-3/RenderSystems/GL/src/GLX/OgreGLXWindow.cpp: No such file or directory.
    in /tmp/buildd/ros-electric-visualization-common-1.6.3/debian/ros-electric-visualization-common/opt/ros/electric/stacks/visualization_common/ogre/build/ogre_src_v1-7-3/RenderSystems/GL/src/GLX/OgreGLXWindow.cpp
(gdb) bt
#0  0x00007fffe40f5ad5 in Ogre::GLXWindow::create (this=0x7ffff7eb8288, name=..., width=542, height=305, 
    fullScreen=<value optimized out>, miscParams=<value optimized out>)
    at /tmp/buildd/ros-electric-visualization-common-1.6.3/debian/ros-electric-visualization-common/opt/ros/electric/stacks/visualization_common/ogre/build/ogre_src_v1-7-3/RenderSystems/GL/src/GLX/OgreGLXWindow.cpp:326
#1  0x00007fffe40e84b2 in Ogre::GLXGLSupport::newWindow (this=0x737f60, name=..., width=542, height=305, 
    fullScreen=false, miscParams=0x7fffffffd3f0)
    at /tmp/buildd/ros-electric-visualization-common-1.6.3/debian/ros-electric-visualization-common/opt/ros/electric/stacks/visualization_common/ogre/build/ogre_src_v1-7-3/RenderSystems/GL/src/GLX/OgreGLXGLSupport.cpp:379
#2  0x00007fffe40a6a6a in Ogre::GLRenderSystem::_createRenderWindow (this=0x7ffff7eb7758, name=..., 
    width=542, height=305, fullScreen=false, miscParams=0x7fffffffd3f0)
    at /tmp/buildd/ros-electric-visualization-common-1.6.3/debian/ros-electric-visualization-common/opt/ros/electric/stacks/visualization_common/ogre/build/ogre_src_v1-7-3/RenderSystems/GL/src/OgreGLRenderSystem.cpp:1009
#3  0x00007ffff6e1146f in Ogre::Root::createRenderWindow (this=0x7ffff7ea78d8, 
    name=<value optimized out>, width=<value optimized out>, height=<value optimized out>, 
    fullScreen=<value optimized out>, miscParams=<value optimized out>)
    at /tmp/buildd/ros-electric-visualization-common-1.6.3/debian/ros-electric-visualization-common/opt/ros/electric/stacks/visualization_common/ogre/build/ogre_src_v1-7-3/OgreMain/src/OgreRoot.cpp:1199
#4  0x00007ffff5641be7 in gazebo::OgreCreator::CreateWindow(_XDisplay*, int, int, unsigned int, unsigned int) () from /opt/ros/electric/stacks/simulator_gazebo/gazebo/gazebo/lib/libgazebo_rendering.so
#5  0x00007ffff5642b8d in gazebo::OgreCreator::CreateWindow(Fl_Window*, unsigned int, unsigned int) ()
   from /opt/ros/electric/stacks/simulator_gazebo/gazebo/gazebo/lib/libgazebo_rendering.so
#6  0x00007ffff567b857 in gazebo::UserCamera::UserCamera(gazebo::GLWindow*) ()
   from /opt/ros/electric/stacks/simulator_gazebo/gazebo/gazebo/lib/libgazebo_rendering.so
#7  0x00007ffff58cf43a in gazebo::GLWindow::CreateCameras(double) ()
   from /opt/ros/electric/stacks/simulator_gazebo/gazebo/gazebo/lib/libgazebo_gui.so.0.10.0
#8  0x00007ffff58ddeac in gazebo::GLFrameManager::CreateCameras() ()
   from /opt/ros/electric/stacks/simulator_gazebo/gazebo/gazebo/lib/libgazebo_gui.so.0.10.0
#9  0x00007ffff7b9155e in gazebo::Simulator::Load(gazebo::XMLConfig*, int) ()
   from /opt/ros/electric/stacks/simulator_gazebo/gazebo/gazebo/lib/libgazebo_server.so.0.10.0
#10 0x00007ffff7b92292 in gazebo::Simulator::LoadWorldFile(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) ()
   from /opt/ros/electric/stacks/simulator_gazebo/gazebo/gazebo/lib/libgazebo_server.so.0.10.0
#11 0x0000000000462864 in main (argc=2, argv=<value optimized out>)
    at /tmp/buildd/ros-electric-simulator-gazebo-1.4.15/debian/ros-electric-simulator-gazebo/opt/ros/electric/stacks/simulator_gazebo/gazebo/src/gazeboros.cpp:2581

Originally posted by SL Remy on ROS Answers with karma: 2022 on 2012-06-14
Post score: 0

A:

Ok, so far the only answer that I can fathom and is supported by this blog is that xservers like vnc do not permit "OpenGL calls to the screen" and that virtualGL is the path forward.
And this other post means that at least 2 people are using this
I hope there's not a huge gotcha around the corner with vglrun...

Originally posted by SL Remy with karma: 2022 on 2012-06-18
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by SL Remy on 2012-09-02:
With KVM it's possible to pass a real card through and assign it to a particular VM (http://www.linux-kvm.org/page/How_to_assign_devices_with_VT-d_in_KVM)

