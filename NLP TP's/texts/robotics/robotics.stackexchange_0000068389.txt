Q:

How do you implement GPS using robot_localization

I'm a bit new to ROS and I'm unsure how to implement GPS into the project I'm working on. So far I know that I can use robot_localization to get GPS but how would that be implemented ?
Edit 1:
Thanks for the reply,
Yes I have, I've been working on it for a couple of days and it's starting to make sense now. I'm still struggling on some stuff such as how to use the nmea drivers. In the robot_localization tutorials you make a launch file but the nmea wiki it is possible to just use rosrun to get things up and running. Do you first use rosrun to make the connection with the hardware and then launch the launch file to start getting all of the data? Another thing is that I will not be using any odometry data for my localization project. What files do I need to edit so that the code won't be calling for any odometry data?
thanks

Originally posted by negotiator14 on ROS Answers with karma: 35 on 2015-07-01
Post score: 0

A:

Have you seen this page? If you have and something isn't clear, please let me know and I'll update it.
EDIT: You might benefit by reading up a little more on roslaunch. One of the points of roslaunch is to save you from having to use rosrun and entering a ton of parameters by hand, e.g.,
rosrun amazing_package amazing_node param_a:=100 param_b:=true param_c:=-999 param_d:=false

Instead, you just create a launch file that kicks off the node and passes in all those parameters. Then you can just launch your launch file instead, e.g.,
roslaunch amazing_package amazing_launch_file.launch

The state estimation nodes in robot_localization do not require an odometry source. navsat_transform_node converts GPS data to an odometry message so that ekf_localization_node or ukf_localization_node can consume it. However, if you want to fuse GPS data, you will need an IMU with an earth-referenced absolute heading.

Originally posted by Tom Moore with karma: 13689 on 2015-07-06
This answer was ACCEPTED on the original site
Post score: 5

