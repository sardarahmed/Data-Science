Q:

Callback function is executed more than one time

I'm learning multithreaded-spinning on the website. I'm confused why the second callback function is invoked two times after the previous callback is stuck for a few seconds. In my understanding, each invoke of callback function only processes one message in the queue. Why does one execution of callback function in this case can process two message?

Originally posted by hck007 on ROS Answers with karma: 29 on 2022-08-22
Post score: 0

A:

You have misunderstood. Messages start their processing in the order they are queued, but when a thread finishes its current work, it is re-assigned to execute the callback for the next queued message. Depending on the message type, it may execute the same callback it just finished with, or it may execute a different one.
The code you link to passes an argument of 0 to the AsyncSpinner constructor. That causes it to allocate a thread for each cpu core on the current machine. For example, if your machine has 4 cores, then AsyncSpinner may execute up to 4 subscriber callbacks simultaneously.

Originally posted by Mike Scheutzow with karma: 4903 on 2022-08-22
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by hck007 on 2022-08-22:
Thanks for your answer! Do you mean two kinds of messages from two different publishers are pushed into the same global callback queue in the order of arrival date, and then each message is processed by its' corresponding callback function. Thus, it's very likely that we may have two adjacent messages from the same publisher.
Comment by Mike Scheutzow on 2022-08-22:
Yes. I have not looked at the actual implementation, but incoming messages are effectively queued in the order of arrival (which I assume means the arrival of the last byte of the message.)

