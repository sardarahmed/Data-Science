Q:

Many to many service communication

Hi all,
as far as I understood a service can be used by different clients as long as in the source code the ServiceServer and the ServiceClient are declared with the same service name (see code below, each line belongs to a different node).
ros::ServiceServer service = n.advertiseService("add_two_ints", add);
ros::ServiceClient client1 = n.serviceClient<beginner_tutorials::AddTwoInts>("add_two_ints");
ros::ServiceClient client2 = n.serviceClient<beginner_tutorials::AddTwoInts>("add_two_ints");

How are multiple concurrent requests managed? As far as I understood they are processed in a synchronous way according to a FIFO policy, right?
I'm also wondering if it is possible to have a many-to-many connection (multiple servers)
ros::ServiceServer service = n.advertiseService("add_two_ints", add);
ros::ServiceServer service2 = n.advertiseService("add_two_ints", add);
    ros::ServiceClient client1 = n.serviceClient<beginner_tutorials::AddTwoInts>("add_two_ints");
    ros::ServiceClient client2 = n.serviceClient<beginner_tutorials::AddTwoInts>("add_two_ints");

How are requests managed in this case?
Finally, are these concepts valid also for actions?

Originally posted by maverik on ROS Answers with karma: 3 on 2013-06-03
Post score: 0

A:

You cannot have multiple nodes advertising the same service, and you cannot advertise the same service more than once from the same node; this doesn't make sense given that services are effectively remote function calls.
I'm not certain, but I believe service requests are handled serially by design.
If you want many-to-many communication, topics may be a better choice.

Originally posted by ahendrix with karma: 47576 on 2013-06-03
This answer was ACCEPTED on the original site
Post score: 4

Original comments
Comment by maverik on 2013-06-03:
Thanks! What you said makes sense from a theoretical point of view! However I tried to create two nodes that advertise the same service and when I lunched them I didn't see any error. However the services were always provided by the same node, probably the second I lunched.
Comment by joq on 2013-06-04:
For topics, the publisher advertises. The many-to-one typically means many subscribers.
Comment by FrankAllen on 2015-07-11:
"I'm not certain, but I believe service requests are handled serially by design." - this is true on the client side, but the service provider executes requests concurrently on separate threads... at least in rospy.
Comment by ahendrix on 2015-07-11:
roscpp handles service requests serially, unless you explicitly create a multithreaded async spinner to handle service callbacks.

