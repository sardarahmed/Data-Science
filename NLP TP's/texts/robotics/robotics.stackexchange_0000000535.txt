Q:

How computationally powerful is an Arduino Uno board?

What can an Arduino board such as the Uno really do? Of course simple things like controlling a couple servos is very easy for it. However, I don't think an Uno board would be able to preform real-time 3D SLAM from point cloud data gathered from a Kinect sensor on a mobile robot, right? If the robot had any speed at all the Arduino wouldn't be able to keep up, correct? Could it do 2D SLAM while moving and be able to keep up? What about taking 1/10 of the points from the Kinect sensor and processing only those?
Basically, what are some examples of the resource limitations of such an Arduino board?

A:

It depends - on the number of landmarks in the feature map, and how much time you're willing to invest tuning the algorithm for speed, and a number other parameters which you may or may not be able to control for a given application.
Edit: As a thought experiment, I think it would theoretically be powerful enough to do extremely simple near-real-time SLAM in a very contrived environment, such as the center of a gym floor with a few cones set out.  It could take a single scan line from the Kinect and update a low-resolution, 2D internal map, updating periodically (say every 10 seconds).
The Uno's 2K RAM would probably be a deal breaker, but the Mega might have enough (8K) and there is hack for upgrading it to 520K.
In practice, doing floating point matrix calculations on an 8-bit processor is not a good idea.

A:

The Arduino has always been horifically underpowered.
You can get a stack of stm discovery or other ARM based dev board for the price of a single arduino, and each one of those boards will be orders of magnitude more powerful than the arduino.
The ubiquity of the arduino has also hampered many projects that should have known better.  Quadrotor stabilization and Reprap style g-code execution are two major areas where the arduino has been forced well beyond its capabilities and it shows. (The ardrupilot project needs three arduinos.)
Hopefully the teensy/due/leaflabs stuff will help make ARM development more friendly.  Many of the newer/better projects such as smoothie, openpilot etc have also made the jump.

A:

The raw specs on the Arduino's microcontrollers list clock speeds as high as 16 or 20 MHz -- around the speed of an mid-1990s Intel 386 computer.  
That sounds promising, until you consider the fact that it doesn't natively support floating point math -- the "FLOPS" measurement by which most CPUs are compared.  I've seen some arduino demos that calculate the speed of the Arduino at about 60 kFLOPS, whereas the Intel 386 at 20 MHz does something like 170 kFLOPS (according to this page).
Also, it should be noted that the Arduino does 8-bit math and the 386 is doing 16-bit and 32-bit math.  A DSP board might be more suited to that kind of data acquisition, but I'm in no position to advise there.
Getting that code to work in such a constrained environment as the Arduino might be possible, but it will take a lot of optimization.  You'd be better served by using a more powerful CPU to implement those algorithms; make sure that they work on the powerful CPU, then attempt to optimize for the weak CPU.

