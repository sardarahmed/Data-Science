Q:

Can a ROS 2 TF buffer be queried in time-critical code?

Does anybody know if the ROS2 tf buffer belongs in control loops? What's the latency on calling lookupTransform()?
It would be great if it were realtime safe.

Originally posted by AndyZe on ROS Answers with karma: 2331 on 2021-04-28
Post score: 1

Original comments
Comment by gvdhoorn on 2021-04-28:
"should" implies there is some requirement.
Should the question be: "Can a ROS 2 TF buffer be queried in time-critical code?"?

A:

As @stevenmacenski mentions there's a lot of different requirements. The lookupTransform and canTransform are designed to be very fast. However it definitely doesn't meet hard realtime requirements such as being lock free. An academic view of the complexity is in the paper: http://wiki.ros.org/Papers/TePRA2013_Foote
The primary costs are walking up the tree to find connectivity. There's a speed test with a relatively deep tree (10 levels) which is available in the unit tests that you can build yourself and modify if you'd like. Running on my laptop and noetic I get the following.
$ rosrun tf2 speed_test 
Info:    9 to 4
Info:    Doing 1000000 10-level 1.000000-interval tests
Info:    lookupTransform at Time(0) took 8.197501 for an average of 0.000008198
Info:    lookupTransform at Time(1) took 5.620309 for an average of 0.000005620
Info:    lookupTransform at Time(1.5) took 8.397436 for an average of 0.000008397
Info:    lookupTransform at Time(2) took 5.281582 for an average of 0.000005282
Info:    canTransform at Time(0) took 5.593769 for an average of 0.000005594
Info:    canTransform at Time(1) took 2.904320 for an average of 0.000002904
Info:    canTransform at Time(1.5) took 4.741364 for an average of 0.000004741
Info:    canTransform at Time(2) took 2.517103 for an average of 0.000002517
Info:    canTransform at Time(3) without error string took 0.985417 for an average of 0.000000985
Info:    canTransform at Time(3) with error string took 2.794714 for an average of 0.000002795

You can reproduce this if you build from source and build the tf2 target tests.
https://github.com/ros/geometry2/blob/noetic-devel/tf2/test/speed_test.cpp
It looks like the speed_test performance test hasn't been ported to ROS 2 however the core algorithm is independent of ROS so I would not expect any significant changes. A contribution to port and reenable that performance test would be appreciated. https://github.com/ros2/geometry2/blob/4d9745e0feb4338f885b1966804c0072daaeb51e/tf2/CMakeLists.txt#L85

Originally posted by tfoote with karma: 58457 on 2021-05-03
This answer was ACCEPTED on the original site
Post score: 2

