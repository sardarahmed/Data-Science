Q:

ROS2 Rviz node subscribes to wrong message type

I'm publishing on a topic with message type 'visualization_msgs/msg/MarkerArray'.
However, rviz does not show these markers, because it subscribes to a sensor_msgs/msg/PointCloud2 message. How can I solve this problem. The publishing node has following code:
import rclpy
from rclpy.node import Node
from rclpy.qos import QoSProfile, QoSReliabilityPolicy, QoSHistoryPolicy

from visualization_msgs.msg import Marker
from visualization_msgs.msg import MarkerArray

from tum_msgs.msg import TUMDetectedObject
from tum_msgs.msg import TUMDetectedObjects

class MarkerMapping(Node):

    def __init__(self):
        super().__init__('marker_mapping')

        self.declare_parameter('target_frame', 'rear_axle_middle_ground')
        self.target_frame = self.get_parameter('target_frame').value

        self.declare_parameter('topic_parameter', 'clustering')
        self.topic_parameter = self.get_parameter('topic_parameter').value

        if self.topic_parameter == 'clustering':
            self.subscription = self.create_subscription(TUMDetectedObjects, '/mod_objects/DetectedObjectsClustering', self.callback, qos_profile = rclpy.qos.qos_profile_parameters)
            self.subscription
            self.bbox_publisher = self.create_publisher(MarkerArray, '/mod_objects/marker_mapping_bbox_clustering', qos_profile = rclpy.qos.qos_profile_parameters)

            # Remapped topics from baseline ("old") algorithms if run in debug/comparison mode
            self.subscription_old = self.create_subscription(TUMDetectedObjects, '/old/mod_objects/DetectedObjectsClustering', self.callback_old, qos_profile = rclpy.qos.qos_profile_parameters)
            self.subscription_old
            self.bbox_publisher_old = self.create_publisher(MarkerArray, '/old/mod_objects/marker_mapping_bbox_clustering', qos_profile = rclpy.qos.qos_profile_parameters)

        elif self.topic_parameter == 'lidar':
            self.subscription = self.create_subscription(TUMDetectedObjects, 'mod_objects/DetectedObjectsLidar', self.callback, qos_profile = rclpy.qos.qos_profile_parameters)
            self.subscription
            self.bbox_publisher = self.create_publisher(MarkerArray, 'mod_objects/marker_mapping_bbox_detection', qos_profile = rclpy.qos.qos_profile_parameters)

            # Remapped topics from baseline ("old") algorithms if run in debug/comparison mode and "/old/..." topics are published
            self.subscription_old = self.create_subscription(TUMDetectedObjects, 'old/mod_objects/DetectedObjectsLidar', self.callback_old, qos_profile = rclpy.qos.qos_profile_parameters)
            self.subscription_old
            self.bbox_publisher_old = self.create_publisher(MarkerArray, 'old/mod_objects/marker_mapping_bbox_lidar', qos_profile = rclpy.qos.qos_profile_parameters)

        elif self.topic_parameter == 'radar':
            self.subscription = self.create_subscription(TUMDetectedObjects, 'mod_objects/DetectedObjectsRadar', self.callback, qos_profile = rclpy.qos.qos_profile_parameters)
            self.subscription
            self.bbox_publisher = self.create_publisher(MarkerArray, 'mod_objects/marker_mapping_bbox_radar', qos_profile = rclpy.qos.qos_profile_parameters)

            # Remapped topics from baseline ("old") algorithms if run in debug/comparison mode and "/old/..." topics are published
            self.subscription_old = self.create_subscription(TUMDetectedObjects, 'old/mod_objects/DetectedObjectsRadar', self.callback_old, qos_profile = rclpy.qos.qos_profile_parameters)
            self.subscription_old
            self.bbox_publisher_old = self.create_publisher(MarkerArray, 'old/mod_objects/marker_mapping_bbox_radar', qos_profile = rclpy.qos.qos_profile_parameters)

    def callback(self, msg):
        """
        Creates bounding boxes for detected objects and publishes them as MarkerArrays.
        """
        markerArray = MarkerArray()
        marker = Marker()
        marker.action = marker.DELETEALL
        markerArray.markers.append(marker)

        for idx, object in enumerate(msg.objects):
            marker = Marker()
            marker.header.frame_id = self.target_frame
            marker.id = idx
            marker.ns = str(idx)
            marker.type = marker.CUBE
            marker.action = marker.ADD
            marker.scale.x = 4.9
            marker.scale.y = 1.8
            marker.scale.z = 1.0
            marker.color.a = 0.8
            if self.topic_parameter == 'clustering':
                marker.color.r = 1.0 #r/255
                marker.color.g = 0.0 #g/255
                marker.color.b = 0.0 #b/255
            elif self.topic_parameter == 'lidar':
                marker.color.r = 0.0 #r/255
                marker.color.g = 1.0 #g/255
                marker.color.b = 0.0 #b/255
            elif self.topic_parameter == 'radar':
                marker.color.r = 0.0 #r/255
                marker.color.g = 0.0 #g/255
                marker.color.b = 1.0 #b/255
            marker.pose.position.x = object.kinematics.pose.pose.position.x
            marker.pose.position.y = object.kinematics.pose.pose.position.y
            marker.pose.position.z = object.kinematics.pose.pose.position.z
            markerArray.markers.append(marker)

        self.bbox_publisher.publish(markerArray)

    def callback_old(self, msg):
        """
        Creates bounding boxes for objects detected with the baseline algorithms and publishes them in less saturated colors as MarkerArrays.
        """
        markerArray = MarkerArray()
        marker = Marker()
        marker.action = marker.DELETEALL
        markerArray.markers.append(marker)
        #self.get_logger().info('Callback old')
        for idx, object in enumerate(msg.objects):
            marker = Marker()
            marker.header.frame_id = self.target_frame
            marker.id = idx
            marker.ns = str(idx)
            marker.type = marker.CUBE
            marker.action = marker.ADD
            marker.scale.x = 4.9
            marker.scale.y = 1.8
            marker.scale.z = 1.0
            marker.color.a = 1.0
            if self.topic_parameter == 'clustering':
                marker.color.r = 1.0 #r/255
                marker.color.g = 0.0 #g/255
                marker.color.b = 0.0 #b/255
            elif self.topic_parameter == 'lidar':
                marker.color.r = 0.0 #r/255
                marker.color.g = 1.0 #g/255
                marker.color.b = 0.0 #b/255
            elif self.topic_parameter == 'radar':
                marker.color.r = 0.0 #r/255
                marker.color.g = 0.0 #g/255
                marker.color.b = 1.0 #b/255
            marker.pose.position.x = object.kinematics.pose.pose.position.x
            marker.pose.position.y = object.kinematics.pose.pose.position.y
            marker.pose.position.z = object.kinematics.pose.pose.position.z
            markerArray.markers.append(marker)

        self.bbox_publisher_old.publish(markerArray)

def main(args=None):
    rclpy.init(args=args)

    marker_mapper = MarkerMapping()

    rclpy.spin(marker_mapper)

    marker_mapper.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()

Here is the topic info output from the terminal:
ros2 topic info --verbose /old/mod_objects/marker_mapping_bbox_clustering
Type: ['sensor_msgs/msg/PointCloud2', 'visualization_msgs/msg/MarkerArray']

Publisher count: 1

Node name: clustering_marker_mapping
Node namespace: /
Topic type: visualization_msgs/msg/MarkerArray
Endpoint type: PUBLISHER
GID: 01.10.ab.69.44.14.b7.be.8c.b0.1c.ac.00.00.17.03.00.00.00.00.00.00.00.00
QoS profile:
  Reliability: RELIABLE
  History (Depth): UNKNOWN
  Durability: VOLATILE
  Lifespan: Infinite
  Deadline: Infinite
  Liveliness: AUTOMATIC
  Liveliness lease duration: Infinite

Subscription count: 2

Node name: rviz
Node namespace: /
Topic type: sensor_msgs/msg/PointCloud2
Endpoint type: SUBSCRIPTION
GID: 01.0f.4a.f4.77.36.67.43.01.00.00.00.00.00.3e.04.00.00.00.00.00.00.00.00
QoS profile:
  Reliability: BEST_EFFORT
  History (Depth): UNKNOWN
  Durability: VOLATILE
  Lifespan: Infinite
  Deadline: Infinite
  Liveliness: AUTOMATIC
  Liveliness lease duration: Infinite

Node name: _ros2cli_46973
Node namespace: /
Topic type: sensor_msgs/msg/PointCloud2
Endpoint type: SUBSCRIPTION
GID: 01.10.15.db.bb.df.5c.90.fd.9f.7b.fd.00.00.08.04.00.00.00.00.00.00.00.00
QoS profile:
  Reliability: BEST_EFFORT
  History (Depth): UNKNOWN
  Durability: VOLATILE
  Lifespan: Infinite
  Deadline: Infinite
  Liveliness: AUTOMATIC
  Liveliness lease duration: Infinite
```

A:

Here is what I guess is going on. When you add the PointCloud2 viewer in RVIZ left panel, this viewer will create a subscriber, if you are not trying to view a PointCloud just remove the PointCloud message viewer from the left panel. Is there any node that you are trying to subscribe to?

