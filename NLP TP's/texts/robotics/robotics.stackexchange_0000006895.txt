Q:

RGB-D SLAM - Compute Information Matrix

currently im working on a RGB-D SLAM with a Kinect v1 Camera. In the front-end the SLAM estimates the pose with Ransac as an initial guess for the ICP. With the pose estimation i transform the pointcloud to a pointcloud-scene which represents my map.
To smooth the map im trying to implement a graph optimizing algorithm (g2o). 
Until now, there is no graph representation in my frontend, so i started to integrate that.
Im trying to build a .g2o file with the following fromat:
VERTEX_SE3 i x y z qx qy qz qw
where x, y, z is the translation and qx, qy, qz, qw ist the Rotation in respect to the initial coordinate system. And,
EDGE_SE3 observed_vertex_id observing_vertex_id x y z qx, qy, qz, qw inf_11 inf_12 .. inf_16 inf_22 .. inf_66
Translation and rotation for the edge is the pose estimate that i compute with Ransac and ICP (visual odometry). 
Now im getting stuck with the information matrix.
I read the chapter 3.4 THE INFORMATION FILTER in Thrun's Probabolistic Robotics and several threads in this forum, such as:
The relationship between point cloud maps and graph maps
and
information filter instead of kalman filter approach
From the second link, i got this here. 

The covariance update
  $$P_{+} = (I-KH)P$$
  can be expanded by the definition of K to be
$$ P_{+} = P - KHP$$
  $$ P_{+} = P - PH^T (HPH^T+R)^{-1} HP$$
Now apply the matrix inversion lemma, and we have:
$$P_{+} = P - PH^T (HPH^T+R)^{-1} HP$$
  $$ P_{+} = (P^{-1} + H^TR^{-1}H)^{-1}$$
Which implies:
  $$ P_{+}^{-1} = P^{-1} + H^TR^{-1}H$$
The term $P^{-1}$ is called the prior information,$$H^TR^{-1}H$$ 
  is the sensor information (inverse of sensor variance), and this gives us  $P^{-1}_+$, which is the posterior information. 

Could you please point this out for me. 
What data do i need to compute the information matrix? 

A:

The information matrix is the inverse of the covariance matrix.  In this case, the covariance is over the variables (x,y,z,qx,qy,qz).  It is assumed that your quaternion is normalized to be unit magnitude.
You should be able to get an estimate of the information matrix from the ICP.
Edit:
In general the covariance estimate can be found by the following procedure.  

Set I = 0 (I will be the information matrix for the system)
For each input.

Get the covariance (must be estimated somehow empirically).
Invert the covariance to get the information W
Calculate the Jacobian J of your error in the output space with respect to the input (see http://en.wikipedia.org/wiki/Jacobian_matrix_and_determinant)
Transform the information into the error space via X = J^T * W * J
Set I = I + X

Invert I to get the covariance S of the output

Edit 2:
The covariance formula that you linked to is the covariance of the points in the point cloud.  For the mapping, you want the covariance estimate for the estimated transform which is not at all the same thing.  It is a little difficult to explain.  Try looking at http://en.wikipedia.org/wiki/Non-linear_least_squares .  In your case the x_i would be points in P_A, y_i would be points in P_B, f would be the function that transforms points from P_A to P_B (i.e. f(x_i, T) = T(x_i) where T(x) is applying T to x), and beta would be the transform parameters.  In the last equation in the theory section, the J^TWJ term is the estimated information for the parameters.  Inverting this provides a covariance estimate (this is based on the Cramer-Rao lower bound, see http://en.wikipedia.org/wiki/Cram%C3%A9r%E2%80%93Rao_bound).  For the typical case of independent measurements, the J^T * W * J term ends up just being a sum of J_i^T * W_i * J_i for each measurement i.

