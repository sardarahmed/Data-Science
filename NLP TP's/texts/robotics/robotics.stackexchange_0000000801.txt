Q:

Simple Neural Network with hardcoded positions for walk optimisation

I'm building a quadrupedal robot that will learn how to walk. From the responses I got from asking if  its possible to run a NN on a micro controller I realised I needed to think of a clever system that wouldn't take 1000 years to be effective and would still be able to demonstrate onboard learning. I've designed a system but I'm not sure how effective it will be.
Firstly I hardcode 5-20 positions for the legs.
I set up a (simple) neural network where each node is a different set of positions for the legs, which I will write.
The robot moves from one node to another and the weight of the joint is determined by how far forward the robot moves.
Eventually there will be strong connections between the best nodes/positions and the robot will have found a pattern of moves that are most successful in walking.

How effective would this be in learning to walk?

Note: instead of positions I could write short gaits and the process would work out which sets work best when combined.

A:

This reminds me of QWOP (seriously).  You need to plan a sequence of button presses to move forward.  For every situation the runner finds himself in, we need to know what button to press, how long to hold it, etc. When you play that, you probably look a lot like this video I stumbled across (pun alert): NN training bi-pedal walkers
What you need to recognize is what configuration is my robot in and you need to plan what leg should move to where?  So you need a topology like this
Leg encoder values → NN → Leg desired encoder values
The difference is you need actual input in the form of sensor values, and output in the form of actions.
Note, if you had other sensors (IMU would be helpful) it would be included in the inputs, and if you had force-controlled joints, those would be your outputs. 

