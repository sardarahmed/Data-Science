Q:

How to catkin_package to bloom Debian library packages?

How does one configure a catkin_package such that, when bloomed, it produces a Debian library pair? More exactly, for some declared catkin_package as part of the foobar project, I want...

a ros-kinetic-foobar containing ./opt/ros/kinetic/lib/libfoobar.so
a ros-kinetic-foobar-dev containing ./opt/ros/kinetic/include/foobar/foobar.h

...with the latter dependent on the former.
References:

https://www.debian.org/doc/debian-policy/ch-sharedlibs.html#run-time-shared-libraries
https://www.debian.org/doc/debian-policy/ch-sharedlibs.html#development-files

Originally posted by rubicks on ROS Answers with karma: 193 on 2019-01-22
Post score: 0

A:

The ROS buildfarm / bloom does not support auto-magic splitting of Debian packages into dev and non-dev packages. When you release a package foo with the ROS release pipeline you will get a single Debian package named ros-<distro>-foo.

Originally posted by Dirk Thomas with karma: 16276 on 2019-01-22
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by rubicks on 2019-01-22:
shucks; is there room in the bloom code for such a feature? Is anyone else asking for this?
Comment by Dirk Thomas on 2019-01-22:
I would expect something like to work generically to be fairly complicated. Feel free to create a ticket in https://github.com/ros-infrastructure/bloom to start a discussion about it.
Comment by tfoote on 2019-01-23:
There's been a few thread on it such as https://github.com/ros/catkin/issues/20 and  https://github.com/ros-infrastructure/bloom/pull/32 The main problem is that it can't really be done automatically and as such requires the maintainers to build up more metadata.
Comment by tfoote on 2019-01-23:
Also doing this across multiple target platforms make this more complicated too.

