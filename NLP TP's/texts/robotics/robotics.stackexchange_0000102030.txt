Q:

Passing parameter for launch testing in ros2

Hi,
I am running launch testing where I have a test node that's used for testing if messages are been transmitted.
When I run individual nodes like pub_demo or sub_demo it works, it takes parameters from the config file. But when I run the demo_pkg_test.py using launch_test these two nodes don't take the parameters. Even the test node doesn't take the parameters.
src
├── demo_pkg
│   ├── CMakeLists.txt
│   ├── config
│   │   └── params.yaml
│   ├── include
│   │   └── demo_pkg
│   │       └── qos_custom_profile.hpp
│   ├── package.xml
│   ├── src
│   │   ├── pub_demo.cpp
│   │   └── sub_demo.cpp
│   └── test
│       ├── demo_pkg_test.py

Below is my code
Streaming = QoSProfile(durability=qos.QoSDurabilityPolicy.VOLATILE,
                   reliability=qos.QoSReliabilityPolicy.BEST_EFFORT, history=qos.QoSHistoryPolicy.KEEP_LAST, depth=1)
State = QoSProfile(durability=qos.QoSDurabilityPolicy.TRANSIENT_LOCAL,
               reliability=qos.QoSReliabilityPolicy.RELIABLE, history=qos.QoSHistoryPolicy.KEEP_LAST, depth=20)

@pytest.mark.launch_test
@launch_testing.markers.keep_alive
def generate_test_description():

config = os.path.join('/home/'+$USER+'/dev_ws/src/demo_pkg/config/params.yaml')

print(config)
return launch.LaunchDescription([
    launch_ros.actions.Node(
        executable='pub_ex',
        package='demo_pkg',
        name='pub_node',
        parameters=[config]
    ),
    launch_ros.actions.Node(
        executable='sub_ex',
        package='demo_pkg',
        name='sub_node',
        parameters=[config]
    ),
    launch_testing.actions.ReadyToTest()
])

class TestFixture(unittest.TestCase):

def test_pin_robot_enable(self):
    rclpy.init()
    node = Node('test_node')
    self.declare_parameters(
        namespace = '',
        parameters = [
        ('robot_name',None)])
    robot_name = self.get_parameter('robot_name').get_parameter_value().string_value
    print("-------1----",robot_name)
    self.robot_enable_data = []
    sub = node.create_subscription(
        Bool,
        '/sub_topic',
        self.topicMsgData,
        Streaming
    )
    self.pub = node.create_publisher(
        Bool,
        '/pub_topic' ,
        Streaming
    )
    timer_period = 0.5  # seconds
    self.timer = node.create_timer(timer_period, self.pub_callback)
    self.value = Bool()

    try:
        end_time = time.time() + 10
        self.test_data_recv = []
        while time.time() < end_time:
            rclpy.spin_once(node, timeout_sec=0.1)
        
        if self.test_data_recv == []:
            test_data = ""
        else:
            test_data = self.test_data[-1]

        
        self.assertEqual(test_data, True,
                         "Error")
        
    finally:
        node.destroy_subscription(sub)
    rclpy.shutdown()

def pub_callback(self):
    data= Bool()
    data.data = True
    self.pub.publish(data)

def topicMsgData(self, msg):
    self.test_data_recv.append(msg.data)

Below is my params.yaml file data.
pub_node:
  ros__parameters:
    robot_name: "BOT02/"

sub_node:
  ros__parameters:
    robot_name: "BOT02/"

test_node:
  ros__parameters:
    robot_name: "BOT02/"

Thanks in advance, any help is much appreciated.

Originally posted by Flash on ROS Answers with karma: 126 on 2022-06-24
Post score: 0

Original comments
Comment by Fetullah Atas on 2022-06-24:
can you also post contents of params.yaml, it could be something with name mismatch of the node
Comment by Flash on 2022-06-24:
@Fetullah Atas Thanks for the quick response. I have updated my question.

A:

If anyone comes across the same problem this is how I was able to fix my problem.
There was a mistake in my def generate_test_description(): function after fixing that my sub_node and pub_node are able to receive or read the parameters from the param.yaml file but still, my test_node is unable to read the parameters. To fix that part I used the python read file function, just in case anyone wondering how I solved it check this post.
And the solution to transmit parameters to sub_node and pub_node nodes that are initiated on test_node is as below
def generate_test_description():
    config = os.path.join('/home/'+$USER+'/dev_ws/src/demo_pkg/config/params.yaml')
    nodePub = launch_ros.actions.Node(
        executable='pub_ex',
        package='demo_pkg',
        name='pub_node',
        parameters=[config]
        )
    nodeSub = launch_ros.actions.Node(
        executable='sub_ex',
        package='demo_pkg',
        name='sub_node',
        parameters=[config]
        )
    context = {'nodePub': nodePub, 'nodeSub': nodeSub}
    return launch.LaunchDescription([nodePub , nodeSub, launch_testing.actions.ReadyToTest()]), context

the missing part was the context.

Originally posted by Flash with karma: 126 on 2022-06-29
This answer was ACCEPTED on the original site
Post score: 0

