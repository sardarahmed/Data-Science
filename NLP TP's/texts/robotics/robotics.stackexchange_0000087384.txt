Q:

ros control assertion failed

I wrote a custom controller for my robot. I used ros control boilerplate (by dave coleman) for hardware interface. The code compiles but I get the following error.
myrobot_hw_main: /opt/ros/lunar/include/hardware_interface/posvel_command_interface.h:72: void hardware_interface::PosVelJointHandle::setCommandVelocity(double): Assertion `cmd_vel_' failed.
[myrobot/myrobot_hardware_interface-1] process has died [pid 96416, exit code -6, cmd /home/user/catkin_ws/devel/lib/control_pkg/myrobot_hw_main __name:=myrobot_hardware_interface __log:=/home/user/.ros/log/aee6bd46-702a-11e8-82d2-000c29ad2621/myrobot-myrobot_hardware_interface-1.log].
log file: /home/user/.ros/log/aee6bd46-702a-11e8-82d2-000c29ad2621/myrobot-myrobot_hardware_interface-1*.log

I wrote a controller for omni drive and if I understand it properly, this is where the problem is. I used this interface called PosVelJointInterface from posvel_command_interface.h. The problem occurs when I executed the following lines. Basically in my controller, I take in the twist command, do some math and generate four velocities which I'm trying to populate using the setCommandVelocity method.
hardware_interface::PosVelJointHandle wheel_1;    
wheel_1.setCommandVelocity(wheelVelocities.velocity[0]);

Originally posted by venkisagunner on ROS Answers with karma: 89 on 2018-06-15
Post score: 0

A:

According to the sources (here), cmd_vel_ is a pointer to a double that gets initialised in the ctor (here).
The code you show ("The problem occurs when I executed the following lines") doesn't initialise the PosVelJointHandle properly (or at least: it doesn't provide any values for the arguments), it's using this ctor, which sets all pointers to 0. If you then try to use setCommandVelocity(..), the assert is triggered.
Two comments:

if you're writing a controller, why are you intantiating hardware_interface classes directly? Shouldn't that be the responsibility of your / a hardware_interface implementation for your robot?
read up / find examples of how to initialise a PosVelJointHandle correctly and update your code (if you have determined you really should be intantiating those classes yourself.

Originally posted by gvdhoorn with karma: 86574 on 2018-06-18
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by venkisagunner on 2018-06-18:
I realised the mistake and solved the problem. Forgot to close the issue. My apologies. Thank you for taking your time in helping me out here.
Comment by gvdhoorn on 2018-06-18:
Could you help future readers by describing how you eventually solved your problem?
Comment by venkisagunner on 2018-06-18:
I found a way here. This is available in ROS controllers git repo. Instead of using a PosVelJointHandle, I used the JointHandle and JointStateInterface ..
Comment by venkisagunner on 2018-06-18:
And integrating that with the boilerplate was trivial. In my previous approach, I declared the joint handles but didnt call the getHandle (line 319) method which resulted in no resource allocation. When I ran rosrun controller_manager controller_manager myrobot/list_controllers, I found no resources

