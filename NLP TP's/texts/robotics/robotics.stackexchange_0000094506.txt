Q:

What is the best way to send transform (with scale)?

Hi!
I want to transform set of points according to formula s*R.dot(xyz) + t
Because of implementation details i want  to make multiplication s*R and send "scaled" rotation via /tf.
But while converting  "scaled" rotation (s*R) to quaternions i'm getting TF_DENORMALIZED_QUATERNION error
So, the question is: how to scale R properly? Or what is the best way to send transform with scale?
P.S. s  is a scalar

Originally posted by Dmitry on ROS Answers with karma: 3 on 2020-01-27
Post score: 0

Original comments
Comment by gvdhoorn on 2020-01-27:
Have you tried renormalising the quaternion?
Comment by Dmitry on 2020-01-27:
Oh, no. I'll try that. Thank you!
Comment by Dmitry on 2020-01-27:
I did it.
After renormalizing (via transformations.union_vector) i'm getting wrong result when applying rotation.
For now, I decided to created new message type (StampedFloat) and send it separately from R and t transformation.

A:

You cannot send non-normalized transforms (rotations or translations) via tf. It's designed to keep track of coordinate frames in space and apply transforms to data. A scaling operation is not generally applicable to transforming between coordinate frames where we keep all data in units of meters according to REP 103. So we limit the system to homogeneous transformations.
Since your scaling operation is semantically significant you should do that before or after you operate on the data and then make sure that the data is then observably different between the two states.

To your direct question if you want to send a transform with scale you can create a message to capture any sort of transform representation that you want and send it through a topic.

Originally posted by tfoote with karma: 58457 on 2020-01-27
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by gbohus on 2021-07-21:
Thanks for the clarification.
Just a small comment: in linear algebra "homogeneous" means mapping zero to zero. What you mean here is "unitary".

