Q:

Simple Sensor Fusion for pose estimation

I am currently working on a balancing robot project, which features fairly low-cost sensors such as an 9-Dof IMU with the measurement states
$\textbf{x}_\text{IMU} = \left[a_x, a_y, a_z, g_x, g_y, g_z, m_x,m_y,m_z \right]^\text{T}$.
Currently I use the accelerometer and gyroscope readings, fused by a complimentary filter to get the angular deviation of the robot's upright (stable) position. The magnetometer values are tilt-compensated and yield the robots orientation with respect to the earth-magnetic field (awful when close to magnetic distortion). Furthermore I have pretty decent rotational encoders mounted on the wheels which deliver information on a wheel's velocity.
$\textbf{x}_\text{ENC} = \left[v_l,v_r\right]^\text{T}$.
Given these measurements i want to try to get the robots pose (position + heading).
$\textbf{x}_\text{ROB} = \left[x,y,\theta\right]^\text{T}$
I do have minor theoretical knowledge on EKF or KF, but it is not sufficient for me to actually derive a practical implementation. Note that my computational resources are fairly limited (Raspberry Pi B+ with RTOS) and that I want to avoid using ROS or any other non-std libs. Can anybody help me on how to actually approach this kind of problem?

A:

So you have acceleration readings from your IMU (linear and angular), and you get velocity readings (linear only) from wheel encoders.
Get velocity from linear and angular accelerations with
$$
v = v + a*\mbox{dT}
$$
Get angular velocity from your wheel encoders by exploiting geometry of the vehicle
$$
\dot{\theta} = \mbox{atan2}((v_r - v_l) , \mbox{wheel base})
$$
Now you have two sources of linear and angular velocities - the IMU and the wheel encoders. Get to linear and angular positions with
$$
x = x + v*\mbox{dT}
$$
Here I've used $x$ but of course it's just a variable to use for whatever position you're interested in using.
Now you have heading and position from the IMU (via linear x and y accelerations and the z gyro), you have heading and position from the wheel encoders, and heading via the magnetometer. 
I would suggest filtering IMU outputs before integration, but you can use whatever filter you want - lag, Kalman, or something more complicated. If computational simplicity is a priority I would highly suggest you check out the lag filter. It's basically a complimentary filter using the current sample and previous sample instead of two different sensors. 
Finally, you can fuse the sensor readings with the complimentary filter. I don't think I can advise you as to which input you should place more emphasis because that will depend primarily on wheel slip (how much you "trust" the wheel encoder).

