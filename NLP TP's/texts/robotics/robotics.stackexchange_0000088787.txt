Q:

Can a topic be subscribed in two different function of the same program

I wanted to subscribe same topic in two different functions of the same code. so I just wanted to know, will the subscriber stops subscribing after it comes out of the function or it still keeps on subscribing.
just the format I have followed,
finction_1()
   {
     ros::subscriber sub= n.subscribe("topic", 1000, topic_callback);
   }

finction_2()
   {
    ros::subscriber sub= n.subscribe("topic", 1000, topic_callback);
   }

int main ()
{
      function_1();
     function_2();
 }

will this format create any conflict?

Originally posted by rama_bhuyan on ROS Answers with karma: 11 on 2018-08-29
Post score: 0

Original comments
Comment by pcoenen on 2018-08-30:
It might be helpful to know what you are planning to do. As ahendrix said, it's possible to create the subscribers inside the function but they will be destroyed right away. If you just need some data inside your function block, maybe have a look at ros::topic::waitForMessage.
Comment by PeteBlackerThe3rd on 2018-08-30:
I'm a little confused. Creating a subscriber sets up a callback function to be executed every time a message is received.
Are you trying to subscribe two callbacks to the same topic or are you trying to subscribe and unsubscribe to the topic at different times within your node?
Comment by rama_bhuyan on 2018-09-02:
my query is, once the function scope is over the subscriber stops subscribing?
Comment by PeteBlackerThe3rd on 2018-09-10:
The way that you have written the code above, yes the subscriber stops subscribing when the function returns. However if the variable sub was global then it would keep subscribing after the function returns.
Comment by rama_bhuyan on 2018-09-11:
yes, it is global variable. And it keep on subscribing after the function returns. but I have resolved the issue of multiple subscription.
thank you

A:

I don't think there are any issues with having multiple subscribers on the same topic.
I do see another problem with your code; your functions create a subscriber, but as soon as the function is over, the subscriber object is destructed and that subscriber stops. If you want the subscriber to continue working, you need to keep the subscriber object (or a copy of it).

Originally posted by ahendrix with karma: 47576 on 2018-08-30
This answer was ACCEPTED on the original site
Post score: 2

