Q:

Unable to lookup tf transform

Hi,
I'm unable to lookup tf transforms in my C++ node for some reason, unless the parent and child are the same. I have done this many times before and checked with the tutorials and wikis but am not having any luck. The tf tree displays fine in RVIZ as well as command line with the tf_echo. I've tried multiple different rosbags that worked fine in other ROS nodes but nothing is working with this node.
What is different is that this time I am working with a ROS package where there are no classes, everything is in functions but I don't think that should matter because that is how the tutorial is done.
Here is a code snippet:
void laserCloudHandler(const sensor_msgs::PointCloud2ConstPtr &laserCloudMsg) {
    tf::TransformListener tf_listener;

    if (tf_listener.waitForTransform("world", "velodyne_frame", laserCloudMsg->header.stamp, ros::Duration(0.2))) {

      // Get the tf transform.
      tf::StampedTransform tf_transform;
      tf_listener.lookupTransform(world_frame, velo_frame, laserCloudMsg->header.stamp, tf_transform);
    }

    else
    {
      ROS_FATAL("UNABLE TO LOOKUP INITIAL TRANSFORM!");
    }  
}

Does anyone have any idea what may be wrong?
Thanks!

Originally posted by vkee on ROS Answers with karma: 127 on 2017-08-23
Post score: 0

Original comments
Comment by vkee on 2017-08-23:
@gvdhoorn thanks for fixing that formatting, i couldn't get it to work

A:

What is different is that this time I am working with a ROS package where there are no classes, everything is in functions but I don't think that should matter because that is how the tutorial is done.

just a guess, but seeing as you only instantiate your listener in your callback: 0.2 seconds is probably not enough time for the tf::TransformListener to see enough of your tree to fill the buffer and be able to retrieve transforms for you. TF needs a buffer, or it can't do anything.
Try instantiating your listener in a scope outside your callbacks (as a global variable fi). I would expect things to improve.

Edit: to avoid globals (and possible leakage) you could also use boost::bind(..) or use C++11 lambdas / closures.

Originally posted by gvdhoorn with karma: 86574 on 2017-08-23
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by vkee on 2017-08-23:
I tried increased time before but it didn't help. I also tried making it a global variable but I get this error:
[FATAL] [1503499756.057001407]: You must call ros::init() before creating the first NodeHandle
Couldn't find an AF_INET address for []
Comment by gvdhoorn on 2017-08-23:
Try doing it after ros::init(..) and after you create your first NodeHandle.
Comment by vkee on 2017-08-23:
Those are in the main so I wouldn't be able to make it global anymore.
Comment by gvdhoorn on 2017-08-23:
Yes; use pointers (ie: tf::TransformListener* my_listener_, and then in main(..): my_listener_ = new tf::TransformListener(..) or wrap things in shared_ptrs).
Comment by vkee on 2017-08-23:
Oh right, thanks that fixed it!

