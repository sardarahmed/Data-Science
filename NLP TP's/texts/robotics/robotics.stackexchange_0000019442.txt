Q:

How timer interrupt is handled in the presence of other interrupt services?

When timer interrupt is received, if there is already some ISR being executed, doesn't it delay (elongate) the time interval measured? If yes, how is it handled? For the sake of precise time measurements.

A:

No. The actual time is calculated from counter registers that automatically increment. The timer interrupt will be delayed, and things the timer interrupt is triggering will be delayed. This is called jitter. But the measurement of the interval will not change in accuracy.
Counters roll over to zero automatically at the hardware level. So there are never lost counts. Counters are large enough that they either don't roll over or that the software has lots of time to count the number of roll overs.
The error in time measurement one sees in digital devices is called drift and is due to the oscillator driving the time counter at a non-exact rate.
All microcontrollers have oscillator driven counters for keeping time. Some microcontrollers and most processors have a realtime clock subsystem. Real-time clocks have the same counter at their core and some convenience hardware for handling time and date.
The only difference between counters and real-time clocks is that attached to real-time clocks there is usually an oscillator that has a frequency that is a power of two factor of 1 second, and sometimes that oscillator with have less drift (more accuracy). 
One way to think of it is how you behave with a wrist watch. The watch is always keeping time, with some error from true time (drift). If you get an alarm from the watch, start an action, get distracted, and then complete the action, there is error in the timing of your action, but the watch continues to measure time accurately.

