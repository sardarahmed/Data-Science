Q:

How to specify dependencies with "foo_msgs" catkin packages

Say I have two catkin packages, foo and foo_msgs, in my workspace.  Here's how I currently have them set up:

project(foo_msgs)
find_package(catkin REQUIRED COMPONENTS message_generation)
add_message_files(
  DIRECTORY msg
  FILES foomsg.msg
)
generate_messages()
catkin_package(CATKIN_DEPENDS message_runtime)

project(foo)
find_package(catkin REQUIRED COMPONENTS foo_msgs)
catkin_package()
include_directories(include ${catkin_INCLUDE_DIRS})
add_executable(foo foo.cpp)

I find that if I catkin_make foo, the message isn't generated.  Indeed, catkin_make foo_msgs is a no-op.  catkin_make foo_msgs_gencpp works, however.  In order to get foo to build correctly, I must add the following line to its CMakeLists.txt:

add_dependencies(foo foo_msgs_gencpp)

Is this by design?  I'd expect that building the package foo_msgs would automatically generate all its messages.  Is there a way to make that happen?
Edit: I've approved WilliamWoodall's answer, although KruseT's was just as useful.  (I also added the include_directories() line to foo's CMakeLists.txt, which I initially forgot.)
It turns out my solution is correct; the foo_msgs_gencpp auto-target should be added as a dependency of the foo target.  Note that there is some disagreement about whether a different solution should be supported by catkin; KruseT started a discussion on the topic here.
Since this type of explicit dependency auto-target (_gencpp and _genpy) is necessary for using ROS messages/actions/services in any executable, library, or script, I think it should be better documented (I found no reference to it in catkin/migrating_from_rosbuild).  KruseT opened a related rosdistro issue here.

Originally posted by cdellin on ROS Answers with karma: 462 on 2013-01-18
Post score: 25

A:

Your projects are setup correctly (mostly), you just need to run catkin_make with no arguments.
First update foo:
cmake_minimum_required(VERSION 2.8.3)
project(foo)

find_package(catkin REQUIRED COMPONENTS foo_msgs)

catkin_package()

include_directories(include ${catkin_INCLUDE_DIRS})

add_executable(foo_node src/foo_node.cpp)
add_dependencies(foo_node foo_msgs_generate_messages_cpp)

Using add_dependencies(...) is by design or necessity, however you look at it, because we cannot know or assume that foo's targets (executables or libraries) use and therefore depend on the messages which are getting generated by foo_msgs.
Then just execute catkin_make with no arguments.
If you want to build foo_msgs explicitly (not the whole workspace) then as of pull request ros/catkin#352 you can do catkin_make --pkg foo_msgs.
Calling catkin_make foo_msgs is not sufficient because that is instructing catkin_make to invoke the foo_msgs make target which does not exist. tkruse's solution simply adds a foo_msgs target which depends on the foo_msgs_generate_messages_cpp target, allowing it to be callable and causing the foo_msgs_generate_messages_cpp target to be generated. This is not something we do by default because packages often define targets with the same name as the project which would immediately cause a conflict.
The only reliable way to build an entire package (including all of its targets) is to go to the package's build space and invoke make [all], which is what catkin_make --pkg does.
I setup an example repository here:
https://github.com/wjwwood/catkin_demos/tree/ros_answers_52744

Originally posted by WilliamWoodall with karma: 1626 on 2013-02-05
This answer was ACCEPTED on the original site
Post score: 18

Original comments
Comment by cdellin on 2013-02-06:
Hi WilliamWoodall, this is very helpful!  Clearly the _gencpp dependency needs to go somewhere explicitly.  You list it in foo's CMakeLists file.  In that case, if foo_msgs is already installed (so catkin is only building foo), will the foo_msgs_gencpp dependency be correctly resolved by catkin?
Comment by WilliamWoodall on 2013-02-06:
Yes, CMake will ignore targets which are not defined, you could add add_dependencies(foo_node bar_does_not_exist) and it will build with no warnings.
Comment by cdellin on 2013-02-06:
Great!  This is my favorite solution, since it doesn't introduce new targets (foo_msgs), and explicitly encodes the dependency between the foo (binary) target and the generated cpp messages.
Comment by cdellin on 2013-02-06:
Also, I want to stress about catkin_make arguments: (a) sometimes it is useful to build only particular targets (yes, targets, not packages), and (b) running catkin_make with no arguments doesn't help here; the _gencpp target is still required to ensure targets are built in the correct order.
Comment by Dirk Thomas on 2013-02-06:
(a) building specific target is already supported by "catkin_make", any argument without a special meaning is passed straight forward to "make", see "catkin_make --help" for details.
Comment by cdellin on 2013-02-07:
Hi Dirk!  I understand this, I just wanted to correct the answer.  I believe that WilliamWoodall's assertion that "running catkin_make with no arguments" would somehow fix my problem is incorrect.
Comment by ahendrix on 2017-04-25:
It looks like the version of CMake on Ubuntu Xenial and newer now complains of non-existent targets. Switching to ${catkin_EXPORTED_TARGETS} seems to make it more happy.

