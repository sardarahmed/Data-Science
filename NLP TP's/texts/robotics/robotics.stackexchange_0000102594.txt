Q:

tf2_ros lookup_transform giving wrong transformation

Hello everyone,
I want to get the transform from tool0 frame to base_link frame of the UR3 robot but I'm having problems.
Below is the code I'm using to get the transform:
#!/usr/bin/env python

import rospy
import tf2_ros

class UR3TfListener(object):

    def tfListenerCallback(self, event):
        if self.tf_buffer.can_transform('tool0','base_link',rospy.Time(0)):
                trans = self.tf_buffer.lookup_transform('tool0','base_link',rospy.Time(0))
        else:
            rospy.logdebug("Can't transform")

        tx = trans.transform.translation.x
        ty = trans.transform.translation.y
        tz = trans.transform.translation.z
        rx = trans.transform.rotation.x
        ry = trans.transform.rotation.y
        rz = trans.transform.rotation.z

        rospy.logdebug("tx: %d, ty: %d, tz: %d, rx: %d, ry: %d, rz: %d", tx, ty, tz, rx, ry, rz)

    def __init__(self):

        self.tf_buffer = tf2_ros.Buffer()
        self.listener = tf2_ros.TransformListener(self.tf_buffer)

        rospy.Timer(rospy.Duration(0.1),self.tfListenerCallback)

if __name__ == '__main__':
    rospy.init_node('tf_listener', anonymous=False, log_level=rospy.DEBUG)
    tf_listener = UR3TfListener()
    rospy.spin()

The problem that I'm having is that the transform that I'm getting is something like this
[DEBUG] [1666494690.406768, 199.024000]: tx: 0, ty: 0, tz: 0, rx: 0, ry: 0, rz:0

And the transform shouldn't be 0 as the frames look like following:

Edit 1: /tf and /tf_static echo result
When I run rostopic echo /tf -n 1 I get:
   transforms: 
     - 
       header: 
         seq: 0
         stamp: 
           secs: 11
           nsecs: 296000000
         frame_id: "upper_arm_link"
       child_frame_id: "forearm_link"
       transform: 
         translation: 
           x: -0.24365
           y: 0.0
           z: 0.0
         rotation: 
           x: 0.0
           y: 0.0
           z: 9.38252996394e-06
           w: 0.999999999956
     - 
       header: 
         seq: 0
         stamp: 
           secs: 11
           nsecs: 296000000
         frame_id: "robotiq_85_left_inner_knuckle_link"
       child_frame_id: "robotiq_85_left_finger_tip_link"
       transform: 
         translation: 
           x: 0.04303959807
           y: -0.03759940821
           z: 0.0
         rotation: 
           x: 0.0
           y: 0.0
           z: -1.31530571e-05
           w: 0.999999999913
        - 
       header: 
         seq: 0
         stamp: 
           secs: 11
           nsecs: 296000000
         frame_id: "robotiq_85_base_link"
       child_frame_id: "robotiq_85_left_inner_knuckle_link"
       transform: 
         translation: 
           x: 0.06142
           y: 0.0127
           z: 0.0
         rotation: 
           x: 0.999999999913
           y: -1.31530571e-05
           z: -1.36017806871e-18
           w: -1.03411553546e-13
     - 
       header: 
         seq: 0
         stamp: 
           secs: 11
           nsecs: 296000000
         frame_id: "robotiq_85_base_link"
       child_frame_id: "robotiq_85_left_knuckle_link"
       transform: 
         translation: 
           x: 0.05490451627
           y: 0.03060114443
           z: 0.0
         rotation: 
           x: 0.999999999913
           y: -1.31530571e-05
           z: -1.36017806871e-18
           w: -1.03411553546e-13
     - 
       header: 
         seq: 0
         stamp: 
           secs: 11
           nsecs: 296000000
         frame_id: "robotiq_85_right_inner_knuckle_link"
       child_frame_id: "robotiq_85_right_finger_tip_link"
       transform: 
         translation: 
           x: 0.04303959807
           y: -0.03759940821
           z: 0.0
         rotation: 
           x: 0.0
           y: 0.0
           z: -1.31530571e-05
           w: 0.999999999913
     - 
       header: 
         seq: 0
         stamp: 
           secs: 11
           nsecs: 296000000
         frame_id: "robotiq_85_base_link"
       child_frame_id: "robotiq_85_right_inner_knuckle_link"
       transform: 
         translation: 
           x: 0.06142
           y: -0.0127
           z: 0.0
         rotation: 
           x: 0.0
           y: 0.0
           z: 1.31530571e-05
           w: 0.999999999913
     - 
       header: 
         seq: 0
         stamp: 
           secs: 11
           nsecs: 296000000
         frame_id: "robotiq_85_base_link"
       child_frame_id: "robotiq_85_right_knuckle_link"
       transform: 
         translation: 
           x: 0.05490451627
           y: -0.03060114443
           z: 0.0
         rotation: 
           x: 0.0
           y: 0.0
           z: 1.31530571e-05
           w: 0.999999999913
     - 
       header: 
         seq: 0
         stamp: 
           secs: 11
           nsecs: 296000000
         frame_id: "shoulder_link"
       child_frame_id: "upper_arm_link"
       transform: 
         translation: 
           x: 0.0
           y: 0.0
           z: 0.0
         rotation: 
           x: 0.707106780406
           y: -3.47311703923e-05
           z: 3.47311703852e-05
           w: 0.707106780261
     - 
       header: 
         seq: 0
         stamp: 
           secs: 11
           nsecs: 296000000
         frame_id: "base_link_inertia"
       child_frame_id: "shoulder_link"
       transform: 
         translation: 
           x: 0.0
           y: 0.0
           z: 0.1519
         rotation: 
           x: 0.0
           y: 0.0
           z: 0.000111316041149
           w: 0.999999993804
     - 
       header: 
         seq: 0
         stamp: 
           secs: 11
           nsecs: 296000000
         frame_id: "forearm_link"
       child_frame_id: "wrist_1_link"
       transform: 
         translation: 
           x: -0.21325
           y: 0.0
           z: 0.11235
         rotation: 
           x: 0.0
           y: 0.0
           z: -3.7381721399e-05
           w: 0.999999999301
     - 
       header: 
         seq: 0
         stamp: 
           secs: 11
           nsecs: 296000000
         frame_id: "wrist_1_link"
       child_frame_id: "wrist_2_link"
       transform: 
         translation: 
           x: 0.0
           y: -0.08535
           z: -1.75055776238e-11
         rotation: 
           x: 0.707106779389
           y: 5.14315299095e-05
           z: -5.1431529899e-05
           w: 0.707106779244
     - 
       header: 
         seq: 0
         stamp: 
           secs: 11
           nsecs: 296000000
         frame_id: "wrist_2_link"
       child_frame_id: "wrist_3_link"
       transform: 
         translation: 
           x: 0.0
           y: 0.0819
           z: -1.67979707954e-11
         rotation: 
           x: -0.70710678032
           y: 3.64346550716e-05
           z: 3.64346552104e-05
           w: 0.707106780175
   ---

And when I run rostopic echo /tf_static -n 1 I get:
transforms: 
  - 
    header: 
      seq: 0
      stamp: 
        secs: 0
        nsecs:  20000000
      frame_id: "base_link"
    child_frame_id: "base"
    transform: 
      translation: 
        x: 0.0
        y: 0.0
        z: 0.0
      rotation: 
        x: 0.0
        y: 0.0
        z: 1.0
        w: -1.03411553555e-13
  - 
    header: 
      seq: 0
      stamp: 
        secs: 0
        nsecs:  20000000
      frame_id: "base_link"
    child_frame_id: "base_link_inertia"
    transform: 
      translation: 
        x: 0.0
        y: 0.0
        z: 0.0
      rotation: 
        x: 0.0
        y: 0.0
        z: 1.0
        w: -1.03411553555e-13
  - 
    header: 
      seq: 0
      stamp: 
        secs: 0
        nsecs:  20000000
      frame_id: "flange"
    child_frame_id: "tool0"
    transform: 
      translation: 
        x: 0.0
        y: 0.0
        z: 0.0
      rotation: 
        x: 0.5
        y: 0.499999999998
        z: 0.5
        w: 0.500000000002
  - 
    header: 
      seq: 0
      stamp: 
        secs: 0
        nsecs:  20000000
      frame_id: "robotiq_coupler"
    child_frame_id: "ur_gripper_tip_link"
    transform: 
      translation: 
        x: 0.0
        y: 0.0
        z: 0.1441
      rotation: 
        x: 0.0
        y: 0.0
        z: 0.0
        w: 1.0
  - 
    header: 
      seq: 0
      stamp: 
        secs: 0
        nsecs:  20000000
      frame_id: "robotiq_coupler"
    child_frame_id: "robotiq_85_base_link"
    transform: 
      translation: 
        x: 0.0
        y: 0.0
        z: 0.004
      rotation: 
        x: 0.707106781185
        y: 7.31230107717e-14
        z: 0.707106781188
        w: -7.3123010772e-14
  - 
    header: 
      seq: 0
      stamp: 
        secs: 0
        nsecs:  20000000
      frame_id: "robotiq_85_left_knuckle_link"
    child_frame_id: "robotiq_85_left_finger_link"
    transform: 
      translation: 
        x: -0.00408552455
        y: -0.03148604435
        z: 0.0
      rotation: 
        x: 0.0
        y: 0.0
        z: 0.0
        w: 1.0
  - 
    header: 
      seq: 0
      stamp: 
        secs: 0
        nsecs:  20000000
      frame_id: "robotiq_85_right_knuckle_link"
    child_frame_id: "robotiq_85_right_finger_link"
    transform: 
      translation: 
        x: -0.00408552455
        y: -0.03148604435
        z: 0.0
      rotation: 
        x: 0.0
        y: 0.0
        z: 0.0
        w: 1.0
  - 
    header: 
      seq: 0
      stamp: 
        secs: 0
        nsecs:  20000000
      frame_id: "tool0"
    child_frame_id: "robotiq_coupler"
    transform: 
      translation: 
        x: 0.0
        y: 0.0
        z: 0.004
      rotation: 
        x: 0.0
        y: 0.0
        z: -0.707106781185
        w: 0.707106781188
  - 
    header: 
      seq: 0
      stamp: 
        secs: 0
        nsecs:  20000000
      frame_id: "world"
    child_frame_id: "base_link"
    transform: 
      translation: 
        x: 0.0
        y: 0.0
        z: 0.0
      rotation: 
        x: 0.0
        y: 0.0
        z: 0.0
        w: 1.0
  - 
    header: 
      seq: 0
      stamp: 
        secs: 0
        nsecs:  20000000
      frame_id: "wrist_3_link"
    child_frame_id: "flange"
    transform: 
      translation: 
        x: 0.0
        y: 0.0
        z: 0.0
      rotation: 
        x: -0.499999999998
        y: -0.5
        z: -0.5
        w: 0.500000000002
---

Finally here you can see the different frames between base_linkand tool0 from rosrun tf2_tools view_frames.py
tf tree image
I'm using Ros Melodic in Ubuntu 18.04.
I hope someone can help!

Originally posted by DiegoC on ROS Answers with karma: 3 on 2022-10-20
Post score: 0

Original comments
Comment by ravijoshi on 2022-10-21:
How did you print or note that transformation? Unfortunately, I don't see any print statement in your code snippet. On the other hand, the code is incomplete. Thus, I can not reproduce it here. Nevertheless, you may try the following sample code: http://wiki.ros.org/tf2/Tutorials/Writing%20a%20tf2%20listener%20%28Python%29
Comment by DiegoC on 2022-10-22:
I based my code on the tf2 tutorials, also I edited my question and put the entire code.
Comment by Mike Scheutzow on 2022-10-23:
Please show us the message (including the header) that is being published on /tf.
Comment by DiegoC on 2022-10-23:
I updated the question with the messages from /tf and /tf_static and the tf tree

A:

The problem is not with the tf or ROS. You are using %d as a format string, which will round float values to integers. Coincidentally, our values are less than 1. Thus, they are rounded to 0.
I am surprised and confused at the same time after seeing the following statement:
    rospy.logdebug(
        "tx: %f, ty: %f, tz: %f, rx: %f, ry: %f, rz: %f", tx, ty, tz, rx, ry, rz
    )

I recommend, using the following statement instead:
    rospy.logdebug(trans)

Below is the code snippet:
#!/usr/bin/env python

import rospy
import tf2_ros

class UR3TfListener(object):
    def __init__(self):
        self.tf_buffer = tf2_ros.Buffer()
        self.listener = tf2_ros.TransformListener(self.tf_buffer)
        self.timer = rospy.Timer(rospy.Duration(1), self.tfListenerCallback)

    def tfListenerCallback(self, event):
        try:
            trans = self.tf_buffer.lookup_transform("tool0", "base_link", rospy.Time())
        except (
            tf2_ros.LookupException,
            tf2_ros.ConnectivityException,
            tf2_ros.ExtrapolationException,
        ):
            rospy.logdebug("Can't transform")
            return

        tx = trans.transform.translation.x
        ty = trans.transform.translation.y
        tz = trans.transform.translation.z
        rx = trans.transform.rotation.x
        ry = trans.transform.rotation.y
        rz = trans.transform.rotation.z

        rospy.logdebug(trans)
        rospy.logdebug(
            "tx: %f, ty: %f, tz: %f, rx: %f, ry: %f, rz: %f", tx, ty, tz, rx, ry, rz
        )

if __name__ == "__main__":
    rospy.init_node("tf_listener", anonymous=False, log_level=rospy.DEBUG)
    tf_listener = UR3TfListener()
    rospy.spin()

I used random values to publish a transformation as shown below:
ravi@dell:~/ros_ws$ rosrun tf2_ros static_transform_publisher 0.4 0.2 0.3 0.1 0.2 0.3 base_link tool0
[ INFO] [1666599679.602630460]: Spinning until killed publishing base_link to tool0

Then, I run your code to print the transformation. Please see below:
ravi@dell:~/ros_ws$ rosrun beginner_tutorials tf.py 
[DEBUG] [1666600470.164958]: init_node, name[/tf_listener], pid[71067]
[DEBUG] [1666600470.167868]: binding to 0.0.0.0 0
[DEBUG] [1666600470.170540]: bound to 0.0.0.0 38651
[DEBUG] [1666600470.173766]: ... service URL is rosrpc://dell:38651
[DEBUG] [1666600470.176383]: [/tf_listener/get_loggers]: new Service instance
[DEBUG] [1666600470.181235]: ... service URL is rosrpc://dell:38651
[DEBUG] [1666600470.183920]: [/tf_listener/set_logger_level]: new Service instance
[DEBUG] [1666600470.191242]: ... service URL is rosrpc://dell:38651
[DEBUG] [1666600470.195970]: [/tf_listener/tf2_frames]: new Service instance
[DEBUG] [1666600470.211223]: node[/tf_listener, http://dell:39269/] entering spin(), pid[71067]
[DEBUG] [1666600470.220975]: connecting to tm 58745
[DEBUG] [1666600470.312265]: header: 
  seq: 0
  stamp: 
    secs: 0
    nsecs:         0
  frame_id: "tool0"
child_frame_id: "base_link"
transform: 
  translation: 
    x: -0.3500360106436593
    y: -0.2633910550476512
    z: -0.31320910487014486
  rotation: 
    x: -0.14357217502739192
    y: -0.10602051106179562
    z: -0.03427079855048211
    w: 0.9833474432563559
[DEBUG] [1666600470.316059]: tx: -0.350036, ty: -0.263391, tz: -0.313209, rx: -0.143572, ry: -0.106021, rz: -0.034271

Originally posted by ravijoshi with karma: 1744 on 2022-10-24
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by DiegoC on 2022-10-24:
Thank you so much for your answer, it solved my problem. And thanks to everyone who helped.
Comment by ravijoshi on 2022-10-24:
Glad you made it work. May I ask you to upvote the answer by clicking on ^ icon in the left side, please?

