Q:

Loading robot_description dependent on rosparams

There are a few dimensions of my robot model that are subject to change at runtime, and so I would like to use the param server to set and get those values. It was easy enough to set the values, but now I am unsure as to the best way to pass them to xacro when uploading the robot description:

Am I right that there isn't a way to query a parameter from the server within a launch file? Otherwise I would do something like:
<param name="robot_description" command="$(find xacro)/xacro.py $(arg model) my_var:=$(rosparam get my_var)">

I can instead query the parameters within a python script, but how do I invoke xacro from within that script? Should I use xacro.main(['arg1', 'arg2', ...])? Edit: Scratch this as main() doesn't take any arguments. I'd prefer a solution that doesn't necessitate forking/modifying core code.

Presumably python would allow me to go the "hacky" route and just run the xacro command in a shell and get the result from stdout?

Any suggestions welcome. Thanks!

Originally posted by rkeatin3 on ROS Answers with karma: 156 on 2017-11-29
Post score: 1

Original comments
Comment by gvdhoorn on 2017-12-01:
Btw: after seeing your own answer, the bit about "a few dimensions of my robot model that are subject to change at runtime" was rather confusing. "At runtime" typically means "at any point in time after a program has been started". That would not seem to be what your Python script allows.

A:

I ended up solving this problem by running xacro in a subprocess from within python.
Here's the launch file:
<?xml version="1.0"?>
<launch>
  <rosparam command="load" file="$(find my_robot_bringup)/launch/dynamic_dimensions.yaml"/>
  <arg name="namespace" default=""/>
  <node name="my_robot_description_uploader" pkg="my_robot_description" type="load_robot_description.py" output="screen" respawn="false">
    <rosparam subst_value="True">
      namespace: "$(arg namespace)"
      model_filepath: "$(find my_robot_description)/urdf/my_robot.urdf.xacro"
    </rosparam>
  </node>
</launch>

And the python:
#!/usr/bin/env python
import sys
import rospy
import xacro
import subprocess

def load_robot_description():
    my_robot_dynamic_dimension_1 = rospy.get_param(
        '/my_robot_dynamic_dimension_1')
    namespace = rospy.get_param('~namespace')
    model_filepath = rospy.get_param('~model_filepath')

    try:
        command_string = "rosrun xacro xacro --inorder {} my_robot_dynamic_dimension_1:={}".format(model_filepath, my_robot_dynamic_dimension_1)
        robot_description = subprocess.check_output(
            command_string, shell=True, stderr=subprocess.STDOUT)
    except subprocess.CalledProcessError as process_error:
        rospy.logfatal('Failed to run xacro command with error: \n%s', process_error.output)
        sys.exit(1)

    rospy.set_param(namespace + "/robot_description", robot_description)

if __name__ == '__main__':
    try:
        rospy.init_node('load_robot_description', anonymous=True)
        load_robot_description()
    except rospy.ROSInterruptException:
        pass

Originally posted by rkeatin3 with karma: 156 on 2017-12-01
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by gvdhoorn on 2017-12-01:
As long as you understand that nodes are only started after parameters have been set on the server, and that there is no guaranteed order in which nodes are started.
This means that nodes that need robot_description might try loading it before your Python script is run.
Comment by gvdhoorn on 2017-12-01:
Using xacro (the library) directly is possible by calling xacro.main() yourself. It directly parses sys.argv, which you can override / append to just before you call the function.
Comment by rkeatin3 on 2017-12-01:
I have encountered that issue and will decide whether or not being able to set the xacro arguments from the param server is worth whatever amount of work it will take to make that happen. I like the idea of your last edit though (using a command within the param tag in the launch file).
Comment by rkeatin3 on 2017-12-01:
Thanks for the syntax help on calling main(). I'm not very familiar with Python.

