Q:

Build a controller for an arm (no PR2)

Hi, i want to use ROS to work with a SSC32 card, but i can't find information about how to build a controller for it. I had readed about pr2_controller_interface, pr2_mechanims_model,  ( http://www.ros.org/wiki/pr2_mechanism_model), hardware_interface, joints, urdf, etc...
but i don't understood what interface do i must implement and how use it.
Where can i find instruccions about it, or somebody can give some advice?
Thanks in advance

Originally posted by charias98 on ROS Answers with karma: 61 on 2011-02-24
Post score: 1

A:

Hi,
We did it for our own interactive arm with three actuators that communicate through a CAN bus. Here's a quick rundown of what we built and what you might need:

A valid URDF definition of your joints and actuators,
A bridge class that will own instances of:
A pr2::HardwareInterface
A pr2::ControllerManager
One pr2_hardware_interface::Actuator for each of your motors
A node for hardware communication that will own the bridge class.

At initialization, your bridge class will create the actuators that should appear in your URDF and add them to the hardware interface. You will then create the controller manager and link it to the hardware interface. After loading your URDF XML into the controller manager (initXML(...)) you will be ready to periodically update your controller manager, which should call any other controllers you want to run, e.g. a JointSplineTrajectoryController.
I'm not familiar with SSC32 cards, but with our setup we communicate the state through each actuator instance that was added to the hardware interface. The controller manager update cycle will get these values automatically and propagate them to controllers. We run separate threads to get values to and from our bus, and call the controller manager update() method in its own thread.
Hope this helps,

Originally posted by francoisferland with karma: 66 on 2011-02-24
This answer was ACCEPTED on the original site
Post score: 4

Original comments
Comment by francoisferland on 2011-02-27:
We don't extend these classes, we used them as-is. As for communicating with the card, we have a second class that has a an instance of the bridge. It periodically updates the actuator values and read back the command_effort to send it to the actuators.
Comment by charias98 on 2011-02-25:
Thanks  a lot for your answer. It helps a lot, but I still have some questions: the instances of  ControllerManager and ACtuator that i must to put in my bridge class  there are objects of the original classes or must i extend them? Which class send the digital signals to card? Thanks again

