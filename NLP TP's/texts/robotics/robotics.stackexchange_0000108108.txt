Q:

Integrating Alternative Local Planners (Controller) with ROS 2 Navigation2 Stack for an Ackermann Robot

I'm working on a project with ROS 2 Iron and the Navigation2 stack, focusing on an Ackermann-steered robot. I've encountered issues while trying to integrate alternative local planners, such as TEB, Regulated Pure Pursuit, and MPPI, instead of the default DWB controller.
With DWB, the system works as expected, and I can confirm its activation using:
ros2 param get /controller_server FollowPath.trajectory_generator_name

This command returns String value is: dwb_plugins::StandardTrajectoryGenerator, indicating that DWB is active.
However, when I attempt to switch to other local planners, I face various issues:

TEB Local Planner:
FollowPath:
plugin: "teb_local_planner::TebLocalPlannerROS"
min_turning_radius: 1.0
max_vel_x: 1.5
max_vel_theta: 0.7

When trying to use TEB, it's clear that it's not supported in ROS 2 Iron as the system logs a fatal error stating TEB does not exist as a nav2_core::Controller type. This is confirmed by the error message:
[controller_server-10] [FATAL] [timestamp] [controller_server]: Failed to create controller. Exception: According to the loaded plugin descriptions the class teb_local_planner::TebLocalPlannerROS with base class type nav2_core::Controller does not exist. Declared types are dwb_core::DWBLocalPlanner nav2_mppi_controller::MPPIController nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController nav2_rotation_shim_controller::RotationShimController

Regulated Pure Pursuit and MPPI: While these controllers appear to
be loaded without fatal errors, and the terminal logs indicate their
creation, there's no visible local plan being generated or followed
(the /local_plan topic remains empty in RViz2), and the robot does
not act on any commands. For each alternative planner, I've adjusted
the controller_server configuration in my parameter file
accordingly, for example,

A) For Regulated Pure Pursuit:
FollowPath:
      plugin: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
      desired_linear_vel: 1.5  # Set to your robot's desired speed
      look_ahead_distance: 2.0  # Set according to your robot size and speed
      max_linear_accel: 1.0  # Set based on your robot's acceleration capabilities
      max_linear_decel: 1.0  # Set based on your robot's deceleration capabilities
      allow_reversing: false  # Set to true if your robot can reverse, false otherwise

B) For MPPI:
FollowPath:
  plugin: "nav2_mppi_controller::MPPIController"
  # MPPI specific parameters
  sample_count: 250  # Number of control samples per iteration
  look_ahead_time: 1.0  # Prediction horizon in seconds
  control_duration: 0.1  # Duration each control input is held constant
  acceleration_limits: [1.0, 0.0, 1.0]  # Limits for linear x, linear y, and angular z acceleration
  max_velocity: [0.5, 0.0, 0.5]  # Maximum velocity limits for linear x, linear y, and angular z 

The output of command:
ros2 param get /controller_server FollowPath.trajectory_generator_name

The output of command in this case is:
is Parameter not set
Either for MPPI or Regulated Pure Pursuit controllers (However the output of the terminal launch file states that they were loaded!):
A) For MPPI
[lifecycle_manager-17] [INFO] [1707272624.080108797] [lifecycle_manager_navigation]: Configuring controller_server
[controller_server-10] [INFO] [1707272624.080873689] [controller_server]: Configuring controller interface
[controller_server-10] [INFO] [1707272624.080913233] [controller_server]: getting progress checker plugins..
[controller_server-10] [INFO] [1707272624.081238921] [controller_server]: getting goal checker plugins..
[controller_server-10] [INFO] [1707272624.081332605] [controller_server]: Controller frequency set to 20.0000Hz
[controller_server-10] [INFO] [1707272624.081373358] [local_costmap.local_costmap]: Configuring
[controller_server-10] [INFO] [1707272624.099684622] [local_costmap.local_costmap]: Using plugin "voxel_layer"
[controller_server-10] [INFO] [1707272624.111637076] [local_costmap.local_costmap]: Subscribed to Topics: left_scan right_scan
[rviz2-3] [INFO] [1707272624.133096370] [rviz2]: Stereo is NOT SUPPORTED
[rviz2-3] [INFO] [1707272624.133202145] [rviz2]: OpenGl version: 4.6 (GLSL 4.6)
[controller_server-10] [INFO] [1707272624.144946643] [local_costmap.local_costmap]: Initialized plugin "voxel_layer"
[controller_server-10] [INFO] [1707272624.145000833] [local_costmap.local_costmap]: Using plugin "inflation_layer"
[controller_server-10] [INFO] [1707272624.151004580] [local_costmap.local_costmap]: Initialized plugin "inflation_layer"
[rviz2-3] [INFO] [1707272624.177433914] [rviz2]: Stereo is NOT SUPPORTED
[controller_server-10] [INFO] [1707272624.183176686] [controller_server]: Created progress_checker : progress_checker of type nav2_controller::SimpleProgressChecker
[controller_server-10] [INFO] [1707272624.183778839] [controller_server]: Controller Server has progress_checker  progress checkers available.
[controller_server-10] [INFO] [1707272624.184718144] [controller_server]: Created goal checker : general_goal_checker of type nav2_controller::SimpleGoalChecker
[controller_server-10] [INFO] [1707272624.185272323] [controller_server]: Controller Server has general_goal_checker  goal checkers available.
[controller_server-10] [INFO] [1707272624.187892942] [controller_server]: Created controller : FollowPath of type nav2_mppi_controller::MPPIController
[controller_server-10] [INFO] [1707272624.190109571] [controller_server]: Controller period is equal to model dt. Control sequence shifting is ON
[controller_server-10] [INFO] [1707272624.196427682] [controller_server]: Optimizer reset
[controller_server-10] [INFO] [1707272624.202554850] [MPPIController]: Configured MPPI Controller: FollowPath
[controller_server-10] [INFO] [1707272624.202599342] [controller_server]: Controller Server has FollowPath  controllers available.

B) For RegulatedPurePursuit:
controller_server-10] [INFO] [1707269428.308463049] [controller_server]: Created controller : FollowPath of type nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController

Despite these configurations, there seems to be no active local plan being generated or visualized in RViz2.
My questions are:

Given TEB's apparent lack of support in ROS 2 Iron, are there any
known workarounds or alternatives for using TEB** with
Ackermann-steered robots in this ROS version? From this post Answer TEB discontinuation for ROS2  I am not very hopeful!

For Regulated Pure Pursuit and MPPI, what could be the reason for
the absence of visible/local planning despite the controllers being
loaded? Are there specific steps or configurations I might be
missing to enable these planners effectively?

Any insights or guidance on integrating these local planners with the Nav2 stack would be greatly appreciated.

A:

Thank you, Steve, for your guidance and the comprehensive documentation provided for the Navigation2 stack. I've thoroughly reviewed the materials, particularly the sections detailing the Regulated Pure Pursuit and MPPI controllers, which offer invaluable insights into configuring and understanding these components!
Despite the wealth of information available, I noticed an opportunity for enhancing the documentation, especially regarding the visual debugging of local planners. It appears that the documentation does not explicitly state that the planners' visual outputs are not published to the /local_plan topic. Instead, these are available through the /trajectories and /transformed_global_plan topics (figured out by reading the controller source code Steve provided above). Clarifying this in the documentation could greatly aid users in effectively debugging and visualizing planner behaviors.

Additionally, while seeking further information on integrating external controllers like TEB, I encountered a broken link: Writing a new Navigation2 Controller Plugin.

It is inaccessible, could the maintainers please take a look?
As I said in the comment above I was able to compile TEB + costmap_converter package dependency pkg into my workspace. However, some additional steps might be taken to integrate with na2_core::Controller, which I have still not figured out.

