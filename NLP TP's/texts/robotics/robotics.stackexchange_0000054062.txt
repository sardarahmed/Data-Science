Q:

Large-Scale SLAM?

Hello, all,
I have been testing various SLAM packages in ROS. I am just wondering is there any "large-scale" SLAM packages available? By large-scale I mean the map produced can be as large as a few kilometer^2 and the occupany grid map can be overlaid on a GIS software. Currently it seems to me that all packages can only produce a relatively small map, for example, 50 meters x 50 meters. I understand that large map construction will increase memory and cpu usage. So, is there any efficient way to do that?

Originally posted by BenMa on ROS Answers with karma: 76 on 2013-09-12
Post score: 0

Original comments
Comment by Dereck on 2013-09-12:
What kinds of features are you mapping?
Comment by BenMa on 2013-09-12:
I am using 2D LiDAR to construct the map. The map is just a 2D occupancy grid.
Comment by Dereck on 2013-09-12:
I would be curious to see your findings on those existing algorithms and what you end up using. :)
Comment by BenMa on 2013-09-12:
I tried gmapping and hector slam, it seems that the map size is limited (authors please correct me if I am wrong).
Comment by Dereck on 2013-09-12:
I believe hector slam does use a fixed map size, but I think gmapping should expand to an arbitrary size. My gmapping setup uses an expanding map for sure. Whether there is a hard coaxed maximum or you run into memory or computational limitations is another matter however. :-)
Comment by BenMa on 2013-09-12:
Since a robot is only interested to the region nearby most of the time, it makes sense that the map should "fade away" when the robot moves to different locations. The question is, what is the best to construct, store and query a large-scale map which consists of many smaller maps? I heard of map stitch, but it is a tool rather than a complete solution.
Comment by Enrico on 2013-09-13:
Something like this?
http://www.youtube.com/watch?v=sp49CQ_wYiI

A:

If you give gmapping enough memory and turn down the resolution, it is probably your best bet at the moment. Failing that, you're probably going to have to resort to rolling your own solution.
If it were me, I would start with implementing a ROS interface for DP-SLAM and giving that a try, but I'm not sure that it will run real time or not however.

Originally posted by Dereck with karma: 1070 on 2013-09-13
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by BenMa on 2013-09-15:
How about the memory and computation requirement of DP-SLAM? I glace through the algorithm and it appears to me it is based on particle-filter with some innovation in architecture. The real problem is, how to we compare all these SLAMs farily under ROS using the same dataset?
Comment by Dereck on 2013-09-15:
Record your sensor data to a bag file and drive around for a while. Then you can sit at your desk and fire up each of the algorithms with exactly the same data.
Comment by Dereck on 2013-09-15:
Oh, and DP-slam is a particle filter, but unlike gmapping, each particle contains its own copy of what it believe the map looks like. This has important implications, but I'll leave the reading to you ;-)
Comment by kwiesz91 on 2015-08-26:
gmapping is the one where each particle has its own map.  DP-SLAM holds a grid of trees.

