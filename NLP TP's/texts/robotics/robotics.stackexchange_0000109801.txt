Q:

How to add an additional argument in a ROS2 cpp callback

I want to add an additional argument in a callback function for rclcpp, e.g. callback(msg, additional_argument).
I can do it in python. There the solution would be:
import rclpy
from std_msgs.msg import String

def callback(data, source):
    rospy.loginfo(f"I heard '{data.data}' from {source}")

def listener():
    rclpy.init()
    node = rclpy.create_node('listener')

    node.create_subscription(String, 'chatter_1', lambda msg: callback(msg, 1), 10)
    node.create_subscription(String, 'chatter_2', lambda msg: callback(msg, 2), 10)

    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    listener()

I also did it in ROS1 with boost::bind. I tried to do it in ROS2 with std::bind, but it did not work.
Does someone know the exact syntax?
Thanks

A:

You can find a specific example in the ros2 examples repo:
https://github.com/ros2/examples/blob/rolling/rclcpp/topics/minimal_subscriber/lambda.cpp
It can be done even shorter:
#include <memory>

#include "rclcpp/rclcpp.hpp"
#include "std_msgs/msg/string.hpp"

class MinimalSubscriber : public rclcpp::Node {
public:
  MinimalSubscriber()
      : Node("minimal_subscriber"),
        subscription_1_(this->create_subscription<std_msgs::msg::String>(
            "chatter_1", 10,
            [this](const std_msgs::msg::String &msg) -> void {
              callback(msg, 1);
            })),
        subscription_2_(this->create_subscription<std_msgs::msg::String>(
            "chatter_2", 10, [this](const std_msgs::msg::String &msg) -> void {
              callback(msg, 2);
            })) {}

private:
  void callback(const std_msgs::msg::String &msg, int source) {
    RCLCPP_INFO(this->get_logger(), "I heard: '%s' from %d", msg.data.c_str(),
                source);
  }

  rclcpp::Subscription<std_msgs::msg::String>::SharedPtr subscription_1_;
  rclcpp::Subscription<std_msgs::msg::String>::SharedPtr subscription_2_;
};

int main(int argc, char *argv[]) {
  rclcpp::init(argc, argv);
  rclcpp::spin(std::make_shared<MinimalSubscriber>());
  rclcpp::shutdown();
  return 0;
}
```

