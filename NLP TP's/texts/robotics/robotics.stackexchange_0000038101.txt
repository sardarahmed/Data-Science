Q:

What's the best way to package ROS?

Presently ROS has packages for Ubuntu and a source distribution for everyone else. I'd like to put together a package for my distro (archlinux) so I can install it across multiple computers efficiently.
Are there best practices for this? For a system installation of ROS? Are there packaging scripts that can be referenced or modified to support other packagers?
It appears that in ROS, each package has dependencies that are a mix of ROS packages and distribution packages; and that some ROS packages exist only because Ubuntu does not distribute the correct version for ROS.
Other distributions will have a different combo of package versions. They might be missing a version that Ubuntu has (thus wanting ROS to build the correct version from source) or they might have the correct version where Ubuntu did not.
How do I determine the expected (package) version of each package dependency?

Originally posted by hauptmech on ROS Answers with karma: 71 on 2012-02-21
Post score: 4

Original comments
Comment by joq on 2012-02-22:
ROS evolves rapidly. Understand that maintaining this is going to be a significant long-term commitment.

A:

rosdep is the cross-platform tool for managing how system dependencies are installed.  It contains support for Arch, though I'm not sure how well used it is.
That said, the problem noted has some incorrect assumptions:
"I just spent a day installing ROS and watching it's dependency system compile a pile of software that's already installed in my system (PCL, Gazebo, orocos, etc)."
Each release of ROS requires a very specific version of PCL, Gazebo, Orocos, etc... ROS recompiles its own versions so that everything works together.  You might not get very far attempting to compile against your own system installed versions of these libraries as PCL and Gazebo have non-backwards-compatible API changes in recent releases.
Starting in ROS Fuerte, PCL and OpenCV are treated as system dependencies via rosdep, which means that you could attempt to start using rosdep in this way.  In Groovy, Gazebo will likely get the same treatment.   However, you will probably quickly find, as joq notes, that it takes much more time than you think to save disk space.
EDIT: in response to the updated question, my answer remains the same.  If ROS builds it, you should build it as well.  Only dependencies modelled by rosdep can be substituted with your platform's system dependencies.  The version to use is "If ROS builds it from source, use that version.  If ROS treats it as a rosdep, look at the rosdep.yaml database and pick whatever version is closest on your platform."
Starting in ROS Fuerte, many of the lower level stacks are close to FHS compliant, and thus easy to repackage for other distributions.  As for system dependencies that are repackaged in ROS, you simply cannot substitute system dependencies for them due to the way the build system works (and there are often patches that you need).  The goal is to eliminate most re-packaged system dependencies when Ubuntu Precise is available, so this will be much improved by the ROS Groovy release.

Originally posted by kwc with karma: 12244 on 2012-02-22
This answer was ACCEPTED on the original site
Post score: 4

Original comments
Comment by hauptmech on 2012-02-22:
Thanks for the additional insight. The goal of packaging ROS is to avoid recompiling for each machine I install it on.
Comment by hauptmech on 2012-02-22:
I don't see version info in rosdep.yaml nor in REP 111. Does this mean that for every ros dependency I need to search the ubuntu databases for the version used?
Comment by tfoote on 2012-02-23:
If it's a declared rosdep without a version I suggest trying whatever is available in your package manager.  If it doesn't work I'd compare to the ubuntu version and see if there's any differences.  For most mature packages it shouldn't be a problem.

