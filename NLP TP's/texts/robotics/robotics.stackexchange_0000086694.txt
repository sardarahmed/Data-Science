Q:

function callback using std::bind in ros 2 subscription

Hi,
Using std::bind with rclcpp::Node::create_subscription() throws compilation errors.
For example, I cannot use
sub_input_ = node->create_subscription<sensor_msgs::msg::Imu>("input",
  std::bind(
      &input_surface_indices_callback,
      this, <argument1>,<argument2>));

However using lamdas as a callback function is ok in this case.
Any help/information on this is welcome.

Originally posted by Skyking on ROS Answers with karma: 151 on 2018-04-20
Post score: 2

Original comments
Comment by gvdhoorn on 2018-04-20:
What about showing us such a "compilation error"? We cannot help you without you showing us what happened.

A:

I believe this is the same issue as reported in here:
https://github.com/ros2/rclcpp/issues/273
std::bind with additional arguments is not getting resolved correctly. However, I believe if you extract your std::bind to a std::function and then pass the function instance to the callback it will work.
std::function<void(std::shared_ptr<sensor_msgs::msg::Imu>)> fnc = std::bind(
   &input_surface_indices_callback, this, std::placeholders::_1, <argument1>, <argument2>);
sub_input_ = node->create_subscription<sensor_msgs::msg::Imu>("input", fnc);

I am assuming here that your callback has a signature like:
void input_surface_indices_callback(std::shared_ptr<sensor_msgs::msg::Imu>, Argument1T arg1, Argument2T arg2);

Could you try that out and see if it works for you?

Originally posted by Karsten with karma: 643 on 2018-04-20
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by lucasw on 2018-11-01:
I was able to pass extra parameters to the callbacks
in bouncy using the std::function method https://github.com/lucasw/v4l2ucp/blob/5fd86d65d5862684c651fa191081ff7e8c9dac2b/v4l2ucp/src/mainWindow.cpp#L152 (though I'm probably going replace the subscribers with service/s later)
Comment by merosss on 2022-12-29:
It's a pity that this function broke in ros2. This gave me headaches for days, thanks a lot for your solution, worked as a charm!

