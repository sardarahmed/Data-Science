Q:

source won't change the package path

Hi,
I'm trying to run the pcl tutorial, since i need it for an university project.
Unfortunately when I try to run the exaple
arnold@arnold-UX31E:~/catkin_ws$ rosrun my_pcl_tutorial example input:=/camera/depth/points

I get the error back:

[rosrun] Couldn't find executable named example below /home/arnold/catkin_ws/src/my_pcl_tutorial

The executable crated with catkin_make is in the build folder, not in src (this seams to be correct).
But rosrun trys to run it from the src folder. A little research came to the conclusion that it isn't sourced right.
When I run
arnold@arnold-UX31E:~/catkin_ws$ source devel/setup.sh  I get no response (no error or approval) and nothing changes.
I already deleted the workspace 3 times and just followed the instructions from this Tutorials.
http://wiki.ros.org/catkin/Tutorials/create_a_workspace and http://wiki.ros.org/pcl/Tutorials
Running Ros Indigo under Ubuntu 14.04 LTS

Answer to the first Comments, My Input:

Return of a fresh catkin_make build:
arnold@arnold-UX31E:~$ printenv | grep ROS
ROS_ROOT=/opt/ros/indigo/share/ros
ROS_PACKAGE_PATH=/opt/ros/indigo/share:/opt/ros/indigo/stacks
ROS_MASTER_URI=http://localhost:11311
ROSLISP_PACKAGE_DIRECTORIES=
ROS_DISTRO=indigo
ROS_ETC_DIR=/opt/ros/indigo/etc/ros

arnold@arnold-UX31E:~/catkin_ws$ catkin_make
Base path: /home/arnold/catkin_ws
Source space: /home/arnold/catkin_ws/src
Build space: /home/arnold/catkin_ws/build
Devel space: /home/arnold/catkin_ws/devel
Install space: /home/arnold/catkin_ws/install
####
#### Running command: "cmake /home/arnold/catkin_ws/src -DCATKIN_DEVEL_PREFIX=/home/arnold/catkin_ws/devel -DCMAKE_INSTALL_PREFIX=/home/arnold/catkin_ws/install -G Unix Makefiles" in "/home/arnold/catkin_ws/build"
####
-- The C compiler identification is GNU 4.8.4
-- The CXX compiler identification is GNU 4.8.4
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Using CATKIN_DEVEL_PREFIX: /home/arnold/catkin_ws/devel
-- Using CMAKE_PREFIX_PATH: /home/arnold/catkin_ws/devel;/opt/ros/indigo
-- This workspace overlays: /home/arnold/catkin_ws/devel;/opt/ros/indigo
-- Found PythonInterp: /usr/bin/python (found version "2.7.6") 
-- Using PYTHON_EXECUTABLE: /usr/bin/python
-- Using Debian Python package layout
-- Using empy: /usr/bin/empy
-- Using CATKIN_ENABLE_TESTING: ON
-- Call enable_testing()
-- Using CATKIN_TEST_RESULTS_DIR: /home/arnold/catkin_ws/build/test_results
-- Looking for include file pthread.h
-- Looking for include file pthread.h - found
-- Looking for pthread_create
-- Looking for pthread_create - not found
-- Looking for pthread_create in pthreads
-- Looking for pthread_create in pthreads - not found
-- Looking for pthread_create in pthread
-- Looking for pthread_create in pthread - found
-- Found Threads: TRUE  
-- Found gtest sources under '/usr/src/gtest': gtests will be built
-- Using Python nosetests: /usr/bin/nosetests-2.7
-- catkin 0.6.19
-- BUILD_SHARED_LIBS is on
-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- ~~  traversing 1 packages in topological order:
-- ~~  - my_pcl_tutorial
-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- +++ processing catkin package: 'my_pcl_tutorial'
-- ==> add_subdirectory(my_pcl_tutorial)
-- Using these message generators: gencpp;genlisp;genpy
-- Configuring done
-- Generating done
-- Build files have been written to: /home/arnold/catkin_ws/build
####
#### Running command: "make -j4 -l4" in "/home/arnold/catkin_ws/build"
####
Scanning dependencies of target example
[100%] Building CXX object my_pcl_tutorial/CMakeFiles/example.dir/src/example.cpp.o
Linking CXX executable example
[100%] Built target example

Content CMakeLists.txt: Altered like described in the tutorial.
cmake_minimum_required(VERSION 2.8.3)
project(my_pcl_tutorial)

## Compile as C++11, supported in ROS Kinetic and newer
# add_compile_options(-std=c++11)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  pcl_conversions
  pcl_ros
  roscpp
  sensor_msgs
)
add_executable(example src/example.cpp)
target_link_libraries(example ${catkin_LIBRARIES})

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)

## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend tag for "message_generation"
##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in
##     but can be declared for certainty nonetheless:
##     * add a run_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
# add_message_files(
#   FILES
#   Message1.msg
#   Message2.msg
# )

## Generate services in the 'srv' folder
# add_service_files(
#   FILES
#   Service1.srv
#   Service2.srv
# )

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
# generate_messages(
#   DEPENDENCIES
#   sensor_msgs
# )

################################################
## Declare ROS dynamic reconfigure parameters ##
################################################

## To declare and build dynamic reconfigure parameters within this
## package, follow these steps:
## * In the file package.xml:
##   * add a build_depend and a run_depend tag for "dynamic_reconfigure"
## * In this file (CMakeLists.txt):
##   * add "dynamic_reconfigure" to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * uncomment the "generate_dynamic_reconfigure_options" section below
##     and list every .cfg file to be processed

## Generate dynamic reconfigure parameters in the 'cfg' folder
# generate_dynamic_reconfigure_options(
#   cfg/DynReconf1.cfg
#   cfg/DynReconf2.cfg
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES my_pcl_tutorial
#  CATKIN_DEPENDS pcl_conversions pcl_ros roscpp sensor_msgs
#  DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(
# include
  ${catkin_INCLUDE_DIRS}
)

## Declare a C++ library
# add_library(${PROJECT_NAME}
#   src/${PROJECT_NAME}/my_pcl_tutorial.cpp
# )

## Add cmake target dependencies of the library
## as an example, code may need to be generated before libraries
## either from message generation or dynamic reconfigure
# add_dependencies(${PROJECT_NAME} ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Declare a C++ executable
## With catkin_make all packages are built within a single CMake context
## The recommended prefix ensures that target names across packages don't collide
# add_executable(${PROJECT_NAME}_node src/my_pcl_tutorial_node.cpp)

## Rename C++ executable without prefix
## The above recommended prefix causes long target names, the following renames the
## target back to the shorter version for ease of user use
## e.g. "rosrun someones_pkg node" instead of "rosrun someones_pkg someones_pkg_node"
# set_target_properties(${PROJECT_NAME}_node PROPERTIES OUTPUT_NAME node PREFIX "")

## Add cmake target dependencies of the executable
## same as for the library above
# add_dependencies(${PROJECT_NAME}_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Specify libraries to link a library or executable target against
# target_link_libraries(${PROJECT_NAME}_node
#   ${catkin_LIBRARIES}
# )

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS ${PROJECT_NAME} ${PROJECT_NAME}_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_my_pcl_tutorial.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)

Originally posted by Arnold on ROS Answers with karma: 13 on 2017-06-21
Post score: 0

Original comments
Comment by gvdhoorn on 2017-06-22:\

When I run
arnold@arnold-UX31E:~/catkin_ws$ source devel/setup.sh  I get no response (no error or approval) and nothing changes.

That is expected, as it only updates your environment variables.
Please post the output of echo $ROS_PACKAGE_PATH and tell us how you created your workspace.
Comment by gvdhoorn on 2017-06-22:
And the exact order in which you source, catkin_make and rosrun things.
Comment by gvdhoorn on 2017-06-22:
And just noticed this:
if you are using bash as your shell, you should use the setup.bash file, not the setup.sh.
Comment by Arnold on 2017-06-22:
Ok, I'm going to edit the exact order and results into the first post. I created the workspace how it was shown in the catkin create_a_workspace tutorial.
Comment by gvdhoorn on 2017-06-22:
Can you first try to source devel/setup.bash? It might be that is all you did 'wrong'.
Comment by Arnold on 2017-06-22:
posted my log as picture in the first post.
Comment by gvdhoorn on 2017-06-22:
Please don't use images for what is essentially text - you can just copy-paste from a terminal into your question text.
As to the output: I don't see any CMake output indicating that it's building any executable binaries. Can you include the CMakeLists.txt of the pkg you created?
Comment by Arnold on 2017-06-22:
Thats because the pkg was already build. If i delete the build folder and rerun catkin_make. It returns another text where it build a hack of more stuff. I'm wondering because the last last line Linking CXX executable example is red for me. I can't upload a file because i don't have 5 karma.
Comment by gvdhoorn on 2017-06-22:
The binary seems to be built, so that is good. Could you just copy-paste the contents of the CMakeLists.txt into your question? It should not be too many lines - just make sure to not include all the comments.
You don't have anything in devel/lib?
Comment by Arnold on 2017-06-22:
I posted the whole catkin_make report. If you need the CMakeLists.txt i can post you the content. Wish i could use spoilers her to organize my post.
Comment by gvdhoorn on 2017-06-22:\

[..] just make sure to not include all the comments.

Comments are all lines starting with a #. With your CMakeLists.txt that would reduce the nr of lines significantly ..

A:

..

add_executable(example src/example.cpp)

target_link_libraries(example ${catkin_LIBRARIES})

...

catkin_package(
   ...
)

Please move the add_executable(..) and target_link_libraries(..) lines below the catkin_package(..) line. Delete your build and devel folders and rebuild your workspace. That should make things work.
This is slightly unintuitive, but it is documented. See wiki/catkin - CMakeLists.txt - Overall Structure and Ordering on the ROS wiki.

Originally posted by gvdhoorn with karma: 86574 on 2017-06-22
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by Arnold on 2017-06-22:
Thanks, this worked.
Now I'm getting another error, when I rosrun my_pcl_tutorial example input:=/camera/depth/points
[ERROR] [1498134195.591725742]: [registerPublisher] Failed to contact master at [localhost:11311].  Retrying...

but this is another error and I'm trying it on my own first.
Comment by gvdhoorn on 2017-06-22:
Good to hear that resolved it.
As to your next problem: you simply need to start a roscore first.

