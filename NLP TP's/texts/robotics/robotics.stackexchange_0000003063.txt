Q:

Why should I still use EKF instead of UKF?

The Unscented Kalman Filter is a variant of the Extended Kalman Filter which uses a different linearization relying on transforming a set of "Sigma Points" instead of first-order Taylor series expansion.
The UKF does not require computing Jacobians, can be used with discontinuous transformation, and is, most importantly, more accurate than EKF for highly nonlinear transformations.
The only disadvantage I found is that "the EKF is often slightly faster than the UKF" (Probablistic Robotics). This seems negligible to me and their asymptotic complexity seems to be the same.
So why does everybody still seem to prefer EKF over UKF? Did I miss a big disadvantage of UKF? 

A:

Here are a few possible points of consideration. Certainly the UKF has many counterpoints where it has an advantage too.
The most obvious advantage is computation power. Don't forget that traditionally, these filters are implemented on embedded systems with very limited computational resources. Also, while I don't have much experience with UKFs myself, one significant advantage of EKFs is their relative ease of implementation. For many systems, the Jacobian is very easily derived analytically which makes the EKF implementation mostly straightforward.
Another area of potential advantage is ease of tuning. I don't remember how many parameters are tunable in a UKF, but the EKF tuning parameters are already well understood because the basic Kalman Filter is ubiquitous so anybody thinking about using a UKF already knows how to tune an EKF.
Finally, don't ignore momentum. If an existing system already has a working EKF, why go through all the work of implementing and testing a UKF?

