Q:

Adding a robot to RVIS, getting error: No transform from [] to []

Kinetic, ROS1
I've been through a variety of tutorials on adding a robot to RVIS. I made a simple differential control robot with a camera working nicely in Gazebo. According to the tutorials, which ROS and Gazebo running, you only need to add the robot model and specify the base link for Fixed Frame. I've done this, but under the robot model only the base_link has a Transform. The right wheel has the error "No transform from [right_wheel] to [base_link], and likewise for the left wheel, chassis, camera, and third wheel.
Also, the robot in RVIS isn't correct.
Is there a step I'm missing? Do I need anything more than the urdf model below? Thanks.

simpleton.xacro
<?xml version="1.0"?>

<robot name="simpleton" xmlns:xacro="http://www.ros.org/wiki/xacro">

    <xacro:include filename="$(find simpleton_description)/urdf/simpleton.gazebo" />
    <xacro:include filename="$(find simpleton_description)/urdf/macros.xacro" />

    <xacro:property name="wheelThickness" value="0.1"/>
    <xacro:property name="wheelRadius" value="0.1"/>

    <xacro:property name="chassisWidth" value="0.3"/>
    <xacro:property name="chassisHeight" value="0.1"/>
    <xacro:property name="chassisLength" value="0.5"/>
    <xacro:property name="casterRadius" value="0.05"/>
    <xacro:property name="cameraSize" value="0.05"/>

    <!-- Base link --> 
    <link name="base_link" />

    <!-- Chassis --> 
  <joint name="base_joint" type="fixed">
    <parent link="base_link"/>
    <child link="chassis"/>
  </joint>

  <link name="chassis">
    <collision>
      <origin xyz="0 0 ${wheelRadius+(chassisHeight/2)}" rpy="0 0 0"/>
      <geometry>
            <box size="${chassisLength} ${chassisWidth} ${chassisHeight}"/>
      </geometry>
    </collision>

    <visual>
      <origin xyz="0 0 ${wheelRadius+(chassisHeight/2)}" rpy="0 0 0"/>
      <geometry>
            <box size="${chassisLength} ${chassisWidth} ${chassisHeight}"/>
      </geometry>
      <material name="white"/>
    </visual>

        <inertial>
          <mass value="1"/>
            <origin xyz="0 0 0" rpy="0 0 0"/>
          <box_inertia m="0.5" x="${chassisLength}" y="${chassisWidth}" z="${chassisHeight}"/>
        </inertial>
  </link>

    <wheel lr="left" y="-1"/>
    <wheel lr="right" y="1"/>

    <!-- Caster Wheel --> 
  <joint name="fixed" type="fixed">
    <parent link="chassis"/>
    <child link="caster_wheel"/>
  </joint>

  <link name="caster_wheel">

    <collision>
      <origin xyz="${casterRadius-chassisLength/2} 0 ${casterRadius-chassisHeight+wheelRadius}" rpy="0 0 0"/>
      <geometry>
    <sphere radius="${casterRadius}"/>
      </geometry>
    </collision>
  
    <visual> 
      <origin xyz="${casterRadius-chassisLength/2} 0 ${casterRadius-chassisHeight+wheelRadius}" rpy="0 0 0"/>
      <geometry>
    <sphere radius="${casterRadius}"/>
      </geometry>
      <material name="red"/>
    </visual>

    <inertial>
      <origin xyz="${casterRadius-chassisLength/2} 0 ${casterRadius-chassisHeight+wheelRadius}" rpy="0 0 0"/>
      <mass value="0.5"/>
      <sphere_inertia m="0.5" r="${casterRadius}"/>
    </inertial>
  </link>

    <!-- Camera -->
    <!-- You can adjust the camera angle with the p in rpy, measured in radians. -->
    <!-- You can also increate the height of the camera by adding a number, in meters, -->
    <!-- to the z in xyz. For example, to simulate a camera mounted on a 1/2 meter post, -->
    <!-- we can replace the z value with ${wheelRadius+chassisHeight+0.5}                               --> 
  <joint name="camera_joint" type="fixed">
    <origin xyz="${chassisLength/2} 0 ${wheelRadius+chassisHeight}" rpy="0 .3 0"/>
    <parent link="chassis"/>
    <child link="camera"/>
  </joint>

  <link name="camera">
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
    <box size="${cameraSize} ${cameraSize} ${cameraSize}"/>
      </geometry>
    </collision>

    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
    <box size="${cameraSize} ${cameraSize} ${cameraSize}"/>
      </geometry>
      <material name="blue"/>
    </visual>

    <inertial>
      <mass value="0.05" />
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <box_inertia m="0.05" x="${cameraSize}" y="${cameraSize}" z="${cameraSize}" />
    </inertial>
  </link>

</robot> 

macros.xacro
<?xml version="1.0"?>
<robot>

    <!-- Wheel - Start -->
    <macro name="wheel" params="lr y">
        <link name="${lr}_wheel">
          <collision>
            <origin xyz="0 0 0" rpy="0 1.5708 1.5708" />
            <geometry>
             <cylinder length="${wheelThickness}" radius="${wheelRadius}"/>
            </geometry>
            </collision>

            <visual>
              <origin xyz="0 0 0" rpy="0 1.5708 1.5708" />
              <geometry>
               <cylinder length="${wheelThickness}" radius="${wheelRadius}"/>
              </geometry>
              <material name="black"/>
            </visual>

            <inertial>
              <origin xyz="0 0 0" rpy="0 1.5708 1.5708" />
              <mass value="0.2"/>
              <cylinder_inertia m="0.2" r="${wheelRadius}" h="${wheelThickness}"/>
                <inertia ixx="0.4" ixy="0.1" ixz="0.1" iyy="0.4" iyz="0.1" izz="0.2"/>
            </inertial>
        </link>

        <joint name="${lr}_wheel_hinge" type="continuous">
          <parent link="chassis"/>
          <child link="${lr}_wheel"/>
          <origin xyz="${chassisLength/4} ${y*(((wheelThickness+chassisWidth)/2)+.01)} ${wheelRadius}" rpy="0 0 0" /> 
          <axis xyz="0 1 0" rpy="0 0 0" />
          <!--<limit effort="100" velocity="100"/>-->
          <!--<joint_properties damping="0.0" friction="0"/>-->
          <dynamics damping="0.0" />
        </joint>

        <gazebo reference="${lr}_wheel">
            <mu1 value="1.0"/>
            <mu2 value="1.0"/>
            <kp  value="10000000.0" />
            <kd  value="1.0" />
            <fdir1 value="0 1 0"/>
            <material>Gazebo/Blue</material>
        </gazebo>

        <gazebo reference="${lr}_wheel_hinge">
            <implicitSpringDamper value='true' />
        </gazebo>

        <transmission name="${lr}_trans">
          <type>transmission_interface/SimpleTransmission</type>
          <joint name="${lr}_wheel_hinge">
              <hardwareInterface>EffortJointInterface</hardwareInterface>
          </joint>
          <actuator name="${lr}Motor">
          <hardwareInterface>hardwareInterface/EffortJointInterface</hardwareInterface>
          <mechanicalReduction>10</mechanicalReduction>
          </actuator>
        </transmission>
    </macro> 
    <!-- Wheel - End --> 

    <macro name="cylinder_inertia" params="m r h">
        <inertia  ixx="${m*(3*r*r+h*h)/12}" ixy = "0" ixz = "0"
                  iyy="${m*(3*r*r+h*h)/12}" iyz = "0"
                  izz="${m*r*r/2}" /> 
    </macro>

    <macro name="box_inertia" params="m x y z">
        <inertia  ixx="${m*(y*y+z*z)/12}" ixy = "0" ixz = "0"
                  iyy="${m*(x*x+z*z)/12}" iyz = "0"
                  izz="${m*(x*x+z*z)/12}" /> 
    </macro>

    <macro name="sphere_inertia" params="m r">
        <inertia  ixx="${2*m*r*r/5}" ixy = "0" ixz = "0"
                  iyy="${2*m*r*r/5}" iyz = "0"
                  izz="${2*m*r*r/5}" /> 
    </macro>

</robot>

bot_empty.launch
<launch>
  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description"
     command="$(find xacro)/xacro.py '$(find simpleton_description)/urdf/simpleton.xacro'" />

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find simpleton_gazebo)/worlds/empty.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-urdf -model simpleton -param robot_description"/>

  <node name="viewer" pkg="image_view" type="image_view" respawn="false" output="screen">
    <remap from="image" to="/simpleton/camera1/image_raw" />
  </node>
    
    <node pkg="robot_state_publisher" name="robot_state_publisher" type="robot_state_publisher" />

</launch> 

Originally posted by horseatinweeds on ROS Answers with karma: 160 on 2019-07-07
Post score: 0

A:

The errors are showing because you did not add the robot_state_publisher node to your launch file
code :
<node pkg="robot_state_publisher" name="robot_state_publisher" type="robot_state_publisher" />

to your launch file
That would resolve the issue.
By the way, keep up with your ROS journey.

Originally posted by sachinkum0009 with karma: 36 on 2019-07-07
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by horseatinweeds on 2019-07-08:
Hi hunter,
Thanks for the reply. Adding the robot_state_publisher helped. Now the chassis, third wheel, and camera all show up correctly, but the two main wheels are still in the wrong place and have the No transform from error. I'm adding my launch file and another image to my original post.
Comment by sachinkum0009 on 2019-07-10:
I think that you need to add gazebo plugin for joint_state_publisher as:
<gazebo>
        <plugin name="joint_state_publisher" filename="libgazebo_ros_joint_state_publisher.so">
            <jointName>left_wheel_hinge,right_wheel_hinge</jointName>
        </plugin>
    </gazebo>

Try this out and tell the results. This should probably solve your problem. Let me know if you face any other issues.
BTW, keep buddy :)

