Q:

Self learning maze solving robot using 8bit microcontroller?

I want to know if there is best algorithm and technique to implement self learning maze solving robot in 8 bit limited resource micro-controller? I was looking for some well optimized algorithm and/or technique. Maze can be of any type. Of-course first time it has to walk all the way and keep tracking obstacles it found. 
I think best technique would be neural networks but is it possible to do this in such a short resources of 8bit? Any example online with similar kind of problem? 
My wall detection is based on units, well, I have counted the wheel turns and it is almost 95% accurate in integers. For sensing the walls Ultrasonic range finding is used. Wheel can remeber its current position in let say, 3 feet staight, 2 feet right, etc.

A:

Perhaps the best way to get started on this kind of problem is to take relevant coursework(either online or in real life) or to read an introductory book on this topic. 
A good introductory book on motion planning and SLAM is Principles of Robotic Motion.
A good course on SLAM/Mobile Robots: Control of Mobile Robots

A:

My understanding of your problem is that you would like to discover and navigate a 2D maze of irregular obstacles with a non-holonomic robot using a single forward-looking ultrasonic range sensor and wheel odometry.  This is a hard problem.
"Best" solution
Although a "best" or "optimal" solution to this problem possibly could be implemented on an 8-bit microcontroller, it is made up of 3 problems -- each nontrivial and frequently left to full-fledged  computing systems:

Enhancing your ultrasonic sensor to be able to differentiate between walls and corners, because echoes from a maze-like environment can confuse your sensor.
Exploring and mapping the space, typically done with a SLAM algorithm.  (This will assume that you get near-perfect localization information from your odometry approach to navigation.)
Using your map, compute a solution using a maze-solving algorithm

Achievable Solutions
Since the "best" solution is a tall order for an 8-bit microcontroller, focus on a "dumb" solution that actually works: use whisker sensors and the right-hand rule.
Going further, you could add a compass/accelerometer for navigation, use infrared sensors to  detect obstacles, and use a regular 2D grid with large gird squares.  That would be similar to the Micromouse competition (for example, this one), which also uses microcontrollers for maze solving.

A:

You might want to have a look at my maze solving robot solution (http://www.benaxelrod.com/robots/maze/index.html).  I used a Lego RCX which is more powerful than an 8bit microcontroller, but is still pretty resource constrained.  I abstracted away most of the hardware problems to focus on the algorithm.  It uses a flood-fill or A* type algorithm.

