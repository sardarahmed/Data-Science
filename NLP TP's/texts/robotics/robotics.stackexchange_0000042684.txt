Q:

exploration stack issues

Hello, I'm Cem and fairly new to ROS. I've been trying to get turtlebot to do mapping on gazebo environment. I somehow managed to make things work however there are several major issues which makes the whole process painfully slow.
First one is inconsistencies between the maps generated by gmapping and explore, as demonstrated in these pictures: http://imgur.com/a/lESsv
(You should zoom in a little bit to see the path)
First picture is obtained from the map made by explore node. The plan looks valid, but as we take a glance to the second map, the plan is made to an occupied grid cell. Second one is in the same order as the first. This time the endpoint isn't at an occupied grid cell but very close to one. It looks like robot won't execute the plan as long as the plan is made through or to an occupied or unknown grid cell.
In my opinion this behaviour is due to difference between sources used by planner and by the node which executes the plan. The planner makes the plans by using the map (or costmap, I don't know) created by explore node, yet the navigating one verifies and executes them by using the map generated by gmapping.
Second one is, when the robot enters a very large area, planner fails to come up with a new plan(or takes very long time). Check this: http://i.imgur.com/a8N6v.png
How can I solve these problems?
Map generated by explore looks very distorted. How can I make it more appropriate?
Also; If you see something wrong here, please let me know. I've been working with ROS for just 3 weeks without supervision or reference, someone with experience is only thing I need now.

Originally posted by cemkyg on ROS Answers with karma: 21 on 2012-07-26
Post score: 2

A:

I have been playing around with this problem for a while and I think I managed to get a solution. You need to delete all observation sources for just the explore cost map. Make a new local_costmap_params.yaml file with no observation sources and include this with just the explore cost map.
I created the new files costmap_explore_params.yaml and explore_costmap.yaml which are different to the settings used for the navigation costmaps.
explore_costmap_params.yaml
map_type: voxel
origin_z: 0.0
z_resolution: 0.2
z_voxels: 10
unknown_threshold: 9
mark_threshold: 0
transform_tolerance: 0.3
obstacle_range: 2.5
max_obstacle_height: 2.0
raytrace_range: 3.0
footprint: [[-0.325, -0.325], [-0.325, 0.325], [0.325, 0.325], [0.46, 0.0], [0.325, -0.325]]
footprint_padding: 0.01
inflation_radius: 0.55
cost_scaling_factor: 10.0
lethal_cost_threshold: 100
In the explore_costmap.yaml file you need to set static_map to true (so it will subscribe to the map topic created by gmapping), track_unknown_space to true and set unknown_cost_value as 255.
explore_costmap.yaml
explore_costmap:
publish_voxel_map: true
global_frame: /map
robot_base_frame: base_link
update_frequency: 0.5
publish_frequency: 1.0
raytrace_range: 10.0
obstacle_range: 5.0
static_map: true
rolling_window: false
width: 100.0
height: 100.0
resolution: 0.1
origin_x: 0.0
origin_y: 0.0
track_unknown_space: true
unknown_cost_value: 255
transform_tolerance: 0.5
With these settings explore will only create a costmap from the map created with gmapping. Since now the map used for navigation and the cost map in explore used for setting goals are the same the navigation stack has much more success at reaching the goals set for it.

Originally posted by Roy89 with karma: 133 on 2012-08-01
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by Zayin on 2013-05-30:
I know this post is rather old, but could you please clarify what you've done? I find the above quite confusing.

