Q:

What should i do to rebuild robot salto from Berkeley uni as a mechanical engineering undergrad?

What are the main components of robot salto? What are the necessary skills and knowledges to reproduce it?
Also as you can see, i am a mecheng and i want to reproduce this robot as finishing project with some modifications. I think i need to know  raspberry pi, python, gyroscopic effects and being able to use these effects to balance bot in air and while jumping, good biomechanics to give bot a good initial jumping position. What do you think about my initial analysis? Am i in the right path or wrong path or should i just quit because it is too difficult to do?
Thank you community's great people
https://youtu.be/F25EwtCo2dU
https://robotics.sciencemag.org/content/1/1/eaag2048?utm_source=youtube&utm_medium=digital&utm_campaign=vid-wall-jump-bot-9608
https://www.sciencemag.org/news/2016/12/watch-tiny-robot-do-backflip?utm_source=general_public&utm_medium=youtube&utm_campaign=vid-wall-jump-bot-9606

A:

To be blunt. This is probably beyond your ability...and I appraise that solely on the fact you didn't seem to consider any of the maths, design, coding and control theory that go along with your project.
Building robots, like any engineering project, generally doesn't start with building the thing first then letting it sit there for ages because you can't program it or because the parts you choose randomly are too heavy, arn't fast enough, etc etc etc....because you didn't do any kind of research and modeling ahead of time.....
However..That should be a motivator and not a hinderance. 
The best way to find out if you can even do the project is to do a virtual version of it. IE Simulation. 
Break out your CAD software and design your robot according to what you think might work...you are after all a mecheng. student...use those inertias and masses as data for your simulations. 
Break out your matlab or mathematica or maples and do your research and find the equations of motion for the mechanical system you want to model...run simulations design your control model, simulate more, rinse and repeat. 
Matlab and mathematica now can produce C code for many different hardware platforms, so you can avoid even having to learn some programming yourself (for the heavy lifting bits atleast) 
If you can achieve a model that works in the simulated world, then you can start building one in the real world and find out your simulated one probably won't work! 
But you can try again and again...until it does work!
This is the best kind of project to work on, as it's complicated enough to force you to learn many disciplines, but still fun and cheaply made. 

