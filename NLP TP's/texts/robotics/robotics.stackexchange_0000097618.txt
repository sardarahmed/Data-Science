Q:

Proper usage of FlexBE' s "priority" container

Hello,
I have recently started working with the flexbe ROS package ([http://wiki.ros.org/flexbe]) and have been having some difficulty understanding the purpose of the container of type "priority". Initially, I assumed that it would be a container that one would place at the root of your behavior and whenever a transition to it was requested, it would preempt the currently running state and execute itself (for me this seems logical and practical). However, after trying to induce this through the "/flexbe/command/transition" topic, I have realized that it does not work as expected.
In my use case I would like to have a robot that can be performing multiple complex tasks (one at a time), however I would like to be able to switch at any time to the "user teleoperation" state (my priority container). It is good to mention that I would like to avoid killing one behavior and initializing another one.
Does anyone has any idea of how to implement these types of containers properly? I could not find any documentation on the topic.

Originally posted by joao.aguizo on ROS Answers with karma: 53 on 2020-11-17
Post score: 1

A:

Hi, you are right in that a priority container will prevent other states from executing as soon as it is entered. More precisely, it pauses execution. For an active state, it will be the same as if the user pressed "pause" at the moment when the priority container is entered and "resume" when it is left.
The catch is only that a regular state machine would execute one state after the other, there is no way for a priority container to become active at the same time as another state. To achieve this, place a priority container somewhere within a concurrency container. In a concurrency container, all direct children are active at the same time and if at any time the priority container in one of the sub-statemachines becomes active, it will pause all other states that are otherwise active at the same time.
In your use case, it might also be sufficient to simply pause execution, e.g., via "/flexbe/command/pause", or to adjust the level of autonomy depending on the type of intervention.

Originally posted by Philipp Schillinger with karma: 321 on 2020-11-18
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by joao.aguizo on 2020-11-18:
Thank you very much for the quick response, it gave me a better understanding of the functionality of priority containers, but it also raised other doubts, specially when you suggest this: "place a priority container somewhere within a concurrency container. (...)[if] at any time the priority container in one of the sub-statemachines becomes active, it will pause all other states that are otherwise active at the same time."; Wouldn't this be the same thing as having a concurrent state listening to a topic and exiting the concurrency if triggered?
Comment by Philipp Schillinger on 2020-11-19:
Not quite, but both alternatives have their use cases. Difference is exiting vs. pausing. When using the priority container as described above, you can resume execution of the active states after the priority container did its job. Main purpose for this is the definition of an interruption routine in parallel to other tasks, e.g., go charging as soon as required, but then resume afterwards. In other cases, you are completely right, it could be more suitable to fully exit on the respective event and continue with something different.
Comment by joao.aguizo on 2020-11-19:
Ok, I can see why some would want to use the priority container now. Once more thank you very much for the help.

