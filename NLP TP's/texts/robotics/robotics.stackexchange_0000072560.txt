Q:

Gazebo with multiple odometery frames

I have been trying to put together a multiple (n=2) Husky robot simulation for testing purposes.  I am struggling with getting the namespaces and tf_prefixes setup in a consistent way.  Following previous discussions here which builds on the single Husky tutorials, I have been able to get almost there.  At this point I believe the gist of my issue is how to tell Gazebo to use a tf_prefix for the "odom" frame.
My understanding is that robot_localization (ekf_localization) takes the imu and odom data generated from Gazebo to generate the odometry messages on the odometry/filtered topic.  For the imu I am able to edit the robot_description parameters in the xacro file to have a frameId for each robot.  For example...
<gazebo>
      <plugin name="imu_controller" filename="libhector_gazebo_ros_imu.so">
        <robotNamespace>/r1</robotNamespace>
        <frameId>r1_tf/base_link</frameId>
       ...
      </plugin>
  </gazebo>

This works as expected and the ekf_localization node is able to work with the imu observations.
What I don't know how to do is to prescribe the same frame prefix (e.g., r1_tf) for the odometry generated by Gazebo.  Is there a way to tell Gazebo what tf frame to use for the odometry messages?

Originally posted by BSBingham on ROS Answers with karma: 108 on 2016-03-06
Post score: 2

A:

Thank you nbeyers.  That was the hint I needed to get everything working.  it was not clear to me, and is still not completely clear, how the controller_manager loads these controllers into gazebo, but for now I have a working example.
I was able to avoid having multiple control.yaml files for each robot by setting the base_frame_id parameter directly, overwriting the value form the control.yaml file.
 <rosparam command="load" file="$(find husky_control)/config/control.yaml" />
 <rosparam param="husky_velocity_controller/base_frame_id" subst_value="True">$(arg tfpre)/base_link</rosparam>
  <node name="base_controller_spawner" pkg="controller_manager" type="spawner" args="husky_joint_publisher husky_velocity_controller --shutdown-timeout 3"/>

This lead to a somewhat satisfying result where I could spawn multiple Huskies succinctly by only changing one launch file.  Something like this...
<group ns="h1">
  <include file="$(find nre_simmultihusky)/launch/husky.launch">
    <arg name="namespace" value="h1" />
    <arg name="initX" value="2" />
    <arg name="initY" value="2" />
    <arg name="initYaw" value="0" />
   </include>
 </group>

<group ns="h2">
  <include file="$(find nre_simmultihusky)/launch/husky.launch">
    <arg name="namespace" value="h2" />
    <arg name="initX" value="-3" />
    <arg name="initY" value="-3" />
    <arg name="initYaw" value="3.14" />
  </include>
</group>

I wish I could find a way to cleanly only have to enter the namespace (e.g., 'h1') once instead of having to repeat it in group and arg tags.
I've posted my solution here https://github.com/bsb808/nre_simmultihusky
I have to say, I was pretty surprised by how much effort it took to change the namespace and tf_prefix in all the appropriate places to get this to run correctly.  I'm new to ROS, but I expected the use of the group tag with a namespace to percolate through components better.  I also didn't appreciate the headache that the propagating the tf_prefix appropriately would be - to a new person it seems redundant with the namespace.
Thanks again - glad to get it up and running.

Originally posted by BSBingham with karma: 108 on 2016-03-15
This answer was ACCEPTED on the original site
Post score: 3

