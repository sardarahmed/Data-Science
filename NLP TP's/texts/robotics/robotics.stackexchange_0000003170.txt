Q:

Path comparison

Problem: the cartesian position of an end effector (no orientation) of a robot arm is recorded, say, every millisecond (the time steps can not be changed), during a motion. The robot arm is commanded the same path but with different velocities. So I get different trajectories. I want to calculate the deviation of the paths, which is the distances of equivalent points of two paths. The problem is to find equivalent points. Since the two velocities are different the comparison at the same time steps of the trajectories makes no sense. I can assume that the paths underlying the trajectories to be compared are rather similar. The deviation for the ideal path being smaller than 1% of a typical length dimension of the path. I want to detect deviations of much lass than that. 
I have to map the timestamp of the recorded points to the path length, and make comparison of points at the same path length. But of course also the path lengths differ for different paths, so any deviation would distort the result for all later points. How can I compensate for this ? 
Is there a reliable algorithm ? Where can I find information ?
Note: time warp algorithms (even memory optimized ones) are out of the game because of memory consumption. 

A:

The problem you are describing sounds like you need to calculate Frechet distance.
If you take a point at each of your paths, connect them with a string and move them along the path (not necessarily with the same velocities), then Frechet distance of the paths is a minimum length of the string necessary.
Not a good description :-)
The formula from the wikipedia page is much better:
$$F(A,B) = \inf_{\alpha, \beta}\,\,\max_{t \in [0,1]} \,\, \Bigg \{d \Big ( A(\alpha(t)), \, B(\beta(t)) \Big ) \Bigg \}$$
where $\alpha$ and $\beta$ are mappings from time to the position on the curve.
The only problem is, that calculating the Frechet distance between two polylines takes $O(n^{2}m + m^{2}n)$ of memory (and even more time). There are some approximations you could use that only take the turning points of the polyline into account, but I don't know much about them.
And some resources:

More detailed description of the calculation:
http://www.cim.mcgill.ca/~stephane/cs507/Project.html
Implementation in matlab:
http://www.mathworks.com/matlabcentral/fileexchange/38714-frechet-distance-calculation/content/frechet_compute.m
My buggy implementation in python:
https://github.com/bluecube/robomower2/blob/master/src_python/util/frechet_distance.py

