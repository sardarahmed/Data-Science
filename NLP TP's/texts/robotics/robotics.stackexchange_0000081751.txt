Q:

Making packages with metapackage dependencies

I'm following the Gazebo ROS control tutorial and the following command is creating issues for me.

catkin_create_pkg MYROBOT_control ros_control ros_controllers

I understand that ros_control and ros_controllers are metapackages, but how can I make a the necessary control package that depends on the packages in the dependencies?
Thanks

Originally posted by Mav16 on ROS Answers with karma: 38 on 2017-07-11
Post score: 2

A:

UPDATE

I want to know how I can add the necessary dependencies if I can't use the metapackages as dependencies as listed in the tutorial.

Looking at the tutorial you referred to, IMO your question is valid. I've suggested a possible fix. You must pass explicit dependencies.

Not sure if I understand your question correctly but if you're asking if it's possible for your_package to depend on metapackages, yes, and your_package can include all direct dependency defined in a metapackage as well as transitive ones no normal catkin package cannot depend on metapackages (ref. REP-0127).
Only metapackages can depend on other metapackages.
E.g. ros-kinetic-desktop-full, which is a metapackage that includes standard packages, depends on another metapackage ros-kinetic-desktop, which depends on another metapackages.

Originally posted by 130s with karma: 10937 on 2017-07-11
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by Mav16 on 2017-07-11:
When I run catkin_make after running the command listed above, it fails with an error saying "metapackages cannot be used as dependencies"
Comment by 130s on 2017-07-11:
My bad. I've updated my answer. Btw as I mentioned I still don't know what you were asking.
Comment by Mav16 on 2017-07-11:
I want to know how I can add the necessary dependencies if I can't use the metapackages as dependencies as listed in the tutorial.
Comment by 130s on 2020-01-13:
@tjvt That sounds like a requirement for a Catkin package to be a Catkin metapackage, without having to do dependency. No?
Comment by gvdhoorn on 2020-01-13:
What @tjvt adds in his comment is indeed a required export for metapackages. Without that export, the package will not be a metapackage.
Comment by gvdhoorn on 2020-01-13:
I'm not entirely sure what you're writing here, but two comments:

don't depend on metapackages from regular packages. Depend on the actual dependencies instead (ie: don't depend on transitive dependencies, metapackages can (and will) change)
metapackages don't get built

