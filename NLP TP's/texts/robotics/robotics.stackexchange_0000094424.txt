Q:

How to change glibc linked to?

Hi, I always get this error:
/usr/bin/ld: CMakeFiles/mechanum_steering_node.dir/__/drive/interface/SocketCAN.cpp.o: undefined reference to symbol 'pthread_create@@GLIBC_2.2.5'

When I add Thread as REQUIRED_COMPONENTS  and target_link_libraries it works again for this specific package. How can I solve this globally?

Originally posted by bionade24 on ROS Answers with karma: 33 on 2020-01-18
Post score: 0

A:

This happened because all ROS packages link against the libc version roscpp was linked against. You have to recompile roscpp and cpp_common, afterwards try again. If you use the official binaries for Debian/Ubuntu by Open Robotics, this probably isn't the same issue, if you think so, please contact the maintainers.
As I use ROS on Archlinux simply had to recompile rostime, cpp-common and roscpp, now everything works again.
If the binaries on Arch are linking to wrong libc and I didn't already ran into it, please contact me.

Originally posted by bionade24 with karma: 33 on 2020-01-19
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by gvdhoorn on 2020-01-19:
What sort of platform/OS/cpu arch are you doing this for/on?
Comment by bionade24 on 2020-01-19:
I'm using Arch Linux, packages are built with makepkg.
Comment by gvdhoorn on 2020-01-20:
That is quite important information for (future) readers. It would have been nice if you'd included that in your OP and/or tags.
Comment by bionade24 on 2020-01-24:
I think that's something that can appear on every Linux Distribution. The libc change, and ROS packages use roscpp to link against the libc, so if roscpp links against the old version, ROS packages will try to link against the old version if you not specify needed libs manually in cmake.
Comment by gvdhoorn on 2020-01-24:
On Debian/Ubuntu it's not that common to build ROS from source. On-top of that, glibc changes are relatively rare on these platforms, and if there are changes, they are guaranteed to be bw-compatible wrt ABI. I'm not 100% certain, but I would be really surprised if I would run into the error message that you posted on those platforms.
Rebuilding a workspace is something that is done on every OS/platform, but what you experienced is something I expect users on non-Debian/Fedora (and derived) platforms to run into sooner.
Hence the request to mention it.
Comment by bionade24 on 2020-01-24:
But if you for example use, Gentoo, Fedora or an older version of debian/ubuntu or maybe debian unstable, you can run into this issue. Maybe I'll can put the explanation from the comments up to the answer and add that this won't be a solution if you have the latest official binaries.
Comment by gvdhoorn on 2020-01-24:\

Fedora or an older version of debian/ubuntu or maybe debian unstable, you can run into this issue

only if you deliberately try to install binary packages that are from another distribution I would say.
Could you give an example of how this could happen if you install the binary packages from the ROS buildfarm that target the same OS (ie: buildfarm provides pkgs for 18.04, user has 18.04)? ABI compatibility is guaranteed for Debian/Ubuntu. They can change glibc, but only in an ABI bw-compatible manner.
Even if roscpp hasn't been rebuilt with a newer glibc version in that case, it should still work, as breaking ABI during the lifetime of a Debian distribution is not allowed afaik.
Comment by bionade24 on 2020-01-24:
Sorry, I didn't explained my thoughts well. I ment if you for example compile ROS melodic on 16.04 you could probably run into this issue, too. And debian unstable or fedora users using a self-compiled version, too.
Comment by gvdhoorn on 2020-01-24:\

I ment if you for example compile ROS melodic on 16.04 you could probably run into this issue, too

Aren't the errors you reported linker errors? If a user builds everything from source, without reusing any binary artefacts from a different OS/platform/distribution, it would seem impossible to run into linker errors where a binary artefact is linked to a different version of a supporting library than what is now present on the system.
Unless that supporting library has been removed and replaced with an identically named one which is not ABI compatible.
But nm: the important thing is that you added the clarification to your question and answer.
Thanks for that.
Comment by bionade24 on 2020-01-24:
Yes, they are. And if he did everything the right way, this couldn't happen. But if you're hardcore into legacy stuff you'll maybe do even weirder things, like building some parts with cmake.
Comment by gvdhoorn on 2020-01-25:
Last comment:

But if you're hardcore into legacy stuff you'll maybe do even weirder things, like building some parts with cmake.

building packages on your own machine is not a problem. The problem surfaces when you build your workspace (could include the entirety of ROS), you link against one version of (in your case) libc, that libc gets replaced by an incompatible version and you don't rebuild your packages.
On a Linux distro (or Windows, or Mac) with no ABI bw-compatibility guarantee, this can lead to problems. But only in case of non-ABI-bw-compatibility upgrades of dependencies.
In a regular scenario where someone builds a workspace, they will most likely not run into this, unless they replace a dependency with an ABI incompatible version.

