Q:

Does the transformPose() function in python not transform the Z axis?

        eca1_point=PoseStamped()
        eca1_point.header.frame_id = "eca_a9/base_footprint"
        eca1_point.header.stamp =rospy.Time(0)
        eca1_point.pose.position.x=0
        eca1_point.pose.position.y=0
        eca1_point.pose.position.z=0
        eca1_worldpoint = self.listener1.transformPose("world",eca1_point)

Does the transformPose() function in python not transform the Z axis? I added the above code to the python program in ROS. My purpose is to find the coordinates of points in other coordinate frame. For example, the robot coordinate is [-900, 0, -5], and the world coordinate obtained by the above code is [-900, 0, 0]. The z-axis coordinate is obviously wrong, and the normal calculated coordinate should be [-900, 0, -5].
I saw the question, and mimicking his code, does anyone know why the transformPose() function in python doesn't transform the Z axis correctly? I use kinetic and ubuntu16.04.

Originally posted by wuhan on ROS Answers with karma: 16 on 2019-10-20
Post score: 0

A:

I know, I should use the "eca_a9/base_link" frame_id instead of "eca_a9/base_footprint".
I'm not very familiar with the mean of frames, and I don't know why "base_footprint" only has x and y, and "base_link" has x,y,z.
Now, I can work normally after useing the "eca_a9/base_link" frame_id.

Originally posted by wuhan with karma: 16 on 2019-10-20
This answer was ACCEPTED on the original site
Post score: 0

