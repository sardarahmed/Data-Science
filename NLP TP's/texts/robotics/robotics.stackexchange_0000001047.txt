Q:

Source to learn Kalman Fusion, explanatory code snippets

Currently I am reading a book of Mr. Thrun: Probabilistic Robotics. I find it really helpfull to understand concept of filters, however I would like to see some code in eg. Matlab. Is the book "Kalman Filter for Beginners: with MATLAB Examples" worth buying, or would you suggest some other source to learn the code snippets from?

A:

I have read the book, and found it unnecessarily obtuse. Unfortunately, the code snippets will not be very helpful, since they will probably look exactly like the equations, while using a matrix library like Eigen, OpenCV, boost, or just Matlab.  To get a good understanding of a Kalman Filter, you should start with a review of multi-variate Gaussian random variables, then brush up on Taylor Series expansions, then realize we are just inventing a covariance matrix for the joint distribution of measurements and state.
For example, here's some code I wrote for a robotic rover which uses an EKF. 

void DifferentialKinematics::ekfMeasurement(Eigen::MatrixXd&X,Eigen::MatrixXd&Q,Eigen::MatrixXd&Z,Eigen::MatrixXd&R){
  Eigen::MatrixXd I=Eigen::MatrixXd::Identity(3,3);
  Eigen::MatrixXd ZP = Eigen::MatrixXd(Z);
  Eigen::MatrixXd XP = Eigen::MatrixXd(X);
  Eigen::MatrixXd z = Z-X;
  Eigen::MatrixXd S =Q+R;

  Eigen::MatrixXd K=Q*S.inverse();

  X = X + K*(z);
  Q = (I-K)*Q;
}
/**
 * Update given wheel speeds left, right.
 * Both are in/out
 */
void DifferentialKinematics::ekfPredict(float left, float right, Eigen::MatrixXd&pose, Eigen::MatrixXd&cv){
  float hth=pose(2)+getTheta(left,right)/2;
  float dd = std::fabs(getVel(left,right));
  updatePose(left,right,pose);

  //Form Jacobian
  Eigen::MatrixXd V=Eigen::MatrixXd::Zero(3,2);
  V(0,0)=(cos(hth)+(dd/width)*sin(hth))/2;
  V(0,1)=(cos(hth)-(dd/width)*sin(hth))/2;
  V(1,0)=(sin(hth)-(dd/width)*cos(hth))/2;
  V(1,1)=(sin(hth)+(dd/width)*cos(hth))/2;
  V(2,0)=(-1/width);
  V(2,1)=(1/width);

  Eigen::MatrixXd G;
  G=Eigen::MatrixXd::Identity(3,3);
  G(0,2)=-dd*sin(hth);
  G(1,2)=cos(hth)*dd;

  Eigen::MatrixXd M=Eigen::MatrixXd::Zero(2,2);
  M(0,0)=left < 0? -1*left*kl:left*kl;
  M(1,1)=right < 0? -1*right*kr:right*kr;

  Eigen::MatrixXd R=V*M*V.transpose();
  Eigen::MatrixXd r2 = G*cv*G.transpose()+R;
  cv = r2; 
  return;
}

A:

The two links that I found most useful were Kalman Filter for Undergrads1
and Kalman Filter for Dummies. They're not high on the theory though. and Student Dave's Kalman Filter Tutorial. The last one has matlab code that you can play with and is easy to follow. 

A:

If you are looking for a source to get an intuitive feeling for what the Kalman Filter is actually doing I would suggest going through lesson 2 of Udacity's Artificial Intelligence for Robotics course found here:
https://www.udacity.com/course/cs373.
The course is free and it has video lectures and simple code examples. The explanation given is a little simplistic but it does help to build an intuition for how and why the filter works.

