Q:

Husky Gazebo robot_state_publisher not broadcasting transforms

I'm trying to record a bag from the Husky Gazebo simulation for Cartographer SLAM on Kinetic and Ubuntu 18.04 VM. The problem I'm facing is that some of the TF transforms are not being included in the bag file. Here's the steps I took:
Launch the simulator: roslaunch husky_gazebo husky_playpen.launch This correctly launches the simulator. I can control it with key_teleop and tf/view_frames gives this result:

Here's a close up of the problem area: 
When I record a bag with rosbag record -O Husky /tf /odometry/filtered /scan I can successfully record the messages and drive the robot around to get simulated data for SLAM, but when playing it back, tf/view_frames looks like this: 
The TF tree is missing large parts, including the base_laser link, which is the one I need. I think the error is that robot_state_publisher is not sending out TF transforms. Even though the average rate is 10,000 hz, the last message was registered as 1300 seconds before, even though the simulator hasn't been up that long. How do I resolve this so that those transforms are included in the bag? It doesn't appear to be dying in the console, here's the output when I start the sim:
    process[gazebo-1]: started with pid [9282]
process[gazebo_gui-2]: started with pid [9287]
process[base_controller_spawner-3]: started with pid [9292]
process[ekf_localization-4]: started with pid [9293]
process[twist_marker_server-5]: started with pid [9299]
process[robot_state_publisher-6]: started with pid [9309]
process[twist_mux-7]: started with pid [9319]
process[spawn_husky_model-8]: started with pid [9327]
[ INFO] [1587427802.385761428]: [twist_marker_server] Initialized.
[ INFO] [1587427802.503502938]: Finished loading Gazebo ROS API Plugin.
[ INFO] [1587427802.504856515]: waitForService: Service [/gazebo/set_physics_properties] has not been advertised, waiting...
[ INFO] [1587427802.539750475]: Finished loading Gazebo ROS API Plugin.
[ INFO] [1587427802.541527633]: waitForService: Service [/gazebo/set_physics_properties] has not been advertised, waiting...
[ INFO] [1587427803.728679997, 1298.500000000]: waitForService: Service [/gazebo/set_physics_properties] is now available.
[ INFO] [1587427803.811557590, 1298.570000000]: waitForService: Service [/gazebo/set_physics_properties] is now available.
Warning [parser_urdf.cc:1232] multiple inconsistent <gravity> exists due to fixed joint reduction overwriting previous value [true] with [false].
[ INFO] [1587427804.993717048, 1298.670000000]: Laser Plugin: Using the 'robotNamespace' param: '/'
[ INFO] [1587427804.993776607, 1298.670000000]: Starting Laser Plugin (ns = /)
[ INFO] [1587427804.995091901, 1298.670000000]: Laser Plugin (ns = /)  <tf_prefix_>, set to ""
[ INFO] [1587427805.019063308, 1298.670000000]: Physics dynamic reconfigure ready.
[ INFO] [1587427805.020134181, 1298.670000000]: Physics dynamic reconfigure ready.
[ INFO] [1587427805.107275723, 1298.670000000]: Loading gazebo_ros_control plugin
[ INFO] [1587427805.107442330, 1298.670000000]: Starting gazebo_ros_control plugin in namespace: /
[ INFO] [1587427805.108631669, 1298.670000000]: gazebo_ros_control plugin is waiting for model URDF in parameter [robot_description] on the ROS param server.
[ERROR] [1587427805.223508597, 1298.670000000]: No p gain specified for pid.  Namespace: /gazebo_ros_control/pid_gains/front_left_wheel
[ERROR] [1587427805.225517904, 1298.670000000]: No p gain specified for pid.  Namespace: /gazebo_ros_control/pid_gains/front_right_wheel
[ERROR] [1587427805.227545101, 1298.670000000]: No p gain specified for pid.  Namespace: /gazebo_ros_control/pid_gains/rear_left_wheel
[ERROR] [1587427805.229322958, 1298.670000000]: No p gain specified for pid.  Namespace: /gazebo_ros_control/pid_gains/rear_right_wheel
[ INFO] [1587427805.238421732, 1298.670000000]: Loaded gazebo_ros_control.
[ INFO] [1587427805.249202159, 1298.670000000]: imu plugin missing <xyzOffset>, defaults to 0s
[ INFO] [1587427805.249259276, 1298.670000000]: imu plugin missing <rpyOffset>, defaults to 0s
[spawn_husky_model-8] process has finished cleanly
log file: /home/lukas/.ros/log/996724d4-835f-11ea-9583-080027f022bf/spawn_husky_model-8*.log
[ INFO] [1587427805.364758915, 1298.670000000]: Controller state will be published at 50Hz.
[ INFO] [1587427805.367549023, 1298.670000000]: Wheel separation will be multiplied by 1.875.
[ INFO] [1587427805.371474201, 1298.670000000]: Left wheel radius will be multiplied by 1.
[ INFO] [1587427805.371532957, 1298.670000000]: Right wheel radius will be multiplied by 1.
[ INFO] [1587427805.373741808, 1298.670000000]: Velocity rolling window size of 2.
[ INFO] [1587427805.375842837, 1298.670000000]: Velocity commands will be considered old if they are older than 0.25s.
[ INFO] [1587427805.378102611, 1298.670000000]: Allow mutiple cmd_vel publishers is enabled
[ INFO] [1587427805.381454709, 1298.670000000]: Base frame_id set to base_link
[ INFO] [1587427805.382841013, 1298.670000000]: Odometry frame_id set to odom
[ INFO] [1587427805.386038126, 1298.670000000]: Publishing to tf is disabled
[ INFO] [1587427805.432485857, 1298.680000000]: left wheel to origin: 0.256,0.2854, 0.03282
[ INFO] [1587427805.432614286, 1298.680000000]: right wheel to origin: 0.256,-0.2854, 0.03282
[ INFO] [1587427805.432725457, 1298.680000000]: Odometry params : wheel separation 1.07025, left wheel radius 0.1651, right wheel radius 0.1651
[ INFO] [1587427805.436677591, 1298.680000000]: Adding left wheel with joint name: front_left_wheel and right wheel with joint name: front_right_wheel
[ INFO] [1587427805.436772843, 1298.680000000]: Adding left wheel with joint name: rear_left_wheel and right wheel with joint name: rear_right_wheel
[ WARN] [1587427805.455359615, 1298.700000000]: updateConfig() called on a dynamic_reconfigure::Server that provides its own mutex. This can lead to deadlocks if updateConfig() is called during an update. Providing a mutex to the constructor is highly recommended in this case. Please forward this message to the node author.
[ INFO] [1587427805.464421364, 1298.710000000]: Dynamic Reconfigure:
DynamicParams:
    Odometry parameters:
        left wheel radius: 1
        right wheel radius: 1
        wheel separation: 1.875
    Publication parameters:
        Publish executed velocity command: 0
        Publication rate: 50
        Publish frame odom on tf: 0

Originally posted by luketheduke on ROS Answers with karma: 285 on 2020-04-20
Post score: 0

A:

When I record a bag with rosbag record -O Husky /tf /odometry/filtered /scan [..]

what about /tf_static?

Even though the average rate is 10,000 hz

those are most likely static frames, which don't get broadcast periodically. They're given a 'fake' rate of 10kHz.

Originally posted by gvdhoorn with karma: 86574 on 2020-04-21
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by luketheduke on 2020-04-21:
I didn't know those existed. I relaunched the sim and echoed the /tf_static topic and all the missing transforms are there, so that was the problem, thanks for the help!
Comment by luketheduke on 2020-04-21:
As gvdhoorn pointed out, I wasn't recording /tf_static and that meant that I wasn't recording any static TF transforms, which were the ones that were missing. So the fix was just to rerecord with
rosbag record -O Husky /tf /tf_static /odometry/filtered /scan
Comment by gvdhoorn on 2020-04-21:
I've converted my comment to an answer. Wanted to make sure it was the problem before posting an answer.

