Q:

ROS Answers SE migration: ros_databases

Hi guys
I am planning to do something like trajectory manager for my robotic application. I created pretty solid rqt plugin and also joint trajectory client, gripper client and everything that was needed for controlling my stuff but I have now huge problem with data storage. Is there any great database which is able to store messages  in rows and structures. For example I want learn my robot new trajectories but I also want to record points and move arm step by step, add new trajectories and so on. I want to create something which can store trajectories and points like for example abb flexpendant if you have any experience with it. Is there any great database for this. I was reading about mongo database or rosbag. But I cannot find any usefull API documentation. I know how to store or record some messages but that is not enough. Can you please give me some hints or tips. Maybe I just did not explore everything which can these databases do. I have to say that I dont have a lot of experience with databases yet
Thank you for your time and help.

Originally posted by Chickenman on ROS Answers with karma: 110 on 2016-07-29
Post score: 0

A:

Not sure if this does what you want it to but our project uses mongodb and created a ros wrapper for it: https://github.com/strands-project/mongodb_store It also offers a message_store which allows you to store and retrieve any kind of standard or custom ROS message. So what ever data you want to save, just create your own message for it and put it in the message store:
from mongodb_store.message_store import MessageStoreProxy
from geometry_msgs import PoseStamped

msg_store = MessageStoreProxy(collection="my_collection")
insert = PoseStamped()
meta = {...} # Fill in some meta data
msg_store.insert(insert, meta)

I believe it is part of the standard ROS packages now.
I know you said that you had a look at mongodb already but I think it is worth giving it a try. Since it is just a standard mongodb at its core, you can also just use pymongo to access it directly. Basically, what ever you can express in a json string can be saved and retrieved.

Originally posted by Chrissi with karma: 1642 on 2016-07-30
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by Chickenman on 2016-07-31:
thank you for your fast response. I read something about this package but is there a way to store messages in some kind of structure or order. Is it just something which is able to insert ros data to database and than I am able to work with all other functions of mongoDB ?
Comment by Chrissi on 2016-07-31:
DB entries are always ordered by their insertion date by default. However, you can make up any kind of id you like and index your DB using that. Basically, the message_store allows to store any kind of ROS message and accessing it directly via pymongo allows to store arbitrary dictionaries.
Comment by Chickenman on 2016-07-31:
Ok thank you for informations. I will try something and give some feedback. I will see what I can do. Thank you for your time and advices
Comment by Chrissi on 2016-07-31:
No problem at all. Just let me know if you run into problems.
Comment by Chickenman on 2016-08-01:
Can I ask one more question. I save data to database with specific names is there a way to print these names? after login to database ? I am using C++ client
Comment by Chrissi on 2016-08-01:
I'm sure there is but I do not fully understand what you would like to print. When inserting the data, you should have all the information you need, so you should just be able to print it. Otherwise try querying for the info you need.
Comment by Chickenman on 2016-08-01:
Ok and is there a way to storage data under a specific id
I mean this
string id(messageStore.insertNamed(name, p));
will return me specific id of stored message. Is there a way to named ID by myself.
Is there any api_documentation for package ? I cannot exactly know what functions do
Thank you
Comment by Chrissi on 2016-08-01:
Just create a field in your data you want to index it by. I for example have a field UUID which has a UUID as a string in it. With http://api.mongodb.com/python/1.9/api/pymongo/collection.html#pymongo.collection.Collection.ensure_index you can then create an index over this entry.
Comment by Chrissi on 2016-08-01:
This index allows for super fast retrieval of data. If your index is not unique it will return all the elements. I am sure there is a C++ interface for that as well. So, you can use any field in your data as an index.
Comment by Chrissi on 2016-08-01:
Have a look at robomongo which is a GUI for mongodb and allows you to easily test all these things.
Comment by Chickenman on 2016-08-08:
thank you for your help. Everything works fine with db and I can store everything i need. I have just one problem when I am using move group interface with your pacakage I get following error Attempt to add global initializer failed, status: DuplicateKey throwSockExcep .

