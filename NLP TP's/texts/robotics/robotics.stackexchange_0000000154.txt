Q:

Fixed point arithmetic on microcontrollers

Often we use microcontrollers to do things in our robots, but need to make some calculations in decimal. Using floating point variables is very slow, because a software floating point library is automatically included (unless you have a high-end microcontroller). Therefore, we generally use fixed point arithmetic.
Whenever I do this, I just use an integer, and remember where the decimal place is. However, it does take some care to ensure that everything is consistent, especially when calculations involve variables where the decimal point is in a different place.
I have implemented a fixed point atan2 function, but because I was trying to squeeze every last drop of limited precision (16 bits), I would often change the definition of where the decimal point is, and it would change as I tweaked it. In addition, I would have some constants, as a quasi look-up table, which themselves have an implied decimal point somewhere.
I want to know if there is a better way. Is there a library, or set of macros, that can simplify the use of fixed point variables, making multiplication and division between mixed variables easier, and allowing declaration of decimal numbers or constant expressions, but automatically converting to the desired fixed point representation at compile time?

A:

It would be nice if we could tell the compiler the range and precision of each fixed-point input variable (perhaps no two having the radix point in the same location), and it would automagically -- at compile time -- use the correct range and precision and rescaling operations for the intermediate values and final values in a series of calculations.
I've heard rumors that it may be possible to do that in the Ada programming language or in C++ templates.
Alas, the closest I've seen is fixed-point arithmetic libraries that require you, the programmer, to manually choose the correct representation and manually verify that each operation maintains adequate range and precision.
Sometimes they make multiplication and division between mixed variables easier.
Such as:

AVRfix: a library for fixed point calculation in s15.16, s7.24 and s7.8 format, entirely written in ANSI C
Embedded Systems: fixed point FFT lists some libraries for fixed-point FFT calculation
AN617: fixed point routines for the Microchip PICmicro
"fixed point" projects on SourceForge.
gcc has built-in fixed-point libraries a b
TI IQMath Library ( and source -- Thank you, embedded.kyle ).

