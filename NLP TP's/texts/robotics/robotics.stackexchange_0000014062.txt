Q:

Are robot's codes usually compiled or interpreted?

I would bet that usually these are compiled for better performance, and of lawful reasons (make it harder for any user to save code without decompiling), though I'm not sure.
In any case, I believe performance is the major consideration (I'm very new to programming and cannot tell how data processing of robots is different, say, than that of high-end PC games or heavy PC software and if performance considerations will be usually similar or how different).
Are robot's codes usually installed when compiled from source code in an external computer or as pure source codes interpreted by some engine installed on the robots operating system?
(please example on JavaScript and Raspberry pi if possible at the moment).

A:

Robots tend to be portable devices powered by batteries.  Portable battery operated devices tend to use embedded processors with limited power and memory. Compiled code has several advantages over interpreted code in such applications:

Compiled code usually takes up less space.  So you can have more code
in the same amount of space.
Compiled code usually execute faster.  So batteries last longer.
An interpreter does not need to be installed into the robot's limited
memory.  This frees up more space for code or data storage.
As compiled code usually requires less resources on the mobile
platform, the mobile platform can be made with less expensive
parts.

That said, it is not necessarily true that compiling code obfuscates it.  If enough effort is invested, nearly any compiled code can be understood.  It then becomes a matter of which is more efficient.  Replicating the features or backward engineering the compiled code.
Why most people tend to use interpretive languages such a Python on a Raspberry Pi is confusing.  (The Raspberry Pi is fast becoming a complete computer.)  This is likely because interpretive languages tend to be less confusing to use.  Where compiling code adds steps to the development process, interpretive code is simply run after specifying the interpreter.

