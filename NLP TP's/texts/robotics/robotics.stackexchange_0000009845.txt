Q:

Path planning vs. linear interpolation?

I at moment trying to convince myself that what I need is a simple path planning algorithm, instead of linearly interpolating between a current and a desired state. 
I am at moment working with an robot arm (UR) with an camera mounted on to its TCP.  The application i am trying to create is a simple ball tracking application which tracks the movement of the ball, while always keeping the object within sight. 
which meant that I needed some form of path planning algorithm which plans the path between my current state and the desired state. The path should should be such that the ball is always kept in focus while the arm moves to the desired state.
But then I began question myself whether it was a bit overkill, and whether a simple straight line interpolation wouldn't suffice?.. I am actual not sure what form of benefit i would have by choosing a pathplanner, than a simple interpolation..
Interpolation would also generate the path I desire, so why choose a pathPlanner at all?
would someone elaborate?
It should be noted that obstacle avoidance is also a part of the task, which could cause trouble for a straight line interpolating. 

A:

Path planning is essentially obstacle avoidance.
If there are no obstacles, chances are path planning is Overkill. However, one obstacle that you always have and that is a constraint for the configuration space is the robot itself. 
Now if you have no obstacles and start and end configurations can be connected by a straight line in configuration space, the task of path planning indeed simplifies to knowing the line that connect them.
Especially if the camera captures images frequently, movement will be small.

a simple path planning algorithm

There's no such thing. You need to define configuration space which gets very complicated with higher dimensions, perform all kinds of geometric operations on it and finally have some algorithm navigate through it.
I'd say it's not just over-kill, it's over-annihilation.

