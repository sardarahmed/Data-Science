Q:

where in the rqt source code is the tab handling?

Hi
I would like to know where I can find the rqt perspective tab handling, e.g. where in the source code are they created?
I guess it's somewhere in the qt_gui_core (https://github.com/ros-visualization/qt_gui_core), but I couldn't find anything.
edit: I mean the tabs in the picture below (open rqt and add some plugins over each other):

Explanation of my goal:
I want to add several rqt plugins (mostly my own plugins), add them to a single rqt perspective and create tabs like in the picture above. Then I want do switch between this tabs from a ros node, depending on which tab is most relevant.

Originally posted by sam_123 on ROS Answers with karma: 70 on 2015-07-17
Post score: 1

Original comments
Comment by cyborg-x1 on 2015-07-17:
What do you mean by tab handling? The plugins? Or Tabs? Like in Browser?
The ones like in browser are done by Qt it is not in the source of rqt.
Comment by sam_123 on 2015-07-17:
yes I meant tabs like in the browser. Ok, than I guess it's impossible to switch between these tabs from a ros node.
Comment by cyborg-x1 on 2015-07-18:
Well then, have fun ;-)

A:

As @cyborg-x1 mentioned, the tabbing functionality is part of Qt.
For the following, first, a disclaimer: the UIs I've implemented have used librviz, not rqt, so I've never had to worry about inter-widget communication (I created and set up the QMainWindow myself). Also, all my Qt work has been strictly in C++; any pyQt is possibly different. And, rqt may incorporate/hide/expose functionality that makes everything below irrelevant...I just don't know. With that said...perhaps it'll be of assistance.
The Qt QMainWindow provides the ability to tabify QDockWidgets. When a QDockWidget's docking location changes, it emits a dockLocationChanged signal; with an appropriate Qt 'connection' to a slot, one can program reactions to widget relocations.
Through various (rather convoluted) means, you can programmtically manipulate QDockWidgets through the QMainWindow. Not the easiest item to access, but I've successfully retrieved it in an RViz Display subclass via the following:
QMainWindow* main = static_cast(context_->getWindowManager()->getParentWindow());
where context_ is an (inherited from Display) instance of rviz::DisplayContext (as implemented by the rviz::VisualizationManager).
I don't recommend going down this path, but if you do, that should give you a bit of a start on what will be involved.

Originally posted by kramer with karma: 1470 on 2015-07-17
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by sam_123 on 2015-07-17:
I extended my post to explain a bit better what I want
Comment by sam_123 on 2015-07-17:
so if I understand you right, the best approach would be to create my own QMainWindow and add there my rqt plugins in a QDockWidget, right? Do you know how I can do that (all my rqt plugins are in C++)?
Comment by kramer on 2015-07-17:
Here's my understanding of what you want: to be able to programatically choose which tab is showing (based on relevance, as defined by you). What you need, then, is some way to reference and select a particular tab widget. This is not a trivial task. (More in next comment...)
Comment by kramer on 2015-07-17:
I do not know if rqt provides the functionality you desire. I do know that I've done similar things in my own Qt UI. I do know that you can obtain a reference to QMainWindow in an RViz Display (and then manipulate the DockWidgets). I can't determine the 'best' approach here...but it won't be easy.
Comment by kramer on 2015-07-17:
In case this isn't clear: an rqt plugin is, at root, a Qt QDockWidget. The issue is that rqt provides a container for plugins -- the widgets do not 'know' about each other, and the container may not provide a way to access them. If that's correct, any workaround requires (not easy) hacking.
Comment by kramer on 2015-07-17:
Now that I think more about it -- you might be able to avoid your issue by consolidating into one plugin, using a QTabWidget in there. Each of your current plugins would become a tab in your single new rqt plugin, to be manipulated as you like...

