Q:

PointCloud2 access data

I have a PointCloud2 topic and I need to access the x, y and z of the points.
I have found: pcl::PointCloudpcl::PointXYZRGB::ConstPtr
The problem is that I don't know how to use it.
Do you know where can I find some example code describing how to get coordinates in PCL2?
[EDIT]
Now, I am using this code but it is not working properly
void pcl2_to_scan::callback(const sensor_msgs::PointCloud2ConstPtr &pPCL2)
{
        for (uint j=0; j < pPCL2->height * pPCL2->width; j++){
            float x = pPCL2->data[j * pPCL2->point_step + pPCL2->fields[0].offset];
            float y = pPCL2->data[j * pPCL2->point_step + pPCL2->fields[1].offset];
            float z = pPCL2->data[j * pPCL2->point_step + pPCL2->fields[2].offset];
            // Some other operations
       }
}

Thank you.

Originally posted by arenillas on ROS Answers with karma: 223 on 2014-08-26
Post score: 1

A:

A good place to start is the API documentation.
For example, the pcl::Poincloud doc shows you that you can get any point by indexing into the cloud with the [] operator, like an array.
The PointXYZRGB description isn't as clear, but it does tell you it's a struct (meaning all members are public), and you'll find you can access the values via point.x, .y, .z, etc.

Originally posted by paulbovbel with karma: 4518 on 2014-08-27
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by paulbovbel on 2014-08-27:
of course first you have to dereference (*cloud) the ConstPtr, which is a pointer type
Comment by arenillas on 2014-08-27:
I do not understand what does this mean
Comment by paulbovbel on 2014-08-27:
Anything specific?
Comment by arenillas on 2014-08-27:
this is what I do not understand:
to dereference (*cloud) the ConstPtr
If you want see my code I have edited the question
Comment by paulbovbel on 2014-08-27:
There are two ways to receive pointcloud data in a callback: either as a sensor_msgs or a pcl type. For working with the data, the pcl type provides a better interface since the sensor_msgs type just contains a blob of data.
Comment by paulbovbel on 2014-08-27:
When you subscribe to a message, you get a ConstPtr which means it's a boost shared_pointer to a const piece of data. That is not important, since you can just treat it as a regular pointer, and remember not to try to modify the data.
Comment by paulbovbel on 2014-08-27:
For general C++ help, I would point you to stackoverflow (no pun intended)
Comment by paulbovbel on 2014-08-27:
And here is somewhere you can see how individual points get accessed from a pcl::Pointcloud callback
Comment by kodplayer on 2020-12-25:
The above mentioned website adress docs.pointclouds.org is removed

