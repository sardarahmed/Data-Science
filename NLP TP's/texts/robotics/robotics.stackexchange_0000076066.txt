Q:

stack smashing detected

I use the joystick Joy package to generate joy messages and process them with a node I wrote.
My node dies consistently after processing one message and I can't make any sense of what is going on.
Judging by the debug messages I inserted in the code, it looks like the callback is entered once, runs properly and then crashes at some point between its end and its next call.
Any help is greatly appreciated.
Here is the code:
#include <ros/ros.h>
#include <sensor_msgs/Joy.h>
#include <cstdlib>
#include <ros/console.h>

#include <last_letter_msgs/SimPWM.h>

class JoyConverter{
public:
    ros::Subscriber sub;
    ros::Publisher pub;

    int axisIndex[11];
    int buttonIndex[11];
    double throwIndex[11];
    int mixerid;

    JoyConverter(ros::NodeHandle n);
    ~JoyConverter();
    void joy2chan(sensor_msgs::Joy joyMsg);
    last_letter_msgs::SimPWM mixer(double * input, int mixerid);
};

JoyConverter::JoyConverter(ros::NodeHandle n)
{

    sub = n.subscribe("joy",1,&JoyConverter::joy2chan,this);
    pub = n.advertise<last_letter_msgs::SimPWM>("rawPWM",1);    // Read the controller configuration parameters from the HID.yaml file

    XmlRpc::XmlRpcValue listInt, listDouble;
    int i;
    if(!ros::param::getCached("/HID/throws", listDouble)) {ROS_FATAL("Invalid parameters for -/HID/throws- in param server!"); ros::shutdown();}
    for (i = 0; i < listDouble.size(); ++i) {
        ROS_ASSERT(listDouble[i].getType() == XmlRpc::XmlRpcValue::TypeDouble);
        throwIndex[i]=listDouble[i];
    }
    ROS_INFO("Reading input axes");
    if(!ros::param::getCached("/HID/axes", listInt)) {ROS_FATAL("Invalid parameters for -/HID/axes- in param server!"); ros::shutdown();}
    for (i = 0; i < listInt.size(); ++i) {
        ROS_ASSERT(listInt[i].getType() == XmlRpc::XmlRpcValue::TypeInt);
        axisIndex[i]=listInt[i];
    }
    ROS_INFO("Reading input buttons configuration");
    if(!ros::param::getCached("/HID/buttons", listInt)) {ROS_FATAL("Invalid parameters for -/HID/buttons- in param server!"); ros::shutdown();}
    for (i = 0; i < listInt.size(); ++i) {
        ROS_ASSERT(listInt[i].getType() == XmlRpc::XmlRpcValue::TypeInt);
        buttonIndex[i]=listInt[i];
    }
    // Read the mixer type
    if(!ros::param::getCached("/HID/mixerid", mixerid)) {ROS_INFO("No mixing function selected"); mixerid=0;}
}

JoyConverter::~JoyConverter()
{
}

void JoyConverter::joy2chan(sensor_msgs::Joy joyMsg)
{
    ROS_DEBUG("joy2chan: Processing new joy msg");
    last_letter_msgs::SimPWM channels;
    double input[11];
    int i;
    for (i = 0; i <= 11; i++) {
        if (axisIndex[i] != -1) { // if an axis is assigned in this channel
            input[i] = 1.0/throwIndex[i]*joyMsg.axes[axisIndex[i]];
        }
        else if (buttonIndex[i] != -1) {
            input[i] = 1.0/throwIndex[i]*joyMsg.buttons[buttonIndex[i]];
        }
        else {
            input[i] = 0.0;
        }
    }

    ROS_DEBUG("joy2chan: Calling mixing function");
    channels = mixer(input, mixerid);
    for (i=0;i<11;i++) // Cap channel limits
    {
        if (channels.value[i]<1000) channels.value[i]=1000;
        if (channels.value[i]>2100) channels.value[i]=2100;
    }

    channels.header.stamp = ros::Time::now();
    ROS_DEBUG("joy2chan: Publishing channels");
    pub.publish(channels);
    ROS_DEBUG("joy2chan: Callback ended");
}

// Mixer function
last_letter_msgs::SimPWM JoyConverter::mixer(double * input, int mixerid)
{
    last_letter_msgs::SimPWM channels;
    int i;
    switch (mixerid)
    {
    case 0: // No mixing applied
        for (i=0;i<11;i++)
        {
            channels.value[i] = (unsigned int)(input[i]*500 + 1500);
        }
        return channels;
    case 1: // Airplane mixing
        channels.value[0] = (unsigned int)(input[0]*500+ 1500); // Aileron channel
        channels.value[1] = (unsigned int)(input[1]*500+ 1500); // Elevator channel
        channels.value[2] = (unsigned int)((input[2]+1)*500+ 1000); // Throttle channel
        channels.value[3] = (unsigned int)(input[3]*500+ 1500); // Rudder channel
        channels.value[4] = (unsigned int)(input[4]*500 + 1500); // Steering gear channel
        channels.value[5] = (unsigned int)(input[5]*1000 + 1000); // Breaks channel
        channels.value[6] = (unsigned int)(input[6]*500 + 1500); // Generic channel
        channels.value[7] = (unsigned int)(input[7]*500 + 1500); // Generic channel
        channels.value[8] = (unsigned int)(input[8]*500 + 1500); // Generic channel
        channels.value[9] = (unsigned int)(input[9]*1000 + 1000); // Reset channel
        channels.value[10] = (unsigned int)(input[10]*500 + 1500); // Generic channel
        return channels;
    case 2: // Quadrotor mixing
        channels.value[0] = (unsigned int)(500*((input[2]+1) -0.11*input[0] +0.11*input[1] -0.11*input[3]) +1000);
        channels.value[1] = (unsigned int)(500*((input[2]+1) +0.11*input[0] +0.11*input[1] +0.11*input[3]) +1000);
        channels.value[2] = (unsigned int)(500*((input[2]+1) -0.11*input[0] -0.11*input[1] +0.11*input[3]) +1000);
        channels.value[3] = (unsigned int)(500*((input[2]+1) +0.11*input[0] -0.11*input[1] -0.11*input[3]) +1000);
        channels.value[4] = (unsigned int)(input[4]*500 + 1500); // Generic channel
        channels.value[5] = (unsigned int)(input[5]*500 + 1500); // Generic channel
        channels.value[6] = (unsigned int)(input[6]*500 + 1500); // Generic channel
        channels.value[7] = (unsigned int)(input[7]*500 + 1500); // Generic channel
        channels.value[8] = (unsigned int)(input[8]*500 + 1500); // Generic channel
        channels.value[9] = (unsigned int)(input[9]*1000 + 1000); // Reset channel
        channels.value[10] = (unsigned int)(input[10]*1000 + 1000); // Generic channel
        return channels;
    case 3: // Firefly Y6 mixing
        channels.value[0] = (unsigned int)(500*((input[2]+1) -0.11*input[0] +0.11*input[1] -0.11*input[3]) +1000); // top-right motor channel
        channels.value[1] = (unsigned int)(500*((input[2]+1) -0.11*input[0] +0.11*input[1] +0.11*input[3]) +1000); // bottom-right motor channel
        channels.value[2] = (unsigned int)(500*((input[2]+1) +0.00*input[0] -0.11*input[1] -0.11*input[3]) +1000); // top-rear motor channel
        channels.value[3] = (unsigned int)(500*((input[2]+1) +0.00*input[0] -0.11*input[1] +0.11*input[3]) +1000); // bottom-rear motor channel
        channels.value[4] = (unsigned int)(500*((input[2]+1) +0.11*input[0] +0.11*input[1] -0.11*input[3]) +1000); // top-left motor channel
        channels.value[5] = (unsigned int)(500*((input[2]+1) +0.11*input[0] +0.11*input[1] +0.11*input[3]) +1000); // bottom-left channel
        channels.value[6] = (unsigned int)(-input[3]*500 + 1500); // steering wheel channel
        channels.value[7] = (unsigned int)(input[9]*1000 + 1000); // reset channel
        channels.value[8] = (unsigned int)(input[0]*500 + 1500); // aileron channel
        channels.value[9] = (unsigned int)(input[1]*500 + 1500); // elevator channel
        channels.value[10] = (unsigned int)(input[6]*500 + 1500); // motor gimbal channel
        return channels;
    default:
        ROS_FATAL("Invalid parameter for -/HID/mixerid- in param server!");
        ros::shutdown();

    }
}

int main(int argc, char **argv)
{
    ros::init(argc, argv, "joystick_node");
    ros::NodeHandle n;

    JoyConverter converter(n);

    // Setting debug level of the node
    if( ros::console::set_logger_level(ROSCONSOLE_DEFAULT_NAME, ros::console::levels::Debug) ) {
        ros::console::notifyLoggerLevelsChanged();
    }

    // Enter spin
    while (ros::ok())
    {
        ros::spin();
    }

    return 0;
}

the launch file
<launch>

<rosparam command="load" file="$(find last_letter)data/parameters/HID.yaml" />

<node pkg="joy" type="joy_node" name="joystick" output="screen" >
    <param name="dev" value="/dev/input/js0" />
    <param name="deadzone" value="0.01" />
</node>

<node pkg="last_letter" name="joy2chan" type="joy2chan" output="screen" >
    <remap from="rawPWM" to="ctrlPWM"/>
</node>

</launch>

the console output:
$ roslaunch last_letter joytest.launch 
... logging to /home/george/.ros/log/119b1428-6fa6-11e6-a462-2c6e859e3f86/roslaunch-george-Inspiron-5559-28254.log
Checking log directory for disk usage. This may take awhile.
Press Ctrl-C to interrupt
Done checking log file disk usage. Usage is <1GB.

started roslaunch server http://george-Inspiron-5559:46412/

SUMMARY
========

PARAMETERS
 * /HID/axes: [0, 1, 3, 2, 2, -...
 * /HID/buttons: [-1, -1, -1, -1, ...
 * /HID/mixerid: 1
 * /HID/throws: [-1.0, -1.0, 1.0,...
 * /joystick/deadzone: 0.01
 * /joystick/dev: /dev/input/js0
 * /rosdistro: kinetic
 * /rosversion: 1.12.2

NODES
  /
    joy2chan (last_letter/joy2chan)
    joystick (joy/joy_node)

auto-starting new master
process[master]: started with pid [28265]
ROS_MASTER_URI=http://localhost:11311

setting /run_id to 119b1428-6fa6-11e6-a462-2c6e859e3f86
process[rosout-1]: started with pid [28278]
started core service [/rosout]
process[joystick-2]: started with pid [28285]
process[joy2chan-3]: started with pid [28315]
[ INFO] [1472666973.702040051]: Reading input axes
[ INFO] [1472666973.702935490]: Reading input buttons configuration
[ INFO] [1472666973.817538003]: Opened joystick: /dev/input/js0. deadzone_: 0.010000.
[DEBUG] [1472666974.728438506]: joy2chan: Processing new joy msg
[DEBUG] [1472666974.728592498]: joy2chan: Calling mixing function
[DEBUG] [1472666974.728720886]: joy2chan: Publishing channels
[DEBUG] [1472666974.728855197]: joy2chan: Callback ended
*** stack smashing detected ***: /home/george/catkin_ws/devel/lib/last_letter/joy2chan terminated
[joy2chan-3] process has died [pid 28315, exit code -6, cmd /home/george/catkin_ws/devel/lib/last_letter/joy2chan rawPWM:=ctrlPWM __name:=joy2chan __log:=/home/george/.ros/log/119b1428-6fa6-11e6-a462-2c6e859e3f86/joy2chan-3.log].
log file: /home/george/.ros/log/119b1428-6fa6-11e6-a462-2c6e859e3f86/joy2chan-3*.log
^C[joystick-2] killing on exit
[rosout-1] killing on exit
[master] killing on exit
shutting down processing monitor...
... shutting down processing monitor complete
done

and the log file
[rosmaster.main][INFO] 2016-08-31 20:23:42,869: initialization complete, waiting for shutdown
[rosmaster.main][INFO] 2016-08-31 20:23:42,870: Starting ROS Master Node
[xmlrpc][INFO] 2016-08-31 20:23:42,871: XML-RPC server binding to 0.0.0.0:11311
[rosmaster.master][INFO] 2016-08-31 20:23:42,871: Master initialized: port[11311], uri[http://george-Inspiron-5559:11311/]
[xmlrpc][INFO] 2016-08-31 20:23:42,871: Started XML-RPC server [http://george-Inspiron-5559:11311/]
[xmlrpc][INFO] 2016-08-31 20:23:42,871: xml rpc node: starting XML-RPC server
[rosmaster.master][INFO] 2016-08-31 20:23:42,944: +PARAM [/run_id] by /roslaunch
[rosmaster.master][INFO] 2016-08-31 20:23:42,948: +PARAM [/roslaunch/uris/host_george_inspiron_5559__36964] by /roslaunch
[rosmaster.master][INFO] 2016-08-31 20:23:43,014: +PARAM [/HID/throws] by /roslaunch
[rosmaster.master][INFO] 2016-08-31 20:23:43,014: +PARAM [/rosdistro] by /roslaunch
[rosmaster.master][INFO] 2016-08-31 20:23:43,014: +PARAM [/HID/mixerid] by /roslaunch
[rosmaster.master][INFO] 2016-08-31 20:23:43,014: +PARAM [/joystick/dev] by /roslaunch
[rosmaster.master][INFO] 2016-08-31 20:23:43,014: +PARAM [/HID/axes] by /roslaunch
[rosmaster.master][INFO] 2016-08-31 20:23:43,014: +PARAM [/rosversion] by /roslaunch
[rosmaster.master][INFO] 2016-08-31 20:23:43,014: +PARAM [/HID/buttons] by /roslaunch
[rosmaster.master][INFO] 2016-08-31 20:23:43,015: +PARAM [/joystick/deadzone] by /roslaunch
[rosmaster.master][INFO] 2016-08-31 20:23:43,017: +SERVICE [/rosout/get_loggers] /rosout http://george-Inspiron-5559:34959/
[rosmaster.master][INFO] 2016-08-31 20:23:43,018: +SERVICE [/rosout/set_logger_level] /rosout http://george-Inspiron-5559:34959/
[rosmaster.master][INFO] 2016-08-31 20:23:43,019: +PUB [/rosout_agg] /rosout http://george-Inspiron-5559:34959/
[rosmaster.master][INFO] 2016-08-31 20:23:43,023: +SUB [/rosout] /rosout http://george-Inspiron-5559:34959/
[rosmaster.master][INFO] 2016-08-31 20:23:43,028: +PUB [/rosout] /joystick http://george-Inspiron-5559:40955/
[rosmaster.master][INFO] 2016-08-31 20:23:43,029: +SERVICE [/joystick/get_loggers] /joystick http://george-Inspiron-5559:40955/
[rosmaster.master][INFO] 2016-08-31 20:23:43,030: +SERVICE [/joystick/set_logger_level] /joystick http://george-Inspiron-5559:40955/
[rosmaster.master][INFO] 2016-08-31 20:23:43,031: +PUB [/diagnostics] /joystick http://george-Inspiron-5559:40955/
[rosmaster.master][INFO] 2016-08-31 20:23:43,032: +PUB [/joy] /joystick http://george-Inspiron-5559:40955/
[rosmaster.master][INFO] 2016-08-31 20:23:43,054: +PUB [/rosout] /joy2chan http://george-Inspiron-5559:40879/
[rosmaster.master][INFO] 2016-08-31 20:23:43,055: +SERVICE [/joy2chan/get_loggers] /joy2chan http://george-Inspiron-5559:40879/
[rosmaster.master][INFO] 2016-08-31 20:23:43,056: +SERVICE [/joy2chan/set_logger_level] /joy2chan http://george-Inspiron-5559:40879/
[rosmaster.master][INFO] 2016-08-31 20:23:43,059: +SUB [/joy] /joy2chan http://george-Inspiron-5559:40879/
[rosmaster.master][INFO] 2016-08-31 20:23:43,059: +PUB [/ctrlPWM] /joy2chan http://george-Inspiron-5559:40879/
[rosmaster.master][INFO] 2016-08-31 20:23:43,070: publisherUpdate[/rosout] -> http://george-Inspiron-5559:34959/
[rosmaster.master][INFO] 2016-08-31 20:23:43,072: publisherUpdate[/rosout] -> http://george-Inspiron-5559:34959/
[rosmaster.master][INFO] 2016-08-31 20:23:47,189: -PUB [/rosout] /joystick http://george-Inspiron-5559:40955/
[rosmaster.master][INFO] 2016-08-31 20:23:47,193: -PUB [/diagnostics] /joystick http://george-Inspiron-5559:40955/
[rosmaster.master][INFO] 2016-08-31 20:23:47,195: -PUB [/joy] /joystick http://george-Inspiron-5559:40955/
[rosmaster.master][INFO] 2016-08-31 20:23:47,199: -SERVICE [/joystick/get_loggers] /joystick rosrpc://george-Inspiron-5559:50657
[rosmaster.master][INFO] 2016-08-31 20:23:47,202: -SERVICE [/joystick/set_logger_level] /joystick rosrpc://george-Inspiron-5559:50657
[rosmaster.master][INFO] 2016-08-31 20:23:47,283: publisherUpdate[/rosout] -> http://george-Inspiron-5559:34959/
[rosmaster.master][INFO] 2016-08-31 20:23:47,284: publisherUpdate[/joy] -> http://george-Inspiron-5559:40879/
[rosmaster.threadpool][ERROR] 2016-08-31 20:23:47,291: Traceback (most recent call last):
  File "/opt/ros/kinetic/lib/python2.7/dist-packages/rosmaster/threadpool.py", line 218, in run
    result = cmd(*args)
  File "/opt/ros/kinetic/lib/python2.7/dist-packages/rosmaster/master_api.py", line 208, in publisher_update_task
    xmlrpcapi(api).publisherUpdate('/master', topic, pub_uris)
  File "/usr/lib/python2.7/xmlrpclib.py", line 1243, in __call__
    return self.__send(self.__name, args)
  File "/usr/lib/python2.7/xmlrpclib.py", line 1602, in __request
    verbose=self.__verbose
  File "/usr/lib/python2.7/xmlrpclib.py", line 1283, in request
    return self.single_request(host, handler, request_body, verbose)
  File "/usr/lib/python2.7/xmlrpclib.py", line 1311, in single_request
    self.send_content(h, request_body)
  File "/usr/lib/python2.7/xmlrpclib.py", line 1459, in send_content
    connection.endheaders(request_body)
  File "/usr/lib/python2.7/httplib.py", line 1053, in endheaders
    self._send_output(message_body)
  File "/usr/lib/python2.7/httplib.py", line 897, in _send_output
    self.send(msg)
  File "/usr/lib/python2.7/httplib.py", line 859, in send
    self.connect()
  File "/usr/lib/python2.7/httplib.py", line 836, in connect
    self.timeout, self.source_address)
  File "/usr/lib/python2.7/socket.py", line 575, in create_connection
    raise err
error: [Errno 111] Connection refused

[rosmaster.master][INFO] 2016-08-31 20:23:48,287: -PUB [/rosout_agg] /rosout http://george-Inspiron-5559:34959/
[rosmaster.master][INFO] 2016-08-31 20:23:48,288: -SUB [/rosout] /rosout http://george-Inspiron-5559:34959/
[rosmaster.master][INFO] 2016-08-31 20:23:48,288: -SERVICE [/rosout/get_loggers] /rosout rosrpc://george-Inspiron-5559:51747
[rosmaster.master][INFO] 2016-08-31 20:23:48,289: -SERVICE [/rosout/set_logger_level] /rosout rosrpc://george-Inspiron-5559:51747
[rosmaster.main][INFO] 2016-08-31 20:23:48,352: keyboard interrupt, will exit
[rosmaster.main][INFO] 2016-08-31 20:23:48,352: stopping master...
[rospy.core][INFO] 2016-08-31 20:23:48,353: signal_shutdown [atexit]

Originally posted by Georacer on ROS Answers with karma: 67 on 2016-08-31
Post score: 0

Original comments
Comment by jarvisschultz on 2016-08-31:
My initial suspicion is that the problem might be with accessing past the end of the input array. What happens if you change the first for loop in joy2chan to have a conditional statement of i<11 instead of i<=1?

A:

There are a few problems with your code, which potentially crashes your node:

Are you sure the joyMsg in the callback joy2chan always has a fixed number of axes and buttons? I saw that you always trying to read 11 (or 12?) elements from the array.

This part of your code is confusing:  for (i = 0; i <= 11; i++) ... Are you trying to say that there are 12 elements? Because you only declare double input[11];

Originally posted by DavidN with karma: 544 on 2016-09-01
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by Georacer on 2016-09-01:
I'm embarrassed to say it, but it was <=11 that was breaking the code.
Two weird parts, though:

If I was calling an invalid element of input inside joy2chan, why did the callback finish (as seen by the debug messages) and the crash?
This code used to run fine in 14.04 and Indigo.
Thanks!

Comment by Georacer on 2016-09-01:
Perhaps Kinetic uses a new compiler, which is more strict.
Comment by ahendrix on 2016-09-01:
The stack grows downwards from the top of your address space, so writing past the end of an array that's on the stack will clobber whatever else is on the stack. Depending on how the compiler decides to lay out your stack, that could be another variable, the return address or something else.
Comment by ahendrix on 2016-09-01:
I suspect the compiler or the C library is putting a sentinel value between stack frames, and using that to detect if you've accidentally written past the end of your frame. Might be showing up now because it's new, might be due to better compiler optimizations, or just different stack layout.

