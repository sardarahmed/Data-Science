Q:

roslaunch and NVidia profiling

Has anyone had any success getting NVidia profiling tools and ROS to play well together?
At the moment, the best I can do is profile all processes, but that only reports memory copies to and from host, and some OpenCV (copy to and from cv::Mat and cv::cuda::GpuMat). My custom kernels are never profiled (yes, I have explicit cudaProfilerStart()/Stop() calls) and trying to use launch-prefix="nvprof" or directly profiling roslaunch never gets me anywhere except errors about being unable to load some nodelets.
Any suggestions as to what I might be doing wrong? I'm on Ubuntu 16.04.

Originally posted by KenYN on ROS Answers with karma: 541 on 2018-09-04
Post score: 0

Original comments
Comment by ahendrix on 2018-09-05:
Are you running cuda code within nodelets? If your cuda code is running within a nodelet, you may want to try running nvprof on the nodelet manager.
Comment by KenYN on 2018-09-05:
I've tried that too, but no joy. I even have my cudaProfilerStart() called from every thread within the nodelet. Once or twice I have actually managed to capture calls to my CUDA code, but I've never managed to reproduce that...
Comment by KenYN on 2018-09-05:
Ah, I've tried again and just noticed an error about being unable to activate Unified Memory Profiling, so using launch-prefix="nvprof --unified-memory-profiling off" gets me further than I've ever got before.
Comment by gvdhoorn on 2018-09-05:
@KenYN: what was the answer here? Your last comment?
If so: please post that as an answer and then accept your own answer.
We don't really close questions here on ROS Answers when they have an actual answer.
Comment by KenYN on 2018-09-05:
@gvdhoorn Oops, I cannot re-open. Can someone else please? I also discovered how to get final output, so I can actually answer the question now.
Comment by gvdhoorn on 2018-09-05:
I've re-opened it for you.

A:

I finally managed to get output, but not very prettily...
In my manager node line, I added launch-prefix="nvprof --unified-memory-profiling off --profile-child-process --profile-from-start off". Then in a suitable callback I added the following:
static bool startedProfile = false;
void MyClass::image_cb(const sensor_msgs::ImageConstPtr image)
{
    if (!startedProfile)
    {
        startedProfile = true;
        cudaProfilerStart();
    }
    else if (startedProfile && image->header.seq > 400) // 400 frames is enough profiling
    {
        cudaProfilerStop();
        cudaDeviceReset();
        exit(0);
    }

    // Existing code...
}

This is a very ugly way to finish profiling, but cudaProfilerStop() on its own didn't produce any output and neither did the addition of exit(0). There are other nodelets running other CUDA code on both the same and different GPUs, so perhaps we needed to force every CUDA process to stop to get the profiling results to output?

Originally posted by KenYN with karma: 541 on 2018-09-05
This answer was ACCEPTED on the original site
Post score: 0

