Q:

Purpose of Forward Command Controller

I recently stumbled across the forward_command_controller/ForwardCommandController ros controller while doing some research online. From the documentation, it seems that it can take multiple joints as input and simply forwards them over to the hardware interface node. But how is that different than what the position_controllers/JointGroupPositionController does for positions? Or the velocity_controllers/JointGroupVelocityController does for velocities, etc?
It seems like there is some redundancy here, and according to the controller documentation, the above controllers even use the forward command controller behind the scenes. This question applies to both ros1 and ros2.

Originally posted by swiz23 on ROS Answers with karma: 86 on 2021-12-16
Post score: 1

A:

Short answer not really:
You can see it in the source code. For position_controllers/JointGroupPositionController
https://github.com/ros-controls/ros_controllers/blob/noetic-devel/position_controllers/src/joint_position_controller.cpp
void forward_command_controller::ForwardCommandController<T>::starting(const ros::Time& time)
{
  // Start controller with current joint position
  command_buffer_.writeFromNonRT(joint_.getPosition());
}

For velocity_controllers/JointGroupVelocityController:
https://github.com/ros-controls/ros_controllers/blob/noetic-devel/velocity_controllers/src/joint_group_velocity_controller.cpp
void forward_command_controller::ForwardJointGroupCommandController<T>::starting(const ros::Time& time)
{
  // Start controller with 0.0 velocities
  commands_buffer_.readFromRT()->assign(n_joints_, 0.0);
}

They both make use of Forward Command Controller class but not doing exactly same function.

Originally posted by osilva with karma: 1650 on 2021-12-17
This answer was ACCEPTED on the original site
Post score: 1

