Q:

Confusion system/rosdep/rosmake/catkin

I'm trying to use a package for which I suspect instructions are outdated, so I need a solid understanding of the process. However, even after following some ROS tutorials, I'm still confused. I'm on Linux (Mint), so in my view, there are 2 things:

files installed via apt, system-wide (can go wherever: /etc, /opt, and more ...) and requiring sudo.
files contained inside the folder designed as "catkin worspace", owned by my personal user

I have a hard time understanding:

whether when I "sudo apt-get install ros-something", that something is immediately runnable, or needs additional building
what "rosdep install" is supposed to do: it does not seem to require root, so where does it write things ?
what "rosmake" is supposed to do: idem, does not seem to require root, but does not seem to interact with the catkin workspace either

Any clarifications would be greatly appreciated !

Originally posted by gnurf on ROS Answers with karma: 20 on 2016-09-24
Post score: 0

A:

whether when I sudo apt-get install ros-something, that something is immediately runnable, or needs additional building

In general: yes, all binary artefacts in the debian pkgs can be used immediately, no further steps required. The debian pkgs generated by the ROS buildfarm are no different from the other debs that you install via apt-get (or the Software Center, or Synaptic, or ..): they contain programs and libraries.
Other files (urdfs, xacros, msgs) can also be used 'directly', although those are typically used as parts of other programs / applications, so it depends a bit on how you'd define 'directly'.

what "rosdep install" is supposed to do: it does not seem to require root, so where does it write things ?

From wiki/rosdep:

rosdep is a command-line tool for installing system dependencies.

So rosdep installs system dependencies: things that ROS packages can depend on, but are not ROS packages themselves (mostly libraries, but also entire external programs or files).
From rosdep -h:

rosdep install <stacks-and-packages>...
  generate a bash script and then execute it.

That is a bit cryptic, but it does provide a hint as to why rosdep itself does not "require root": rosdep only generates a script which contains (on Ubuntu at least) sudo apt-get install .. lines that install the system dependencies mentioned earlier. Obviously, installing things does require super user rights, hence the sudo.
As resolving dependencies in itself does not require super user rights (it's just looking up some things in a database), asking for them is postponed until apt-get actually needs them.

what "rosmake" is supposed to do: idem, does not seem to require root, but does not seem to interact with the catkin workspace either

rosmake is a build driver: it starts other programs in a specific order (dictated by pkg dependencies) that results in your packages being build correctly. It does not start gcc (or whatever compiler is used) by itself, but delegates that to (GNU) make. As a typical workspace build does not require super user rights, rosmake does not need them either (rosbuild does not really have an "install" concept, but if it would've had one, installing system-wide would've required additional access rights).
If you need rosmake to change things in locations not writeable by your user, then it of course needs additional rights, which it might get through running it as the super user. But in general this is not recommended, most of the times not needed and thus not really used.
Note that rosmake is part of the old rosbuild build environment, which was replaced by catkin. Both are essentially CMake wrappers, that add some convenience macros/functions to CMake to make it easier to work with ROS packages and collections of packages (ie: workspaces). You can still use it on modern ROS distributions, but there are some restrictions (such as Catkin packages not being able to depend on rosbuild packages). If the old instructions told you to use rosmake, that should still work, but it'd probably be a good idea to migrate the package(s) involved to catkin.

Originally posted by gvdhoorn with karma: 86574 on 2016-09-24
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by gnurf on 2016-09-24:
Thanks, that clarifies a bit. Now I'm confused about launching a node with parameters. I apt-installed some package containing a binary, and can run the binary with "rosrun pack_name bin_name", but I need to give it particular parameters. I tried adding them to the rosrun command line ...
Comment by gnurf on 2016-09-24:
... but it is unclear to me whether I should use param:=value or _param:=value. Also parameters seem to be remembered somewhere across runs, which is not what I want. I also tried using .launch files, but it seems to require "roslaunch" instead of "rosrun", which seems too much
Comment by gnurf on 2016-09-24:
(it's like it is starting a new core or something, hiding the output in log files, ... whereas I just want to launch one node).
Comment by gvdhoorn on 2016-09-24:
That sounds like something unrelated to your initial questions(s). Please open a new question for that, after having made sure that none of the existing ones already deal with your issue (Google with site:answers.ros.org works well).

