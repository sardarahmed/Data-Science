Q:

Cant publish ROS time on Clock topic after switching from Kinetic to Melodic

I had code running on Kinetic that published to a a simulated time on a topic named /clock. When I try compile the code using Melodic I get an error. The code I used to publish the simulated time was as follows:
ros::Time currentTime_;
currentTime_ += ros::Duration(dt_secs);
clockPub_ = node_.advertise<rosgraph_msgs::Clock>("/clock",1);
clockPub_.publish(currentTime_);

This code compiled and worked fine in Kinetic. However in Melodic I get the error:
 error: ‘const class ros::Time’ has no member named ‘__getMD5Sum’
     return m.__getMD5Sum().c_str();
 error: ‘const class ros::Time’ has no member named ‘__getDataType’
     return m.__getDataType().c_str();

Any ideas on how to solve this?

Originally posted by Watchdog101 on ROS Answers with karma: 16 on 2021-06-29
Post score: 0

A:

I found a solution to this. My assumption is that ROS Kinetic allowed for the conversion from messages ros::Time to rosgraph_msgs::Clock, while ROS melodic does not. Thus the solution is to first manually convert the ros::Time message to a rosgraph_msgs::Clock message. You can do that as follows:
ros::Time currentTime_;
rosgraph_msgs::Clock msg;
currentTime_ += ros::Duration(dt_secs);
msg.time = currentTime_;
clockPub_ = node_.advertise<rosgraph_msgs::Clock>("/clock",1);
clockPub_.publish(msg);

Originally posted by Watchdog101 with karma: 16 on 2021-06-29
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by tfoote on 2021-07-01:
The automatic type conversion like that is often provided in header files via templates. I would be surprised if that capability went away. However it's likely that you were relying on that capability via a transitive dependency which was cleaned up between Kinetic and Melodic.
Comment by Watchdog101 on 2021-07-01:
Interesting, thanks for the additional info. The error was thrown from a package which wasn't mine, so it would take me some time to dig through it and fully understand all dependencies. None the less, a good point for anyone else who runs into similar issues.

