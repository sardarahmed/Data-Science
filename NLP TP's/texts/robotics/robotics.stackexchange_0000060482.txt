Q:

Computing PoseWithCovariance's 6x6 matrix

Greetings,
I'm currently developing in Unity3D a projection mapping application to be used with a projector mounted on a robot, displaying Augmented Reality content in any (planar) surface. The application will require the robot's positioning which will be published in a ROS topic. Unfortunately I don't have access to the robot yet, however I do know the type of message chosen to represent its location:  PoseWithCovariance msg (docs.ros.org/api/geometry_msgs/html/msg/PoseWithCovariance.html)
My experience with ROS is extremely limited and the end goal is to convert the positional information contained within PoseWithCovariance's 6x6 matrix and convert it to its respective 3D position and orientation in a referential defined within Unity3D. The values in Unity3D are simply the position (x,y,z) and rotation around the 3 axis. My problem lies with the conversion of the matrix into those values.  Unfortunately the raw message definition alone linked earlier doesn't include an example of some sort or additional info on how to convert the matrix values.
Any help would be greatly appreciated!

Originally posted by Mainframe on ROS Answers with karma: 1 on 2014-07-01
Post score: 0

A:

A PoseWithCovariance consists of: an XYZ position, a Quaternion representing the orientation, and a 6x6 matrix representing the positional and angular uncertainty.
The XYZ position is simple. Note that the units should be in meters.
Quaternions are an alternate method of representing orientation, which are more mathematically stable than euler angles (roll, pitch and yaw) or rotation matrices. You can use the tf library to create a quaternion given the Euler anlges:
geometry_msgs::Quaternion   tf::createQuaternionMsgFromRollPitchYaw (double roll, double pitch, double yaw)

The 6x6 covariance matrix represents the position and orientation covariance between the x, y, z, roll, pitch and yaw variables. If you don't have this or don't care about it for your application, you can leave it as zeroes.

Originally posted by ahendrix with karma: 47576 on 2014-07-02
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by Mainframe on 2014-07-02:
The only information the application needs is (most accurate) localization. After reading the covariance definition I guess the 6x6 matrix will not be needed.
I am however confused about PoseWithCovariance Message definition: it states that "# In order, the parameters are:
(x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)" with no W variable typically present in the Quaternion, which from what I've read so far represents the amount of rotation so it would have to be present right?

