Q:

No /odom or /cmd_vel topics when using diff drive plugin

Hi,
I have created a two wheeled model and have added the gazebo differential drive plugin to the urdf file. However, when I spawn the robot into gazebo and view the topics in a terminal (with "ros2 topic list") there isn't the /odom or /cmd_vel topics (which I would expect). How would I fix this and make the topics appear? Any help is much appreciated.
Below is my urdf code:
<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="self balancing robot">
<xacro:property name="update_rate" value = "10"/>

<xacro:property name="layer_width" value="0.15"/>
<xacro:property name="layer_depth" value="0.1"/>
<xacro:property name="layer_height" value="0.003"/>
<xacro:property name="layer_mass" value="0.054"/>
<xacro:property name="layer_spacing" value="0.12"/>

<xacro:property name="rod_radius" value="0.005"/>
<xacro:property name="rod_length" value="0.25"/>
<xacro:property name="rod_mass" value="0.055"/>

<xacro:property name="motor_depth" value="0.041"/>
<xacro:property name="motor_width" value="0.041"/>
<xacro:property name="motor_height" value="0.041"/>
<xacro:property name="motor_mass" value="0.319"/>
<xacro:property name="motor_wheel_clearance" value="0.002"/>

<xacro:property name="wheel_mass" value="0.055"/>
<xacro:property name="wheel_radius" value="0.0415"/>
<xacro:property name="wheel_width" value="0.035"/>

<xacro:property name="first_layer_gap" value="${1/2*(layer_height+motor_height) + wheel_radius}"/>

<xacro:macro name="cuboid_inertia" params="mass depth width height">
<inertia ixx="${1/12 * mass * ((width * width) + (height * height))}" ixy="0" ixz="0" 
     iyy="${1/12 * mass * ((depth * depth) + (height * height))}" iyz="0" 
     izz="${1/12 * mass * ((width * width) + (depth * depth))}" />
</xacro:macro>

<xacro:macro name="wheel_inertia" params="mass radius length">
<inertia ixx="${1/12 * mass * (3 * (radius * radius) + (length * length))}" ixy="0" ixz="0" 
     iyy="${1/12 * mass * (3 * (radius * radius) + (length * length))}" iyz="0" 
     izz="${1/2 * mass * (radius * radius)}" />
</xacro:macro>

<xacro:macro name="rod_inertia" params="mass radius length">
<inertia ixx="${1/12 * mass * (3 * (radius * radius) + (length * length))}" ixy="0" ixz="0" 
     iyy="${1/2 * mass * (radius * radius)}" iyz="0" 
     izz="${1/12 * mass * (3 * (radius * radius) + (length * length))}" />
</xacro:macro>

<xacro:macro name="new_layer" params="number">
    <link name="layer_${number}">
        <visual>
            <geometry>
                <box size="${layer_depth} ${layer_width} ${layer_height}"/>
            </geometry>
        </visual>
        <collision>
            <geometry>
                <box size="${layer_depth} ${layer_width} ${layer_height}"/>
            </geometry>
        </collision>
        <inertial>
            <mass value="${layer_mass}"/>
            <origin xyz="0 0 ${first_layer_gap + (number * layer_spacing)}" rpy="0 0 0"/>
            <xacro:cuboid_inertia mass="${layer_mass}" depth="${layer_depth}" width="${layer_width}" height="${layer_height}"/>
        </inertial>
    </link>
</xacro:macro>

<xacro:macro name="new_wheel" params="left_or_right">
    <link name="${left_or_right}_wheel">
        <visual>
            <geometry>
                <cylinder length="${wheel_width}" radius="${wheel_radius}"/>
            </geometry>
        </visual>
        <collision>
            <geometry>
                <cylinder length="${wheel_width}" radius="${wheel_radius}"/>
            </geometry>
        </collision>
        <inertial>
            <mass value="${layer_mass}"/>
            <!--<origin xyz="0 0 0" rpy="0 0 0"/>-->
            <xacro:wheel_inertia mass="${wheel_mass}" radius="${wheel_radius}" length="${wheel_width}"/>
        </inertial>
    </link>
</xacro:macro>
<xacro:macro name="new_motor" params="left_or_right y">
    <link name="${left_or_right}_motor">
        <visual>
            <geometry>
                <box size="${motor_depth} ${motor_width} ${motor_height}"/>
            </geometry>
        </visual>
        <collision>
            <geometry>
                <box size="${motor_depth} ${motor_width} ${motor_height}"/>
            </geometry>
        </collision>
        <inertial>
            <mass value="${motor_mass}"/>
            <origin xyz="0 ${y} ${first_layer_gap - 1/2 * (layer_height + motor_height)}" rpy="0 0 0"/>
            <xacro:cuboid_inertia mass="${layer_mass}" depth="${layer_depth}" width="${layer_width}" height="${layer_height}"/>
        </inertial>
    </link>
</xacro:macro>

<xacro:macro name="new_rod" params="top_or_bottom left_or_right x y">
    <link name="rod_${top_or_bottom}_${left_or_right}">
        <visual>
            <geometry>
                <cylinder length="${rod_length}" radius="${rod_radius}"/>
            </geometry>
        </visual>
        <collision>
            <geometry>
                <cylinder length="${rod_length}" radius="${rod_radius}"/>
            </geometry>
        </collision>
        <inertial>
            <mass value="${rod_mass}"/>
            <origin xyz="${x} ${y} ${first_layer_gap + layer_spacing}" rpy="0 0 0"/>
            <xacro:rod_inertia mass="${rod_mass}" radius="${rod_radius}" length="${rod_length}"/>
        </inertial>
    </link>
</xacro:macro>

<link name="chassis">
</link>

<xacro:macro name="chassis_joint" params="child x y z">
    <joint name="chassis_${child}_joint" type="fixed">
        <parent link="chassis"/>
        <child link="${child}"/>
        <origin xyz="${x} ${y} ${z}"/>
    </joint>    
</xacro:macro>

<xacro:macro name="wheel_joint" params="left_or_right child y">
    <joint name="chassis_${child}_joint" type="continuous">
        <parent link="chassis"/>
        <child link="${child}"/>
        <origin xyz="0 ${y} ${first_layer_gap - 1/2 * layer_height - 1/2 * motor_height}" rpy="${pi/2} 0 0"/>
        <axis xyz="0 0 1"/>
    </joint>
</xacro:macro>
<xacro:new_layer number="0"/>
<xacro:chassis_joint child="layer_0" x="0" y="0" z="${first_layer_gap}"/>
<xacro:new_layer number="1"/>
<xacro:chassis_joint child="layer_1" x="0" y="0" z="${first_layer_gap + layer_spacing}"/>
<xacro:new_layer number="2"/>
<xacro:chassis_joint child="layer_2" x="0" y="0" z="${first_layer_gap + 2 * layer_spacing}"/>

<xacro:new_motor left_or_right="right" y="${(1/2 * layer_width + motor_wheel_clearance)-1/2*motor_width}"/>
<xacro:chassis_joint child="right_motor" x="0" y="${(1/2 * layer_width + motor_wheel_clearance)-1/2*motor_width}" z="${first_layer_gap - 1/2 * (layer_height + motor_height)}"/>
<xacro:new_motor left_or_right="left" y="-${(1/2 * layer_width + motor_wheel_clearance)-1/2*motor_width}"/>
<xacro:chassis_joint child="left_motor" x="0" y="-${(1/2 * layer_width + motor_wheel_clearance)-1/2*motor_width}" z="${first_layer_gap - 1/2 * (layer_height + motor_height)}"/>

<!-- top is -ve x direction, right is +ve y direction-->
<xacro:new_rod top_or_bottom="top" left_or_right="right" x="${-1/2 * layer_depth + 2*rod_radius}" y="${1/2 * layer_width - 2*rod_radius}"/>
<xacro:chassis_joint child="rod_top_right" x="${-1/2 * layer_depth + 2*rod_radius}" y="${1/2 * layer_width - 2*rod_radius}" z="${first_layer_gap + layer_spacing}"/>
<xacro:new_rod top_or_bottom="top" left_or_right="left" x="${-1/2 * layer_depth + 2*rod_radius}" y="${-1/2 * layer_width + 2*rod_radius}"/>
<xacro:chassis_joint child="rod_top_left" x="${-1/2 * layer_depth + 2*rod_radius}" y="${-1/2 * layer_width + 2*rod_radius}" z="${first_layer_gap + layer_spacing}"/>
<xacro:new_rod top_or_bottom="bottom" left_or_right="right" x="${1/2 * layer_depth - 2*rod_radius}" y="${1/2 * layer_width - 2*rod_radius}"/>
<xacro:chassis_joint child="rod_bottom_right" x="${1/2 * layer_depth - 2*rod_radius}" y="${1/2 * layer_width - 2*rod_radius}" z="${first_layer_gap + layer_spacing}"/>
<xacro:new_rod top_or_bottom="bottom" left_or_right="left" x="${1/2 * layer_depth - 2*rod_radius}" y="${-1/2 * layer_width + 2*rod_radius}"/>
<xacro:chassis_joint child="rod_bottom_left" x="${1/2 * layer_depth - 2*rod_radius}" y="${-1/2 * layer_width + 2*rod_radius}" z="${first_layer_gap + layer_spacing}"/>

<xacro:new_wheel left_or_right="right" />
<xacro:wheel_joint left_or_right="right" child="right_wheel" y="${1/2* layer_width + motor_wheel_clearance + 1/2 * wheel_width}"/>
<xacro:new_wheel left_or_right="left"/>
<xacro:wheel_joint left_or_right="left" child="left_wheel" y="-${1/2* layer_width + motor_wheel_clearance + 1/2 * wheel_width}"/>

<gazebo>
  <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">

    <!-- Plugin update rate in Hz -->
    <updateRate>${update_rate}</updateRate>

    <!-- Name of left joint, defaults to `left_joint` -->
    <leftJoint>chassis_left_wheel_joint</leftJoint>

    <!-- Name of right joint, defaults to `right_joint` -->
    <rightJoint>chassis_right_wheel_joint</rightJoint>

    <!-- The distance from the center of one wheel to the other, in meters, defaults to 0.34 m -->
    <wheelSeparation>${layer_width + 2* motor_wheel_clearance}</wheelSeparation>

    <!-- Diameter of the wheels, in meters, defaults to 0.15 m -->
    <wheelDiameter>${wheel_radius * 2}</wheelDiameter>

    <!-- Wheel acceleration, in rad/s^2, defaults to 0.0 rad/s^2 -->
    <wheelAcceleration>1.0</wheelAcceleration>

    <!-- Maximum torque which the wheels can produce, in Nm, defaults to 5 Nm -->
    <wheelTorque>5</wheelTorque>

    <!-- Topic to receive geometry_msgs/Twist message commands, defaults to `cmd_vel` -->
    <commandTopic>cmd_vel</commandTopic>

    <!-- Topic to publish nav_msgs/Odometry messages, defaults to `odom` -->
    <odometryTopic>odom</odometryTopic>

    <!-- Odometry frame, defaults to `odom` -->
    <odometryFrame>odom</odometryFrame>

    <!-- Robot frame to calculate odometry from, defaults to `base_footprint` -->
    <robotBaseFrame>chassis</robotBaseFrame>

    <!-- Odometry source, 0 for ENCODER, 1 for WORLD, defaults to WORLD -->
    <odometrySource>1</odometrySource>

    <!-- Set to true to publish transforms for the wheel links, defaults to false -->
    <publishWheelTF>true</publishWheelTF>

    <!-- Set to true to publish transforms for the odometry, defaults to true -->
    <publishOdom>true</publishOdom>

    <!-- Set to true to publish sensor_msgs/JointState on /joint_states for the wheel joints, defaults to false -->
    <publishWheelJointState>true</publishWheelJointState>

    <!-- Set to true to swap right and left wheels, defaults to true -->
    <legacyMode>false</legacyMode>
  </plugin>
</gazebo>
</robot>

Originally posted by vertical_beef576 on ROS Answers with karma: 17 on 2021-07-20
Post score: 1

A:

In this link you will find how to use many gazebo plugins for ROS2 including diff_drive.
Here is an example of how to use diff_drive in ROS2 that worked for me (I assume that you have a valid URDF):
<gazebo>
  <plugin name="diff_drive" filename="libgazebo_ros_diff_drive.so">
            <ros>
                <!--<namespace>/</namespace>-->
            </ros>

            <update_rate>30</update_rate>

            <!-- wheels -->
            <left_joint>wheel_left_joint</left_joint>
            <right_joint>wheel_right_joint</right_joint>

            <!-- kinematics -->
            <wheel_separation>0.6855600</wheel_separation>
            <wheel_diameter>0.4064000</wheel_diameter>

            <!-- limits -->
            <max_wheel_torque>20</max_wheel_torque>
            <max_wheel_acceleration>1.0</max_wheel_acceleration>

            <command_topic>cmd_vel</command_topic>

            <!-- output -->
            <publish_odom>true</publish_odom>
            <publish_odom_tf>true</publish_odom_tf>
            <publish_wheel_tf>true</publish_wheel_tf>

            <odometry_topic>odom</odometry_topic>
            <odometry_frame>odom</odometry_frame>
            <robot_base_frame>base_footprint</robot_base_frame>
        </plugin>
        </gazebo>
        

Originally posted by Youssef_Lah with karma: 195 on 2021-07-20
This answer was ACCEPTED on the original site
Post score: 2

