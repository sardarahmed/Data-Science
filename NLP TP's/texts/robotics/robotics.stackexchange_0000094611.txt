Q:

[ROS2] How to implement a sync service client in a node?

In ROS1, it was possible to make a (synchronous) service call from a callback.
In ROS2, in a derived node class, if I do the following:

create a service client using "create_client"
within a callback function (e.g. a timer callback) call async_send_request() on the client and then:
call get() on the future that is returned

It will block forever.  Instead, I must register a callback when I call async_send_request() in order to handle the response.
An async design does have its advantages, so I am wondering, is it the intent of ROS2 to force asynchronous service message handling in a node or is there a way to do a sync call that I haven't uncovered yet?

Originally posted by mschickler on ROS Answers with karma: 95 on 2020-02-04
Post score: 4

Original comments
Comment by MrCheesecake on 2020-06-05:
Hi,
I'm having the same trouble. I want to not use spin_until_future_complete in my code, because I'm already spinning the node outside of my class.
I tried to use wait/wait_for/wait_until on the future, but they all never return and block forever as you described.
So the only way is to use a callback? Or have you found another possibility in the meantime?
Comment by jdlangs on 2020-06-08:
@MrCheesecake, see the answer I just posted about how you can get the service response in a synchronous way.
Comment by vissermatthijs on 2020-06-08:
This is a problem for me as well I asked the same question on github https://github.com/ros2/rclpy/issues/567. Does somebody have python example? That would help me allot
Comment by MrCheesecake on 2020-06-10:
@jdlangs thanks for your answer, do you have a example or explanation on how to use callbackgroups. There is not much about this topic out there.  So when I use a callbackgroup of type Reentrant future.get() and future.wait() will work?  Because now they don't (also with MultiThreadedExecutor)  .
Comment by jdlangs on 2020-06-12:
@MrCheesecake I just edited my answer to include a full standalone example that demonstrates how to do it.

A:

You're right, this is something I also would like as well. Dealing with all the async stuff for a simple sync application where I'm willing to wait makes the application-level code less clean.
I think your best bet right now is to create a sync_service wrapper to deal with all the async and waiting for you. Then you can use that in your code to interact with it like a synchronous operation.
Right now, that's not "batteries included".

Originally posted by stevemacenski with karma: 8272 on 2020-02-04
This answer was ACCEPTED on the original site
Post score: 1

