Q:

unable to use custom messages on arduino

Hi Guys,
I'm trying to write a ros publisher on an arduino Uno using a custom message type and am running into compile errors for the arduino code. I followed the instructions here: link:Rosserial_arduino custom messages and I'm able to include the generated header file. I then get the following error when I try to instantiate a variable of the message type:
I2C_Send_and_Receive.cpp:21:25: error: cannot declare variable ‘encoders’ to be of abstract type ‘GCRobotics::Encoder_msg’
In file included from I2C_Send_and_Receive.cpp:7:0:
/home/josh/sketchbook/libraries/ros_lib/GCRobotics/Encoder_msg.h:12:9: note:   because the following virtual functions are pure within ‘GCRobotics::Encoder_msg’:
In file included from /home/josh/sketchbook/libraries/ros_lib/std_msgs/Time.h:7:0,
                 from /home/josh/sketchbook/libraries/ros_lib/ros/node_handle.h:38,
                 from /home/josh/sketchbook/libraries/ros_lib/ros.h:38,
                 from I2C_Send_and_Receive.cpp:5:
/home/josh/sketchbook/libraries/ros_lib/ros/msg.h:44:19: note:  virtual int ros::Msg::serialize(unsigned char*) const
/home/josh/sketchbook/libraries/ros_lib/ros/msg.h:47:28: note:  virtual const char* ros::Msg::getMD5()

My code for creating it looks like this:
#include <ros.h>
#include <Wire.h>
#include <GCRobotics/Encoder_msg.h>
#include <GCRobotics/i2cData.h>
#include <std_msgs/String.h>

#include <TimerOne.h>

ros::NodeHandle n;
//std_msgs::String encoders;
GCRobotics::Encoder_msg encoders;
ros::Publisher pub("EncoderData", &encoders);

Im using Groovy and arduino 1.0.1, Any ideas on what I'm doing wrong or missing?
Thanks!

Originally posted by hd271 on ROS Answers with karma: 38 on 2013-03-07
Post score: 0

A:

Under groovy (and even under Fuerte to a lesser extent) the older rosserial package is pretty busted (as it depended on internal roslib functions that have changed/disappeared). I would suggest trying out the new catkin-based version hosted here: https://github.com/ros-drivers/rosserial -- it will automatically build all messages for all installed packages found by rospack when running the make_libraries script. Please do read the README as the workflow has changed (but is probably simpler) from the past.

Originally posted by fergs with karma: 13902 on 2013-03-07
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by hd271 on 2013-03-08:
Awesome, that worked for one of my machines, but the other machine i'm running gives me this error when running make_libraries.py: rospkg.common.ResourceNotFound: kobuki_qtestsuite. But as long as one of them generates them, I guess I can just copy to the other. Thanks for your help!
Comment by fergs on 2013-03-08:
I've patched rosserial temporarily to blacklist kobuki_testsuite. There is a ticket for it as well for a future, proper, patch (https://github.com/ros-drivers/rosserial/issues/30)

