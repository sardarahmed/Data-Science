Q:

C++ library as submodule not found by linker

I added a CMake-based library as a submodule of a package of mine.
With colcon I can correctly build and install the library file and the include files in the install folder of my workspace.
My problem is that the linker cannot find the library when building my package.
I know it's a problem of path, but I have not understood how to correctly set the path to find it.
Thank you in advance
Walter

A:

I did this before, and indeed we need to be careful with linking. I will assume that, for example, we have a ROS 2 package that uses a third-party  C++ library called libcustom that is included in the package as a subdirectory. This third-party library needs to be compiled with our package. Then, in the package's CMakeLists.txt, we should add the following line.
add_subdirectory(libcustom)

Notice that the third-party library must have its own CMakeLists.txt file, which CMake will process during the build configuration. This subdirectory is named libcustom in the previous command.
Let's see how to link our targets (executables or libraries) against this library. It is done as follows.
target_link_libraries(executable_name libcustom)

Why would we use target_link_libraries instead of ament_target_dependencies?
The command ament_target_dependencies is specific to the ROS 2 build system, provided by the ament_cmake package. It is used to specify that a target depends on certain ROS 2 packages or libraries. When we use ament_target_dependencies, it automatically handles include directories, and compilation and linking dependencies. It ensures all necessary components are properly included and linked.
However, in our case, when using a third-party library, we need to link explicitly with target_link_libraries. This standard CMake command links a target against any library (not necessarily ROS 2 packages), including system libraries and third-party libraries.
How to be sure about the library name in the command target_link_libraries?
This is the last piece we need to get right. It is simple. Look into the third-party library's CMakeLists.txt file for the command add_library, which defines the library as its first argument.
I hope this helps. Feel free to let me know if you need more help with that.

