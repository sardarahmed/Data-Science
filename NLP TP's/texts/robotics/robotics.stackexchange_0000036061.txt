Q:

Openni Kinect + ROS - detect user within a particular frame

Hello,
I have successfully installed ROS and OpenNI libraries. The openni_tracker is also working fine.
I would like to now modify the openni_tracker, so that when the user moves out of a predefined frame ( say a square of particular dimension), then I want to print some messages like the user went out from the right/left of this frame.
I am confused as how to define the dimension of this square( in what units) and how to check with the users skeleton co-ordinates.
TIA!

Originally posted by Poppy on ROS Answers with karma: 3 on 2011-11-28
Post score: 0

A:

I have not played with the openni_tracker, but I have spent a decent amount of time with the Microsoft SDK.  Its probably best to simply use the data from the OpenNI libraries in your own node.  You would subscribe to openni's topics (or write a node which publishes openni information on a topic) and publish whatever message you want when a person is inside your box. I have in mind two approaches you could take to define the square, each with their own disadvantages/advantages:

As Martin suggested, use real world units (meters).  This allows you to specify a bounding box in terms of real world coordinates.  This is helpful when you have a transform for your kinect and you want to focus on an area in the real world.  Here you would simply be checking bounding box values using euclidean data (for example: left < x < right && bottom < y < top). (I use x and y here because with the Microsoft SDK, z is the depth dimension, perhaps its the same with the OpenNI libraries.)

If you're interested instead in what a kinect can see, regardless of where it is in the world, the best way would be with pixels.  For the Microsoft SDK, the skeleton frames are printed in pixel coordinates (here you use pixels instead of meters).  The advantage of this is that no matter where in the world you are, how far away the person is, if they are inside that view area, you'll capture them.  Remember that pixel coordinate system is different, y is positive in the "down" direction, and all values are lower bound by 0.  You would choose the bounding box using pixels (for example, with some arbitrary values: 400(left) < x < 800(right) && 100(top) < y < 400(bottom)).  You can determine the pixel coordinates to use by looking up the field of view in the kinect specifications and choosing an average distance from the kinect you wish to track at.

I hope this is helpful.
Constantin

Originally posted by Constantin S with karma: 296 on 2011-11-29
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by Poppy on 2011-12-01:
@constantin, Thanks for the detailed answer. Now my job is to understand the kinect co-ordinate system :)

