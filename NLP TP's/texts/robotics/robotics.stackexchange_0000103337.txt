Q:

Build ROS code cpp without Catkin Package

Hello Community,
So I have been working with ROS lately, it was really easy testing code in python where I just had to import rospy to work with ROS as I wished. I would then execute my programs with $python code.py.
So now I want to kinda do the same thing in C++, I wrote a simple code for test, but with no CMakelists where I specify the roscpp dependency, it is not able to recognize the #include "ros/ros.h", I was wondering if it would be possible if I added the ros.h header file :

Where can I find this header file ?
Will other ROS related packages (like std_msgs) get included with it ?

Thanks for the replies :)
Lilia.

Originally posted by Lilipop on ROS Answers with karma: 9 on 2023-06-08
Post score: 0

A:

If you look at what actually gets imported when you type import rospy you will find that it pulls in an enormous amount of code. C++ includes tend to be a lot more granular and manual.
For anything beyond some basic publisher and subscriber functionality for monitoring/interacting with ROS systems you'll probably find that it's unworkably cumbersome to satisfy C++ dependencies without building your projects in a full ROS/Catkin environment. In addition to locating and including all relevant headers, you need to find all shared library objects and link to those.
You could theoretically skip Catkin and ROS packaging and just work with plain CMake to find the packages you need to include and link with your C++ code. HOwever, that will likely make it harder to break your project into several logically independent components. Catkin is there to help you build several packages that depend on each other in the order they're needed in the source dependency graph.

Originally posted by danzimmerman with karma: 337 on 2023-06-09
This answer was ACCEPTED on the original site
Post score: 1

