Q:

Best way to get Turtlebot's current velocity?

Hello all,
What's the best way to get the current velocity of the turtlebot?
I saw that I could listen to the Odom messages directly, or ask tf to getTwist().  Which method will give me the most accurate estimate?  Or is there another way that's better?
Update
I'm doing SLAM on a known map, so I have localization information.
What I ended up doing
Here's what I ended up doing after some trial and error.  This example is using the tf_tutorials, but the real robot is similar.  Just change "turtle" to "base_link" and "world" to "map".  "lin" has the linear acceleration and "ang" has the angular.  The velocity is relative to the world frame.
(trans, rot) = listener.lookupTransform('/world', turtle, rospy.Time(0.0))
(lin, ang) = listener.lookupTwistFull(turtle, '/world', turtle, (0,0,0), '/world', rospy.Time(0.0), rospy.Duration(0.1))

Thanks in advance,
-Brian

Originally posted by brianpen on ROS Answers with karma: 183 on 2012-07-19
Post score: 1

A:

Supposing that you are trying to perform SLAM, turtlebot publishes odom data but robot_pose_ekf sends the transform ( as odom_combined i think) which is the filtered version. I think that it is better for you to subscribe topics which robot_pose_ekf puslishes

Originally posted by cagatay with karma: 1850 on 2012-07-19
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by brianpen on 2012-07-19:
As far as I can tell, robot_pose_ekf just publishes a geometry_msgs/PoseWithCovarianceStamped, which doesn't include velocity.  Am I missing something?
Comment by cagatay on 2012-07-19:
dx/dt = v will give you the velocity i guess
Comment by brianpen on 2012-07-19:
I think tf's getTwist() does that for you and the ekf_robot_pose publishes an odom frame... so it's sounding like that's the way to do it.  I was just wondering if there's a more direct way.  Thanks for responding.
Comment by weiin on 2012-07-19:
The odom topic published by turtlebot will give the instantaneous velocity as calculated by the wheel encoders. The pose topic published by robot_pose_ekf is a filtered result from all odometry inputs, so differentiating that over time will give a "filtered" (close to instantaneous) velocity value.
Comment by weiin on 2012-07-19:
and if you use the localization value (/map->/base_link transform) and differentiate that, it would probably be an average velocity since the localization may have discrete jumps

