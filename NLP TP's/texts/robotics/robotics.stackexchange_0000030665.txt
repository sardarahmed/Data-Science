Q:

Compile error using Eigen 3 in Diamondback (Inverse Matrix)

Hi,
I'm working on writing a FastSLAM 2.0 implementation to use with our system. I have the line of code:
Eigen::Matrix3d sigma_x = (G_v[current_feature].transpose() * (Z[current_feature].inverse() * G_v[current_feature])) + motion_noise_.inverse();
G_v[current_feature] is a 2x3 matrix, Eigen::Matrix<double,2,3>
Z[current_feature] is a 2x2 matrix, Eigen::Matrix2d
motion_noise_ is a 3x3 matrix, Eigen::Matrix3d
So it becomes sigma_x = (3x2) * ((2x2) * (2x3)) + (3x3)
When I try to compile this I get the following error:

/home/msands/ros/smart_wheelchair/chair_SLAM/src/chair_SLAM.cpp:209: error: invalid use of incomplete type ‘const struct Eigen::internal::inverse_impl >’
  /home/msands/ros/geometry/eigen/include/Eigen/src/Core/util/ForwardDeclarations.h:233: error: declaration of ‘const struct Eigen::internal::inverse_impl >’

It has something to do with the calling of inverse() but I can't figure out what it is. Anyone have any thoughts?
-Mike

Originally posted by MikeSands on ROS Answers with karma: 86 on 2011-03-24
Post score: 0

A:

Well I figured it out but I figured I'd post it up here in case anyone else runs into this issue. Even though inverse() is part of the MatrixXd type you still need to include Eigen/LU for it to complete the type and allow it to compile. (I only had Eigen/Core included)

Originally posted by MikeSands with karma: 86 on 2011-03-24
This answer was ACCEPTED on the original site
Post score: 7

