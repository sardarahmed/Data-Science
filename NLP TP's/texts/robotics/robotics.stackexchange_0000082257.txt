Q:

Create debian packages based on isolated install (catkin tools)

Hi,
I've searched for creating Debian packages already and found several answers but no one answered my question

https://answers.ros.org/question/173804/generate-deb-from-ros-package/ [1]
https://answers.ros.org/question/192419/how-to-setup-bloom-to-generate-a-local-deb-outside-of-rosorg-buildfarm/
https://answers.ros.org/question/67345/build-debian-package-locally/

I've already build all packages using catkin tools (not catkin) with isolated install space.
My question is if it is possible to package them as Deb based on the content of the install directory and using bloom-generate rosdebian --os-name ubuntu --os-version xenial --ros-distro kinetic which already creates a nice debian/rules.
I tried [1]
bloom-generate rosdebian --os-name ubuntu --os-version trusty --ros-distro indigo && fakeroot debian/rules binary
but have two problems

I don't want to build the packages once again because they were already build with isolate-install
it works only in combination with upstream packages but some of my packages have dependencies to other packages in the same workspace and these are not found by bloom.

I could create a custom rosdep.yaml file and execute rosdep update - this works to resolve the local dependencies, but isn't there an easier way based on bloom?
I don't want to use checkinstall because of the disadvantages of the tool.
Thanks

Originally posted by cmuck on ROS Answers with karma: 1 on 2017-08-10
Post score: 0

Original comments
Comment by allenh1 on 2017-08-10:
Did you source install_isolated/setup.bash before you tried running bloom? Moreover, why not just release the package?

A:

Generally if you don't want to do proper packaging checkinstall is the first recommendation I'd make. You say there's disadvantages, but it sounds like the best tool based on your statements so far.
There are tools that can be (mis)ussed to build debian packages from local files such as equivs as well.
However, I'd strongly recommend that you reconsider what your requirements are. And understand why you're choosing the requirements you have. A lot of your requirements are boxing yourself out from the well established debian build pipeline. And as such it's going to make your process much more complicated and fragile than reusing the debian toolchain that's designed for building debian packages.

Originally posted by tfoote with karma: 58457 on 2017-08-11
This answer was ACCEPTED on the original site
Post score: 0

