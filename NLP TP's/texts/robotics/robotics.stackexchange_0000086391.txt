Q:

ImportError: No module named msg

I have to msg files in a msg folder. Added both msg to the CMakeList.txt and followed the instructions in the file, so the package.xml has the right dependencies. I also followed these answers on this similar questions: https://answers.ros.org/question/105711/rospy-custom-message-importerror-no-module-named-msg/ and https://answers.ros.org/question/271620/importerror-no-module-named-xxxxmsg/
But i still get the following error:
Traceback (most recent call last):
  File "/home/ubuntu/catkin_ws/src/pozyx_ros_examples/src/pozyx_node.py", line 7, in <module>
    from pozyx_ros_examples.msg import DeviceRange, EulerAngles
ImportError: No module named msg

My package.xml and CMakeLists.txt are in gist: https://gist.github.com/kwint/09ab135968f83d06fae7f0af0fe835a2
I'm running lubuntu 16.04 on a raspberry pi.
.
├── CMakeLists.txt
├── __init__.py
├── msg
│   ├── DeviceRange.msg
│   ├── EulerAngles.msg
│   └── __init__.py
├── package.xml
└── src
    ├── pozyx_node.py
    └── setup_nodes
        └── pozyx_configuration.py

The weird thing is that when I run this package on my local computer it works perfectly (which runs ubuntu 16.04)

Originally posted by kwint on ROS Answers with karma: 55 on 2018-04-06
Post score: 1

Original comments
Comment by mgruhler on 2018-04-06:
did you compile the package with catkin_make? This is required to generate the respective python modules/C++ headers...
Comment by kwint on 2018-04-06:
Yes I have, also source the setup.bash file

A:

Did you put the __init__.py in the msg sub dir? If so: remove it, remove your build and devel folder, rebuild your workspace and see whether things start working.

Edit:

That might have been the solution, init.py was empty. But I make a completely new ros module and just copied the msg files and scripts to it, now it works. I have know idea why exactly, but ok

You should not place any __init__.py files anywhere except when you're creating Python modules. ROS msgs (so the .msg files) are not modules. The code generated from them becomes a module, but that is all done automatically for you.
The __init__.py in your package root and the msg subdir should not be there. Only if you're creating a Python module, you place one in the subdir that stores the sources for your module.

Originally posted by gvdhoorn with karma: 86574 on 2018-04-06
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by kwint on 2018-04-06:
That might have been the solution, init.py was empty. But I make a completely new ros module and just copied the msg files and scripts to it, now it works. I have know idea why exactly, but ok

