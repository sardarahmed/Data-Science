Q:

rospy threading model

Is it correct to assume that a new thread will be used for every instance of every subscription and service callback?

Originally posted by bhaskara on ROS Answers with karma: 1479 on 2011-03-23
Post score: 11

A:

For a particular topic, there is only one thread that all the subscribers share.
Each service callback does get its own thread because there can only be one service callback for a particular service.
Future versions of rospy will likely have a different, more versatile threading model for subscriptions.

Originally posted by kwc with karma: 12244 on 2011-03-24
This answer was ACCEPTED on the original site
Post score: 8

Original comments
Comment by tfoote on 2011-03-26:
What @kwc is describing is the callbacks.
Comment by kwc on 2011-03-24:
Yes, there is only one thread for a subscription, which includes the work of doing all the callbacks.
Comment by Patrick Bouffard on 2011-03-24:
Thanks. What about the callbacks? I had the impression that those were executed serially from a single queue for all subscribers.
Comment by kwc on 2011-03-24:
For each subscribed topic in a node, there is a thread.  5 subscribed topics, 5 threads.  If you have two subscriptions to one topic, one thread.   Publishers are synchronous/blocking, so the publishing occurs in the same thread.  (the i/o engine of rospy is overdue for a rewrite)
Comment by Patrick Bouffard on 2011-03-24:
Ken, did you mean 'for a particular node ( or maybe nodehandle?), there is only one thread...'? If I have a python node that subscribes to 5 topics how many threads are in play? What about on the publishing node's side?
Comment by kwc on 2011-03-24:
Each service has a single, dedicated thread that handles the underlying transport and calling into the callback.  Service requests are processed serially in the order they come off the socket.
Comment by bhaskara on 2011-03-24:
OK.  For services, does it use a threadpool or spin up a new thread on each request?
Comment by Seanny123 on 2013-12-09:
The detailed replies have been great, but just to eliminate all ambiguity, from what I understand this also means that my script will wait for my callback to end before starting another callback, even if a subscription releases a new message. Is this correct?
Comment by paulbovbel on 2016-09-15:
Just to clarify, after finding something suprising - while one thread will serially run all subscription callbacks, services get a separate thread for each connection (https://github.com/ros/ros_comm/blob/kinetic-devel/clients/rospy/src/rospy/impl/tcpros_service.py#L247), thus one per client.

