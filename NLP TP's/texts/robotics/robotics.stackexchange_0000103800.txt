Q:

Transform between odom and base_link is faster than in real life [Solved]

i have a differential drive mobile robot and i want to add him the navigation and the localization satck.
Currently it's controlled by a teleop.
But when i look the transform between odom and base_link with this command :
ros2 run tf2_ros tf2_echo odom diffbot_base_link

the rotation in degree and the translation increase faster than the real robot is moving ans rotating.
I check if my controller description is same as my urdf and it's look like same for me.
I also try to remove arguments : wheel_separation: 0.430 and wheel_radius: 0.095 to let the controller searching for them in the urdf file. But, when i do it, the robot can't move exept backward.
I check if one wheel turn on rviz match with one wheel turn in the real robot and that ok.
So is suspect that the problem could be in urdf file or the config of the controller but i can't determine where. But, i don't really now where i can't search to find the problem.
Tell me if you need more information or if it's isn't clear.
Hope you can help me !
Thx per advance.
There is my launch file for the controller:
def generate_launch_description():
    ld = LaunchDescription()

    remappings = [('/tf', 'tf'),('/tf_static', 'tf_static')]

    robot_description_path = os.path.join(
        get_package_share_directory('ros2_control_demo_example_2'),
        'urdf',
        'diffbot.urdf.xacro')
    robot_description_config = xacro.process_file(robot_description_path)
    robot_description = {'robot_description': robot_description_config.toxml()}

    config_controller = os.path.join(
        get_package_share_directory('ros2_control_demo_example_2'),
        'controllers',
        'base_mobile_controller.yaml')

    remote_modbus_rtu = Node(
        package="remote_modbus_rtu",
        executable="remote_modbus_rtu_standalone",
        parameters=[
            {"modbus_is_remote": False},
            {"serial_is_remote": False},
            {"serial_dev_name": '/dev/ttyUSB0'},
            {"serial_baud_rate": 115200},
            {"serial_parity": True},
            {"serial_data": 8},
            {"serial_stop": 1},
            {"serial_flow_control": True},
            {"modbus_prefix": '/modbus/example_bus'}
        ]
    )

    controller_manager = Node(
        package='controller_manager',
        executable='ros2_control_node',
        parameters=[robot_description, config_controller],
        remappings=[('/odom', 'odom')],
        output="both",    
    )

    sick_safetyscanners2 = Node(
        package="sick_safetyscanners2",
        executable="sick_safetyscanners2_node",
        name="sick_safetyscanners2_node",
        output="screen",
        emulate_tty=True,
        parameters=[
            {"frame_id": "scan",
            "sensor_ip": "10.10.10.1",
            "host_ip": "10.10.10.10",
            "interface_ip": "0.0.0.0",
            "host_udp_port": 6060,
            "channel": 0,
            "channel_enabled": True,
            "skip": 1,
            "angle_start": 0.0,
            "angle_end": 0.0,
            "time_offset": 0.0,
            "general_system_state": True,
            "derived_settings": True,
            "measurement_data": True,
            "intrusion_data": True,
            "application_io_data": True,
            "use_persistent_config": False,
            "min_intensities": 0.0
            }
        ]
    )

    robot_description_content = Command(
        [
            PathJoinSubstitution([FindExecutable(name="xacro")]),
            " ",
            PathJoinSubstitution(
                [FindPackageShare("ros2_control_demo_example_2"), "urdf", "diffbot.urdf.xacro"]
            ),
        ]
    )
    robot_description = {"robot_description": robot_description_content}

    robot_state_pub_node = Node(
        package="robot_state_publisher",
        executable="robot_state_publisher",
        output="both",
        parameters=[robot_description],
        # remappings=[
        #     ("/diff_controller/cmd_vel_unstamped", "/cmd_vel"),
        # ],
    )

    diff_drive_spawner = Node(
        package="controller_manager",
        executable="spawner",
        arguments=["diff_controller", "--controller-manager", "/controller_manager"],
    )

    joint_state_broadcaster_spawner = Node(
        package="controller_manager",
        executable="spawner",
        arguments=["joint_state_broadcaster", "--controller-manager", "/controller_manager"],
    )

    delay_diff_drive_controller_spawner_after_joint_state_broadcaster_spawner = \
        RegisterEventHandler(
            event_handler=OnProcessExit(
                target_action=joint_state_broadcaster_spawner,
                on_exit=[diff_drive_spawner],
            )
        )

There is my launch file for the localization :
def generate_launch_description():

    ld = LaunchDescription()

    namespace = LaunchConfiguration('namespace')
    use_sim_time = LaunchConfiguration('use_sim_time')
    autostart = LaunchConfiguration('autostart')
    params_file = LaunchConfiguration('params_file')
    use_composition = LaunchConfiguration('use_composition')
    container_name = LaunchConfiguration('container_name')
    container_name_full = (namespace, '/', container_name)
    use_respawn = LaunchConfiguration('use_respawn')
    log_level = LaunchConfiguration('log_level')

    lifecycle_nodes = ['map_server', 'amcl']

    remappings = [('/tf', 'tf'),('/tf_static', 'tf_static')]

    configured_params = RewrittenYaml(
        source_file=params_file,
        root_key=namespace,
        param_rewrites={},
        convert_types=True)

    stdout_linebuf_envvar = SetEnvironmentVariable(
        'RCUTILS_LOGGING_BUFFERED_STREAM', '1')

    declare_namespace_cmd = DeclareLaunchArgument(
        'namespace',
        default_value='',
        description='Top-level namespace')

    declare_map_yaml_cmd = DeclareLaunchArgument(
        'map',
        default_value='',
        description='Full path to map yaml file to load')

    declare_use_sim_time_cmd = DeclareLaunchArgument(
        'use_sim_time',
        default_value='false',
        description='Use simulation (Gazebo) clock if true')

    declare_params_file_cmd = DeclareLaunchArgument(
        'params_file',
        default_value=os.path.join(
            get_package_share_directory('ros2_control_demo_example_2'), 
            'config', 
            'nav2_params.yaml'),
        description='Full path to the ROS2 parameters file to use for all launched nodes')

    declare_autostart_cmd = DeclareLaunchArgument(
        'autostart', default_value='true',
        description='Automatically startup the nav2 stack')

    declare_use_composition_cmd = DeclareLaunchArgument(
        'use_composition', default_value='False',
        description='Use composed bringup if True')

    declare_container_name_cmd = DeclareLaunchArgument(
        'container_name', default_value='nav2_container',
        description='the name of conatiner that nodes will load in if use composition')

    declare_use_respawn_cmd = DeclareLaunchArgument(
        'use_respawn', default_value='False',
        description='Whether to respawn if a node crashes. Applied when composition is disabled.')

    declare_log_level_cmd = DeclareLaunchArgument(
        'log_level', default_value='info',
        description='log level')

    load_nodes = GroupAction(
        condition=IfCondition(PythonExpression(['not ', use_composition])),
        actions=[
            SetParameter('use_sim_time', False),
            Node(
                package='nav2_map_server',
                executable='map_server',
                name='map_server',
                output='screen',
                respawn=use_respawn,
                respawn_delay=2.0,
                parameters=[configured_params,
                            {'yaml_filename': 'cei1.yaml',
                            "topic_name": "map",
                            "frame_id": "map"}],
                arguments=['--ros-args', '--log-level', log_level],
                remappings=remappings),
            Node(
                package='nav2_amcl',
                executable='amcl',
                name='amcl',
                output='screen',
                respawn=use_respawn,
                respawn_delay=2.0,
                parameters=[configured_params],
                arguments=['--ros-args', '--log-level', log_level],
                remappings=remappings),
            Node(
                package='nav2_lifecycle_manager',
                executable='lifecycle_manager',
                name='lifecycle_manager_localization',
                output='screen',
                arguments=['--ros-args', '--log-level', log_level],
                parameters=[{'autostart': autostart},
                            {'node_names': lifecycle_nodes}])
        ]
    )
    # LoadComposableNode for map server twice depending if we should use the
    # value of map from a CLI or launch default or user defined value in the
    # yaml configuration file. They are separated since the conditions
    # currently only work on the LoadComposableNodes commands and not on the
    # ComposableNode node function itself
    load_composable_nodes = GroupAction(
        condition=IfCondition(use_composition),
        actions=[
            SetParameter('use_sim_time', False),
            LoadComposableNodes(
                target_container=container_name_full,
                composable_node_descriptions=[
                    ComposableNode(
                        package='nav2_map_server',
                        plugin='nav2_map_server::MapServer',
                        name='map_server',
                        parameters=[configured_params,
                                    {'yaml_filename': 'cei1.yaml',
                                    "topic_name": "map",
                                    "frame_id": "map"}],
                        remappings=remappings),
                ],
            ),
            LoadComposableNodes(
                target_container=container_name_full,
                composable_node_descriptions=[
                    ComposableNode(
                        package='nav2_amcl',
                        plugin='nav2_amcl::AmclNode',
                        name='amcl',
                        parameters=[configured_params],
                        remappings=remappings),
                    ComposableNode(
                        package='nav2_lifecycle_manager',
                        plugin='nav2_lifecycle_manager::LifecycleManager',
                        name='lifecycle_manager_localization',
                        parameters=[{'autostart': autostart,
                                    'node_names': lifecycle_nodes}]),
                ],
            )
        ]
    )

There is the config for the controller
controller_manager:
  ros__parameters:
    update_rate: 50  # Hz

    diff_controller:
      type: diff_drive_controller/DiffDriveController

    joint_state_broadcaster:
      type: joint_state_broadcaster/JointStateBroadcaster

diff_controller:
  ros__parameters:
    type: diff_drive_controller/DiffDriveController
    pose_covariance_diagonal : [0.001, 0.001, 0.001, 0.001, 0.001, 0.01]
    twist_covariance_diagonal: [0.001, 0.001, 0.001, 0.001, 0.001, 0.01]
    publish_rate: 50.0
    odom_frame_id: odom
    base_frame_id: diffbot_base_link
    left_wheel_names: ['diffbot_left_wheel_joint']
    right_wheel_names: ['diffbot_right_wheel_joint']
    wheels_per_side: 1
    wheel_separation: 0.430
    wheel_radius: 0.095

    cmd_vel_timeout: 0.5
    use_stamped_vel: false

    open_loop: true
    enable_odom_tf: true

    publish_wheel_data: true

    wheel_separation_multiplier: 1.0
    wheel_radius_multiplier: 1.0

    linear.x.has_velocity_limits: false
    linear.x.has_acceleration_limits: false
    linear.x.has_jerk_limits: false
    linear.x.max_velocity: 1.6
    linear.x.min_velocity: -0.6
    linear.x.max_acceleration: 1.6
    linear.x.min_acceleration: -0.6
    linear.x.max_jerk: 0.0
    linear.x.min_jerk: 0.0

    angular.z.has_velocity_limits: false
    angular.z.has_acceleration_limits: false
    angular.z.has_jerk_limits: false
    angular.z.max_velocity: 1.6
    angular.z.min_velocity: -0.6
    angular.z.max_acceleration: 1.6
    angular.z.min_acceleration: -0.6
    angular.z.max_jerk: 0.0
    angular.z.min_jerk: 0.0

There is the rqt_grap :

A:

First of all, diff_drive_controller does not parse URDF for the kinematic parameter: You have to define them correctly in the yaml file.
/odom topic is purely coming from diff_drive_controller, so you could deactivate all of the localization for debugging your issue.
You have configured it for open-loop odometry, i.e., you don't have position encoders or velocity sensors? If your wheels don't follow the desired speed, the odometry will be wrong obviously. In this case you could use robot_localization package to incorporate IMU measurements, see nav2 tutorials.

