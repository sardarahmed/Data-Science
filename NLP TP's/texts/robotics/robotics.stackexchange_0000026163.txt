Q:

Equivalent of simulator_gazebo's spawn_model for drcsim

The versions of Gazebo that ship with the simulator_gazebo stack include a spawn_model script that calls the service /gazebo/spawn_gazebo_model or /gazebo/spawn_urdf_model to spawn a new model into an already-running world. However, drcsim doesn't provide either of these services. Is there some other way to programmatically spawn a model into an already running instance of the drcsim version of Gazebo? (I found some tutorials on modifying world contents, but they involve creating a new .world file, which is not what I want to do.) Or could I change something somewhere to make drcsim advertise the /gazebo/spawn_*_model topics?
(The reason I'm asking is because I'd like to use the drcsim version of Gazebo for something non-DRC-related that I'm doing, because it's newest and (presumably) most stable version of Gazebo that's integrated with ROS.)

Originally posted by Elizabeth C on Gazebo Answers with karma: 33 on 2013-04-03
Post score: 1

A:

I would recommend the command-line tool gzfactory. For some reason, we don't have a tutorial for it yet. To use it, you need a an sdf file. I used one of the model sdf files in the ~/.gazebo/models folder. For example to spawn a hokuyo sensor (make sure it's in your .gazebo/models folder first):
gzfactory spawn -f ~/.gazebo/models/hokuyo/model-1_3.sdf
To spawn another, you'll need to specify a different name, and you'll probably want to put it somewhere else:
gzfactory spawn -f ~/.gazebo/models/hokuyo/model-1_3.sdf -m hokuyo_1 -x 1
Here's the help output that I see when typing gzfactory:

This tool for spawning or deleting models into or from a running Gazebo simulation.

  gzfactory  [options]
    spawn   : Spawn new model. Must specify a SDF model file.
    delete  : Delete existing model. Must specify model name.

Allowed options:
  -h [ --help ]           produce this help message
  -f [ --sdf ] arg        SDF model file.
  -w [ --world-name ] arg Name of Gazebo world.
  -m [ --model-name ] arg Model name.
  -x [ --pose-x ] arg     set model x position.
  -y [ --pose-y ] arg     set model y position.
  -z [ --pose-z ] arg     set model z positione.
  -R [ --pose-R ] arg     set model roll orientation in radians.
  -P [ --pose-P ] arg     set model pitch orientation in radians.
  -Y [ --pose-Y ] arg     set model yaw orientation in radians.

Originally posted by scpeters with karma: 2861 on 2013-04-04
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by Elizabeth C on 2013-04-21:
Thank you! Problem is, this doesn't work for URDF files, which is what all the models I'm using are. I guess I didn't specify that in my original question, though, so I'll go ahead and accept this answer (because it is correct that gzfactory does what I asked for).

