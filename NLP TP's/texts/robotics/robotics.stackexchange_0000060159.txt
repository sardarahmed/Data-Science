Q:

accessing pixel image c++

Hi there,
    cv::Mat depth_clean(cv_depthptr->image.rows, cv_depthptr->image.cols, CV_32FC1);
    cv::Mat img(cv_depthptr->image.rows, cv_depthptr->image.cols, CV_8UC1);
    for(int i = 0; i < cv_depthptr->image.rows; i++)
    {
        float* Di = cv_depthptr->image.ptr<float>(i);
        float* Ii = depth_clean.ptr<float>(i);
        char* Ivi = img.ptr<char>(i);
            for(int j = 0; j < cv_depthptr->image.cols; j++)
            {   
               if(Di[j] > 0.0f){                        
                Ii[j] = Di[j];
                Ivi[j] = (char) (255*((Di[j])/(5.5))); // some suitable values..
               }
                else{
                Ii[j] = 0.0f;
                Ivi[j] = 0;
                }
            }   
    }

Can anyone explain to me using that program how the accessing to the pixel has been done ? using pointer and the two loops and what the different between cv_depthptr->image.ptr(i) and Di[j] ?
Thank you so much

Originally posted by ROSkinect on ROS Answers with karma: 751 on 2014-06-18
Post score: 0

A:

What is your use case?
The image.ptr<float>(i) gives you a pointer to the first element (element at position zero) in the i'th row.
The call Di[j] gives you a read/write reference to the element j positions "behind" where Di  is pointing.
Basically this is how element access in OpenCV could be done with pointers. However, OpenCV2 provides you more convienient way to access your elements such as the cv::Mat::at<T>() method (slow but convenient if you just need to modifiy a couple of pixels) or the cv::MatIterator<T> (the proper way to iterate all elements of your matrix)...
See OpenCV Doc:
http://docs.opencv.org/modules/core/doc/basic_structures.html?highlight=mat%3A%3Aptr#template%3Ctypename%20_Tp%3E%20_Tp*%20Mat::ptr%28int%20i0%29
http://docs.opencv.org/modules/core/doc/basic_structures.html?highlight=mat%3A%3Aat#template%3Ctypename%20T%3E%20T&%20Mat::at%28int%20i%29%20const
http://docs.opencv.org/modules/core/doc/basic_structures.html?highlight=matiterator#template%3Ctypename%20_Tp%3E%20MatIterator_%3C_Tp%3E%20Mat::begin%28%29

Originally posted by Wolf with karma: 7555 on 2014-06-19
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by ROSkinect on 2014-06-19:
OK I don't care about the use of the program I want to understand how the stuffs work because I just start learning Opencv.
Thank you so much
Comment by Mehdi. on 2014-06-19:
You should ask this question here:

http://answers.opencv.org/questions/

or here

http://stackoverflow.com

or check the documentation of OpenCV as suggested Wolf.
Comment by Wolf on 2014-06-19:
Well, it slightly depends on your use case whether it is suitable to use pointers, Mat::at or MatIterators to access the pixels.... The example you gave just requests a pointer to the 1. element of each row and then applies simple pointer arithmetic to get the following elements of the row...

