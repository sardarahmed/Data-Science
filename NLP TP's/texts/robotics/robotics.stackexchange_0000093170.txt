Q:

How to stop recording by camera node through an user input?

I would like to stop the camera node through a different node. I was trying to implement this by sending a message through another node which is read by the camera node  But, the problem is that the camera node runs on an infinite loop. Can I get a cpp implementation to stop this while loop through a subscribed message.
#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <opencv2/highgui/highgui.hpp>
#include <cv_bridge/cv_bridge.h>
#include <sstream> // for converting the command line parameter to integer
#include "std_msgs/Int32.h"

bool camOn = true;

void sendCamera(const std_msgs::Int32::ConstPtr& msg)
{
   if (msg->data == 1){
    camOn = true;}
   else if (msg->data == 2){
    camOn = false;}
}

int main(int argc, char** argv)
{

  ros::init(argc, argv, "image_publisher");
  ros::NodeHandle nh;
  ros::Subscriber sub = nh.subscribe("/camera_status", 1000, sendCamera);
  image_transport::ImageTransport it(nh);
  image_transport::Publisher pub = it.advertise("camera/image", 1);
  

  cv::VideoCapture cap(0);
  if(!cap.isOpened()) return 1;
  cv::Mat frame;
  sensor_msgs::ImagePtr msg;

  ros::Rate loop_rate(10);
    while(nh.ok()){
      while (camOn) {
        ros::Subscriber sub = nh.subscribe("/camera_status", 1000, sendCamera);
        cap >> frame;
        // Check if grabbed frame is actually full with some content
        if(!frame.empty()) {
          msg = cv_bridge::CvImage(std_msgs::Header(), "bgr8", frame).toImageMsg();
          pub.publish(msg);
          cv::waitKey(1);
        }

        ros::spin();
        loop_rate.sleep();
    }    
  }
}

Originally posted by nav3128 on ROS Answers with karma: 5 on 2019-09-01
Post score: 0

Original comments
Comment by billy on 2019-09-01:
You could make the loop non-infinite.
Instead of
while(1){
}

you could use
while(keeprunning == 1){
}

and have a subscriber callback change to keeprunning = 0.
Comment by nav3128 on 2019-09-01:
I have edited my question to show you my attempt. It's still not working.

A:

You can subscribe a topic only once, there's no need to subscribe to the /camera_status every iteration in the loop.
Do you want to stop the camera recording or shutdown the node? I'm assuming you only want to stop the camera, not the node.
You should use spinOnce(), spin() will not return until your node receive a shutdown signal.
There's no need for the inner while, you can check camOn using an if.
Using the inner while, you can't shutdown the node properly when camOn is true.
Try this way:
while(nh.ok())
{
    if (camOn) 
    {
        cap >> frame;
        if(!frame.empty()) 
        {
          msg = cv_bridge::CvImage(std_msgs::Header(), "bgr8", frame).toImageMsg();
          pub.publish(msg);
          cv::waitKey(1);
        }        
    }
    ros::spinOnce();
    loop_rate.sleep();
}

Originally posted by danscava with karma: 36 on 2019-09-01
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by nav3128 on 2019-09-02:
Thank you so much for your answer. I am a beginner to ROS and I don't have a clear idea about spin function. Now, I think I have a fair understanding about it.
Thanks.
Comment by pavel92 on 2019-09-02:
In addition to this, I would advise using a service to trigger/toggle camOn or just a std_msgs/Bool would be enough since std_msgs::Int32 is an overkill for such a simple task:
void sendCamera(const std_msgs::Bool::ConstPtr &msg) {
  if (msg->data) {
    camOn = true;
  } else  {
    camOn = false;
  }
}

Comment by nav3128 on 2019-09-02:
Is it 'overkill' because of the bandwidth required or something else?
Comment by pavel92 on 2019-09-02:
Well the idea of your callback is to just set a global variable to true or false. I would personally use a service such as setBool to toggle the capturing to on/off. If you want to do it via a subscriber and a topic then I would use the Bool msg. In case of the bandwidth, the Int32 takes 4 bytes while the bool is just 1 byte. If you have more then 2  states to process in the callback then you can use an integer message, even Int8 would be enough it that case

