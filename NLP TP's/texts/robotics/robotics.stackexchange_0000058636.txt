Q:

hector_mapping reducing cpu consumption?

Hi
I'm using hector_mapping on pandaboard es with arch linux+hydro installed. I have hokuyo urg 04lx. However when i start mapping with default settings.
rosrun urg_node urg_node
roslaunch hector_mapping mapping_default.launch
(Static transform from base_footprint to laser)
Nothing else
However, when i type "top" to see its cpu usage. It shows nothing below %105.. how can i reduce this. It this normal? Am i doing something wrong?
Is it better option for me to use laser_scan_matcher + gmapping
Edit:
I installed ros-base from Aur repository using yaourt.
After that i cloned hector_slam from from github to my catkin directory and catkin_make only hector_mapping (i installed every dependencies of it)

Originally posted by lvntbkdmr on ROS Answers with karma: 23 on 2014-04-09
Post score: 0

A:

To complete @StefanKohlbrecher's answer, the problem is that you built a part of the packages without the proper release flags. Basically, when you use the AUR's PKGBUILDs, the release flag is forwarded to CMake, but if you compile from source with catkin_make, you need to take care of this yourself.
That being said, I just added hector_mapping and its dependencies to the AUR. Remove whatever you installed with catkin_make, install ros-hydro-hector-mapping with yaourt, and you should be just fine. If you encounter any other missing packages in the AUR, please send a package request here, or even better: make a fork, generate the PKGBUILDs yourself, and send me a pull request. Note that generating, compiling, installing and sending to the AUR the missing PKGBUILDs took me less than 5 minutes, so this is definitely worth installing things this way, rather than relying on catkin_make.

Originally posted by bchr with karma: 596 on 2014-04-29
This answer was ACCEPTED on the original site
Post score: 1

