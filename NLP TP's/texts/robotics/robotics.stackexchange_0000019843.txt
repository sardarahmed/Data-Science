Q:

Multithreading on robot control

Is it wise / possible to use multithreading to handle control system on robot?
For example, a line follower robot with PID control flowchart would be:
read_sensor() -> calculate_control() -> set_actuator_value()
The control system will be much like this : 
void calculate_control(){
last_error = error
error = reference - sensorval

//calculation
out_control = k1*error + k2*last_error + k3*last_out_control
last_out_control = out_control
//.. ...
//.. ..
}

What if the sensor I'd be using has high reading delay (example : image processing based). Should it follow the same flowchart or should I use multithreading so that while the sensor value is not updated, control system keeps running with updated value (because last_out_control will keeps changing).
ps:
changing the procedure for calculating control value is not possible. I'm just looking for input and suggestion to optimally integrates the system.

A:

Multithreading doesn't help a simple robot much. For example, if you have just a couple of sensors for line following, multithreading isn't necessary.
However, as the robot becomes more complex both electronically and in programming, multithreading makes sencpse.
Add more sensors to your line-follower, perhaps a lidar for distance measurements, audio for speech recognition for accepting new commands, and vision for object recognition. In this case multithreading really helps. Unlike a few quick sensor readings, the speech recognition takes more time and attention. A command, perhaps "Robot, stop," takes maybe a second to say. In a single-threaded robot everything else would have to stop while this command was parsed.
With multithreading, on thread could be used to listening, and the main thread might only be notified when the command was heard.
Yes, there is more overhead in a multithreaded program, but it can handle more complex cases more easily.
I would suggest that you use a framework to handle multithreading. That way most of the difficult part of multithreading will have already been done.

