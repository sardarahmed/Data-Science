Q:

Simple takeoff then do yaw rotation

Arming and takeoff work fine but i don't know how to do yaw rotation:
class controller:
    def __init__(self):
        
        rospy.Subscriber('mavros/state', State, self.state_cb)
        
        self.state = State()

    def state_cb(self, msg):
        self.state = msg
    
    def move(self,x,y,z):
        pub_posisi = rospy.Publisher("/mavros/setpoint_velocity/cmd_vel",TwistStamped,queue_size=1)
        pub_data = TwistStamped()

        pub_data.twist.linear.x = x
        pub_data.twist.linear.y = y
        pub_data.twist.linear.z = z

        pub_posisi.publish(pub_data)

        time.sleep(5)
    
    def position(self,x,y,z):
        pub_posisi = rospy.Publisher("/mavros/setpoint_position/local",PoseStamped,queue_size=10)
        posisi = PoseStamped()
        
        posisi.pose.position.x = x
        posisi.pose.position.y = y
        posisi.pose.position.z = z

        q = quaternion_from_euler(0.0,0.0,3.0)
        
        posisi.pose.orientation.x = q[0]
        posisi.pose.orientation.y = q[1]
        posisi.pose.orientation.z = q[2]
        posisi.pose.orientation.w = q[3] 

        pub_posisi.publish(posisi)

        rospy.loginfo(f"go to point {x,y,z}")

        time.sleep(15)

A:

To do this with your existing functions you can modify the position function to take a yaw value.
quaternion_from_euler(ai, aj, ak, axes='sxyz') takes a yaw value in radians for the ak parameter. You can find this in the tf.transformations docs.
def position(self,x,y,z,yaw):
        pub_posisi = rospy.Publisher("/mavros/setpoint_position/local",PoseStamped,queue_size=10)
        posisi = PoseStamped()
        
        posisi.pose.position.x = x
        posisi.pose.position.y = y
        posisi.pose.position.z = z

        q = quaternion_from_euler(0.0,0.0,yaw)
        
        posisi.pose.orientation.x = q[0]
        posisi.pose.orientation.y = q[1]
        posisi.pose.orientation.z = q[2]
        posisi.pose.orientation.w = q[3] 

        pub_posisi.publish(posisi)

        rospy.loginfo(f"go to point {x,y,z} with yaw {yaw}")

        time.sleep(15)

Hope this helps! :)

