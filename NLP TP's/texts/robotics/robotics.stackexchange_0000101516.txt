Q:

Is there a concise way to initialize a message with specific values?

Whenever I need to instantiate a message with specific values (in test code, for example), I end up writing something like this:
geometry_msgs::msg::Pose my_pose;
my_pose.position.x = 0.1;
my_pose.position.y = 0.2;
my_pose.position.z = 0.3;
my_pose.orientation.x = 0.5;
my_pose.orientation.y = 0.5;
my_pose.orientation.z = 0.5;
my_pose.orientation.w = 0.5;

Is there a more concise way to do this? I was hoping for something closer to a uniform initialization approach like below, but it doesn't seem to play nicely with how the message classes are implemented.
geometry_msgs::msg::Pose my_pose{ geometry_msgs::msg::Point { 0.1, 0.2, 0.3 }, geometry_msgs::msg::Quaternion { 0.5, 0.5, 0.5, 0.5 } };

Originally posted by jschornak on ROS Answers with karma: 340 on 2022-04-14
Post score: 0

A:

You can write like this.
geometry_msgs::build<geometry_msgs::msg::Point>().x(p.x).y(p.y).z(p.z);

See this issue for details.

Originally posted by Kenji Miyake with karma: 307 on 2022-04-15
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by aprotyas on 2022-04-15:
Nice pattern! This should be better documented somewhere.
Comment by jschornak on 2022-04-15:
Neat! What is the correct header to include for a particular message type? For geometry_msgs::msg::Point I see #include <geometry_msgs/msg/detail/point__builder.hpp>, but the structure of the path to the header kinda implies that this is part of the internal API.
Comment by aprotyas on 2022-04-15:
@jschornak I believe the message header will give you access to this templated build function too since <geometry_msgs/msg/point.hpp> includes <geometry_msgs/msg/detail/point__builder.hpp>.

