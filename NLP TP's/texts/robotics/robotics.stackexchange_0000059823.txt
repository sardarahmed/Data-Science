Q:

How to implement OMPL to move a turtlebot

I want to move a turtlebot with OMPL. I understand that OMPL is standalone and source file I edit should calls the library of planner as global planner. OMPL includes geometric/planners and control/planners. When moving a turtlebot, which should I choose geometric/planners or control/planners? I think I should choose control/planners, because control/planners outputs velocity command. I want to estimate a performance of PRM and RRT, but source and header files of PRM doesn't exist in control/planners. So, I can't estimate them. Am I correct?

Originally posted by Ken_in_JAPAN on ROS Answers with karma: 894 on 2014-06-03
Post score: 1

Original comments
Comment by Ken_in_JAPAN on 2014-06-03:
plan_node.cpp uses geometry_msgs as namespace. This shows that I'm wrong? I"m not sure.

A:

Hello Ken,
You can probably use both types of planners. It really depends on how you would like to control the system. For the turtlebot I think geometric planners may be more appropriate, and they will run faster. You could parametrize the velocity as a post-processing step on the path. If you have an ODE describing your model of motion and would like to plan for that, then control planners would be more suitable.
PRM constructs a roadmap and we do not assume the ability to solve the 2 point boundary value problem, so there is no implementation in control/.
More documentation about OMPL is at http://ompl.kavrakilab.org and the OMPL mailing list.

Originally posted by isucan with karma: 1055 on 2014-06-03
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by Ken_in_JAPAN on 2014-06-03:
@isucan Thank you for telling me detailed information. If geometric planners are more appropriate, I also can try FMT. However, It depends on me.
Comment by longjianquan on 2017-09-04:
have you run the algorithm in real turtlebot? Would you like to share you GIThub?

