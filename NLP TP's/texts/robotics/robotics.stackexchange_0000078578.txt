Q:

MoveIt problem. error: Trajectory message contains waypoints that are not strictly increasing in time

Hello,
I'm trying to use MoveIt's group interface to execute a Cartesian path. When I try to execute the plan with the trajectory, I get the error: Trajectory message contains waypoints that are not strictly increasing in time. I've even tried to fix it based on some code that someone else had luck with, but it doesn't work for me. Does anyone have any suggestions? Thanks! Here is my code:
    // Compute the trajectory of my waypoints 
moveit_msgs::RobotTrajectory trajectory;
double fraction = move_group.computeCartesianPath(waypoints, 0.01, 0.0, trajectory);

// All of the JointTrajectoryPoints in the trajectory have time_from_start = 0.00, which is the reason why the error gets thrown. The below steps are my attempt to fix the error, but they do nothing for me.
// First create a RobotTrajectory object
robot_trajectory::RobotTrajectory rt(move_group.getCurrentState()->getRobotModel(), "arm");
// Second get a RobotTrajectory from trajectory
rt.setRobotTrajectoryMsg(*move_group.getCurrentState(), trajectory);
// Thrid create a IterativeParabolicTimeParameterization object
trajectory_processing::IterativeParabolicTimeParameterization iptp;
// Fourth compute computeTimeStamps
bool success = iptp.computeTimeStamps(rt);
ROS_INFO("Computed time stamp %s",success?"SUCCEDED":"FAILED");
// Get RobotTrajectory_msg from RobotTrajectory
rt.getRobotTrajectoryMsg(trajectory);

plan.trajectory_ = trajectory;
ROS_INFO("Visualizing plan 4 (cartesian path) (%.2f%% acheived)",fraction * 100.0);

if (success) {
    move_group.execute(plan);
    return true;
    }else{
    ROS_WARN("no success");
    return false;
}

Originally posted by Tristan on ROS Answers with karma: 68 on 2017-01-25
Post score: 3

Original comments
Comment by HannesIII on 2017-02-09:
Hello, did you found a solution?
Comment by Tristan on 2017-02-09:
To some extent, I found a solution. The solution for me was trying my code on several test cases and finding that this code actually works perfectly on some of them. I think that MoveIt has trouble finding a cartesian path most of the time.
Comment by Tristan on 2017-02-09:
I'm a little surprised that in some cases MoveIt doesn't have a more loud way to say that it has failed to find a cartesian path than just quietly returning a path with incorrect times.
Comment by Tristan on 2017-02-09:
Update: see below for possible answer.

A:

It turns out that this error may be a problem with MoveIt itself. I tried my code on many different test cases and it worked properly (gave correct times between points and moved the arm) some of the time, after I tried quite a few paths. It seems that when MoveIt cannot find a proper path in some cases, the success boolean may still be true, but the waypoints still might all have time from start of 0, and the path can't be executed.

Originally posted by Tristan with karma: 68 on 2017-02-09
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by gvdhoorn on 2017-02-09:
If this is really a bug in MoveIt, it would be greatly appreciated if you could report it on the issue tracker.
Comment by Tristan on 2017-02-09:
Okay thanks. Its impossible to know what is a bug, though, because MoveIt's code isn't documented. I'll throw it on the issue tracker soon, just in case it is a bug.
Comment by gvdhoorn on 2017-02-09:\

isn't documented

that is a bit strong? What is it exactly that you feel is not provided here? A high-level overview of the semantics and intent of the code?
Comment by Tristan on 2017-02-09:
MoveIt doesn't provide unambiguous parameter and return specifications for many of their methods (sometimes theres no return documentation at all). You can always take MIT's 6.005 (http://web.mit.edu/6.005/www/fa16/) via OpenCourseWare if you want to learn more about documentation standards.
Comment by Tristan on 2017-02-09:
I don't think I have time to reply much more. I'll likely report this as a potential bug and be done.

