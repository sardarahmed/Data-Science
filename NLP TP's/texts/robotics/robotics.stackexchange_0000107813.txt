Q:

When should I implement actions as Behavior Tree (BT)?

I have an action called take_pallet, implemented by BT, which has several actions like: MoveToPoint, Docking, Lifting...
Currently, the Lifting action only lift the pallet up or down. But now, I want to add more complex logic for Lifting action, like check the height, add timeout, feedback status...
I wonder if I should implement this action using BT or just a simple ROS action and handle all the logic business inside execute_cb() function.
I would prefer the second option, since using BT may improve reusability and you won't have to rebuild your code if something change in the BT script, but I will have to define more BT node like HeightChecking node, TimeOut node... which will time consuming and maybe I won't reuse those action nodes.
Any rules or guidelines for this situation? At which control level should I use BT for robotics applications?
Edit: I'm using BehaviorTreeCpp v3.8 by Davide Faconti. github

A:

Based on section 3.7. Choosing the Proper Granularity of a BT from the book Behavior Trees in Robotics and AI: An Introduction of Michele Colledanchise and Petter OÌˆgren, I have some criteria to consider when I want to apply BT for actions:

If sub-behaviors of the action always executed in the exact order then implement it as a Leaf node.
If sub-behaviors of the action can be devided and can be reused if other places, then implement it as a sub-BT.

