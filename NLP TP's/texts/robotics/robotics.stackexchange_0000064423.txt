Q:

Can I use metapackage to define my release list of packages?

Hi.
We have developed lots of different packages in our group.
However from these packages, we want to release various "products" as individual debians.
In previous questions I discussed options to generate our own debians outside of the ROS buildfarm.
At the end we chose for sake of simplicity to run catkin_make install and use FPM to generate a debian form the install folder. This works fine for us since we have total control on the machine where it will be deployed. And we have it automated with buildbot.
fpm -s dir -t deb
So basically now, what I need is to specify WHICH packages I want to build and install for each release.
Since I ship directly the contents of /install I cannot permit catkin_to compile everything in the catkin_ws....
I don't want either to generate a release branch in my SVN in order to maintain a simple process and limit the overhead of our release management process.
So I had in mind to use a catkin metapackage defining the <run_depend> list so that it contains all and only the packages I decide to ship in my release (of course I expect catkin to manage dependencies).
The issue I have is that either
 catkin_make -DCATKIN_WHITELIST_PACKAGES=my_release_metapackage 
or
 catkin_make --pkg my_release_metapackage 
still compile ALL the packages in the catkin_ws... and not ONLY the ones specified in the <run_depend>...
So:

Are matapackages the correct way to do what I want?? If so, how should I do it?
Is there any other way to just compile and install a specific list of packages??

Thanks

Originally posted by Damien on ROS Answers with karma: 203 on 2014-12-04
Post score: 0

Original comments
Comment by billyDong on 2018-05-24:
Hi, I see you were able to work FPM. How did that work , did you create a debian file with all the packages of your catkin workspace?
I'm trying to do exactly that but without success ..

A:

What is part of a distribution is essentially what our distribution.yaml file defines for our build farm:
https://github.com/ros/rosdistro/blob/master/indigo/distribution.yaml
We can further prune this list using the corresponding release build file:
https://github.com/ros/rosdistro/blob/master/indigo/release-build.yaml
This is all defined in the REP's 137 (http://www.ros.org/reps/rep-0137.html) and 143 (http://www.ros.org/reps/rep-0143.html).
Now unless you are going to setup a version of our build farm (there is on going work to make this easier, this is not done yet, see: http://wiki.ros.org/buildfarm#Use_Cases) you'll need to figure out what to build like you said.
One way to do these high level groupings is with metapackages. We do something like this for our "variants":
https://github.com/ros/metapackages
However, for your scenario I would suggest just having all of your packages in one workspace and use catkin build from python-catkin-tools (caveat is that it is not 100% completed, but should work for your use case) or catkin_make_isolated in order to pick and choose what you build and install. You can install different sets of packages into different install spaces and wrap up those install spaces with fpm.
You can look at the documentation for catkin-tools' catkin build command for more details on how to control what to build:
http://catkin-tools.readthedocs.org/en/latest/

Originally posted by William with karma: 17335 on 2014-12-16
This answer was ACCEPTED on the original site
Post score: 1

