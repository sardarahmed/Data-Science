Q:

EKF dosen't work perfectly

when i launch exf for my /odom data , the results are the same of input
this is my lunch file :
<launch>

<node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
  <param name="output_frame" value="odom_combined2"/>
  <param name="freq" value="50.0"/>
  <param name="sensor_timeout" value="1.0"/>  
  <param name="odom_used" value="true"/>
  <param name="imu_used" value="false"/>
  <param name="vo_used" value="false"/>
  <param name="debug" value="false" />
  <param name="self_diagnose" value="true" />
</node>

</launch>

all of my topices are:
/base_odometry/odometer
/base_odometry/state
/base_scan
/clock
/odom
/robot_pose_ekf/odom_combined
/rosout
/rosout_agg
/tf
/tilt_scan
/torso_lift_imu/data
/torso_lift_imu/is_calibrated

first of all, i launch ekf file and then use this rosbag play 2011-04-11-07-34-27.bag  /base_odometry/odom:=/odom --clock command to run my dataset.

Originally posted by Mahyar on ROS Answers with karma: 18 on 2014-02-07
Post score: 0

A:

I'm not quite sure what your question is. If you're only data source is odometry, which is how your launch file is setup, then the EKF will basically just be able to spit that odometry back at you with an increasing uncertainty.

Originally posted by Dan Lazewatsky with karma: 9115 on 2014-02-07
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by Mahyar on 2014-02-07:
thank you, my gole is fusing /odom and /vo , but i read kalman could increase accuracy of data even for one sensor, so i started for /odom, but the result of /odom_combined is the same of /odom. do you have any idea?
Comment by Chad Rockey on 2014-02-07:
That's not how Kalman filters work.  With only one data source, at best, you get the same data out.  At worst you can achieve a "smoothed" laggy output version of your original data (depending on your update model and process/sensor noise values).
Comment by Chad Rockey on 2014-02-07:
That's assuming you're filtering on variables you're directly measuring.  Kalman filters are also very good at measuring "hidden" values.  For instance, calculating accelerations from GPS or velocity commands.  Or estimating model parameters from output data (battery time until full while charging).

