Q:

Fine joystick library control

I am leaning the ROSLiB library and I am using the NG-Joystick virtual joystick library to issue twist instructions to a TurtleSim robot.
My problem is when I use the joystick to move the robot, it lurches around widely which is not acceptable for the TurtleSim and certainly not acceptable for moving a real robot. Below is a screen shot of the effects I'm experiencing.

If you look at the console area on the left of the image, you would see the raw X & Y coordinates I am directly publishing to turtle1/cmd_vel. The right side part of the image shows the erratic effect of those coordinates. The section of my code for publishing those coordinates are simple enough but I thought I'd include it below:
this.joystickComp.joystickMove$.subscribe(d => {
      console.log(d);
      console.log('X: ' + d.pointerPos.x + ', Y: ' + d.pointerPos.y);
      console.log('sending cmd_vel ...');
      this.rosService.move(d.pointerPos.x, d.pointerPos.y);
      console.log('cmd_vel sent');
});

Can anyone advice how I can get better control ?

Originally posted by sisko on ROS Answers with karma: 247 on 2020-08-04
Post score: 0

A:

If you are really sending a twist message, you should work on your units. Note that ROS uses SI-units. You are asking (at least according to the log) for 450+ m/s translational velocity and 310+ rad/s rotational velocity.

Originally posted by mgruhler with karma: 12390 on 2020-08-04
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by gvdhoorn on 2020-08-04:
Makes for some nice spirograph renders though ..
Comment by gvdhoorn on 2020-08-04:
For the OP: REP-103: Standard Units of Measure and Coordinate Conventions.
Comment by sisko on 2020-08-04:
Thank you both for your answers. I especially appreciate the link, @gvdhoorn.
Comment by sisko on 2020-08-04:
To be clear (because this is not my strong point), I'm dividing the x & y values by 100.
The control is far more reasonable but if I'm still incorrect, I would appreciate your feedback
Comment by gvdhoorn on 2020-08-04:
What I would suggest is to define a minimum and maximum velocity (linear and rotational), map that to the minimum and maximum pixel positions of your joystick (in both dimensions), and then define a (linear) mapping between those two ranges.
That would allow you to use proper units for your minimum and maximum velocities, instead of fudging with a factor to get pixel positions in "the right range".

