Q:

Illegal Instruction when trying to run raspicam_node

As the title says, I'm trying to get fpasteau's raspicam_node working on my  Raspberry Pi B+.  After 3 days I finally got all of the dependencies resolved and catkin_make completes successfully.
Now when I go and try to run the raspicam_node using
 rosrun raspicam raspicam_node

with or without any parameters I just get a cryptic illegal instruction message:
 /home/pi/ros_catkin_ws/devel/bin/rosrun: line 4: Illegal instruction   
 "/home/pi/ros_catkin_ws/src/ros/rosbash/scripts/rosrun" "@"

I've looked all over the place but haven't found anything that is helpful.  The most I've found is some people suggesting an issue with OpenCV.  I had to compile and install OpenCV 2.4.9 from source on the Pi (took 15 hours) because it only had version 2.4.1 on it to begin with and catkin would get hung up while making it saying something along the lines of stuff not being defined in cv.h.
The other nodes that I wrote still run fine, just the raspicam_node won't work.
Any ideas?
Thanks
-Matt

Originally posted by that_guy318 on ROS Answers with karma: 25 on 2014-11-28
Post score: 0

Original comments
Comment by MKI on 2014-11-30:
may I ask which version of ROS you are using?
Comment by that_guy318 on 2014-11-30:
I'm running Indigo
Comment by MKI on 2014-11-30:
I just saw the link you have mentioned, It seems this package was built with Groovy in consideration (check README.md file) . I could manage only bare bones version of Indigo. However, I'll give this package a try n let u know
Comment by that_guy318 on 2014-11-30:
I saw that too, but I'd be surprised if Indigo vs Groovy causes the illegal instruction.
Comment by MKI on 2014-12-01:
probably you are right, I am able to run the node on groovy (@90 fps too). have you built the userland source code? I ask because, the README.md file does not mention anything on building this code. I guess that you might have missed this step and you are not able to find the right binaries.
Comment by that_guy318 on 2014-12-01:
I know I remember doing something with userland, but I don't know that I ever actually got it on the pi.  I'll see about getting it setup.
Thanks
Comment by that_guy318 on 2014-12-01:
Well I don't think I have userland installed on the pi.  I downloaded it and cross compiled it on my desktop like the github page said, but I haven't had any luck getting it on the pi yet.
Comment by MKI on 2014-12-02:
well, I don't know why you have to cross compile this code? you can just copy/download it into you Pi, and cd userland and ./buildme in your pi's terminal. it takes around 45 mins to build. and then following the README.md you should be able to rosrun it, Also please mind its on groovy nt Indigo
Comment by MKI on 2014-12-02:
your raspicam node will not work if you don't have userland installed in your pi as there is a direct dependency to this. If using Indigo, you should have installed from source all the packages mentioned. but with groovy you can simply apt-get your packages. you can very well try it with Indigo!
Comment by that_guy318 on 2014-12-02:
When I looked at the userland GIT page it said to cross compile it, but after not having much luck with that (it compiled on my desktop, but wasn't sure what to do with it on the pi) I just let it compile and install on the pi.  It actually didn't take as long as I was expecting it to, only ~20 min.

A:

Illegal instruction errors usually indicate that you're either using binaries that aren't compiled for your CPU, or you aren't passing the right flags to compiler, so it's producing binaries that aren't compatible with your system.
It sounds like most of the software that you're running was compiled from source, so it's unlikely that it's built for the wrong architecture.
Since you're using Indigo, you should be able to run your node in a debugger easily:
rosrun --prefix 'gdb -ex run --args' raspicam raspicam_node

And that will at least tell you which library contains the illegal instructions. From there, you can track down the source of that library and try to figure out why it contains illegal instructions.

Originally posted by ahendrix with karma: 47576 on 2014-11-30
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by that_guy318 on 2014-11-30:
I'll definitely check that out.  Probably won't be able to look at it until tomorrow though.
Thanks
Comment by that_guy318 on 2014-12-01:
So that doesn't really give anything useful when it runs.  It just says no debugging symbols found.
screenshot
Comment by ahendrix on 2014-12-01:
you have to type run at the gdb prompt to actually run your program.
Comment by ahendrix on 2014-12-01:
I've updated my answer so that gdb runs your program automatically.
Comment by that_guy318 on 2014-12-01:
Ok, so it's /usr/arm-linux-gnueabihf/libyaml-cpp.so.0.5 causing the issue apparently
Comment by ahendrix on 2014-12-01:
yaml-cpp is usually a system dependency. Did you get your copy of it from somewhere other than apt?
Comment by that_guy318 on 2014-12-01:
I think I might have installed the version 0.5 from elsewhere because it wasn't happy about the version 0.3 already installed.
Comment by that_guy318 on 2014-12-02:
I just uninstalled version 0.5 and reinstalled version 0.3 from the repos and now catkin won't compile fully.  It's throwing all kinds of errors about things not being as expected in YAML.
screenshot
Comment by ahendrix on 2014-12-02:
That's strange; camera_calibration_parsers should be compatible with both versions of yaml-cpp. It should detect which version of yaml-cpp you have and set the build flags appropriately. Do you have multiple versions of yaml-cpp installed somehow?
Comment by ahendrix on 2014-12-02:
It looks like it's using pkg-config to check the yaml-cpp version ( https://github.com/ros-perception/image_common/blob/4cb42daefa8fa9303a5a28156abe445c8a0da8d3/camera_calibration_parsers/CMakeLists.txt#L14-L20 ). Do you get the correct version if you query pkg-config for yaml-cpp?
Comment by that_guy318 on 2014-12-02:
This is what the output from pkg-config and dpkg look like: screenshot  It looks like only version 0.3 is showing up.
Comment by that_guy318 on 2014-12-02:
I did notice though that I don't seem to have any YAML environment variables if I run export | grep YAML
Comment by ahendrix on 2014-12-02:
That shows that pkg-config can find yaml-cpp, but doesn't show which version it's detecting. What do you get from pkg-config --version yaml-cpp ?
Comment by that_guy318 on 2014-12-02:
that gives me 0.26, but that's looking more like pkg-config's version than yaml-cpp's as it runs and gives 0.26 even if you just put pkg-config --version
Comment by ahendrix on 2014-12-02:
Ah; try pkg-config --modversion yaml-cpp; that should give you the version for yaml-cpp.
Comment by that_guy318 on 2014-12-02:
ok, that gives me 0.3.0

