Q:

Guideline/rule for logging when using 3rd party libraries/framework?

For example, when writing a plugin for rqt (aka ROS GUI) that's inherently dependent on Qt, I think there's 2 choice for logging, since both ROS and Qt have logging mechanism.
In the cases like above, which logging mechanism should we use? Or in which case do we stick to ROS or to the others?

Originally posted by 130s on ROS Answers with karma: 10937 on 2012-10-24
Post score: 0

A:

Self response. Not a ROS general guideline/rule/best practice or anything but I found this could be a good example:
rqt's API review says,
2. Question / concerns / comments
:
2
(Dirk) I would propose to not integrate logging functionality into ROS GUI. All ROS plugins can use the ROS-specific logging functionality provided by the client libraries. A plugin similar to rxconsole can then be used to show/filter all these messages. Non-ROS plugins can decide if they want to use logging library or stick with the Qt functions qDebug, qWarning, qCritical. 
:
3. Conclusion
:
ROS GUI does not provide logging funtionality but relies on either the Qt or the ROS logging functions (following the KISS principle)

So at least rqt doesn't restrict which logging system to use.
Meanwhile in qt_gui_core, Qt's command qDebug is in use http://goo.gl/Oz5uU.
Don't know if this attitude holds for the entire ROS system though.

Originally posted by 130s with karma: 10937 on 2012-10-25
This answer was ACCEPTED on the original site
Post score: 0

