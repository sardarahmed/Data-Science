Q:

Advise on getting started with a multiple robot project

I am an instructor at the Southwest Indian Polytechnic Institute in Albuquerque, NM.  We are about to start a large project in which we are building an indoor scale model of a Martian terrain on which we will have students build and test various rovers and robots.  I am interested in using ROS and have successfully installed Ubuntu 12.04 and ROS Hydro on a laptop.  I ran through several of the tutorials and I like what I see so far.
So I am just looking for some general advise on which tools are the latest and best for my application.   Our basic system layout is:
1:  A "Rover" will have a small laptop or similar computer onboard running Ubuntu/ROS
2:  The rovers will be on a wireless network possibly 5 or 6 at a time each controlled by a different operator through the LAN
3:  There will be a Desktop PC to serve as a web server/bridge so the rovers can be controlled/monitored over the LAN and possibly over the web. robotwebtools/rosbridge/ros3djs...
As our program proceeds we will hopefully be able to use ROS/Gazebo and contribute back to it as our students develop models and software to support it.
The program is going to start in July so I want to make sure I get going in the right direction.  I need as stable/reliable platform as possible, so I assume the Hydro will be better than Indigo for now unless we will be missing out on too many new features.
Thanks for any feedback and we look forward to working with/joining your community.
Jonathan West

Originally posted by JWest on ROS Answers with karma: 66 on 2014-06-24
Post score: 0

A:

I don't see any problems with your plan.  It appears sound.
One issue you might run into, though, is bandwidth scaling issues when adding robots to the same wireless network.  If each robot is sending decent quality live video at a decent rate, for example, there may not be enough bandwidth for everyone.
Using ROS rather that starting from scratch should get your rovers up and running quickly and easily.  They won't be as high performing as they could, though.  So there is that tradeoff.  For many applications, it is a good tradeoff, though.
Have fun!

Originally posted by Kurt Leucht with karma: 486 on 2014-06-25
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by JWest on 2014-06-26:
Thanks for the reply, your points are all very valid.
Since it is an educational platform, I am willing to trade high performance for modularity and simplicity.  Each semester we will be getting new groups of students so we can't have a mountain of hardware specific code to try to develop/maintain.  Students need to be able to find sensors/hardware that they can plug in with a minimal amount of customization.
As for the bandwidth, the beauty of our situation is that we are trying to simulate remote operation on Mars, so we are deliberately introducing latency and bandwidth restrictions, both of which make my job easier!

