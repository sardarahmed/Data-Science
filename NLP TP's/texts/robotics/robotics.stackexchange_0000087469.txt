Q:

dynamic reconfigure specific directory

Using
generate_dynamic_reconfigure_options(ros/config/params.cfg)

in my CMakeLists.txt of a package, some strange directories within the package are created and I don't know why. Here is my structure before a build (top level is the catkin workspace with the toplevel CMakeLists.txt).
├── CMakeLists.txt -> /opt/ros/kinetic/share/catkin/cmake/toplevel.cmake
└── src
    └── pack_template
        ├── CMakeLists.txt
        ├── library
        │   ├── include
        │   │   └── lib.hpp
        │   └── src
        │       └── lib.cpp
        ├── package.xml
        └── ros
            ├── config
            │   └── params.cfg
            ├── include
            │   └── template
            │       └── template.hpp
            └── src
                └── template.cpp

I then use catkin build with this CMakeLists.txt
cmake_minimum_required(VERSION 2.8.3)
project(pack_template)

add_compile_options(-std=c++11)

find_package(catkin REQUIRED
  roscpp
  rospy
  std_msgs
  dynamic_reconfigure
)

generate_dynamic_reconfigure_options(
  ros/config/params.cfg
)

catkin_package(
  LIBRARIES ${PROJECT_NAME}
  CATKIN_DEPENDS std_msgs
)

include_directories(
  include
  ros/include
  library/include
  ${catkin_INCLUDE_DIRS}
  cfg/cpp
  ${Boost_INCLUDE_DIRS}
)

add_library(${PROJECT_NAME} STATIC
  library/src/lib.cpp
)

add_executable(${PROJECT_NAME}_node
  ros/src/template.cpp
)

set_target_properties(${PROJECT_NAME}_node PROPERTIES OUTPUT_NAME "example_node" PREFIX "")

add_dependencies(${PROJECT_NAME}_node 
  ${${PROJECT_NAME}_EXPORTED_TARGETS}
  ${catkin_EXPORTED_TARGETS}
)

target_link_libraries(${PROJECT_NAME}
  ${catkin_LIBRARIES}
)

target_link_libraries(${PROJECT_NAME}_node
  ${PROJECT_NAME}
  ${catkin_LIBRARIES}
  ${Boost_LIBRARY_DIR}
)

and my folder structure after a build looks (deleted some hopefully uninteresting things)
├── build
│   ├── (...)
├── CMakeLists.txt -> /opt/ros/kinetic/share/catkin/cmake/toplevel.cmake
├── devel
│   ├── env.sh -> ~/catkin/dynamic_reconfigure_test/devel/.private/catkin_tools_prebuild/env.sh
│   ├── etc
│   │   └── (...)
│   ├── include
│   ├── lib
│   │   ├── libpack_template.a -> ~/catkin/dynamic_reconfigure_test/devel/.private/pack_template/lib/libpack_template.a
│   │   ├── pack_template
│   │   │   └── example_node -> ~/catkin/dynamic_reconfigure_test/devel/.private/pack_template/lib/pack_template/example_node
│   │   ├── pkgconfig
│   │   │   ├── catkin_tools_prebuild.pc -> ~/catkin/dynamic_reconfigure_test/devel/.private/catkin_tools_prebuild/lib/pkgconfig/catkin_tools_prebuild.pc
│   │   │   └── pack_template.pc -> ~/catkin/dynamic_reconfigure_test/devel/.private/pack_template/lib/pkgconfig/pack_template.pc
│   │   └── python2.7
│   │       └── dist-packages
│   │           └── pack_template
│   │               ├── cfg
│   │               │   └── __init__.py -> ~/catkin/dynamic_reconfigure_test/devel/.private/pack_template/lib/python2.7/dist-packages/pack_template/cfg/__init__.py
│   │               └── __init__.py -> ~/catkin/dynamic_reconfigure_test/devel/.private/pack_template/lib/python2.7/dist-packages/pack_template/__init__.py
│   ├── setup.bash -> ~/catkin/dynamic_reconfigure_test/devel/.private/catkin_tools_prebuild/setup.bash
│   ├── setup.sh -> ~/catkin/dynamic_reconfigure_test/devel/.private/catkin_tools_prebuild/setup.sh
│   ├── _setup_util.py -> ~/catkin/dynamic_reconfigure_test/devel/.private/catkin_tools_prebuild/_setup_util.py
│   ├── setup.zsh -> ~/catkin/dynamic_reconfigure_test/devel/.private/catkin_tools_prebuild/setup.zsh
│   └── share
│       ├── catkin_tools_prebuild
│       │   └── cmake
│       │       ├── catkin_tools_prebuildConfig.cmake -> ~/catkin/dynamic_reconfigure_test/devel/.private/catkin_tools_prebuild/share/catkin_tools_prebuild/cmake/catkin_tools_prebuildConfig.cmake
│       │       └── catkin_tools_prebuildConfig-version.cmake -> ~/catkin/dynamic_reconfigure_test/devel/.private/catkin_tools_prebuild/share/catkin_tools_prebuild/cmake/catkin_tools_prebuildConfig-version.cmake
│       └── pack_template
│           └── cmake
│               ├── pack_templateConfig.cmake -> ~/catkin/dynamic_reconfigure_test/devel/.private/pack_template/share/pack_template/cmake/pack_templateConfig.cmake
│               └── pack_templateConfig-version.cmake -> ~/catkin/dynamic_reconfigure_test/devel/.private/pack_template/share/pack_template/cmake/pack_templateConfig-version.cmake
├── logs
│   ├── (...)
└── src
    └── pack_template
        ├── cfg
        │   └── cpp
        │       └── pack_template
        │           └── templateConfig.h
        ├── CMakeLists.txt
        ├── docs
        │   ├── templateConfig.dox
        │   ├── templateConfig-usage.dox
        │   └── templateConfig.wikidoc
        ├── library
        │   ├── include
        │   │   └── lib.hpp
        │   └── src
        │       └── lib.cpp
        ├── package.xml
        ├── ros
        │   ├── config
        │   │   └── params.cfg
        │   ├── include
        │   │   └── template
        │   │       └── template.hpp
        │   └── src
        │       └── template.cpp
        └── src
            └── pack_template
                ├── cfg
                │   ├── __init__.py
                │   └── templateConfig.py
                └── __init__.py

Is there a way to define a target location to create these directories? I want them

to be created in the subfolder ros, where all my ros dependent things are.
the paramsConfig.h should go to ros/include not in src

Edit: There was a mistake in my original post, I edited the package structure. My plan was to put all ros-dependent stuff in package_main/ros/, hence there are an include and src directory. Second my ros-independent code should go to package_main/library src and include. Unfortunately by using the dynamic_reconfigure command ros creates the two directories package_main/cfg and package_main/src. Both is a bit awkward to me, since one may expect the *.cfg file in the cfg directory and the sources in the src directory.
Edit 2: Output of tree for better readability
Edit 3: Since it seems to be more complex, I created a minimal example, and edited respectively.

Originally posted by mherrmann on ROS Answers with karma: 9 on 2018-06-21
Post score: 0

Original comments
Comment by jayess on 2018-06-22:
This directory listing is a little confusing. Can you please update your question with a copy and paste of the output of using tree?

A:

After looking at the example package you provided (and fixing some issues with it, please make sure things compile on your own machine in the future), I believe the following is the problem (from #q69583 in fact):
from dynamic_reconfigure.parameter_generator import *

This is the line you would use for the old version of dynamic_reconfigure, ie: the one for rosbuild. For Catkin, the line should read:
from dynamic_reconfigure.parameter_generator_catkin import *

note the _catkin suffix there.
I would suggest to take a look at the How to Write Your First .cfg File tutorial, just to see whether the .cfg file contains some other rosbuild-isms.

Edit: changes to the pkg and files I had to make:

the .cfg file was not executable
the Start() prototype in the .cpp file did not agree with the one in the header
the prototype for Stop() in the .cpp file included an extra S, prefixed to the class name
the CMakeLists.txt referenced Boost twice without a find_package(Boost ..) anywhere
the CMakeLists.txt referenced a non-existing include directory

In addition, with the Catkin version of the dynamic_reconfigure generator, the cfg/cpp directory should not be on the include path any longer.

Originally posted by gvdhoorn with karma: 86574 on 2018-06-25
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by mherrmann on 2018-06-25:
Sorry, I did some mistakes creating the package. However, the line from dynamic_reconfigre.parameter_generator_catkin import * did the trick. Thank you very much.

