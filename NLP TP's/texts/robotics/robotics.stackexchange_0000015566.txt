Q:

How to plan path for robotic arm with RRT?

I have written simple RRT planner however I am not sure how to apply it to a robotic arm path planning.
The issue is that of analytical solution absence to inverse kinematics problem. Let me explain.
There are two possible spaces which can be used to plan path:
Joint space.
Since we know exact joints' angles at each planning step it allows us to easily account for end effector orientation and collisions. However it requires goal position to be defined in joint space which requires inverse kinematics solution but I am not sure how to solve IK for the exact angles without analytical solution which not always exists. I use inverse jacobian method which is iterative and requires small timestamps(i.e. trajectory and not a geometric path) to have precise movement therefore it is not clear how to use it to calculate goal position in joint space. 
Operational space
Does not require goal to be defined in joint space however on each planning step it is also necessary to solve IK to be able to account for orientation and collisions.
The only way I can see is to make RRT step small enough to be able iteratively compute IK on each planning step however it casts doubts on performance. 
Question
So the question is how can I account for orientation and collisions(including self collisions) when planning motion without analytical solution to inverse kinematics problem?

A:

Maybe there is a bit of misunderstanding about iterative methods for solving IK problems. Actually, an iterative IK solver does not necessarily require timestamps (or anything related to time). The general principle is that you start with some robot configuration (i.e. joint values) then you iteratively modify the configuration such that it eventually satisfies IK relation (kind of like gradient descent). There should be no problem using an iterative IK method regardless of the space in which RRT operates.

