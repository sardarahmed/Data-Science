Q:

point cloud in wrong position relative to robot

Hello fellow roboticists,
I have been trying to get a kinect sensor working on my urdf model in gazebo. i have successfully attached the sensor thanks to my previous question here. My only issue is that the data is being shown in the wrong place in Rviz. There, the point cloud that should be displayed as being in front of the robot is being displayed above it and rotated about the z axis. How shoud i go about fixing this?
Here is an image of what is happening (left is in Gazebo and the right is in Rviz):

and here is my urdf model that i am using:
<?xml version="1.0"?>
<robot name="tortoisebot">

  <link name="base_link">
    <visual>
      <geometry>
        <box size="0.6 0.3 0.3"/>
      </geometry>
      <material name="silver">
        <color rgba="0.75 0.75 0.75 1"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="0.6 0.3 0.3"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="1.0"/>
      <inertia ixx="0.015" iyy="0.0375" izz="0.0375" ixy="0" ixz="0" iyz="0"/>
    </inertial>
  </link>

  <link name="front_caster">
    <visual>
      <geometry>
        <box size="0.1 0.1 0.3"/>
      </geometry>
      <material name="silver"/>
    </visual>
    <collision>
      <geometry>
        <box size="0.1 0.1 0.3"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.1"/>
      <inertia ixx="0.00083" iyy="0.00083" izz="0.000167" ixy="0" ixz="0" iyz="0"/>
    </inertial>
  </link>

  <joint name="front_caster_joint" type="continuous">
    <axis xyz="0 0 1"/>
    <parent link="base_link"/>
    <child link="front_caster"/>
    <origin rpy="0 0 0" xyz="0.3 0 0"/>
  </joint>

  <link name="front_wheel">
    <visual>
      <geometry>
        <cylinder length="0.05" radius="0.035"/>
      </geometry>
      <material name="black"/>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.05" radius="0.035"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.1"/>
      <inertia ixx="5.1458e-5" iyy="5.1458e-5" izz="6.125e-5" ixy="0" ixz="0" iyz="0"/>
    </inertial>
  </link>

  <joint name="front_wheel_joint" type="continuous">
    <axis xyz="0 0 1"/>
    <parent link="front_caster"/>
    <child link="front_wheel"/>
    <origin rpy="-1.5708 0 0" xyz="0.05 0 -.15"/>
  </joint>

  <link name="right_wheel">
    <visual>
      <geometry>
        <cylinder length="0.05" radius="0.035"/>
      </geometry>
      <material name="black">
        <color rgba="0 0 0 1"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.05" radius="0.035"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.1"/>
      <inertia ixx="5.1458e-5" iyy="5.1458e-5" izz="6.125e-5" ixy="0" ixz="0" iyz="0"/>
    </inertial>
  </link>

  <joint name="right_wheel_joint" type="continuous">
    <axis xyz="0 0 1"/>
    <parent link="base_link"/>
    <child link="right_wheel"/>
    <origin rpy="-1.5708 0 0" xyz="-0.2825 -0.125 -.15"/>
  </joint>

  <link name="left_wheel">
    <visual>
      <geometry>
        <cylinder length="0.05" radius="0.035"/>
      </geometry>
      <material name="black"/>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.05" radius="0.035"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.1"/>
      <inertia ixx="5.1458e-5" iyy="5.1458e-5" izz="6.125e-5" ixy="0" ixz="0" iyz="0"/>
    </inertial>
  </link>

  <joint name="left_wheel_joint" type="continuous">
    <axis xyz="0 0 1"/>
    <parent link="base_link"/>
    <child link="left_wheel"/>
    <origin rpy="-1.5708 0 0" xyz="-0.2825 0.125 -.15"/>
  </joint>

  <link name="hokuyo_link">
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.1 0.1 0.1"/>
      </geometry>
    </collision>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.1 0.1 0.1"/>
      </geometry>
    </visual>
    <inertial>
      <mass value="1e-5" />
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
    </inertial>
  </link>

  <joint name="hokuyo_joint" type="fixed">
    <axis xyz="0 1 0" />
    <origin xyz="0 0 0.2" rpy="0 0 0"/>
    <parent link="base_link"/>
    <child link="hokuyo_link"/>
  </joint>

  <gazebo>
    <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
      <leftJoint>right_wheel_joint</leftJoint>
      <rightJoint>left_wheel_joint</rightJoint>
      <robotBaseFrame>base_link</robotBaseFrame>
      <wheelSeparation>0.25</wheelSeparation>
      <wheelDiameter>0.07</wheelDiameter>
      <publishWheelJointState>true</publishWheelJointState>
    </plugin>
  </gazebo>

  <gazebo>
    <plugin name="joint_state_publisher" filename="libgazebo_ros_joint_state_publisher.so">
      <jointName>front_caster_joint, front_wheel_joint</jointName>
    </plugin>
  </gazebo>

    <gazebo reference="hokuyo_link">
        <sensor name="hokuyo" type="depth">
            <!-- openni plugin has the x pointing towards the scene, so rotate to have z -->
            <pose frame="hokuyo_link">0.0 0.0 0.0 0.0 -1.5708 1.5708</pose>
        <!--origin xyz="0 0 0" rpy="0 0 0"/-->
            <camera>
                <horizontal_fov>0.74839718</horizontal_fov>
                <image>
                    <width>1280</width>
                    <height>1024</height>
                    <format>L_INT8</format>
                </image>
                <clip>
                    <near>0.1</near>
                    <far>10.0</far>
                </clip>
                <noise>
                    <type>gaussian</type>
                    <mean>0.5</mean>
                    <stddev>1.0</stddev>
                </noise>
            </camera>
            <plugin name="kinect_plugin" filename="libgazebo_ros_openni_kinect.so">
                <baseline>0.1</baseline>
                <alwaysOn>true</alwaysOn>
                <!-- Keep this zero, update_rate in the parent <sensor> tag
                will control the frame rate. -->
                <updateRate>0.0</updateRate>
                <cameraName>hokuyo</cameraName>
                <imageTopicName>/3d_image/image_raw</imageTopicName>
                <cameraInfoTopicName>/3d_image/camera_info</cameraInfoTopicName>
                <depthImageTopicName>/3d_image/image_raw_depth</depthImageTopicName>
                <depthImageInfoTopicName>/3d_image/camera_info</depthImageInfoTopicName>
                <pointCloudTopicName>/3d_image/3d_cloud</pointCloudTopicName>
                <frameName>hokuyo_link</frameName>
                <pointCloudCutoff>0.5</pointCloudCutoff>
                <pointCloudCutoffMax>2.0</pointCloudCutoffMax>
            </plugin>
            <always_on>true</always_on>
            <update_rate>1.0</update_rate>
        </sensor>
    </gazebo>
</robot>

Originally posted by logan.ydid on ROS Answers with karma: 21 on 2019-07-27
Post score: 0

A:

The static frame of the kinect camera is pretty weird indeed. You basically give the solution to your problem in your question "the point cloud that should be displayed as being in front of the robot is being displayed above it and rotated about the z axis". Simply figure out the correct quaternion transformation you need and apply it to the kinect topic. You can do this by creating another intermediate topic and adding an additional static frame in your launchfile. This problem stems from the fact that the rviz frame does not match the kinects own frame. So for visualizing the kinect model correctly in gazebo and rviz you need 1 transform, but to transform the data you need another.

Originally posted by MCornelis with karma: 331 on 2019-07-29
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by MCornelis on 2019-07-29:
I had to do this for a project a while back, I currently do not have access to the repository in which I worked at the time. If I can find how exactly I did it back then, I'll come back to you (I'll edit the answer above). In the meantime I hope this answer helps you in the right direction.
Comment by logan.ydid on 2019-08-09:
Im sorry, would you mind elaborating a bit more i found out how to create another static frame in the launch file <node pkg="tf" type="static_transform_publisher" name="laser" args="0 0 0 x y z   hokuyo_link kinect_cloud 100"/> but i dont know how to create a new topic such that the data from the old topic gets remapped using the new frame. Thank you!
Comment by rodrigo55 on 2020-03-30:
Were you able to figure out the solution to this problem? My sensor looks the same in rviz.

