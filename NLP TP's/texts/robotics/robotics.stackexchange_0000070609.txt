Q:

How can I estimate the coverage performed by an algorithm while exploring an unknown map

Hi,
I am using the nav2d exploration package to explore an unknown environment. I am using various strategies like NearestFrontier and MinPos Planner.
Is there a way through which I can estimate the area covered by these strategies?
Thanks

Originally posted by robo_explorer on ROS Answers with karma: 29 on 2015-11-26
Post score: 0

A:

I've not worked previously with the nav2d_exploration package, but I'm assuming that the resulting map should have three different colours: black for the sensed obstacles, white for the empty explored space and grey for the unexplored space. A not fancy way to do it, although could work, is "count" the amount of pixels with the empty explored space value.
You can do that in external tools such as MATLAB, or even inside your ROS code, that's up to you! I guess the method which provides a higher amount of "explored space" will be the one which has the highest cover ability.

Originally posted by S.Prieto with karma: 258 on 2015-11-27
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by robo_explorer on 2015-11-27:
Do you mean this in rviz? cause rviz only shows me that part of map which is explored and is not that much accurate. Even though do you know how can I count the pixels? Thats sounds interesting.
Comment by S.Prieto on 2015-11-30:
No, not in rviz. I guess you're running a map_server to publish the map that you're exploring. Map_server has the command map_saver which allows you to save the map as an image. Then, you can work on that image and "count" the pixels.
Comment by S.Prieto on 2015-11-30:
For the "counting", you have to read the image  to get the image matrix (you can skip the whole step of getting the image if you get directly the matrix with the values from the map topic). Once you have the matrix, just look at each element (usually you do this with 2 loops, rows and columns).
Comment by S.Prieto on 2015-11-30:
Looking at each element you can check it's value, and count how many pixels you have for each value. You can do the counting with any programming language, that's up to you if you want to do it inside ROS or externally, which in that case I recommend you to use MATLAB.
Comment by robo_explorer on 2015-12-03:
Thanks a lot for this detailed answer.

