Q:

Is there functionality built into ros to get nodes to print a stacktrace on crash?

When ROS nodes crash, modifying launch files to run under gdb is often required to get a stack trace. And a full reattempt to produce the conditions of the crash is necessary.
75% of crash failures (made up number :) could probably be solved without running in the debugger if we could see where the crash happened on each failure.
Is there functionality built into ROS to handle this?

Originally posted by Asomerville on ROS Answers with karma: 2743 on 2011-05-11
Post score: 3

A:

One option (which has nothing to do with ROS internals) is to set the ulimit on core file to be non-zero and then analyze the core after the crash. (By default the core size limit is set to 0 in Ubuntu)
Set to unlimited:
ulimit -c unlimited

This will cause the OS to produce a "core file" each time there is a crash which contains some of the info needed to recreate a stack trace. The other portion of the info is contained in the executable which crashed.
The core file ends up in  ~/.ros and can be analyzed with gdb like so:
gdb --core=~/.ros/core  /path/to/stack/package/bin/mynode  

... where a backtrace can be obtained by using the "backtrace" or "bt" command

Originally posted by Asomerville with karma: 2743 on 2011-05-11
This answer was ACCEPTED on the original site
Post score: 9

Original comments
Comment by dg-shadow on 2017-05-23:
Has anyone had any luck doing this? The core file doesn't seem to turn up in ~/.ros for me...
Comment by alf on 2017-10-04:
Had the same problem as you, ROS kinetic on Ubuntu 16.04. Tried the /proc/sys... stuff here as well: http://wiki.ros.org/roslaunch/Tutorials/Roslaunch%20Nodes%20in%20Valgrind%20or%20GDB
Comment by Beshari on 2022-08-25:
I was able to follow this, my core dump was in /var/crash, and you can find the executable of a package folder using
pkgname=<your package name>
catkin_find --first-only --without-underlays --libexec ${pkgname}
then after starting gdb with the top command, you can type bt, or where

