Q:

TF Listener for static transforms exclusively

Is there a way to listen to only the static transforms in a TF tree (e.g. base_link --> base_laser_link) without instantiating an entire tf::TransformListener object, which "receives and buffers all coordinate frames that are broadcasted in the system" ? Can tf::MessageFilters be used for something like that?

Originally posted by spmaniato on ROS Answers with karma: 1788 on 2016-11-12
Post score: 2

A:

The static transformations are published on /tf_static, so just listen to them. But as you care about bandwidth, you should have a look at the tf2_ros buffer_server. This node listens to /tf and /tf_static and runs an action server that you can use to get transformations so that your node does not listen to /tf(_static) but only asks the buffer_server if it needs a transformation.

Originally posted by NEngelhard with karma: 3519 on 2016-11-12
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by spmaniato on 2016-11-12:
Thanks for the quick reply! I'll take a look and get back to you with any follow-up questions :-)
Comment by spmaniato on 2016-11-12:
OK, so it looks like your answer makes total sense. But I'll have to migrate to tf2_ros from tf (which I should have done ages ago anyway ...) Thanks again
Comment by NEngelhard on 2016-11-12:
Moving from tf to tf2 is rather easy. In tf there isn't even a concept of a static transform.
Comment by mherrmann on 2018-07-25:
Additional question: I have a tf2_ros::Buffer tf_buffer_ and ask for trafos with tf_buffer_.lookupTransform(). How can I be sure a transformation is from /tf_static?

