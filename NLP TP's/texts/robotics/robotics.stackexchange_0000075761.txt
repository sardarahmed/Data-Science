Q:

Which data is thrown away in queue if publish and spinonce rate is different?

I read that SpinOnce does not only make callback, but it will also clean the queue if possible. is that right?
Let's say publisher publish alphabets (a,b,c,...) at 9hz, and subscriber call Spinonce at 3hz.
So publisher will publish a,b,c to queue. Then subscriber does spinonce, getting a (because queue is First in first out) and empty the queue.Now the queue is empty.
Next, publisher will publish d,e,f to queue. Then subscriber does spinonce, getting d and empty the queue.Now the queue is empty.
Next, publisher will publish g,h,i to queue. Then subscriber does spinonce, getting g and empty the queue.Now the queue is empty.
So at the end what the subscriber gets is a,d,g,...
Is that right? Please explain
EDIT (additional question)
Where should we call ros::spin() or ros::spinOnce()? Is it in the publisher code, or subscriber code? and why is so?
In this tutorial of publisher-subscriber
It calls ros::spinOnce() in the publisher code, and it also calls ros::spin() in subscriber code. Why is that so? please explain..

Originally posted by alienmon on ROS Answers with karma: 582 on 2016-08-12
Post score: 0

A:

No
SpinOnce can call multiple callbacks if necessary. spinOnce will call callback for each message in a queue separately, and only then remove it from a queue. Thus you will get callback for each one. Callbacks will be one after another as fast as possible.
Your receiver will get: a,b,c ...pause... d,e,f.... pause... g,h,i
This is assuming your queue length is sufficient. if queue gets full, you will start loosing messages.

Originally posted by Marcin Bogdanski with karma: 231 on 2016-08-12
This answer was ACCEPTED on the original site
Post score: 4

Original comments
Comment by alienmon on 2016-08-12:
"If necessary". When is it necessary? Is it when there is still stuffs on the queue after the SpinOnce is called?
Comment by Marcin Bogdanski on 2016-08-14:
"If necessary" == If there is more than one message on the queue.
SpinOnce will call a callback once for each message on the queue before removing it. And through that it will clear the whole queue. As far as I know it will never remove message without calling a callback.
Comment by alienmon on 2016-08-14:
So anyway we will still get all of the datas/messages?(assuming the queue size is big enough).
Comment by alienmon on 2016-08-14:
Also, If I use ros::spin instead of spinOnce, I will just need to call it once, and it will callback automatically everytime a message arrives. Is that right?
Comment by alienmon on 2016-08-14:
I have additional question, I edited the question already. Could you please help to asnwer? Thankss

