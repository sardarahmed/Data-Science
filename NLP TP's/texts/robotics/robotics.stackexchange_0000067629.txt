Q:

bloom fails for git rm -rf "src"

Hi I want to use bloom-release for my package,
After entering everything I am getting the error:

'execute_command' failed to call 'git rm -rf "src"' which had a return code (128):

Now I wonder what I did wrong, or might there be a bug?
Well, I attached whats happening for it in the console below, hope somebody could tell me what exactly I am doing wrong.
Maybe the repositories? Why do I need two repositories for the same package for example....
Thanks for your help...
Regards,
Christian
bloom-release --rosdistro indigo --track indigo h4r_thermapp_camera --edit
ROS Distro index file associate with commit '52b0f96c0d985defec2f5439ebd20271c4f179b7'
New ROS Distro index url: 'https://raw.githubusercontent.com/ros/rosdistro/52b0f96c0d985defec2f5439ebd20271c4f179b7/index.yaml'
Specified repository 'h4r_thermapp_camera' is not in the distribution file located at 'https://raw.githubusercontent.com/ros/rosdistro/52b0f96c0d985defec2f5439ebd20271c4f179b7/indigo/distribution.yaml'
Could not determine release repository url for repository 'h4r_thermapp_camera' of distro 'indigo'
You can continue the release process by manually specifying the location of the RELEASE repository.
To be clear this is the url of the RELEASE repository not the upstream repository.
For release repositories on GitHub, you should provide the `https://` url which should end in `.git`.
Here is the url for a typical release repository on GitHub: https://github.com/ros-gbp/rviz-release.git
==> Looking for a release of this repository in a different distribution...
No reasonable default release repository url could be determined from previous releases.
Release repository url [press enter to abort]: https://github.com/Hacks4ROS-releases/h4r_thermapp_camera.git
==> Fetching 'h4r_thermapp_camera' repository from 'https://github.com/Hacks4ROS-releases/h4r_thermapp_camera.git'
Cloning into '/tmp/tmpRxWX9Y'...
remote: Counting objects: 190, done.
remote: Compressing objects: 100% (95/95), done.
remote: Total 190 (delta 82), reused 190 (delta 82), pack-reused 0
Receiving objects: 100% (190/190), 43.28 KiB | 0 bytes/s, done.
Resolving deltas: 100% (82/82), done.
Checking connectivity... done.
Submodule 'src/ThermAppCam' (git@github.com:Hacks4ROS-forks/ThermAppCam.git) registered for path 'src/ThermAppCam'

Submodule path 'src/ThermAppCam': checked out 'dc8bd0642f0dd3451af536c89bde03ef188d9dd1'

Creating track 'indigo'...
Repository Name:
  upstream
    Default value, leave this as upstream if you are unsure
  <name>
    Name of the repository (used in the archive name)
  ['upstream']: 
Upstream Repository URI:
  <uri>
    Any valid URI. This variable can be templated, for example an svn url
    can be templated as such: "https://svn.foo.com/foo/tags/foo-:{version}"
    where the :{version} token will be replaced with the version for this release.
  [None]: https://github.com/Hacks4ROS/h4r_thermapp_camera.git
Upstream VCS Type:
  svn
    Upstream URI is a svn repository
  git
    Upstream URI is a git repository
  hg
    Upstream URI is a hg repository
  tar
    Upstream URI is a tarball
  ['git']: 
Version:
  :{ask}
    This means that the user will be prompted for the version each release.
    This also means that the upstream devel will be ignored.
  :{auto}
    This means the version will be guessed from the devel branch.
    This means that the devel branch must be set, the devel branch must exist,
    and there must be a valid package.xml in the upstream devel branch.
  <version>
    This will be the version used.
    It must be updated for each new upstream version.
  [':{auto}']: 
Release Tag:
  :{none}
    For svn and tar only you can set the release tag to :{none}, so that
    it is ignored.  For svn this means no revision number is used.
  :{ask}
    This means the user will be prompted for the release tag on each release.
  :{version}
    This means that the release tag will match the :{version} tag.
    This can be further templated, for example: "foo-:{version}" or "v:{version}"
    
    This can describe any vcs reference. For git that means {tag, branch, hash},
    for hg that means {tag, branch, hash}, for svn that means a revision number.
    For tar this value doubles as the sub directory (if the repository is
    in foo/ of the tar ball, putting foo here will cause the contents of
    foo/ to be imported to upstream instead of foo itself).
  [':{version}']: 
Upstream Devel Branch:
  <vcs reference>
    Branch in upstream repository on which to search for the version.
    This is used only when version is set to ':{auto}'.
  [None]: develop
ROS Distro:
  <ROS distro>
    This can be any valid ROS distro, e.g. groovy, hydro
  ['indigo']: 
Patches Directory:
  :{none}
    Use this if you want to disable overlaying of files.
  <path in bloom branch>
    This can be any valid relative path in the bloom branch. The contents
    of this folder will be overlaid onto the upstream branch after each
    import-upstream.  Additionally, any package.xml files found in the
    overlay will have the :{version} string replaced with the current
    version being released.
  [None]: 
Release Repository Push URL:
  :{none}
    This indicates that the default release url should be used.
  <url>
    (optional) Used when pushing to remote release repositories. This is only
    needed when the release uri which is in the rosdistro file is not writable.
    This is useful, for example, when a releaser would like to use a ssh url
    to push rather than a https:// url.
  [None]: 
Created 'indigo' track.
==> Testing for push permission on release repository
==> git remote -v
origin  https://github.com/Hacks4ROS-releases/h4r_thermapp_camera.git (fetch)
origin  https://github.com/Hacks4ROS-releases/h4r_thermapp_camera.git (push)
==> git push --dry-run
Username for 'https://github.com': cyborg-x1
Password for 'https://cyborg-x1@github.com': 
To https://github.com/Hacks4ROS-releases/h4r_thermapp_camera.git
   010cd62..cbb3b43  master -> master
==> Releasing 'h4r_thermapp_camera' using release track 'indigo'
==> git-bloom-release indigo
Processing release track settings for 'indigo'
Checking upstream devel branch for package.xml(s)
Cloning into '/tmp/tmpJvGDfi/upstream'...
remote: Counting objects: 190, done.
remote: Compressing objects: 100% (95/95), done.
remote: Total 190 (delta 82), reused 190 (delta 82), pack-reused 0
Receiving objects: 100% (190/190), 43.28 KiB | 0 bytes/s, done.
Resolving deltas: 100% (82/82), done.
Checking connectivity... done.
Submodule 'src/ThermAppCam' (git@github.com:Hacks4ROS-forks/ThermAppCam.git) registered for path 'src/ThermAppCam'

Submodule path 'src/ThermAppCam': checked out 'dc8bd0642f0dd3451af536c89bde03ef188d9dd1'

Looking for packages in 'develop' branch... found 'h4r_thermapp_camera'.
Detected version '0.0.1' from package(s): ['h4r_thermapp_camera']

Executing release track 'indigo'
==> bloom-export-upstream /tmp/tmpJvGDfi/upstream git --tag 0.0.1 --display-uri https://github.com/Hacks4ROS/h4r_thermapp_camera.git --name upstream --output-dir /tmp/tmpZfOLN9
Checking out repository at 'https://github.com/Hacks4ROS/h4r_thermapp_camera.git' to reference '0.0.1'.
Exporting to archive: '/tmp/tmpZfOLN9/upstream-0.0.1.tar.gz'
md5: 545d4f9f80b52493f486d49d314a8075

==> git-bloom-import-upstream /tmp/tmpZfOLN9/upstream-0.0.1.tar.gz  --release-version 0.0.1 --replace
Creating upstream branch.
Importing archive into upstream branch...
'execute_command' failed to call 'git rm -rf "src"' which had a return code (128):
```
fatal: pathspec 'src' did not match any files

```
Traceback (most recent call last):
  File "/usr/bin/git-bloom-import-upstream", line 9, in <module>
    load_entry_point('bloom==0.5.20', 'console_scripts', 'git-bloom-import-upstream')()
  File "/usr/lib/python2.7/dist-packages/bloom/commands/git/import_upstream.py", line 391, in main
    args.replace)
  File "/usr/lib/python2.7/dist-packages/bloom/commands/git/import_upstream.py", line 315, in import_upstream
    import_tarball(tarball_path, 'upstream', version, name)
  File "/usr/lib/python2.7/dist-packages/bloom/commands/git/import_upstream.py", line 114, in import_tarball
    execute_command('git rm -rf ' + ' '.join(['"%s"' % i for i in items if i]))
  File "/usr/lib/python2.7/dist-packages/bloom/util.py", line 451, in execute_command
    raise CalledProcessError(result, cmd)
CalledProcessError: Command 'git rm -rf "src"' returned non-zero exit status 128

<== Error running command '['/usr/bin/git-bloom-import-upstream', '/tmp/tmpZfOLN9/upstream-0.0.1.tar.gz', '--release-version', '0.0.1', '--replace']'
Release failed, exiting.

Originally posted by cyborg-x1 on ROS Answers with karma: 1376 on 2015-05-17
Post score: 0

A:

You need a second repository, the release repository, because we use the Debian style of releasing, you can read more about it here:
https://wiki.debian.org/PackagingWithGit
The main advantage to this style is that you can release a package of which you do not have control over the upstream.
As for your error, it looks like you are using a submodule in your upstream, which is known not to work properly with bloom:
http://answers.ros.org/question/167996/possible-to-use-git-submodules-for-bloom/
https://github.com/ros-infrastructure/bloom/issues/217
However, I'm not 100% sure that's the issue. It also appears that release repository you provided is a fork of your upstream:
https://github.com/Hacks4ROS-releases/h4r_thermapp_camera.git
I would recommend deleting that repository and starting over, following the tutorial for releasing the first time closely:
http://wiki.ros.org/bloom/Tutorials/FirstTimeRelease

Originally posted by William with karma: 17335 on 2015-05-17
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by cyborg-x1 on 2015-05-27:
yes, you were right it was a fork, the issue with the submodule should be already solved as far as I could see.
Comment by cyborg-x1 on 2015-06-26:
actually I have to correct myself, I also had to remove the submodule, the feature is not yet merged into bloom.

