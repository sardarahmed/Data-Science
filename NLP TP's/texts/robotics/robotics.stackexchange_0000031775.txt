Q:

run erratic_navigation on my robot

Hi,
Is it able to run erratic_navigation on my own robot?
I have checked all the files on erratic_navigation,
but I only can find a lot of conf files and launch files.
Also, I have found that navigation tutorials has many sources,
but why I didn't find any source code on erratic_navigation?
If I want to write my own navigation package, how do I use erratic_navigation?
Thank you~

Originally posted by sam on ROS Answers with karma: 2570 on 2011-05-23
Post score: 1

A:

To provide a complete answer to your question would require a lot of additional information about "your robot". But a question that general is probably not practical to fully answer in this format.
Most custom robots need some lower level processing for analogue and digital input/output processing. This could be done directly from a netbook or notebook computer using something like Phidgets IO, but my robot uses two microcontrollers to control the low level robot hardware. I use an Atmel ATMega 128 for controlling the Sabertooth motor controller and reading/accumulating the wheel encoders. It also interfaces a sonar, gyro, and analogue compass. I use a second Atmel ATMega 16 to control the servos including pan/tilt and a 6 degree of freedom arm. I interface to both of these microcontrollers using two serial ports (RS232) from a netbook running ROS that is mounted on the robot, using a simple serial message protocol for setting the velocity and reading the encoder data. A Kinect structured light "laser" is also mounted on the robot. The netbook communicates over wireless ethernet to a desktop computer running ROS computer where I run rviz and debug ROS nodes using the Eclipse IDE. Once all this is working the enjoyable part is working with the ROS stacks. I am using the Turtlebot navigation stack but the Erratic stack is probably similar.
The point of all of this detail is that it gets complicated at the hardware level below the ROS functionality. The microcontroller code and customer written ROS node to interface with my robot took many months. The ROS program that communicates to the drive microcontroller is 775 lines including comments. The ATMega code base is larger still. The whole setup has taken years to get to this point. If your are taking the same path, I can post the ROS interface code as it may contain some useful hints. The Erratic robot hardware interface code is based on Player to abstract the hardware interface, but there still has to be some custom code below this if you are using a custom robot. I believe that there is documentation available on the Erratic lower level communication protocol (serial) and hardware programs.
My advice to most people starting out with ROS would be to look at the "Turtlebot" recently marketed by Willow Garage. Unless you really enjoy solving low level hardware problems this looks like an ideal entry level ROS robot at a good price. You could be tweaking the navigation stack and experimenting with VSLAM soon after taking it out of the box. Another advantage for this robot is size and weight. As it is built on a Roomba so it is suitable for operation in smaller spaces and it doesn't weigh 25 or 50 pounds. It wont' cost you more than a custom built robot with the same capability, probably less.

Originally posted by Bart with karma: 856 on 2011-05-28
This answer was ACCEPTED on the original site
Post score: 1

