Q:

Do I need to add jar path in build.gradle?

Hi,
I want to use some java classes from a jar file. If I import them I get error. I also export the CLASSPATH of the jar's path but does not help. Do I need to add the jar file path somewhere like in build.gradle or do I need to put this jar file in some other directory and access it there? Any hints please. Thanks

Originally posted by safzam on ROS Answers with karma: 111 on 2012-11-02
Post score: 0

A:

If your jar files are in the lib/ folder, you can add these lines to your build.gradle:
dependencies {
  compile fileTree(dir: 'lib', include: '**/*.jar')
}

Originally posted by Martin G端nther with karma: 11816 on 2012-11-06
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by safzam on 2012-11-06:
Hi Martin, do you mean that I should make a lib/ folder inside the package and put it my jar file in there? "my.jar" file is in "home/robo/my_stack/jar/my.jar" while the build.gradle is "home/robo/my_stack/my_pkg/build.gradle". Can I use this path?
Comment by Martin G端nther on 2012-11-07:
Personally, I think it's cleaner if the jar file is inside your package, but you could of course also alter the path: compile fileTree(dir:'../jar/my.jar', ...).
Comment by safzam on 2012-11-07:
Thanks a lot.
Comment by uzair on 2014-01-18:
I put my jar file in the build/install/rosjava_tutorial_pubsub/lib where all the other jars were present. I also added the following line to my build.gradle file--compile fileTree(dir: 'build/install/rosjava_tutorial_pubsub/lib', include: 'lin.jar') Do i need to make changes in the package.xml as well?
Comment by Martin G端nther on 2014-01-18:
@uzair: This answer was about the Fuerte, pre-catkin version of rosjava (and by 'lib' I meant a new subdirectory of your package). The Groovy/Hydro version of rosjava uses catkin and is much different, so I don't know how things work there. Best ask a new question.
Comment by uzair on 2014-01-20:
@martin : It all works now. I just had to add this in my build.gradle in the dependencies{}.
"compile files('lib/myjar.jar')"
Comment by Martin G端nther on 2014-01-20:
In that case, my solution should also work (and you don't have to specify each jar file separately).

