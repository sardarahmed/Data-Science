Q:

Why is tf_broadcast_publisher creating future tfs

Hi!
I've a question about publishing tfs that are valid in the future.
https://github.com/ros/geometry/blob/noetic-devel/tf/src/static_transform_publisher.cpp#L79
I found this also in robot_state_publisher with use_static_tf false.
https://github.com/ros/robot_state_publisher/blob/noetic-devel/src/robot_state_publisher.cpp#L129
I configured move_base to control not directly on base link but on a point a bit shifted to the center which shows a good result in 'smoothing' the movements a bit.
Before trying with tf_broadcast_publisher I published the tf from base_link to control_link myself but thought it might make sense to remove that and just use the tf_broadcast_publisher I'm running it with
  <node pkg="tf" type="static_transform_publisher" name="control_link_broadcaster" args="-0.3 0 0 0 0 0 base_link control_link 100"/>

The tf looks then like that (its from the simulation with gazebo not live on the robot)

With a tf from base_link to control_link in the future. When running the navigation now trying to transform the path it throws errors with the "Lookup would require extrapolation into the future" message.
I mean I'm fine publishing that tf myself without that + sleeper thing but I'm interested in the rational behind that.

Originally posted by Webadone on ROS Answers with karma: 89 on 2021-03-18
Post score: 0

A:

The use of future dating for static and approximately static transforms is a tool used to avoid latency prior to the addition of truely static transforms in tf2.
There's more info in the tf/FAQ
I'd recommend moving to a tf2 static transform instead which will be more robust and lower overhead.

Originally posted by tfoote with karma: 58457 on 2021-03-18
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by Webadone on 2021-03-19:
Understood, thanks a lot for your quick reply!

