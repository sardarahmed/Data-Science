Q:

Robot is not moving to goal

I have a simulation in gazebo with two robots. I launch navigation file so i can send goals to a robot.
I use this command to move robot to a goal
rostopic pub /r2/move_base_simple/goal geometry_msgs/PoseStamped '{header: {stamp: now, frame_id: "map"}, pose: {position: {x: 3.0, y: 2.0, z: 0.0}, orientation: {w: 1.0}}}'

robot looks lost in space and is randomly moving.
graph: 
frames: https://files.fm/u/7gzgncpa
I want robot to move to its goal when i send the command.
Here's the launch file to launch two robots in gazebo simulation
<launch>

  <param name="/use_sim_time" value="true"/>

  <!-- Run GAZEBO World -->
<include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find multi_pioneer)/worlds/clearpath_playpen.world"/> <!-- world_name is wrt GAZEBO_RESOURCE_PATH environment variable -->
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="headless" value="false"/>
    <arg name="debug" value="false"/>
  </include>

  <!-- Robot1 with diff drive -->
  <include file="$(find multi_pioneer)/launch/pioneer3dx.gazebo.launch">
    <arg name="robot_name" value="r1" />
    <arg name="robot_position" value="-x 0.0 -y -0.5 -z 0.0 -R 0 -P 0 -Y +1.57" />
  </include>

  <!-- Robot2 with diff drive -->
  <include file="$(find multi_pioneer)/launch/pioneer3dx.gazebo.launch">
    <arg name="robot_name" value="r2" />
    <arg name="robot_position" value="-x 0.0 -y 0.5 -z 0.0 -R 0 -P 0 -Y -1.57" />
  </include>

 
</launch>

Launch file to spawn a single robot
<launch>

  <arg name="robot_name" default="p3dx" />
  <arg name="robot_position" default="-x 0.0 -y 0.0 -z 0.01" />

  <group ns="$(arg robot_name)">

    <!-- Load the URDF into the ROS Parameter Server -->
    <param name="robot_description" command="$(find xacro)/xacro.py '$(find multi_pioneer)/xacro/p3dx/pioneer3dx.xacro'" />

    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-urdf -model $(arg robot_name) -param robot_description $(arg robot_position) "/>

    <node pkg="robot_state_publisher" type="state_publisher" name="robot_state_publisher">
      <param name="publish_frequency" type="double" value="30.0"/>
      <param name="tf_prefix" type="string" value="$(arg robot_name)"/>
    </node>
  </group>

</launch>

File to launch navigation
<launch>
 <node name="map_server" pkg="map_server" type="map_server" args="$(find multi_pioneer)/maps/playpen_map.yaml" output="screen">
    <param name="frame_id" value="/map" />
  </node>

<!-- Robot 1 Localization & Navigation -->
  <include file="$(find multi_pioneer)/launch/navigation.launch">
    <arg name="tf_prefix" value="r1"/>
    <arg name="initial_pose_x" value="0.0"/>
    <arg name="initial_pose_y" value="-0.5"/>
    <arg name="initial_pose_a" value="1.57"/>
  </include>

  <!-- Robot 2 Localization & Navigation -->
  <include file="$(find multi_pioneer)/launch/navigation.launch">
    <arg name="tf_prefix" value="r2"/>
    <arg name="initial_pose_x" value="0.0"/>
    <arg name="initial_pose_y" value="-0.5"/>
    <arg name="initial_pose_a" value="-1.57"/>
  </include>

 <node pkg="tf" type="static_transform_publisher" name="odom_to_odom_r1" args="0.0 0.0 0.0 0.0 0.0 0.0 odom r1/odom 100" />
  <node pkg="tf" type="static_transform_publisher" name="odom_to_odom_r2" args="0.0 0.0 0.0 0.0 0.0 0.0 odom r2/odom 100" />
  <node pkg="tf" type="static_transform_publisher" name="map_to_odom" args="0.0 0.0 0.0 0.0 0.0 0.0 map odom 100" />
  

<node pkg="rviz" type="rviz" name="rviz" args="-d $(find multi_pioneer)/launch/pioneer3dx.rviz" />
</launch>

navigation.launch
<launch>

    <param name="/use_sim_time" value="true"/>
    <arg name="tf_prefix" default="r1"/>
    <arg name="initial_pose_x" default="0.0" />
    <arg name="initial_pose_y" default="0.0" />
    <arg name="initial_pose_a" default="0.0" />

    <group ns="$(arg tf_prefix)">
        <param name="tf_prefix" type="string" value="$(arg tf_prefix)"/>

        <include file="$(find multi_pioneer)/launch/amcl.launch">
            <arg name="scan_topic" value="front_laser/scan" />
            <!-- <arg name="global_frame_id" value="/map" /> -->
            <arg name="initial_pose_x" value="$(arg initial_pose_x)"/>
            <arg name="initial_pose_y" value="$(arg initial_pose_y)"/>
            <arg name="initial_pose_a" value="$(arg initial_pose_a)"/>
        </include>

        <include file="$(find multi_pioneer)/launch/move_base.launch">
            
        </include>
    </group>

</launch>

amcl.launch
<launch>

    <arg name="scan_topic" default="scan" />
    <arg name="global_frame_id" default="map" />
    <arg name="initial_pose_x" default="0.0" />
    <arg name="initial_pose_y" default="0.0" />
    <arg name="initial_pose_a" default="0.0" />

    <node pkg="amcl" type="amcl" name="amcl" output="screen">
        <remap from="scan" to="$(arg scan_topic)"/>

        <param name="global_frame_id" value="$(arg global_frame_id)"/>
        <param name="use_map_topic" value="true"/>

        <param name="initial_pose_x" value="$(arg initial_pose_x)"/>
        <param name="initial_pose_y" value="$(arg initial_pose_y)"/>
        <param name="initial_pose_a" value="$(arg initial_pose_a)"/>

        <!-- Publish scans from best pose at a max of 10 Hz -->
        <param name="odom_model_type" value="diff"/>
        <param name="odom_alpha5" value="0.1"/>
        <param name="transform_tolerance" value="0.2" />
        <param name="gui_publish_rate" value="10.0"/>
        <param name="laser_max_beams" value="30"/>
        <param name="min_particles" value="500"/>
        <param name="max_particles" value="5000"/>
        <param name="kld_err" value="0.05"/>
        <param name="kld_z" value="0.99"/>
        <param name="odom_alpha1" value="0.2"/>
        <param name="odom_alpha2" value="0.2"/>
        <!-- translation std dev, m -->
        <param name="odom_alpha3" value="0.8"/>
        <param name="odom_alpha4" value="0.2"/>
        <param name="laser_z_hit" value="0.5"/>
        <param name="laser_z_short" value="0.05"/>
        <param name="laser_z_max" value="0.05"/>
        <param name="laser_z_rand" value="0.5"/>
        <param name="laser_sigma_hit" value="0.2"/>
        <param name="laser_lambda_short" value="0.1"/>
        <param name="laser_model_type" value="likelihood_field"/>
        <!-- <param name="laser_model_type" value="beam"/> -->
        <param name="laser_likelihood_max_dist" value="2.0"/>
        <param name="update_min_d" value="0.2"/>
        <param name="update_min_a" value="0.5"/>
        <param name="odom_frame_id" value="odom"/>
        <param name="resample_interval" value="1"/>
        <!-- <param name="transform_tolerance" value="0.1"/> -->
        <param name="recovery_alpha_slow" value="0.0"/>
        <param name="recovery_alpha_fast" value="0.0"/>
    </node>

</launch>

move_base.launch
<launch>    

  <!-- Define your move_base node -->
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <rosparam file="$(find multi_pioneer)/conf/costmap_common_params.yaml" command="load" ns="global_costmap"/>
    <rosparam file="$(find multi_pioneer)/conf/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find multi_pioneer)/conf/local_costmap_params.yaml"  command="load" />
    <rosparam file="$(find multi_pioneer)/conf/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find multi_pioneer)/conf/base_local_planner_params.yaml" command="load" />

   <remap from="map" to="/map"/>
  </node>
</launch>

base local planner params
TrajectoryPlannerROS:
  max_vel_x: 0.45
  min_vel_x: 0.1
  max_vel_theta: 1.0
  min_in_place_vel_theta: 0.4

  acc_lim_theta: 3.2
  acc_lim_x: 2.5
  acc_lim_y: 2.5

  holonomic_robot: false

  meter_scoring: true

costmap common params
obstacle_range: 2.5
raytrace_range: 3.0
#footprint: [[-0.5, -0.33], [-0.5, 0.33], [0.5, 0.33], [0.5, -0.33]]
#robot_radius: ir_of_robot
inflation_radius: 0.55

observation_sources: laser_scan_sensor

laser_scan_sensor: {sensor_frame: front_laser, data_type: LaserScan, topic: front_laser/scan, marking: true, clearing: true}

local costmap params
local_costmap:
  global_frame: odom
  robot_base_frame: base_link
  update_frequency: 5.0
  publish_frequency: 2.0
  static_map: false
  rolling_window: true
  width: 6.0
  height: 6.0
  resolution: 0.05

global costmap params
global_costmap:
  global_frame: /map
  robot_base_frame: base_link
  update_frequency: 5.0
  static_map: true

Originally posted by topkek on ROS Answers with karma: 27 on 2018-06-15
Post score: 0

Original comments
Comment by stevejp on 2018-06-16:\

move_base publishes action related topics (e.g., /move_base/status). Can you verify that when you send your goal the move_base action server is registering it?

Can you verify that your Husky is subscribed to the correct /cmd_vel topic? And check if anything is being published on it

Comment by topkek on 2018-06-18:\

Yes, i can verify that move_base action server is registering it. I can see in move base terminal message ' Got new plan'. I can also see that topic like /husky2/move_base_simple/goal is echoing correct position and orientation...
Yes, /husky2/cmd_vel topic changes linear x to 0.5

Comment by destogl on 2018-06-24:
What are your planner parameter? Somewhere one should get current position of the robot in the move_base...
What if you try to publish odom on "husky2/odom"? since you are using "husky2" as group namespace. Are you shure that parameter "tf_prefix" should not be defined under node "move_base"?
Comment by topkek on 2018-06-25:
husky2/odom gives an error. tf_prefix definitely has to be before move_base node
Comment by destogl on 2018-06-29:
there is missing information how do you start your husky1 robot. Can you post your frames and node graph?
Comment by topkek on 2018-06-29:
graph: https://i.imgur.com/vgHnfXr.png
frames: https://files.fm/u/xtby736c
Comment by jayess on 2018-06-29:
@topkek Can you please add those files directly into the question. That way the question will be self-contained and if/when those external links disappear your question will not lose any information.
Comment by nightwish on 2018-06-29:
Can you update launch files, node graph (in "Node/Topic (all)" option) and error message in the question?
Do that we can follow easier.
Comment by nightwish on 2018-06-29:
Anyway, you should make a tf transform as following:
**map->odom->[robot 1]/odom**
**map->odom->[robot 2]/odom**

Comment by topkek on 2018-06-30:
not working. i added transform from map to robotX_tf/odom even though i dont have any map loaded. I thought i can add that transform just to connect the tree and then put map as frame_id.
so when i launch file without transforms, i have to unconnected trees and the first node is huskyX_tf/odom
Comment by nightwish on 2018-06-30:\

Before your editing, you used map_server to load map. Now I can't see it anymore. Why?
It seems the header's frame_id in your command is not correct. It should be 'map'. You can see in here

Comment by nightwish on 2018-06-30:
I work well in simulation with pioneer 3 DX robot (not husky). If you need, I can post my launch files for you.
Comment by topkek on 2018-06-30:
I deleted map because nothing was loading and tf tree had no map. Please share your files. Thank you so much for helping.
Comment by destogl on 2018-07-02:
There are few inconsistent things I see in your graph:

There is missing husky1/move_base
husky2/move_base gets data from /husky1/robot_state_publisher and not /husky2/robot_state_publisher which is connected to /husky1/ekf_localizaion
/odom[1,2]_map_broadcaster are not connected properl

Comment by destogl on 2018-07-02:
Do you have rosinstall file for your workspace? If so I can than test your launch files.

A:

These are my launch files working well in simulation with P3-DX robot. They was made by following this question. At first I got the same problem as this question and I successfully managed to fix this. Hope these can help you.
multiple_robot.launch
<launch>

  <param name="/use_sim_time" value="true"/>

  <!-- Run GAZEBO World -->
  <include file="$(find multi_robot_scenario)/launch/gazebo_world.launch">
    <arg name="gui" value="false"/>
  </include>

  <!-- Robot1 with diff drive -->
  <include file="$(find multi_robot_scenario)/launch/pioneer3dx.gazebo.launch">
    <arg name="robot_name" value="r1" />
    <arg name="robot_position" value="-x 0.0 -y -0.5 -z 0.0 -R 0 -P 0 -Y +1.57" />
  </include>

  <!-- Robot2 with diff drive -->
  <include file="$(find multi_robot_scenario)/launch/pioneer3dx.gazebo.launch">
    <arg name="robot_name" value="r2" />
    <arg name="robot_position" value="-x 0.0 -y 0.5 -z 0.0 -R 0 -P 0 -Y -1.57" />
  </include>

  <node pkg="tf" type="static_transform_publisher" name="odom_to_odom_r1" args="0.0 0.0 0.0 0.0 0.0 0.0 odom r1/odom 100" />
  <node pkg="tf" type="static_transform_publisher" name="odom_to_odom_r2" args="0.0 0.0 0.0 0.0 0.0 0.0 odom r2/odom 100" />
  <node pkg="tf" type="static_transform_publisher" name="map_to_odom" args="0.0 0.0 0.0 0.0 0.0 0.0 map odom 100" />

  <!-- Run the map server -->
  <node name="map_server" pkg="map_server" type="map_server" args="$(find robot_setup_tf)/maps/map.yaml" output="screen">
    <param name="frame_id" value="/map" />
  </node>

  <!-- Robot 1 Localization & Navigation -->
  <include file="$(find multi_robot_scenario)/launch/navigation.launch">
    <arg name="tf_prefix" value="r1"/>
    <arg name="initial_pose_x" value="0.0"/>
    <arg name="initial_pose_y" value="-0.5"/>
    <arg name="initial_pose_a" value="1.57"/>
  </include>

  <!-- Robot 2 Localization & Navigation -->
  <include file="$(find multi_robot_scenario)/launch/navigation.launch">
    <arg name="tf_prefix" value="r2"/>
    <arg name="initial_pose_x" value="0.0"/>
    <arg name="initial_pose_y" value="-0.5"/>
    <arg name="initial_pose_a" value="-1.57"/>
  </include>

  <!-- RVIZ -->
  <node pkg="rviz" type="rviz" name="rviz" args="-d $(find multi_robot_scenario)/rviz_cfg/multi_robot.rviz"/>

</launch>

pioneer3dx.gazebo.launch
<launch>

  <arg name="robot_name" default="r1" />
  <arg name="model" default="$(find multi_robot_scenario)/xacro/p3dx/pioneer3dx.xacro" />
  <arg name="robot_position" default="-x 0.0 -y 0.0 -z 0.0" />

  <group ns="$(arg robot_name)">
    <param name="tf_prefix" type="string" value="$(arg robot_name)"/>

    <!-- Load the URDF into the ROS Parameter Server -->
    <param name="robot_description" command="$(find xacro)/xacro.py $(arg model)" />

    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-urdf -model $(arg robot_name) -param robot_description $(arg robot_position)" />

    <node pkg="robot_state_publisher" type="state_publisher" name="robot_state_publisher">
      <param name="publish_frequency" type="double" value="30.0"/>
    </node>
  </group>

</launch>

navigation.launch
<launch>

    <param name="/use_sim_time" value="true"/>
    <arg name="tf_prefix" default="r1"/>
    <arg name="initial_pose_x" default="0.0" />
    <arg name="initial_pose_y" default="0.0" />
    <arg name="initial_pose_a" default="0.0" />

    <group ns="$(arg tf_prefix)">
        <param name="tf_prefix" type="string" value="$(arg tf_prefix)"/>

        <include file="$(find multi_robot_scenario)/launch/amcl.launch">
            <arg name="scan_topic" value="front_laser/scan" />
            <!-- <arg name="global_frame_id" value="/map" /> -->
            <arg name="initial_pose_x" value="$(arg initial_pose_x)"/>
            <arg name="initial_pose_y" value="$(arg initial_pose_y)"/>
            <arg name="initial_pose_a" value="$(arg initial_pose_a)"/>
        </include>

        <include file="$(find multi_robot_scenario)/launch/move_base.launch">
            <arg name="global_frame_id" value="/map" />
        </include>
    </group>

</launch>

amcl.launch
<launch>

    <arg name="scan_topic" default="scan" />
    <arg name="global_frame_id" default="map" />
    <arg name="initial_pose_x" default="0.0" />
    <arg name="initial_pose_y" default="0.0" />
    <arg name="initial_pose_a" default="0.0" />

    <node pkg="amcl" type="amcl" name="amcl" output="screen">
        <remap from="scan" to="$(arg scan_topic)"/>

        <param name="global_frame_id" value="$(arg global_frame_id)"/>
        <param name="use_map_topic" value="true"/>

        <param name="initial_pose_x" value="$(arg initial_pose_x)"/>
        <param name="initial_pose_y" value="$(arg initial_pose_y)"/>
        <param name="initial_pose_a" value="$(arg initial_pose_a)"/>

        <!-- Publish scans from best pose at a max of 10 Hz -->
        <param name="odom_model_type" value="diff"/>
        <param name="odom_alpha5" value="0.1"/>
        <param name="transform_tolerance" value="0.2" />
        <param name="gui_publish_rate" value="10.0"/>
        <param name="laser_max_beams" value="30"/>
        <param name="min_particles" value="500"/>
        <param name="max_particles" value="5000"/>
        <param name="kld_err" value="0.05"/>
        <param name="kld_z" value="0.99"/>
        <param name="odom_alpha1" value="0.2"/>
        <param name="odom_alpha2" value="0.2"/>
        <!-- translation std dev, m -->
        <param name="odom_alpha3" value="0.8"/>
        <param name="odom_alpha4" value="0.2"/>
        <param name="laser_z_hit" value="0.5"/>
        <param name="laser_z_short" value="0.05"/>
        <param name="laser_z_max" value="0.05"/>
        <param name="laser_z_rand" value="0.5"/>
        <param name="laser_sigma_hit" value="0.2"/>
        <param name="laser_lambda_short" value="0.1"/>
        <param name="laser_model_type" value="likelihood_field"/>
        <!-- <param name="laser_model_type" value="beam"/> -->
        <param name="laser_likelihood_max_dist" value="2.0"/>
        <param name="update_min_d" value="0.2"/>
        <param name="update_min_a" value="0.5"/>
        <param name="odom_frame_id" value="odom"/>
        <param name="resample_interval" value="1"/>
        <!-- <param name="transform_tolerance" value="0.1"/> -->
        <param name="recovery_alpha_slow" value="0.0"/>
        <param name="recovery_alpha_fast" value="0.0"/>
    </node>

</launch>

Originally posted by nightwish with karma: 61 on 2018-06-30
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by topkek on 2018-07-02:
now my files look similar to yours, but im getting some errors https://pastebin.com/QB0hjJ8j Probably because of the scan topics but i dont understand why. i changed argument scan topic to "scan" but i always get these errors
Comment by Geoff on 2018-07-02:
The errors about different md5sums mean that you are trying to make something subscribe to a topic with the wrong data type. We need to see your current launch files to help more. Update your question.
Comment by nightwish on 2018-07-03:
Can you update the yaml files that was loaded by move_base into your question?
Comment by topkek on 2018-07-03:
ok, for some reason i dont get red errors anymore. i use yaml files from the tutorial
I think my  global_costmap file was causing problems so i fixed it.
Comment by topkek on 2018-07-03:
i updated question with files. My robot now get goal but it is lost and cant find the right direction to go
Comment by topkek on 2018-07-03:
now the error is back -.-
Comment by nightwish on 2018-07-03:
In the tutorial, there are some places need replacing by the follower. You should post your files. After that we can find out.
Comment by topkek on 2018-07-04:
my yaml files are exactly like from the tutorials. Error happens when i enable laser scan in file that spawns robots. i always get this warn:
No laser scan received (and thus no pose updates have been published) for 1327.120000 seconds.  Verify that data is being published on the /husky1/scan topic.
Comment by topkek on 2018-07-04:
i will post my yaml files, can you share yours?
Comment by nightwish on 2018-07-05:
@topkek I edited some places in your files as following:
costmap_common_params.yaml
laser_scan_sensor: {sensor_frame: base_laser, data_type: LaserScan, topic: base_laser/scan, marking: true, clearing: true}

base_local_planner_params.yaml
holonomic_robot: false

Comment by nightwish on 2018-07-05:
You missed the local_costmap_params file.
Comment by topkek on 2018-07-05:
Its the last one
Comment by nightwish on 2018-07-05:
My mistake, now I can see it. It looks like ok.
Comment by topkek on 2018-07-05:
still getting the same error
[ WARN] [1530788166.220002256, 1323.100000000]: No laser scan received (and thus no pose updates have been published) for 1323.100000 seconds.  Verify that data is being published on the /husky1/base_laser/scan topic.

well, thank you for helping me so far.
Comment by nightwish on 2018-07-05:
Maybe name of sensor_frame is wrong. Are you sure your sensor_frame is base_laser? Can you update the node/topics graph and tf tree in your question?
Comment by topkek on 2018-07-06:
i updated graph and tf tree. i can see husky1/base_laser/scan connected to move base and amcl node.
Comment by nightwish on 2018-07-06:
Ok, I saw it. There is no connection between gazebo and the laser. This is so strange and that's why you received the error. Something is wrong with gazebo or your xacro file is incorrect.
Comment by topkek on 2018-07-06:
ok, i'll try to find out the problem
Comment by topkek on 2018-07-06:
I fixed in xacro files the problem. Topic for laser was /scan, now i have two files with topics husky1/base_laser/scan and husky2/base_laser/scan. When I echo those topics i get some data, before i didnt and in graph it is now connected to gazebo. However, the warn is still there and i get new warn
Comment by topkek on 2018-07-06:
MessageFilter [target=odom ]: Dropped 100.00% of messages so far. Please turn the [ros.amcl.message_notifier] rosconsole logger to DEBUG for more information.
also, scan node is only connected to /amcl and not /move_base. is that a problem?
Comment by nightwish on 2018-07-08:
Yeah, scan topic should connect to both amcl and move_base. Can you update the graph? I want to see it again. Did you change anything else but xacro file? (If yes, can you update it into the question?).
Comment by topkek on 2018-07-10:
i should probably change all xacro and urdf files, add some namespaces or something for r1 and r2.
Comment by topkek on 2018-07-14:
I updated my question and now I'm using pioneer instead of husky. I dont get errors anymore but robot is still not moving to goal.
Comment by nightwish on 2018-07-16:
As the graph you posted, move_base missed local_plan topic and global_plan topic. Something went wrong with move_base that made these topics couldn't run. Did you receive any error or warning message?
Comment by topkek on 2018-07-18:
No messages. I didnt even get new goal message in move base terminal when i set goal in rviz or with command.
Comment by jayess on 2018-07-22:
@topkek please don't bump your question

