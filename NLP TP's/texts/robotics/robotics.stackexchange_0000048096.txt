Q:

KDL iterative IK solver joint angles not normalized

I'm using the arm_kinematics_tools package for solving the IK of a 6DOF arm. Everything is working fine, with the little caveat that the returned joint angles are not normalized.
An example:
position: [577.1623005464028, 565.4397480457859, 43040.16494263808, 441.2180765483309, -17007.80488691719, 939.0145541995307]

If those are sent to the robot_state_publisher, the arm position is fine, implying that the angles are correct, just not normalized. I'm aware that this behavior is also related to the seed state, but I was wondering if this is normal/intended behavior of KDL and if others have experienced this too.

Originally posted by Stefan Kohlbrecher on ROS Answers with karma: 24361 on 2013-02-07
Post score: 0

A:

Hi, I remember seeing that too. In the package you'll find there are 3 types of the Newton-Raphson solver you can test. I found only one of them had this behaviour. The "best" of the three, with joint limits, did not.
But, for a 6 DOF robot, I'd generate an IKFast plugin. ;-)

Originally posted by dbworth with karma: 1103 on 2013-02-07
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by Stefan Kohlbrecher on 2013-02-07:
Ah ok, thanks :) Yes, I'd do that too (re IKFast), unfortunately there are some kinematics for which closed form IK generation fails.
Comment by dbworth on 2013-02-07:
DRC arm or snake robot? ;-)  The basic N.R. solver is very bad.  Using KDL to make a Jacobian-based solver is one, better option.
Comment by Stefan Kohlbrecher on 2013-02-07:
DRC arm :) See also http://openrave-users-list.185357.n3.nabble.com/Generating-IK-for-6DOF-humanoid-appendages-prototype-GFE-robot-fails-td4025593.html . Is there a Jacobian solver for KDL available?
Comment by dbworth on 2013-02-07:
There's functions in the KDL library to do with jacobians. I think the NASA R2 uses one, as does REEM: https://github.com/pal-robotics/reem_kinematics/blob/master/reem_kinematics_constraint_aware/src/ik_solver.cpp

