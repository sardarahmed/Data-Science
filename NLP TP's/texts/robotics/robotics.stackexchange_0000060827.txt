Q:

global costmap position

Hi,
I'm new to ROS and I'm trying to get my robot simulation in gazebo work with the navigation stack. I've followed the navigation stack tutorials but when I set a goal position in the rviz, I get the error:
[ WARN] [1405397031.898957310, 340.132000000]: The robot's start position is off the global costmap. Planning will always fail, are you sure the robot has been properly localized?

Here are my navigation stack configurations:
costmap_common_params:
obstacle_range: 2.5
raytrace_range: 3.0
footprint: [[-0.2,-0.2],[-0.2,0.2], [0.2, 0.2], [0.2,-0.2]]
#robot_radius: 0.20
inflation_radius: 0.55

observation_sources: laser_scan_sensor

laser_scan_sensor: {sensor_frame: lms100, data_type: LaserScan, topic: /p3dx/laser/scan, marking: true, clearing: true}

global_costmap_params:
global_frame: /map
robot_base_frame: base_link
update_frequency: 5.0
static_map: true

local_costmap_params:
global_frame: odom
robot_base_frame: base_link
update_frequency: 5.0
publish_frequency: 2.0
static_map: false
rolling_window: true
width: 6.0
height: 6.0
resolution: 0.05

transform_tolerance: 0.8 # seconds

base_local_planner_params:
TrajectoryPlannerROS:
  max_vel_x: 0.45
  min_vel_x: 0.1
  max_rotational_vel: 1.0
  min_in_place_rotational_vel: 0.4

  acc_lim_th: 3.2
  acc_lim_x: 2.5
  acc_lim_y: 2.5

  holonomic_robot: false
  

move_base.launch:
<launch>
  <master auto="start"/>

  <!-- Run the map server -->
<!-- <node name="map_server" pkg="map_server" type="map_server" args="$(find p3dx_description)/launch/map.yaml my_map" output="screen"/>   -->

  <!--- Run AMCL -->
 
  <include file="$(find amcl)/examples/amcl_omni.launch" />
 <!-- <include file="$(find erratic_navigation)/navigation_slam/slam_gmapping.launch" /> -->
  
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <rosparam file="$(find p3dx_description)/launch/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find p3dx_description)/launch/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find p3dx_description)/launch/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find p3dx_description)/launch/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find p3dx_description)/launch/base_local_planner_params.yaml" command="load" />
  </node>
</launch>

gazebo.launch which contains gmapping:
<launch>

    <!-- these are the arguments you can pass this launch file, for example 
        paused:=true -->
    <arg name="paused" default="false" />
    <arg name="use_sim_time" default="true" />
    <arg name="gui" default="true" />
    <arg name="headless" default="false" />
    <arg name="debug" default="false" />

    <!-- We resume the logic in empty_world.launch, changing only the name of 
        the world to be launched -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find p3dx_gazebo)/worlds/p3dx.world" />
        <arg name="debug" value="$(arg debug)" />
        <arg name="gui" value="$(arg gui)" />
        <arg name="paused" value="$(arg paused)" />
        <arg name="use_sim_time" value="$(arg use_sim_time)" />
        <arg name="headless" value="$(arg headless)" />
        
    </include>

    <!-- Load the URDF into the ROS Parameter Server -->
    <param name="robot_description"
        command="$(find xacro)/xacro.py '$(find p3dx_description)/urdf/pioneer3dx.xacro'" />

    <!-- Run a python script to the send a service call to gazebo_ros to spawn 
        a URDF robot -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model"
        respawn="false" output="screen" args="-urdf -model p3dx -param robot_description" />

    <!-- ros_control p3rd launch file -->
    <!-- <include file="$(find p3dx_control)/launch/control.launch" /> -->

<!-- kasra -->
    
    <node pkg="p3dx_gazebo" name="mimic_cmd_vel" type="mimic_cmd_vel"  />
    
      <!-- convert joint states to TF transforms for rviz, etc -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
    respawn="false" output="screen">
    <remap from="/joint_states" to="/p3dx/joint_states" />
  </node>
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" >
  </node>
  <node pkg="p3dx_gazebo" name="laser_tf_broadcaster" type="laser_tf_broadcaster"  />
  <node pkg="gmapping" name="slam_gmapping" type="slam_gmapping"   args="scan:=/p3dx/laser/scan"/>
    
</launch>

When I add the global_costmap to the rviz it shows as a square which my robot is on one of its corners and that's why I get that error:
lamoo.persiangig.com/image/ros/rviz.png
And here are my rqt_gragh and tf_tree:
lamoo.persiangig.com/image/ros/graph.png
lamoo.persiangig.com/image/ros/tf_tree.png
Does anyone now how can I control the position of the global_costmap? the regular map which comes from the laserScan looks correct but the global_costmap as you see in the picture does not contain the robot. I appreciate any help in advance.

Originally posted by Kasra on ROS Answers with karma: 86 on 2014-07-14
Post score: 0

A:

I found what's causing the problem. For whatever reason I couldn't put the namespace in the beginning of the param files like putting the "global_costmap" at the start point of the "global_costmap_params.yaml". It's the way it is in the tutorials but it just didn't work for me. So I added these namespaces to the move_base.launch and now I see my robot in center of the global_costmap. Thank you David,  looking at the output of "rosparam get /move_base" helped me to figure it out.

Originally posted by Kasra with karma: 86 on 2014-07-16
This answer was ACCEPTED on the original site
Post score: 3

