Q:

How do I temporarily swap out a core package with a locally compiled one?

Suppose I found and want to fix a bug in ros_comm.  I've forked and cloned a local copy of ros_comm and implemented my fix.  How do I go about testing my fix?  More specifically, how can I temporarily swap out the current ros_comm installed in my system with my work in progress ros_comm without recompiling the whole ROS stack?
Naively putting ros_comm in the same workspace as my package for testing my fix (test_node) and building (and sourcing) them together doesn't work as it still uses the system installed ros_comm.

Originally posted by Rufus on ROS Answers with karma: 1083 on 2021-04-08
Post score: 0

Original comments
Comment by gvdhoorn on 2021-04-08:\

Naively putting ros_comm in the same workspace as my package for testing my fix and building (and sourcing) them together doesn't work as it still uses the system installed ros_comm.

that is actually supposed to work, so perhaps you should add some more info on what you did exactly.
Comment by Rufus on 2021-04-08:
hmm that's strange, my test node in the same workspace is still linking to the system ros_comm package, not the custom ros_comm package in the local workspace...  It seems to be related to this question

A:

So afaik, the way to do this would be to place your ros_comm fork in an underlay.
I'd missed you put everything together in the same workspace.
Your description ("first source, then rebuild") is sort-of the same, but less reproducible and less scalable.
See the docs on Catkin overlay (and realise what is an overlay from one perspective is an underlay from another).

Originally posted by gvdhoorn with karma: 86574 on 2021-04-08
This answer was ACCEPTED on the original site
Post score: 2

