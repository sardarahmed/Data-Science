Q:

How to add padding to a robot using ROS2/MoveIt2?

I am trying to find a way to add padding to the robot to avoid unwanted collisions caused by low control precision. Optimally I could either set a uniform padding of e.g. 5 cm or - even better - specific padding values for each link of the robot.
During my research I found this old post valid for ROS/MoveIt that proposes to set a parameter default_robot_padding: 0.05. Here is the old post:
Unfortunately I can't get this working with ROS2/MoveIt2. So here are my questions:

Is it the right approach at all to set a padding parameter to avoid unwanted collisions due to low precision?
How and where can I set a padding parameter?
Would it be possible to add parameters close to the robot definition, e.g. directly in the URDF?
Could it be set vor individual joints differently?

My setup is:

ROS2 Iron
MoveIt2 (Main branch, there is no iron currently)
Ubuntu 22.04

Any help or direction in which I can have a look would be very much appreciated.

A:

Matching your set of four questions:

Yes, default_robot_padding is probably the best (only?) MoveIt2 parameter to currently deal with poor control tolerances.
I believe you can add this to the joint_limits.yaml that was generated for your robot via the moveit_setup_assistant (see below for more details on why this is the correct file).
Technically, you could encode similar information in the URDF - but it would likely be challenging to get correct - you'd have to adjust the scale (and possibly also the origin) of each collision mesh/geometry in your URDF. Note that scaling the meshes up is likely not exactly the same as applying padding around them.
MoveIt2 wouldn't be able inflate the collision mesh/geometry on a per-joint value (the URDF approach would be capable) - but I want to specifically clarify here: this is really a parameter of the collision mesh/geometry, not the joint itself. What you are doing is inflating the size of the mesh/geometry - that is quite a bit different than modeling the actual ambiguity of where the robot geometry is based on the control error - I am not aware of any available collision checker which supports such.

With regards to where to put the parameters, unfortunately, the launch files generated in MoveIt2 are a bit convoluted - my rational here is that the full parameter name is "robot_description_planning.default_robot_padding". joint_limits.yaml includes the "default_velocity_scaling_factor" parameter which is also in the robot_description_planning namespace - therefore, the entire contents of the joint_limits.yaml should be loaded into the proper namespace.

