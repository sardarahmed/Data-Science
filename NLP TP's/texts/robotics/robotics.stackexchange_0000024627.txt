Q:

symbol lookup error: /snap/core20/current/lib/x86_64-linux-gnu/libpthread.so.0: undefined symbol: __libc_pthread_init, version GLIBC_PRIVATE

I was  trying to setup a simple transform broadcaster by following Write a broadcaster (Python) from ROS2 Humble documentation.
I created the package, nodes, launch files, and everything else, including the addition of entry points, data files etc., and the package was successfully built using colcon. But when I tried to launch the node using the below command, an error occurred. I don't know what went wrong; but, in order to rectify any human error in following the steps, I tried doing the same thing multiple times and resulted in the same error.
Launch command I executed (given in the docs)
ros2 launch learning_tf2_py turtle_tf2_demo.launch.py

ERROR Log
jishnu@Legion:~/robotics/ros-git/tf2$ ros2 launch learning_tf2_py turtle_tf2_demo.launch.py
[INFO] [launch]: All log files can be found below /home/jishnu/.ros/log/2023-04-07-19-06-58-821889-Legion-2160358
[INFO] [launch]: Default logging verbosity is set to INFO
[INFO] [turtlesim_node-1]: process started with pid [2160368]
[INFO] [turtle_tf2_broadcaster-2]: process started with pid [2160370]
[turtlesim_node-1] QSocketNotifier: Can only be used with threads started with QThread
[turtlesim_node-1] /opt/ros/humble/lib/turtlesim/turtlesim_node: symbol lookup error: /snap/core20/current/lib/x86_64-linux-gnu/libpthread.so.0: undefined symbol: __libc_pthread_init, version GLIBC_PRIVATE
[ERROR] [turtlesim_node-1]: process has died [pid 2160368, exit code 127, cmd '/opt/ros/humble/lib/turtlesim/turtlesim_node --ros-args -r __node:=sim'].

A:

From Java: symbol lookup error: /snap/core20/current/lib/x86_64-linux-gnu/libpthread.so.0: undefined symbol: __libc_pthread_init, version GLIBC_PRIVATE on Stack Overflow:

Though I have already answered it here
The issue with how the VSCode Snap package libraries are configured to be used. They are setting the following environment variable GTK_PATH, which gets inherited by the VSCode Terminal.
Unsetting the environment variable in the VSCode terminal does seem to work for me.
unset GTK_PATH

Or you can clear out the environment variable by using the VSCode Configuration, as mentioned in the other answer.

You will probably need to run unset GTK_PATH each new session/login/reboot. To set it permanently, put the command in your profile.
Note: It is a good idea to make a note of what the value of GTK_PATH is, prior to unsetting it - that way you can revert it back to its previous value, should you encounter any issues. To see what its "usual" value is, run echo $GTK_PATH, prior to unsetting it... If you have already unset it, open a new terminal window, which should have the unset value of GTK_PATH (if not, try a reboot).

