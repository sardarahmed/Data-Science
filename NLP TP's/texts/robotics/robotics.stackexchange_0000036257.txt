Q:

What is ROS exactly? Middleware, Framework, Operating System?

Recently I had a discussion with a co-worker about the definition of ROS and what it actually is.
I’m not sure and that’s why I’m posting this question. I’ve seen different definitions. Middleware, Framework, Operating System. But what is the best fitting definition? If there is any!
In my opinion, I see ROS as a mixture:
The high level and service oriented communication concept could be defined as a middleware, whereas the core libraries rather do have framework functionality.
And about the term OS  - as it does not match the classical definition of a operating system, I’d prepend “Meta” and regard it as a “Meta-Operating System”.
Any thoughts on this?

Originally posted by Mimax on ROS Answers with karma: 174 on 2011-12-05
Post score: 6

Original comments
Comment by Arkapravo on 2011-12-06:
@Mimax : I agree to what you say, however in day to day discussions 'middleware' is probably the most common term used to express ROS like platforms.

A:

I usually explain ROS in the following way:
ROS = plumbing + tools + capabilities + ecosystem

plumbing: ROS provides publish-subscribe messaging infrastructure designed to support the quick and easy construction of distributed computing systems.

tools: ROS provides an extensive set of tools for configuring, starting, introspecting, debugging, visualizing, logging, testing, and stopping distributed computing systems.

capabilities: ROS provides a broad collection of libraries that implement useful robot functionality, with a focus on mobility, manipulation, and perception.

ecosystem: ROS is supported and improved by a large community, with a strong focus on integration and documentation.  ros.org is a one-stop-shop for finding and learning about the thousands of ROS packages that are available from developers around the world.

In the early days, the plumbing, tools, and capabilities were tightly coupled, which has both advantages and disadvantages.  On the one hand, by making strong assumptions about how a particular component will be used, developers are able to quickly and easily build and test complex integrated systems.  On the other hand, users are given an "all or nothing" choice: to use an interesting ROS component, you pretty much had to jump in to using all of ROS.
Four years in, the core system has matured considerably, and we're hard at work refactoring code to separate plumbing from tools from capabilities, so that each may be used in isolation.  In particular, we're aiming for important libraries that were developed within ROS to become available to non-ROS users in a minimal-dependency fashion (as has already happened with OMPL and PCL).

Originally posted by Brian Gerkey with karma: 2916 on 2011-12-06
This answer was ACCEPTED on the original site
Post score: 16

Original comments
Comment by Mimax on 2011-12-07:
Thanks for that insight. I think you're explanation goes along with the way I see ROS. For me the key words that characterize ROS are Middleware+Framework+Open source. Do you agree? How is your definition or let’s say opinion about a definition ;) in terms of what we have been talking about above?

