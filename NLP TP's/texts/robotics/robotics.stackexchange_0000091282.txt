Q:

Static tf broadcaster declaration seems to cause nodehandle to be created

My code is something like this-
#include <ros/ros.h>
tf2_ros::StaticTransformBroadcaster static_broadcaster;
ros::Subscriber fiducial_transform;

int main(int argc, char **argv)
{
  ros::init(argc, argv, "calibrate");
  ros::NodeHandle n;
   ... 
  ....
   ...
   ...
   return 0;
 }

I am getting the following error.
 You must call ros::init() before creating the first NodeHandle

Pretty sure it is happening because of declaring the static_broadcaster. Why is this happening? How do I get around this if I have to declare the staticbroadcaster globally?

Originally posted by Harsh2308 on ROS Answers with karma: 80 on 2019-04-07
Post score: 0

A:

You are right about the NodeHandle in StaticTransformBroadcaster https://github.com/ros/geometry2/blob/melodic-devel/tf2_ros/include/tf2_ros/static_transform_broadcaster.h#L65
You should put the subscriber and the static broadcaster inside a class and construct that after ros::init(), and pass it around as needed instead of the globals if other objects need to use it.
Or if you insist then don't use StaticTransformBroadcaster, instead have a global ros publisher publish tf2_msgs::TFMessage as needed.  The broadcaster isn't doing a whole lot as you can see in https://github.com/ros/geometry2/blob/melodic-devel/tf2_ros/src/static_transform_broadcaster.cpp - it doesn't take much to duplicate the functionality.
Or make static_broadcaster a pointer and again wait until after ros::init to create it.

Originally posted by lucasw with karma: 8729 on 2019-04-08
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by gvdhoorn on 2019-04-08:
Or use a smart/bare ptr instead of a plain object.

