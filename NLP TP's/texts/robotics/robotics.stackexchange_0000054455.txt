Q:

implementing realtime controllers with ros_control

Hi All,
I'm starting to implement a better control framework for a manipulator. I'd like keep some level of compatibility with the ros_control project thats under development. I'm looking to implement a RT velocity controller using Xenomai Native API, and communicating with user space via shared memory. It appears that interacting with this shared memory should be the job of robot_hw class, which seems to load an interface.
Should I look to only modify the interface classes (joint_state_interface, actuator_interface) to conduct the memsharing operations? ie, is that the intention of ros_control, that users only have to adjust the interface classes to marry up with their hardware arrangement? Or is there some lower level?
EDIT
The method by which the realtime controller is implemented is really not important, I just would like to know at which part of the ros_control api I should implement access to the lower level realtime controllers. Ie which classes should I modify to include the access point to the hardware.
any guidance would be welcome
cheers
Peter

Originally posted by PeterMilani on ROS Answers with karma: 1493 on 2013-09-28
Post score: 1

A:

I found the information I was looking for and answers my questions:
https://github.com/ros-controls/ros_control/wiki/hardware_interface
well done to the team developing this package

Originally posted by PeterMilani with karma: 1493 on 2013-09-30
This answer was ACCEPTED on the original site
Post score: 4

Original comments
Comment by Dave Coleman on 2013-11-15:
Can you share how you integrated the RT Xenomai Native API with a ros_control hardware interface? I'm interested in doing the same, thanks!
Comment by PeterMilani on 2013-11-18:
I'm still working through it. The main issue is that the only reason for implementing xenomai is for accurate timing of the cm object. I think this means that the cm object should run within xenomai kernel but I'm not sure it would work with the networking elements of ros. Will share testing.

