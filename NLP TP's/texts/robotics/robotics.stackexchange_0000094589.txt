Q:

Autoware runtime manager lidar_euclidean_cluster_detect clip_min_height parameter unable to take float values

In this commit: https://gitlab.com/autowarefoundation/autoware.ai/utilities/commit/254fd9489ec83bf3d6a36cc2735c0456fce4a6a2#493898ab63eeccdaeb68cb9b527f8f387de2b9c9_1060_1059
the value of v is changed from -1.3 to -5.
In the Runtime Manager Dialog: https://gitlab.com/autowarefoundation/autoware.ai/utilities/blob/master/runtime_manager/scripts/runtime_manager_dialog.py#L2377
the way a parameter is determined to be a float instead of an int is by checking whether one of the min, max, or v values is a float. If at least one of them is a float, then it'll be a float param which can receive float values from the user in the dialog box. Before the above commit, this would have worked, but now it's not working and I can't change the clip_min_height value without changing these files manually and rebuilding. In addition, even if I do change these values, they just reset every time I exit the docker container and re-enter. Is there a way to permanently fix these values on my end, or do I need to go in and change them and rebuild every time I re-enter the container?
Either way, I just wanted to let you guys know of this issue. Thanks for your help.

Originally posted by syigzaw on ROS Answers with karma: 13 on 2020-02-02
Post score: 0

A:

@syigzaw Thanks for looking into the cause of this issue! This sounds like a great opportunity for your first contribution to a major open-source project! As for saving the files while exiting/entering the Docker container, I suggest using the "base" docker container for Autoware (which just has the Linux environment and all dependencies installed) instead of the "full" docker container for Autoware (which also includes the pre-built source code). Here are some instructions which I will add to the Docker section of the Wiki for using the "base" container:

Create a workspace on your machine for working with the code.

a. cd ~
b. mkdir -p autoware.ai/src

Clone the Docker repository.

a. git clone https://gitlab.com/autowarefoundation/autoware.ai/docker
b. cd docker/generic

Use the run.sh script to enter the base Docker container without Autoware.ai included, mounting the provided folder into the Docker container in the /home/autoware/Autoware folder.

a. ./run.sh -b $HOME/autoware.ai

Download and build the Autoware.ai source code inside the container.

a. cd Autoware
b. wget -O autoware.ai.repos "https://gitlab.com/autowarefoundation/autoware.ai/autoware/raw/master/autoware.ai.repos?inline=false" Note: If you want to use a different version of Autoware than master, replace master in the URL above with the version (e.g. 1.13.0).
c. vcs import src < autoware.ai.repos
d. colcon build
After you have completed the above instructions, you will have a workspace on your host machine in $HOME/autoware.ai which has been built by colcon and can be modified without losing your changes. Using the above ./run.sh command will also make that workspace available in the Docker container.
If you want to make a Merge Request to fix this issue, make a fork of the utilities repository on Gitlab. After that, delete the autoware.ai/src/autoware/utilities folder in your workspace, edit autoware.ai.repos to have the utilities repository point to your fork, then run the vcs import command again inside Docker. This will use your fork instead of the official one for the utilities repository. Once you have fixed the file and committed it to your fork, create a merge request back to the Autoware repository and the maintainers will review and merge it!

Originally posted by Josh Whitley with karma: 1766 on 2020-02-11
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by syigzaw on 2020-02-11:
Thank you so much for your detailed response. I just submitted a pull request, and I also set up Autoware using the base docker container and it all works perfectly. Thank you so much for your help!

