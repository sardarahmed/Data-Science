Q:

actionlib constructor initialization

I'd appreciate it if someone can explain the reason why the actionlib simpleServer constructor needs to be initialized as a constructor initializer list? If the initialization's removed the compilation fails.
reference to actionlib tutorials
I know this is more as a C++ question rather than ROS related question!
Thank you.

Originally posted by emacsd on ROS Answers with karma: 194 on 2019-10-19
Post score: 0

Original comments
Comment by Mbuijs on 2019-10-21:
Aside of ahendrix correct answer below, a suggestion:
If you want to initiate the action server at another moment, you can consider wrapping the actionlib::SimpleActionServer in a std::shared_ptr. I would not suggest it as the default approach, but it can be useful in cases where the action server is not supposed to be active directly at the time of calling the constructor of your class.
Comment by gvdhoorn on 2019-10-21:
If with

If you want to initiate the action server at another moment

you mean it may be desirable to not have the ActionServer instantiated then delaying construction by using a (smart) pointer is indeed an option.
If you were instead thinking of "initiate" as: placing the server in the active state, then perhaps setting auto_start to false (ctor docs) would be a better approach.
Comment by Mbuijs on 2019-10-21:
Good point, I was not thinking of the auto_start option, which is indeed a better approach.

A:

You are correct; this is a C++ question.
The actionlib::SimpleActionServer class does not have a default constructor: http://docs.ros.org/melodic/api/actionlib/html/classactionlib_1_1SimpleActionServer.html
Therefore, you must provide constructor arguments when the SimpleActionServer object is constructed. If this object is a member of another class, then the C++ standard states that the constructor arguments must be passed in the initializer list.

Originally posted by ahendrix with karma: 47576 on 2019-10-19
This answer was ACCEPTED on the original site
Post score: 4

Original comments
Comment by emacsd on 2019-10-20:
Thank you @ahendrix. Do you have any reference/article explains this topic more in depth?
Comment by ahendrix on 2019-10-21:\

Before the compound statement that forms the function body of the constructor begins executing, initialization of all direct bases, virtual bases, and non-static data members is finished. Member initializer list is the place where non-default initialization of these objects can be specified.

From https://en.cppreference.com/w/cpp/language/initializer_list
Comment by ahendrix on 2019-10-21:
I tend to use cppreference.com for C++ reference material, but you will probably find that a textbook aimed at teaching C++ explains the material in a more approachable way.

