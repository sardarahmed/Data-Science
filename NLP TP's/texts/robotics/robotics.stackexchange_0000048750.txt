Q:

Run catkin make with custom compiler

I have tried exporting the CC, CXX, CMAKE_CXX_COMPILER env variables before running ./src/catkin/bin/catkin_make_isolated --install, but no luck. It still insists on using clang on OS X (10.8.2) for some reason. How can I tell it to use gcc instead?

Originally posted by Noldorin on ROS Answers with karma: 161 on 2013-02-26
Post score: 2

Original comments
Comment by Dan Lazewatsky on 2013-02-27:
Just curious - is this to get around the bug in clang that prevents PCL from building?
Comment by Noldorin on 2013-02-27:
@Dan Lazewatsky: Indeed it is. I'm thinking building the whole thing with the gcc kit (or at least PCL and friends) will be the easy way!
Comment by Dan Lazewatsky on 2013-02-27:
Awesome. I'm excited to see how it work out!
Comment by Noldorin on 2013-02-27:
Sure, will let you know. ;)
Comment by Noldorin on 2013-02-27:
@Dan Lazewatsky: Okay, there seems to be problems with the generators! They're returnin HTTP 500 errors now (desktop and desktop-full rather).

A:

You can pass them in as CMake variables:
./src/catkin/bin/catkin_make_isolated --install -DCMAKE_C_COMPILER=/usr/bin/gcc -DCMAKE_CXX_COMPILER=/usr/bin/gcc -v

This should make each of the run with the C/CXX compiler changed:
==> cmake /Users/william/ros_catkin_ws/src/catkin -DCATKIN_DEVEL_PREFIX=/Users/william/ros_catkin_ws/devel_isolated/catkin -DCMAKE_INSTALL_PREFIX=/Users/william/ros_catkin_ws/install_isolated -DCMAKE_C_COMPILER=/usr/bin/gcc -DCMAKE_CXX_COMPILER=/usr/bin/gcc
-- The C compiler identification is GNU 4.2.1
-- The CXX compiler identification is GNU 4.2.1

Originally posted by William with karma: 17335 on 2013-02-27
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by Noldorin on 2013-02-28:
This works if I pass the parameters to cmake directly, but not catkin_make_isolated unfortunately! Catkin is really causing a lot of trouble, I have no idea what it's good for even... surely a build script that just loops through each directory in src/ and runs CMake would be superior as a solution?
Comment by William on 2013-02-28:
That's what catkin_make_isolated does... There is no reason (other than maybe a bug) for why passing CMake arguments to CMake directly would work but not for CMI...
Comment by William on 2013-02-28:
It's pretty clear exactly which commands CMI is running, and if one fails it even tells you exactly how to reproduce that error without CMI. You can always build pcl_msgs manually, install it, build pcl manually, install it, remove them from the workspace, then try again.
Comment by Noldorin on 2013-02-28:
@William: Ah, well it seems that it works okay if I set environment variables, but whenever I pass the D options it always fails in the infinite loop (either directly via cmake or via catkin_make_isolated).

