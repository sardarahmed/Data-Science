Q:

Python script for controlling the AR Drone doesn't work

I have written a simple python script to takeoff the drone.
#! /usr/bin/env python
import rospy
from std_msgs.msg import Empty

rospy.init_node('cipek')

empty = Empty()
takeoff = rospy.Publisher('/ardrone/takeoff', Empty, queue_size=1)
land = rospy.Publisher('/ardrone/land', Empty, queue_size=1)

takeoff.publish(empty)
print("works")

I have created a package with catkin. In one terminal I run roscore, in the other rosrun ardrone_autonomy ardrone_driver  and in third rosrun my_package script.py. The python script is runnable (I have run chmod +x on it), and it works because it print out "works". The problem is that the drone doesn't react at all. However, when I run rostopic pub ardrone/takeoff std_msgs/empty "{}" --once in the console it works perfectly. Any ideas what is wrong?

Originally posted by Cipek on ROS Answers with karma: 5 on 2019-06-12
Post score: 0

A:

Any ideas what is wrong?

your script terminates before ROS has any chance of getting your message to any potential subscribers. Setting up subscriptions takes time.
It would be best to wait for subscribers to have connected using get_num_connections() and only publish(..) when there is at least a single subscriber.
After that, wait a little and only then exit the script.

Edit: I would add a sleep in there, just so we don't hog the CPU while waiting for a subscriber:
while takeoff.get_num_connections() < 1:
    rospy.loginfo_throttle(2, "Waiting for subscribers on /ardrone/takeoff ..")
    rospy.sleep(0.1)
takeoff.publish(empty)

 # give subscriber 2 seconds to receive the message (this much time is not needed,
 # but just to be on the safe side)
 rospy.sleep(2.0)

Notice also the rospy.loginfo_throttle(..) to inform the user about what is going on.

Originally posted by gvdhoorn with karma: 86574 on 2019-06-12
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by Cipek on 2019-06-12:
Could you modify my code so it works as you said? I want to make sure I have it correctly.
Comment by Cipek on 2019-06-12:
Nevermind. Got it running with: while takeoff.get_num_connections() >= 1: pass takeoff.publish(empty)
Comment by Cipek on 2019-06-12:
Should I do a similar loop before every command, like fly forward, land, etc?
Comment by gvdhoorn on 2019-06-12:
No, not necessarily.
Right now you're using a time-based approach. What would be better would be a state-based approach: send a command and then, instead of assuming it will be executed, verify that is has been executed by checking the state of the system you're trying to control.
It's unfortunate the ardrone interface is topic based for these things, as topics don't guarantee delivery or processing of messages, but you'll have to make do, as that is what it is.
Comment by Cipek on 2019-06-12:
Do you know how to check the state of the drone?
Comment by gvdhoorn on 2019-06-12:
I have almost zero experience with drones, much less with ardrones, so I wouldn't know.
Comment by Cipek on 2019-06-12:
Okay. No worries. I'll do some research then.

