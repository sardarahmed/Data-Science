Q:

catkin export definitions

packages that use PCL need to add those 2 lines in the CMakeLists:
add_definitions(${PCL_DEFINITIONS})
link_directories(${PCL_LIBRARY_DIRS})

Is there an option to pass those flags and apply them automatically to all packages that use PCL indirectly, by depending on a package that uses PCL?
e.g. let's a package A that uses PCL and so it has the 2 lines above in its CMakeLists, and a package B that uses package A, but does not use PCL directly. It's CMakeLists thus does not include those 2 lines.
I does not seem practical to request a package developer to check all the packages depended upon and check what flags they require... So I bet there is a solution...

Originally posted by brice rebsamen on ROS Answers with karma: 1001 on 2014-01-28
Post score: 1

A:

Based on dirk-thomas' answer, here is the complete solution for reference:
1- I created A/cmake/A-extras.cmake.in with the following content:
# force automatic escaping of preprocessor definitions
cmake_policy(PUSH)
cmake_policy(SET CMP0005 NEW)

add_definitions(@PCL_DEFINITIONS@)
link_directories(@PCL_LIBRARY_DIRS@)

cmake_policy(POP)

2- I modified A's CMakeLists file as follow:
2.1- I added
CFG_EXTRAS A-extras.cmake

to the catkin_package() macro
2.2- I added
include(${CATKIN_DEVEL_PREFIX}/share/${PROJECT_NAME}/cmake/A-extras.cmake)

to A's CMakeLists.txt so that the definitions are used to build A itself

Originally posted by brice rebsamen with karma: 1001 on 2014-01-28
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by gvdhoorn on 2014-01-28:
The last bit (2.2) should not be necessary: the cmake snippets exported in catkin_package(.. CFG_EXTRAS ..) are automatically included byt the dependent package. Unless of course you are including A-extras.cmake in A itself as well.

