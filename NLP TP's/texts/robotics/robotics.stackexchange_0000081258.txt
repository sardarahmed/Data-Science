Q:

Difference between rosjava_core vs. rosjava vs. ros_jni

Hi, I'm new to ROS and kinda confused between rosjava_core, rosjava, and ros_jni. What are the differences and which one to pick for new development using Ubuntu 16.04 and Kinetic (or future release). Are all still supported?
Are there advantages to using roscpp instead of Java?
Currently, I am more familiar and comfortable with java. So, will Java be fully supported in the future?
Thank you!

Originally posted by coolbeans on ROS Answers with karma: 1 on 2017-06-12
Post score: 0

A:

@coolbeans rosjava in general is a reimplementation of ROS architecture in Java. As you can see in the Github organization, it has many components (https://github.com/rosjava). All of them can be referred generically as rosjava: you have the tools to build rosjava packages, which are a bit different from standard ROS packages and need some other tools to build; you also have message generators and so on...
Rosjava core is basically where all the implementation is. There you will find nodes, topics, services, etc.
Rosjava is supported; perhaps it's not as well known as the standard ROS implementations, but it does it's job. With roscpp you will probably have more packages available out of the box. If you are comfortable using Java, I suggest you to try it, specially if you don't require a particular package that is already written in Cpp or Python.
Check out this post for more info https://discourse.ros.org/t/is-rosjava-worth-using-when-not-using-android/1967.
And also the wiki entry: http://wiki.ros.org/rosjava.

Originally posted by jubeira with karma: 1054 on 2017-10-13
This answer was ACCEPTED on the original site
Post score: 0

