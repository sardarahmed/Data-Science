Q:

What're the pros and cons of ROS-I compared to other industrial robotics operating systems?

Hi everyone,
I'm new to ROS but became very interested in it at first glance ;)
As we know, ABB, FANUC, Yaskawa and KUKA are the top 4 industrial robotics companies. Seems all of them have already started trying to use ROS-I on some of their products, but that's still in an early stage.
So, I'm wondering, what are the pros and cons of ROS-I compared to the operating systems developed by these companies?
And what obstacles ROS-I faces to be massively deployed in industrial robots?
I've did quite some searches but still couldn't find satisfying answers; they failed to explain the "why"s hence not very convincing.
Thanks,
snakeninny
Edit:
Thanks to @gvdhoorn, I've updated my question to a better and more accurate one: What's the relationship of ROS-I and other robotics operating systems?

Originally posted by snakeninny on ROS Answers with karma: 25 on 2016-06-16
Post score: 2

Original comments
Comment by gvdhoorn on 2016-06-16:
I'll refrain from answering the rest, but:

[..] what are the pros and cons of ROS-I compared to the operating systems developed by these companies [..] And what obstacles ROS-I faces to be massively deployed in industrial robots?

I get the impression you think ROS-Industrial intents to (cont'd)
Comment by gvdhoorn on 2016-06-16:
.. replace whatever industrial robot controllers are running now. That is not the case. We "only" (there's more to it, but I'll skip that) strive to integrate existing technology, and to make it easier for cutting edge research to transition to commercial settings.
Also: (cont'd)
Comment by gvdhoorn on 2016-06-16:
..

As we know, ABB, FANUC, Yaskawa and KUKA are the top 4 industrial robotics companies. Seems all of them have already started trying to use ROS-I on some of their products, but that's still in an early stage.

I would be interested to know your source(s) for that statement.
Comment by snakeninny on 2016-06-16:
Thanks for the quick responses. From here, here and here, all their statuses are "developmental", i.e. "This software is not yet production ready code", so I guess it's still far from deployment.
Comment by snakeninny on 2016-06-16:
@gvdhoorn And can you describe the differences (of any aspects) between ROS-I and the current operating systems those companies use? Thanks.
Comment by gvdhoorn on 2016-06-17:
The statuses are developmental because the components are still being developed (ie: actively), not just maintained. Also: I was more interested in your statement about "Seems all of them have already started trying to use ROS-I on some of their products, but that's still in an early stage."
Comment by gvdhoorn on 2016-06-17:\

And can you describe the differences (of any aspects) between ROS-I and the current operating systems those companies use? Thanks.

My question would be: why? Industrial controllers do one thing: control motion the best they can. That is only a single - relatively small - part of ROS.
Comment by snakeninny on 2016-06-17:
I googled "KUKA ROS" and found "controlling KUKA kr3 with ROS", which is a very basic question. I think if the integration of ROS and KUKA is quite mature, google would give me some more "advanced" results.
Comment by snakeninny on 2016-06-17:
And googling "ABB ROS" leaded me to "Control ABB robots remotely with ROS, Python, or C++. The few stars and issues left me an impression of unpopularity since I was originally from the iOS dev community, which is quite prosperous.
Comment by snakeninny on 2016-06-17:\

My question would be: why? Industrial controllers do one thing: control motion the best they can. That is only a single - relatively small - part of ROS.

Maybe I've asked a wrong question. The better one may be: What's the relationship of ROS-I and other robotics operating systems?
Comment by gvdhoorn on 2016-06-17:
You stated that "all robotics manufacturers have started using ROS-I on some of their products". Afaik, that is not true. That is the part of your question that I asked your sources for. Is this something you concluded yourself, or did you read / hear this somewhere?
Comment by gvdhoorn on 2016-06-17:
The ABB package you linked to is not part of ROS-Industrial. The KUKA link you posted is from an external user forum. I won't disagree with you that compared with a community like iOS development, the ROS-I community is small, but the target audience is radically different. Ind.Rob. is conservative.
Comment by gvdhoorn on 2016-06-17:\

I googled "KUKA ROS"

and

And googling "ABB ROS"

probably my search bubble, but for both of those queries the first 3 to 5 results actually lead directly to ROS-Industrial wiki pages and github repositories for me.
Comment by snakeninny on 2016-06-17:\

You stated that "all robotics manufacturers have started using ROS-I on some of their products" ... Is this something you concluded yourself, or did you read / hear this somewhere?

Yes, this is my conclusion and I've realized that "all" here is inaccurate ;( Sorry for that ;)
Comment by gvdhoorn on 2016-06-17:\

Yes, this is my conclusion [..]

Ok, clear. Only Motoman/Yaskawa have publicly available ROS components that are supported by the vendor. Others may follow, but right now it's almost all based on community effort. So I'm not sure I agree with your conclusion.

A:

The better one may be: What's the relationship of ROS-I and other robotics operating systems?

Now I can try to answer your question: if with robotics operating systems you are actually referring to the (often) custom, hard real-time operating systems found on industrial robot controllers (I'll refer to these as vendor OS), then the relationship is simple: ROS-Industrial provides packages that implement a bridge to expose access to the motion control and other capabilities of those vendor OS which allows a ROS application to control industrial robots just as they would a PR2, a Fetch or any other ROS-enabled robot.
Most of these drivers include small user-level programs that are installed on the controller that communicate using networking sockets with a ROS node on an external PC. The industrial controller is in complete control of the execution of the motion, ROS provides the trajectories. Controller-level safety is handled by the controller, low-level motion control is handled by the controller, nothing is replaced, only integrated.
If you will, the ROS-Industrial (driver) packages provide an abstracted control interface to the functionality supported by the industrial robot controller, effectively removing all / most vendor-specific aspects from how one would normally interact with such controllers.
There are many more components in ROS(-Industrial), but almost all of them have no (direct) relationship with industrial robot controllers.

Originally posted by gvdhoorn with karma: 86574 on 2016-06-17
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by snakeninny on 2016-06-17:
What I understand is that ROS-I is kind of a layer between ROS users/developers and vender OS, i.e. it's like a wrapper of various vendor OS APIs and provides a universal ROS-I API. Correct me if I'm wrong.
Comment by snakeninny on 2016-06-17:
Based upon this question, I have a new one at here. Would you mind taking a look? Thanks.

