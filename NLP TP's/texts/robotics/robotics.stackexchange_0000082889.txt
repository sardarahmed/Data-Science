Q:

How does robot_localization package work and what should the output be?

I am planning to use the robot_localization package but I am not sure what the output should be or how should the performance be? I need to use GPS for navigation.

Originally posted by Vinh K on ROS Answers with karma: 110 on 2017-09-19
Post score: 2

Original comments
Comment by jayess on 2017-09-19:
Have you read its wiki?

A:

Hi Vinh K! As @jayess said, the best place to start is the wiki page. If you want to get something up and running quickly I suggest you look at the example launch files and their corresponding configuration files
If you want to know how robot_localization produces a position estimate, it follows the standard process for the Extended Kalman Filter (EKF) and Unscented Kalman Filter (UKF). You're best to read the relevant literature on those topics, and read the associated paper here.
If you are using a GPS outdoors, then the output you care about will be topic labelled /odometry/filtered_map. This is a ROS odometry message and is the position of your robot relative to the reference frame /map, which will be created when you launch the localization nodes, and will be placed at the current position of your robot. Essentially /odometry/filtered_map is the position and orientation of your robot relative to its starting point.
Regarding performance, this will depend on your sensors. I'm using a high-accuracy GPS and I can get the position of my robot to within +/- 2 cm if its moving, less if it's stationary. If accuracy is important to you, I've found that the UKF is more accurate than the EKF.
ROS and robot_localization
The way to learn how robot_localization works is to thoroughly read the wiki, and (because you're using GPS) specifically this page here. But I'll give you a short(ish) overview. I won't make any assumptions about how much you or anyone reading this later knows, so apologises if this repeats stuff you already understand:
ROS navigation/localization packages revolve around three key frames:

/base_link This frame is rigidly attached to your robot, and basically represents the robot's position and orientation in 3D space.
/odom This represents your local frame of reference. Motion of /base_link relative to this frame is expected to be continuous (i.e. no discrete jumps) and localization packages that fuse data in this reference frame generally only fuse wheel odometry and IMU data, hence why the robot's position relative to /odom drifts over time.
/map This represents your global reference frame. Motion of /base_link relative to this frame will generally be more accurate and won't drift over time.

The purpose of robot_localization is to create the /odom and /map reference frames, and create an odometry message that gives the position of /base_link (i.e. your robot) relative to these frames. To do this, robot_localization uses three separate nodes which can be created by running the template launch files, as described in the template launch file:

This launch file provides an example of how to work with GPS data using robot_localization. It runs three nodes:

(1) An EKF instance that fuses odometry and IMU data and outputs an odom-frame state estimate

(2) A second EKF instance that fuses the same data, but also fuses the transformed GPS data from (3)

(3) An instance of navsat_transform_node, which takes in GPS data and produces pose data that has been
transformed into your robot's world frame (here, map). The node produces a map-frame state estimate.

The first EKF instance produces the odom->base_link transform. The second EKF produces the map->odom transform, but requires the odom->base_link transform from the first instance in order to do so. See the
params/dual_ekf_navsat_example.yaml file for parameter specification.

There really is no short explanation and it really is best to read the wiki as thoroughly as possible, because it can take a while to get your head around everything. If all you need is an odometry message, run the template launch files (carefully modifying the navsat_transform parameters to suit your IMU and magnetic declination) and then use the /odometry/filtered_map rostopic.

Originally posted by M@t with karma: 2327 on 2017-09-19
This answer was ACCEPTED on the original site
Post score: 6

Original comments
Comment by Vinh K on 2017-09-20:
thanks M@t. The reason I ask was because I went through their wiki but it is not step by step and what output we should get to know that the vehicle is localized after using the package.
Comment by M@t on 2017-09-20:
I don't fully understand your question sorry. Do you mean an output which tells you that the package has calculated the position of the robot? (i.e. localized it). The robot will be localized as soon as the EKF or UKF starts publishing odometry messages (a second after running the launch files)
Comment by Vinh K on 2017-09-20:
I have read through the documentation. But without what output I should expect. I can not determine how it behaves. I have tested it on Gazebo simulator using Husky. I ran 2 nodes

ukf_localization_node
navsat_transform_node

Comment by Vinh K on 2017-09-20:
after running navsat_transform_node, I saw initial odometry pose is origin: (6.30098376362836485, 2.28487938934057466384658 0) and Rotation (RPY)....
Comment by Vinh K on 2017-09-20:
back to your question, yes. How do I know if the robot position is calculated? and the sensors from GPS, IMU, Odometry is fused to estimate the position. What should I look for? I did not run launch files. I only run the node files above.
Comment by M@t on 2017-09-20:
If you're just using robot_localization, you'll need to run two EKF or UKF nodes, a local and a global one. If you run the launch files you should see them and navsat_transform listed when you use rostopic list.
Comment by M@t on 2017-09-20:
You'll know the position of your robot has been calculated as soon as the EKF/UKF nodes start publishing an odometry message. How familiar are you with the relationship between /base_link, /odom, /map reference frames and the ROS navigation stack?
Comment by Vinh K on 2017-09-25:
I have not use it that much. But I understand what those are.
Comment by M@t on 2017-09-27:
I've added a bit more to my explanation (which may have just made it more confusing). If you're having problems with anything specific, make a separate ros question for it.

