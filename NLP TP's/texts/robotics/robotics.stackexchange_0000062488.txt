Q:

seperate build and install target machines

Hi,
I am new to ROS community. I have dedicated build server for all ROS packages. Once a package is successfully build I want to transfer only package binaries to target machine.
The target machine has ROS installed. Currently I am following approach.

catkin_make -install -DCMAKE_INSTALL_PREFIX package_name
compress the install directory
transfer and decompress the ROS package
Update ROS_PACKAGE_PATH on target and
rosrun pacakge_name executable

However ROS is failing to locate the package.
I am guessing I need to update the scripts setup scripts generated in build process. However, these scripts have hardcoded values of build project path so cannot directly copy paste.
I even tried to replace catkin workspace directory path with installed path on target machine. Still rosrun cannot find the package.
Can anyone please guide me in this regard?
I am using ROS 1.11.8 on Ubuntu 14.04

Originally posted by Jarvis on ROS Answers with karma: 67 on 2014-09-09
Post score: 2

Original comments
Comment by pachuc on 2014-09-16:
Were you able to figure something out?
Comment by Jarvis on 2014-10-28:
Yes. I have wrote a script to provide this functionality. One requirement for my script to work is to  provide install rule for each package and run catkin_make install to build packages. If you need I can upload it in separate GitHub repo and provide link here.

A:

I have come up with vary ugly way of doing this.
On build server I have a script which creates compressed version of package installable. e.g
catkin_make install --pkg pkg_name -DCMAKE_INSTALL_PREFIX pkg_install
zip -r package.zip pkg_install
Now I can copy this compressed package install directory on my target machine.
Target machine has the ROS installed but no package source code.
On target machine I have another script which performs following tasks:

create a workspace directory
create ".catkin" and ".rosinstall" files inside the workspace. (This marks the workspace as catkin_workspace)
copy ros setup files from ros_install_directory to worksapce directory
This is initialization parts done once per target
For per package
The package is unzipped in tmp dir
The package contents are something like
tmp/ros_package/lib
tmp/ros_package/share
...
Now I copy content of
copy tmp/ros_package/lib/* to workspace/lib/<package_name>/
copy tmp/ros_package/share/* to workspace/lib/<package_name>/
....

This process actually worked. I am able to run newly installed nodes on target without having its source code.
However, the scripts are very complicated and not very easy to maintain.
Can someone suggest a better way?

Originally posted by Jarvis with karma: 67 on 2014-09-19
This answer was ACCEPTED on the original site
Post score: 1

