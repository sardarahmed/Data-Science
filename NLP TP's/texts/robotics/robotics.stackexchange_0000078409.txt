Q:

What is the recommended way to give a robot a predefined set of waypoints?

I am assuming I have a map, and the robot is localized within it.
I would like to give an input of waypoints as a csv, json, or similar, and I would like the robot to travel there.
The waypoints need to be generated based on the map, to make sure they are valid.
I can subscribe to the map topic, and get the map that way, but I am not sure how I can send a set of points to which the robot needs to travel to.
I would also like to specify the direction in which the robot should face, at those locations.
(I want my robot to travel in a grid like pattern, stopping at every intersection)
What is the ROS way of doing this?
Thank you
EDIT:
I found a way to solve the problem, it involves the method M@t mentioned. Here is my code for anybody that needs it:
https://github.com/cristian-frincu/simple_navigation_goals

Originally posted by Cristian11235 on ROS Answers with karma: 55 on 2017-01-17
Post score: 5

Original comments
Comment by spiritninja on 2019-05-29:
Hi @Cristian11235
This may seem to be off topic or against the norms here as I'm not creating a question, but I couldn't find any other way.
Guess I'm  posting pretty late. I did try using your script.
Is it such that the goal points created appear out of the map frame for maps other than the one included with the script?
When I use it on a different map, the selected waypoints have locations out of the map frame and so do the ones created in between them.
Would it be possible to know why this happens?
Thank you.

A:

I've done exactly what you're asking for:

So I'll briefly describe what you can do. Building on what spmaniato said, you can use three core components:

The Navigation Stack (specifically the move_base node): The move_base node lets you specify a move goal in any reference frame that the robot will then attempt to reach. The move_base node uses a local and global costmap, and it will generally throw an error if you issue a move goal that is outside either of these maps or is otherwise impossible to reach (because it is inside an obstacle for example). You can also specify a desired heading. However, the move_base node won't give you any feedback on how close you are to a goal or when you've reached it which is why you can use...
The actionlib package Which implements a action client-server system that allows you to issue commands and get feedback on their state such as "SUCCEEDED" or "ACTIVE". move_base actually provides a basic implementation for an action server, and simple move goal commands. So all you need to do is write an action client which can be...
A custom ROS node written by you This node needs to read your .txt or .csv file, issue a command, check the status and issue a new one all within a 'for' or 'while' loop. This node will act as the client half of the actionlib package. When writing this node I suggest you start with this tutorial. If you're coding in C++ you can copy and paste code. If you're coding in Python there isn't an equivalent tutorial unfortunately, but there is another ROS answers question that provides some python code do this here. I think there is also some questions on ros.answers somewhere that also show you how to do the same thing in python.

This should give you an idea of which ROS packages to start looking at. I'm a bit pressed for time, hence the short explanation. But if you have any issues just ask and I can go into more detail and provide some of the code I used.
[EDIT:] If you want to skip the actionlib stuff and do all the checking/feedback stuff yourself you can issue a move_base_msg to the /move_base/goal topic directly. Also, if your move goals are quite far away from the robot (more than 10 m) there are some specific changes you may want to make to the navigation stack to make it accurate over longer distances (again, I can go into greater detail if you ask me to)

Originally posted by M@t with karma: 2327 on 2017-01-17
This answer was ACCEPTED on the original site
Post score: 7

Original comments
Comment by the3kr on 2021-02-04:
@M@t Do you mind sharing more about specific changes to make to the navigation stack to make it accurate over longer distances? I'm doing a gps-based waypoint navigation. Thanks
Comment by M@t on 2021-02-06:
Honestly I haven't touched the nav stack in a while, and the comments section isn't really the place to have that  discussion. I suggest you open your own ROS question, describe your setup and what you are trying to do, then ask for advice. That way the whole community can provide answers as well as just me.

