Q:

Adjust RPATH for cross-compilation target

Hi all,
right now I'm successfully using eros to build ROS nodes for my gumstix hardware, but there is only one minor issue:
ROS host installation is located here: /home/phil/ros/cturtle
ROS target installation is located here: /opt/ros/cturtle
Now I've got the problem of not finding ROS related dynamic libraries when executing the nodes on my target. All RPATHs in my binaries refer to /home/phil/ros/cturtle instead of /opt/ros/cturtle. Is there any convenient way of setting a different RPATH prefix during cross-compilation instead of adding all local lib/ directories within the ROS tree on the target system?
I'm not too familiar with the ROS build system nor am I with cmake in general. That's the reason why I bother to ask here ;)
Any feedback is much appreciated!
Cheers
Phil

Originally posted by da-phil on ROS Answers with karma: 81 on 2011-04-14
Post score: 3

A:

Right now I'm just replacing the RPATH prefixes in the freshly created binaries by this little script which is part of the deployment.
call it this way
> script /path/to/ros_node1 /path/to/ros_node2
and your executables will be replaced with new rpaths.
SEARCH_PATH="/home/phil/ros/cturtle"
REPLACE_PATH="/opt/ros/cturtle"

which chrpath > /dev/null
if [ $? != 0 ]; then
    echo "Couldn't find the program 'chrpath'. Maybe it's existant but not found in the PATH searchpath"
    echo "exit..."
    exit 1
fi

if [ $# -lt 1 ]; then
    echo "Please specifiy a list of files which you want to work on..."
    echo "e.g: \\\$ replace_rpath program1 program2"
    exit 1
fi

for FILE in $@ ; do
    echo "-- Preparing $FILE"
    if [ ! -e "$FILE" ] || [ ! -f "$FILE" ]; then
            echo "'$FILE' is either not a file or doesn't exist!"
    else
            chrpath -l $FILE  | sed -e "s+.*=++g" -e "s+${SEARCH_PATH}+${REPLACE_PATH}+g" | xargs -I {} chrpath -r {} $FILE
            if [ $? != 0 ]; then
                    echo "chrpath failed!"
            fi
    fi
done

Not nice, but at least a starting point.
I'm still looking forward for other - not so brutal - solutions.

Originally posted by da-phil with karma: 81 on 2011-04-17
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by Brian Gerkey on 2011-04-20:
FWIW, we do something similar when building binary debs.  The script that does the RPATH-fixing is: https://code.ros.org/svn/ros/stacks/ros_release/trunk/rosdeb/resources/source_deb/fixrpath.py.  It's prety much a Python version of your bash script.
Comment by da-phil on 2011-04-18:
I fully agree on calling this approach  "hackish" ;) however there is no nice and sophisticated solution in my mind, yet.  you mentioned that troy is working on rosbuild2. i'm looking forward for seeing a more generic approach to build software with ROS where cross compilation and target deployment is only a usecase not a special treatment.
Comment by Daniel Stonier on 2011-04-18:
Ultimately both of those still feel hackish. I do think the use case scenario (cross-compiling) is sufficient to propose a small working environment change to your colleagues. Long term I find its always easier and far more comfortable to find ways to work with a system rather than fight it.
Comment by Daniel Stonier on 2011-04-18:
I had a similar script a while ago. Could extend this with a python tree crawling script (slow). Or drop in a replacement for some of the rosbuild cmake to fix paths (faster).

