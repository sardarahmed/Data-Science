Q:

Two nodes with common base class declaring a namespaced service path

I want to be able to use a base class for declaring a service that separate nodes can utilize.  I thought I might be able to remap this in a launch file, but I must be doing something wrong.
To illustrate, imagine this class hierarchy:
class Base(object):
   def __init__(self):
      service = rospy.Service('get_state', ...) 

class Node1(Base):
  def __init__(self):
      super(Node1, self).__init__()
      rospy.init_node('node1')

class Node2(Base):
  def __init__(self):
      super(Node2, self).__init__()
      rospy.init_node('node2')
 

My hope would be that I could call:
$ rosservice my_pkg /node1/get_state
$ rosservice my_pkg /node2/get_state

Instead I have a service named "/get_state" and a collision.
I have tried a few things:

re-order so init_node is called before super of the base class
use ~get_state but this results in '/unnamed/get_state' which is still a collision
Use a launch file to remap the namespace

This last attempt included a launch file like this:
<node pkg="my_pkg" name="node1" type="node1">
   <remap from="get_state" to="node1/get_state"/>
</node>

The result still seems to be a name collision and only a /get_state for the first node and not the second.
Is there a simpler/better way to go about something like this?

Originally posted by j12y on ROS Answers with karma: 51 on 2015-04-28
Post score: 1

A:

The answer is simply to include a tilde (~) when creating the service.  A good practice would be to call init_node from the main block to prevent the mistake of including more than one node in a single process.  There isn't much benefit in calling the init_node from within the class init.
# src/foo.py
class Base(object):
   def __init__(self):
      service = rospy.Service('set_state', ...)    # results in /set_state
      service = rospy.Service('~get_state', ...)   # results in /node1/get_state (as desired)

# nodes/node1.py
import foo
class Node1(foo.Base):
  def __init__(self):
      super(Node1, self).__init__()

if __name__ == '__main__':
    rospy.init_node('node1')  # moved out of Node1.__init__
    node = Node1()
    ...

That seems consistent with the docs to keep the Service private to the node's namespace...
http://wiki.ros.org/Names

Originally posted by j12y with karma: 51 on 2015-04-28
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by ahendrix on 2015-04-28:
rospy.init_node() is global; you should not call it more than once in your program.
Comment by j12y on 2015-04-28:
Sure, but to be clear that is not the point of my question.  For illustration and brevity I omitted that Node1 and Node2 are two separate nodes / processes / sub-components -- not a single program.  That's why having a library with some common functionality seems valuable for consistency between.
Comment by ahendrix on 2015-04-30:
For clarity and to avoid calling rospy.init_node more than once, I usually call it from main().
Comment by j12y on 2015-04-30:
That's a great point, there probably is no need to have the init_node call in the init at all.  I guess I've gotten into the habit of keeping the main block simple in other projects.  Thanks.

