Q:

care-o-bot simulation extremely slow

I'm trying to simulate care-o-bot in gazebo running electric with ubuntu 10.4.
Although not all of the cob_dashboard buttons seem to work, the ones that do are extremely slow.  Simply extending the tray takes almost 2 minutes.  Is this to be expected?  Also, can anyone suggest why the other buttons (particularly, the base motions) don't seem to do anything?
Thanks,
Paul.

Originally posted by Paul0nc on ROS Answers with karma: 271 on 2011-09-18
Post score: 2

Original comments
Comment by Paul0nc on 2011-09-19:
Hi Hsu.  I'm running (verbatim) the commands given at:  http://www.care-o-bot-research.org/software/tutorials/move-the-robot-in-simulation.  I've tried running with both the dashboard and with the teleop keyboard commands (but not at the same time).  I get the similarly slow response in both cases.  Would appreciate any help you can give me.
Comment by hsu on 2011-09-18:
can you provide more details as to what you are running, what commands were used to launch/control the simulation?  thanks.

A:

In electric, I am getting about ~0.35Xreal-time on my desktop (i7 quad), if you are getting 0.03xreal-time, something is wrong.  Can you try profiling it with your favorite profiler (e.g. valgrind) and post some results?
The 0.35Xreal-time should be improvable too, but let start with the 0.03X problem?
I tried turning off the kinect camera by commenting out following line in the urdf
<xacro:cob_kinect_gazebo_v0 name="${name}" ros_topic="${ros_topic}"/>

and I am getting about 1.4Xreal-time.  Taking a closer look, the current code was using gazebo_ros_block_laser plugin with 160X160 configuration.  A better way to implement this is to use the gazebo_ros_openni_kinect plugin, for example, update your kinect.gazebo.xacro file to look something like this:
<?xml version="1.0"?>
<root xmlns:sensor="http://playerstage.sourceforge.net/gazebo/xmlschema/#sensor"
      xmlns:controller="http://playerstage.sourceforge.net/gazebo/xmlschema/#controller"
      xmlns:interface="http://playerstage.sourceforge.net/gazebo/xmlschema/#interface"
      xmlns:xacro="http://ros.org/wiki/xacro">
  
<xacro:macro name="cob_kinect_gazebo_v0" params="name ros_topic">

  <gazebo reference="${name}_frame">

    <sensor:camera name="${name}_sensor">
      <imageFormat>R8G8B8</imageFormat>
      <imageSize>320 240</imageSize>
      <hfov>57</hfov>
      <nearClip>0.01</nearClip>
      <farClip>5</farClip>
      <updateRate>1.0</updateRate>
      <baseline>0.2</baseline>
      <controller:gazebo_ros_openni_kinect name="${name}_controller" plugin="libgazebo_ros_openni_kinect.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>1.0</updateRate>
        <imageTopicName>/${ros_topic}/image_raw</imageTopicName>
        <pointCloudTopicName>/${ros_topic}/points</pointCloudTopicName>
        <cameraInfoTopicName>/${ros_topic}/camera_info</cameraInfoTopicName>
        <frameName>/${name}_frame</frameName>
        <pointCloudCutoff>0.5</pointCloudCutoff>
        <distortion_k1>0.00000001</distortion_k1>
        <distortion_k2>0.00000001</distortion_k2>
        <distortion_k3>0.00000001</distortion_k3>
        <distortion_t1>0.00000001</distortion_t1>
        <distortion_t2>0.00000001</distortion_t2>
      </controller:gazebo_ros_openni_kinect>
    </sensor:camera>

    <material value="Gazebo/Red" />
    <turnGravityOff>true</turnGravityOff>
  </gazebo>

</xacro:macro>

</root>

and you should see drastic improvements in speed.
Aside from performance gains, fundamentally, a depth camera like Kinect is better modeled by a gazebo_ros_camera/gazebo_ros_openni_kinect than gazebo_ros_block_laser.  In gazebo_ros_block_laser, the scan angles are constant as you make a horizontal or vertical scan, but for kinect, you actually want equal size pixels for each ray trace, which means the angle between rays as you scan vertically or horizontally is not constant.

Originally posted by hsu with karma: 5780 on 2011-09-19
This answer was ACCEPTED on the original site
Post score: 4

Original comments
Comment by Paul0nc on 2011-09-24:
Commenting out the kinect line give me (initially) about 0.8 real time.  However, this decreases to about 0.5 after a few seconds. Using the kinect plugin gives me about 0.5.  If I also add 2dnav, performance degrades to about 0.3.  All these cases are better than I was previously experiencing... but 2dnav is still slow to look at.
Comment by RobMichael on 2011-09-19:
Thanks a lot! On my laptop commenting out the kinect line gains same factor than for you, now running 0.15. I'll try your xacro file and do a oprofile soon, but need a lot of things get done before leaving to iros. So maybe that will take a while.

