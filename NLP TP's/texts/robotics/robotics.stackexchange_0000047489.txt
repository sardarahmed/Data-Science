Q:

ROS Answers SE migration: eros on ARM

Hi there! I'm  currently trying to use ROS on an ARM board (which contains an ARM9, the processor is an OMAP L138). I have successfully completed the eros wiki until Root Filesystems where i'm stuck right now because the wiki seems to be incomplete at that point.
Could anybody give me some tips about how to assemble a Root Filesystem that contains all the necessary item to run ROS on my board?. Also, the links to Deployment and Running ROS will be very handy but seem to be not fully completed.

Originally posted by ErleRobot on ROS Answers with karma: 1 on 2013-01-21
Post score: 0

Original comments
Comment by bit-pirate on 2013-01-23:
Although I can't help you with your specific problem, I'd like to inform you about the embedded SIG (Special Interest Group). eROS is a special case, but for other embedded issues, you might find help there.
Comment by ErleRobot on 2013-01-25:
Thanks for your help :)
Comment by bit-pirate on 2013-01-27:
You are welcome. Another small comment from myself: If your questions has been answered, e.g. by Daniel's answer below, please mark your question as answered. Thank you!

A:

Sent an email, but will repeat it here to put it somewhere publicly.
eros is right now, out of action. It has been so since about electric - I've been helping them try and build up catkin - proof of concepting and prototyping through electric and fuerte so that cross-compiling is easier and eliminates all the hacks we were doing in eros.
Groovy's working now for us and that's the direction you should go in for cross-compiling. If you're not familiar with the catkin process I can help you there.
If you're just cross-compiling, that will work great. If you want to put an entire ros system on the core, you can probably pick up the recipes that I was using to cross-compile the dependencies. However, I'd actually recommend not putting the whole ros on an arm9 core. You don't have too many cycles there and you need every one you have for any robotics algorithm you're running. To get data back to a ros system in a compatible way, use rosserial with a serial link, or create your own custom protocol/bridge. Another alternative that I haven't tested yet but looks promising is https://github.com/openrobots-dev/uROSnode, which would let you run a lightweight c transport over the ethernet back to your main cpu. It's still early in development though.

Originally posted by Daniel Stonier with karma: 3170 on 2013-01-23
This answer was ACCEPTED on the original site
Post score: 2

