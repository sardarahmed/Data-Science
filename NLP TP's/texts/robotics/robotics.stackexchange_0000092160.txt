Q:

Not getting laser scan runing libgazebo_ros_gpu_laser plugin

Hello all,
I have been following the tutorials in the book Programming Robots with ROS and I am on the part on page 306 where we create a simulation of the robots laser scanner in gazebo. My goal is to use what I learn from the book to be able to make my own autonomous robot for school. The computer I will be using in my final robot doesn't seem to be powerful enough to run gazebo and rviz. Thus I am trying to split all the code up so that the robot computer runs all the navigation and everything that would be on the robot itself while the simulation is running on my beefier machine. i am running ROS Kinetic and Ubuntu on both
With that said the problem I am running into is that when I run the simulation I can't see any data from the laser scanner in rviz. To investigate, I ran rostopic echo /scan and this is what I got back
---
header: 
  seq: 7178
  stamp: 
    secs: 180
    nsecs: 212000000
  frame_id: "hokuyo_link"
angle_min: -1.57079994678
angle_max: 1.57079994678
angle_increment: 0.00436940183863
time_increment: 0.0
scan_time: 0.0
range_min: 0.10000000149
range_max: 30.0
ranges: [-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf]
intensities: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]

So obviously I'm getting scan messages from the libgazebo_ros_gpu_laser plugin (or somewhere?) but these aren't correct. When i place objects in front of the simulated robot the values never change. i have tried centralizing everything on my simulation computer, combining the two launch files, to see if maybe something was getting lost there but to no avail.
Here is the launch file from my robot computer.
<launch>
  <!-- Load the TortoiseBot URDF model into the parameter server >
  <param name="robot_description" textfile="$(find navigation)/src/urdf/testbot.urdf" /-->
  
  <!-- Convert /joint_states messages published by Gazebo to /tf messages,
       e.g., for rviz-->
  <node name="robot_state_publisher" pkg="robot_state_publisher"
        type="robot_state_publisher"/>
  <node name="map_server" pkg="map_server" type="map_server"
        args="$(find navigation)/src/maps/willow-2010-02-18-0.10.yaml"/>

  <include file="$(find amcl)/examples/amcl_diff.launch"/>

  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <rosparam file="$(find navigation)/src/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find navigation)/src/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find navigation)/src/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find navigation)/src/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find navigation)/src/base_local_planner_params.yaml" command="load" />
  </node>

</launch>

And here is the URDF (also on the robot computer)
<?xml version="1.0"?>
<robot name="tortoisebot">

  <link name="base_link">
    <visual>
      <geometry>
        <box size="0.6 0.3 0.3"/>
      </geometry>
      <material name="silver">
        <color rgba="0.75 0.75 0.75 1"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="0.6 0.3 0.3"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="1.0"/>
      <inertia ixx="0.015" iyy="0.0375" izz="0.0375" ixy="0" ixz="0" iyz="0"/>
    </inertial>
  </link>

  <link name="front_caster">
    <visual>
      <geometry>
        <box size="0.1 0.1 0.3"/>
      </geometry>
      <material name="silver"/>
    </visual>
    <collision>
      <geometry>
        <box size="0.1 0.1 0.3"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.1"/>
      <inertia ixx="0.00083" iyy="0.00083" izz="0.000167" ixy="0" ixz="0" iyz="0"/>
    </inertial>
  </link>

  <joint name="front_caster_joint" type="continuous">
    <axis xyz="0 0 1"/>
    <parent link="base_link"/>
    <child link="front_caster"/>
    <origin rpy="0 0 0" xyz="0.3 0 0"/>
  </joint>

  <link name="front_wheel">
    <visual>
      <geometry>
        <cylinder length="0.05" radius="0.035"/>
      </geometry>
      <material name="black"/>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.05" radius="0.035"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.1"/>
      <inertia ixx="5.1458e-5" iyy="5.1458e-5" izz="6.125e-5" ixy="0" ixz="0" iyz="0"/>
    </inertial>
  </link>

  <joint name="front_wheel_joint" type="continuous">
    <axis xyz="0 0 1"/>
    <parent link="front_caster"/>
    <child link="front_wheel"/>
    <origin rpy="-1.5708 0 0" xyz="0.05 0 -.15"/>
  </joint>

  <link name="right_wheel">
    <visual>
      <geometry>
        <cylinder length="0.05" radius="0.035"/>
      </geometry>
      <material name="black">
        <color rgba="0 0 0 1"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.05" radius="0.035"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.1"/>
      <inertia ixx="5.1458e-5" iyy="5.1458e-5" izz="6.125e-5" ixy="0" ixz="0" iyz="0"/>
    </inertial>
  </link>

  <joint name="right_wheel_joint" type="continuous">
    <axis xyz="0 0 1"/>
    <parent link="base_link"/>
    <child link="right_wheel"/>
    <origin rpy="-1.5708 0 0" xyz="-0.2825 -0.125 -.15"/>
  </joint>

  <link name="left_wheel">
    <visual>
      <geometry>
        <cylinder length="0.05" radius="0.035"/>
      </geometry>
      <material name="black"/>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.05" radius="0.035"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.1"/>
      <inertia ixx="5.1458e-5" iyy="5.1458e-5" izz="6.125e-5" ixy="0" ixz="0" iyz="0"/>
    </inertial>
  </link>

  <joint name="left_wheel_joint" type="continuous">
    <axis xyz="0 0 1"/>
    <parent link="base_link"/>
    <child link="left_wheel"/>
    <origin rpy="-1.5708 0 0" xyz="-0.2825 0.125 -.15"/>
  </joint>

  <link name="hokuyo_link">
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.1 0.1 0.1"/>
      </geometry>
    </collision>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.1 0.1 0.1"/>
      </geometry>
    </visual>
    <inertial>
      <mass value="1e-5" />
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
    </inertial>
  </link>

  <joint name="hokuyo_joint" type="fixed">
    <axis xyz="0 1 0" />
    <origin xyz="0 0 0.2" rpy="0 0 0"/>
    <parent link="base_link"/>
    <child link="hokuyo_link"/>
  </joint>

  <gazebo>
    <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
    <legacyMode>false</legacyMode>
      <leftJoint>right_wheel_joint</leftJoint>
      <rightJoint>left_wheel_joint</rightJoint>
      <robotBaseFrame>base_link</robotBaseFrame>
      <wheelSeparation>0.25</wheelSeparation>
      <wheelDiameter>0.07</wheelDiameter>
      <publishWheelJointState>true</publishWheelJointState>
    </plugin>
  </gazebo>

  <gazebo>
    <plugin name="joint_state_publisher" filename="libgazebo_ros_joint_state_publisher.so">
      <jointName>front_caster_joint, front_wheel_joint</jointName>
    </plugin>
  </gazebo>

  <gazebo reference="hokuyo_link">
    <sensor type="gpu_ray" name="hokuyo">
      <pose>0 0 0 0 0 0</pose>
      <visualize>false</visualize>
      <update_rate>40</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>720</samples>
            <resolution>1</resolution>
            <min_angle>-1.570796</min_angle>
            <max_angle>1.570796</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.10</min>
          <max>30.0</max>
          <resolution>0.01</resolution>
        </range>
      </ray>
      <plugin name="gpu_laser" filename="libgazebo_ros_gpu_laser.so">
        <topicName>/scan</topicName>
        <frameName>hokuyo_link</frameName>
      </plugin>
    </sensor>
  </gazebo>
</robot>

and finally here is the launch file from the simulation computer
<launch>
  <!-- Start Gazebo with a world containing a large building-->
  <!-- include file="$(find gazebo_ros)/launch/willowgarage_world.launch"/-->
  <include file="$(find gazebo_ros)/launch/empty_world.launch"/>

  <!-- Load the TortoiseBot URDF model into the parameter server -->
  <param name="robot_description" textfile="$(find simulateART)/src/urdf/testbot.urdf" />

  <!-- Spawn a TortoiseBot in Gazebo, taking the description from the parameter server -->
  <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model tortoisebot -x 8 -y -8" />
</launch>

All of the parameter yaml files for configuring costmaps and stuff are exactly the same as the example in the book which can be found here https://github.com/osrf/rosbook/tree/master/code/tortoisebot.
if you need any other files please let me know im still pretty new to this so im not sure what is helpful, otherwise any help would be deeply appreciated.
UPDATE:
when running the launch file on the robot computer i noticed that i get a lot of warning messages, i feel like they might have something to do with it.
[ WARN] [1561305765.785210967, 503.982000000]: Could not get robot pose, cancelling reconfiguration
[ WARN] [1561305766.285013164, 504.566000000]: The origin for the sensor at (0.64, -1.58) is out of map bounds. So, the costmap cannot raytrace for it.
[ WARN] [1561305766.922649478, 505.095000000]: Costmap2DROS transform timeout. Current time: 505.0950, global_pose stamp: 504.7330, tolerance: 0.3000
[ WARN] [1561305766.928649635, 505.100000000]: Could not get robot pose, cancelling reconfiguration
[ WARN] [1561305767.918232886, 506.182000000]: Costmap2DROS transform timeout. Current time: 506.1820, global_pose stamp: 505.3410, tolerance: 0.3000
[ WARN] [1561305767.922449290, 506.182000000]: Could not get robot pose, cancelling reconfiguration
[ WARN] [1561305768.936930564, 507.217000000]: Costmap2DROS transform timeout. Current time: 507.2170, global_pose stamp: 505.9590, tolerance: 0.3000
[ WARN] [1561305768.945736047, 507.217000000]: Could not get robot pose, cancelling reconfiguration
[ WARN] [1561305770.019374930, 508.285000000]: Costmap2DROS transform timeout. Current time: 508.2850, global_pose stamp: 506.5450, tolerance: 0.3000
[ WARN] [1561305770.028075162, 508.285000000]: Could not get robot pose, cancelling reconfiguration
[ WARN] [1561305771.011722858, 509.286000000]: Costmap2DROS transform timeout. Current time: 509.2860, global_pose stamp: 506.8370, tolerance: 0.3000
[ WARN] [1561305771.015126307, 509.286000000]: Could not get robot pose, cancelling reconfiguration
[ WARN] [1561305772.067524977, 510.289000000]: Costmap2DROS transform timeout. Current time: 510.2890, global_pose stamp: 507.7440, tolerance: 0.3000
[ WARN] [1561305772.069469925, 510.289000000]: Could not get robot pose, cancelling reconfiguration
[ WARN] [1561305773.072947592, 511.331000000]: Costmap2DROS transform timeout. Current time: 511.3000, global_pose stamp: 508.0530, tolerance: 0.3000
[ WARN] [1561305773.086365272, 511.331000000]: Could not get robot pose, cancelling reconfiguration
[ WARN] [1561305774.212121107, 512.343000000]: Costmap2DROS transform timeout. Current time: 512.3430, global_pose stamp: 508.8150, tolerance: 0.3000
[ WARN] [1561305774.285402423, 512.410000000]: Could not get robot pose, cancelling reconfiguration
[ WARN] [1561305775.103163516, 513.345000000]: Costmap2DROS transform timeout. Current time: 513.3450, global_pose stamp: 509.9520, tolerance: 0.3000
[ WARN] [1561305775.327421731, 513.541000000]: Could not get robot pose, cancelling reconfiguration
[ WARN] [1561305775.476919036, 513.703000000]: The origin for the sensor at (-1.54, -0.80) is out of map bounds. So, the costmap cannot raytrace for it.
[ WARN] [1561305776.648621322, 514.895000000]: The origin for the sensor at (-1.54, -0.80) is out of map bounds. So, the costmap cannot raytrace for it.
[ WARN] [1561305777.745443548, 515.913000000]: The origin for the sensor at (-1.54, -0.80) is out of map bounds. So, the costmap cannot raytrace for it.
[ WARN] [1561305778.575420137, 516.789000000]: Costmap2DROS transform timeout. Current time: 516.7890, global_pose stamp: 516.4630, tolerance: 0.3000
[ WARN] [1561305778.577099547, 516.789000000]: Could not get robot pose, cancelling reconfiguration
[ WARN] [1561305779.576685364, 517.791000000]: Costmap2DROS transform timeout. Current time: 517.7910, global_pose stamp: 517.2380, tolerance: 0.3000
[ WARN] [1561305779.577278039, 517.791000000]: Could not get robot pose, cancelling reconfiguration
[ WARN] [1561305780.624024223, 518.820000000]: Costmap2DROS transform timeout. Current time: 518.8200, global_pose stamp: 517.8040, tolerance: 0.3000
[ WARN] [1561305780.624469113, 518.820000000]: Could not get robot pose, cancelling reconfiguration
[ WARN] [1561305781.649217304, 519.890000000]: Costmap2DROS transform timeout. Current time: 519.8900, global_pose stamp: 518.4720, tolerance: 0.3000
[ WARN] [1561305781.649647318, 519.890000000]: Could not get robot pose, cancelling reconfiguration
[ WARN] [1561305782.700151256, 520.895000000]: Costmap2DROS transform timeout. Current time: 520.8940, global_pose stamp: 520.0750, tolerance: 0.3000
[ WARN] [1561305782.716671716, 520.923000000]: Could not get robot pose, cancelling reconfiguration
[ WARN] [1561305783.664612499, 521.897000000]: Costmap2DROS transform timeout. Current time: 521.8970, global_pose stamp: 521.5220, tolerance: 0.3000
[ WARN] [1561305783.749437577, 521.982000000]: Could not get robot pose, cancelling reconfiguration
[ WARN] [1561305784.067049709, 522.292000000]: The origin for the sensor at (-1.54, -0.80) is out of map bounds. So, the costmap cannot raytrace for it.
[ WARN] [1561305785.062024027, 523.314000000]: The origin for the sensor at (-1.54, -0.80) is out of map bounds. So, the costmap cannot raytrace for it.
[ WARN] [1561305786.245647356, 524.496000000]: The origin for the sensor at (-1.54, -0.80) is out of map bounds. So, the costmap cannot raytrace for it.
[ WARN] [1561305787.256514189, 525.498000000]: The origin for the sensor at (-1.54, -0.80) is out of map bounds. So, the costmap cannot raytrace for it.
[ WARN] [1561305788.543138928, 526.701000000]: The origin for the sensor at (-1.54, -0.79) is out of map bounds. So, the costmap cannot raytrace for it.
[ WARN] [1561305789.527102446, 527.752000000]: The origin for the sensor at (-1.54, -0.79) is out of map bounds. So, the costmap cannot raytrace for it.

Originally posted by logan.ydid on ROS Answers with karma: 21 on 2019-06-23
Post score: 0

Original comments
Comment by tropic on 2020-10-15:
Did you ever get it to work? What computer and GPU were you running it on?

A:

If I understand you well you are trying to see the output of your 2D laser scan. Is your world empty? if so there is not object to reflect back the laser points therefore your laser /scan message will include nothing but infinity distance measured by the laser (there is no object to return back any laser points). Also as a good rule of thumb, when you visualize it in rviz make sure you are on the right tf tree. (i.e. base_link)

Originally posted by cassini.huygens with karma: 80 on 2019-06-23
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by logan.ydid on 2019-06-25:
thank you for your reply! the tutorial says to start in an empty world and place items in front of the robot to see the laser lines in RViz. i also tried placing the robot in the willowGarage example world (commented in my code). in both instances the output from rostopic was as seen above. what do you meen by make sure youre on the right tf tree?
Comment by cassini.huygens on 2019-06-26:
Display->Global Option->Fixed Frame: make sure in this section in rviz, you are on your base_link frame of your robot. What's your rosrun rqt_tf_tree rqt_tf_tree? so you can see all inf being printed at your terminal when your rostopic echo the laser topic?
Comment by logan.ydid on 2019-06-26:
My rviz configuration is as you said. I ran tf_ tree (see image here) the hokuyo_link is coming off of the base_link but I notice there are 0 transforms. What does this mean? And yes no matter what I do to the robot in gazebo I show all inf in rostopic.

