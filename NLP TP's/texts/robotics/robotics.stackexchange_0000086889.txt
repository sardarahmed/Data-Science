Q:

robot_localization odometry message bursts

Hi,
I'm using robot_localization package to fuse wheel odometry and IMU of a robot with the EKF node. The ekf node outputs the odometry to /odom topic.
When inspecting the rate of this output I spotted weird peaks of the publish rate (see screen shots below). Frequency parameter is set to 100 Hz. It looks as if there are sudden bursts of odometry messages. Some consecutive messages have the exact same time stamp but different pose (second screen shot). That leads to problems with some other nodes (e.g. cartographer).
Any idea why this happens?
rostopic hz output:
$ rostopic hz -w5 /odom
subscribed to [/odom]
WARNING: may be using simulated time
no new messages
average rate: 98.790
    min: 0.010s max: 0.010s std dev: 0.00003s window: 5
average rate: 99.049
    min: 0.010s max: 0.010s std dev: 0.00002s window: 5
average rate: 198.175
    min: 0.000s max: 0.010s std dev: 0.00505s window: 5
average rate: 99.281
    min: 0.000s max: 0.040s std dev: 0.01745s window: 5
average rate: 0.000
    min: 0.000s max: 0.000s std dev: 0.00000s window: 5
average rate: 397.287
    min: 0.000s max: 0.010s std dev: 0.00436s window: 5
average rate: 98.930
    min: 0.000s max: 0.040s std dev: 0.01751s window: 5
average rate: 0.000
    min: 0.000s max: 0.000s std dev: 0.00000s window: 5
average rate: 0.000
    min: 0.000s max: 0.000s std dev: 0.00000s window: 5
average rate: 98.760
    min: 0.000s max: 0.041s std dev: 0.01754s window: 5
average rate: 198.223
    min: 0.000s max: 0.010s std dev: 0.00504s window: 5
average rate: 0.000
    min: 0.000s max: 0.000s std dev: 0.00000s window: 5
average rate: 131.822
    min: 0.000s max: 0.030s std dev: 0.01314s window: 5
average rate: 98.955
    min: 0.000s max: 0.040s std dev: 0.01750s window: 5
average rate: 78.978
    min: 0.000s max: 0.041s std dev: 0.01664s window: 5
Two consecutive messages with same time stamp:
header: 
  seq: 3552
  stamp: 
    secs: 35
    nsecs: 914000000
  frame_id: "odom"
child_frame_id: "base_link"
pose: 
  pose: 
    position: 
      x: 1.04198573467
      y: -0.104723379008
      z: 0.0
    orientation: 
      x: 0.0
      y: 0.0
      z: -0.0586363976445
      w: 0.998279406214
  covariance: [shortened]
twist: 
  twist: 
    linear: 
      x: 0.100029364899
      y: 0.0
      z: 0.0
    angular: 
      x: 0.0
      y: 0.0
      z: -0.00294809162749
  covariance: [shortened]
-----------------------------------------
header: 
  seq: 3553
  stamp: 
    secs: 35
    nsecs: 914000000
  frame_id: "odom"
child_frame_id: "base_link"
pose: 
  pose: 
    position: 
      x: 1.04198614439
      y: -0.104723426958
      z: 0.0
    orientation: 
      x: 0.0
      y: 0.0
      z: -0.0586363976445
      w: 0.998279406214
  covariance: [shortened]
twist: 
  twist: 
    linear: 
      x: 0.100031008838
      y: 0.0
      z: 0.0
    angular: 
      x: 0.0
      y: 0.0
      z: -0.00294809030248
  covariance: [shortened]
Configuration of ekf node:
frequency: 100
    sensor_timeout: 0.05
    two_d_mode: true
    transform_time_offset: 0.0
    transform_timeout: 0.0
    print_diagnostics: true
    debug: false
    debug_out_file: /path/to/debug/file.txt
    publish_tf: true
    publish_acceleration: false
    
    #map_frame: map              # Defaults to "map" if unspecified
    odom_frame: odom            # Defaults to "odom" if unspecified
    base_link_frame: base_link  # Defaults to "base_link" if unspecified
    world_frame: odom           # Defaults to the value of odom_frame if unspecified
    
    odom0: /wheel_odom
    imu0: /imu
    
    odom0_config: [false, false, false, # x y z
                   false, false, false, # r p y
                   true,  true,  false, # vx vy vz
                   false, false, true,  # vr vp vy
                   false, false, false] # ax ay az
    
    imu0_config:  [false, false, false, # x y z
                   false, false, false,  # r p y
                   false, false, false, # vx vy vz
                   false, false, true,  # vr vp vy
                   true, false, false] # ax ay az
    
    odom0_queue_size: 10
    imu0_queue_size: 10
    odom0_nodelay: false
    imu0_nodelay: false
    odom0_differential: false
    imu0_differential: false
    odom0_relative: false
    imu0_relative: false
    imu0_remove_gravitational_acceleration: true
    
    use_control: false
    stamped_control: false
    control_timeout: 0.2
    control_config: [true, false, false, false, false, true]
    acceleration_limits: [0.15, 0.0, 0.0, 0.0, 0.0, 0.1]
    deceleration_limits: [0.9, 0.0, 0.0, 0.0, 0.0, 1.0]
    acceleration_gains: [0.9, 0.0, 0.0, 0.0, 0.0, 0.5]
    deceleration_gains: [1.0, 0.0, 0.0, 0.0, 0.0, 1.0]
    
    process_noise_covariance: [shortened]
    
    initial_estimate_covariance: [shortened]
Best,
Jacob Seibert
Edit: With lower frequencies (50 Hz) the rate is also not very stable but I didn't find any two messages having the same time stamp:
average rate: 49.449
    min: 0.020s max: 0.020s std dev: 0.00004s window: 5
average rate: 49.436
    min: 0.020s max: 0.020s std dev: 0.00004s window: 5
average rate: 49.530
    min: 0.010s max: 0.030s std dev: 0.01006s window: 5
average rate: 49.412
    min: 0.020s max: 0.020s std dev: 0.00004s window: 5
average rate: 49.440
    min: 0.000s max: 0.041s std dev: 0.02023s window: 5
average rate: 43.885
    min: 0.000s max: 0.051s std dev: 0.02306s window: 5
average rate: 49.476
    min: 0.000s max: 0.040s std dev: 0.02021s window: 5
average rate: 43.915
    min: 0.000s max: 0.051s std dev: 0.02304s window: 5
average rate: 49.369
    min: 0.000s max: 0.041s std dev: 0.02026s window: 5
average rate: 79.270
    min: 0.000s max: 0.050s std dev: 0.02185s window: 5
average rate: 43.905
    min: 0.000s max: 0.051s std dev: 0.02307s window: 5
average rate: 56.439
    min: 0.000s max: 0.040s std dev: 0.01807s window: 5
average rate: 99.079
    min: 0.000s max: 0.040s std dev: 0.01748s window: 5
average rate: 56.466
    min: 0.000s max: 0.040s std dev: 0.01806s window: 5

Originally posted by Jacob Seibert on ROS Answers with karma: 16 on 2018-05-09
Post score: 0

Original comments
Comment by gvdhoorn on 2018-05-09:
Could I ask you to please not post screenshots of text? There is no need to do that (just copy-paste the console text) and it's also undesirable from a search-engine perspective (text in images is not (yet) searchable).
Please see the support guidelines.
Comment by Jacob Seibert on 2018-05-09:
Yes, I see your point. I don't have access to the system right now to get the text, but I will replace the images as soon as possible.
Comment by stevejp on 2018-05-10:
Does this happen when you run at lower frequencies?
Comment by Jacob Seibert on 2018-05-17:
With lower rates it is not as bad as with 100 Hz. See updated original post above.
Comment by PeteBlackerThe3rd on 2018-05-17:
Just to clarify is it the wheel odometry sensor topic which is displaying rapid bursts or the output from the robot_localization package? Have these been setup as two different topics?
Comment by Jacob Seibert on 2018-05-18:
The setup is:
odometry -> /wheel_odom -> robot_localization_ekf -> /odom
So yes, those topics are separated and the messages we are talking about are published (only) by the EKF.

A:

After inspecting the message timing a bit more in detail we found out that it was actually an issue with the IMU messages that we thought was already fixed (USB latency). Thanks @Tom Moore for pointing us in this direction.

Originally posted by Jacob Seibert with karma: 16 on 2018-05-25
This answer was ACCEPTED on the original site
Post score: 0

