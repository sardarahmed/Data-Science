Q:

Can't find correct sytax for ros::nodehandle::advertise

I have just started learning ROS and I have written a publisher node based on the following tutorials:
https://support.clearpathrobotics.com/hc/en-us/categories/200165835-ROS ------ ROS 101: Drive a Husky
http://wiki.ros.org/ROS/Tutorials/WritingPublisherSubscriber%28c%2B%2B%29#roscpp_tutorials.2BAC8-Tutorials.2BAC8-WritingPublisherSubscriber.Writing_the_Publisher_Node
I can't get it to compile, and after checking the tutorials and trying to understand the correct syntax I have been left completely baffled. I have no idea how to fix the problem.
The problem is on line 28: ros::Publisher velocity_pub = node.advertise<geometry_msgs/Twist>(topic_name, 1000);
I am very new to ROS. Can someone explain how to correctly write a ros::nodehandle::advertise statement?
Here is the console output:
[100%] Building CXX object drive_husky/CMakeFiles/drive_husky.dir/src/drive.cpp.o
/home/francis/husky_cws/src/drive_husky/src/drive.cpp: In function ‘int main(int, char**)’:
/home/francis/husky_cws/src/drive_husky/src/drive.cpp:28:37: error: parse error in template argument list
  ros::Publisher velocity_pub = node.advertise<geometry_msgs/Twist>(topic_name, 1000);
                                     ^
/home/francis/husky_cws/src/drive_husky/src/drive.cpp:28:84: error: no matching function for call to ‘ros::NodeHandle::advertise(const string&, int)’
  ros::Publisher velocity_pub = node.advertise<geometry_msgs/Twist>(topic_name, 1000);
                                                                                    ^
/home/francis/husky_cws/src/drive_husky/src/drive.cpp:28:84: note: candidates are:
In file included from /opt/ros/indigo/include/ros/ros.h:45:0,
                 from /home/francis/husky_cws/src/drive_husky/src/drive.cpp:1:
/opt/ros/indigo/include/ros/node_handle.h:236:15: note: template<class M> ros::Publisher ros::NodeHandle::advertise(const string&, uint32_t, bool)
     Publisher advertise(const std::string& topic, uint32_t queue_size, bool latch = false)
               ^
/opt/ros/indigo/include/ros/node_handle.h:236:15: note:   template argument deduction/substitution failed:
/home/francis/husky_cws/src/drive_husky/src/drive.cpp:28:84: error: template argument 1 is invalid
  ros::Publisher velocity_pub = node.advertise<geometry_msgs/Twist>(topic_name, 1000);
                                                                                    ^
In file included from /opt/ros/indigo/include/ros/ros.h:45:0,
                 from /home/francis/husky_cws/src/drive_husky/src/drive.cpp:1:
/opt/ros/indigo/include/ros/node_handle.h:300:13: note: template<class M> ros::Publisher ros::NodeHandle::advertise(const string&, uint32_t, const SubscriberStatusCallback&, const SubscriberStatusCallback&, const VoidConstPtr&, bool)
   Publisher advertise(const std::string& topic, uint32_t queue_size,
             ^
/opt/ros/indigo/include/ros/node_handle.h:300:13: note:   template argument deduction/substitution failed:
/home/francis/husky_cws/src/drive_husky/src/drive.cpp:28:84: error: template argument 1 is invalid
  ros::Publisher velocity_pub = node.advertise<geometry_msgs/Twist>(topic_name, 1000);
                                                                                    ^
make[2]: *** [drive_husky/CMakeFiles/drive_husky.dir/src/drive.cpp.o] Error 1
make[1]: *** [drive_husky/CMakeFiles/drive_husky.dir/all] Error 2
make: *** [all] Error 2

And here are my files:
drive.cpp:
#include <ros/ros.h>
//#include "std_msgs/String.h"
#include <geometry_msgs/Twist.h>

#include <string>
#include <cstring>

/*** Make the Husky drive forwards and backwards three times, and then come to a halt ***/

int main(int argc, char **argv) //argc and argv required for ros::init to create node
{
    ros::init(argc, argv, "Driver");    //Must call ros::init, requires argc and argv and the name of the node to be initiated
    
    ros::NodeHandle node;   //Node handle is the name of the node in our code; this is where the node is initiated
    
    
        //--- Prepare to publish some data ---//
    
    /*
    rostopic pub /husky_velocity_controller/cmd_vel geometry_msgs/Twist -r 100  '[1,0,0]' '[0,0,0]'
    rostopic pub <topic name> <message type> message
    We are sending a message of type geometry_msgs/Twist called "/husky_velocity_controller/cmd_vel"
    geometry_msg: http://wiki.ros.org/geometry_msgs
    geometry_msg/Twist expresses velocity using two vector3s: linear and angular
    */
    
    const std::string topic_name = "/husky_velocity_controller/cmd_vel";
    ros::Publisher velocity_pub = node.advertise<geometry_msgs/Twist>(topic_name, 1000);
        //node.advertise() will publist the topic with the specified name. The second argument is the buffer size (in messages) for messages if they are published faster than they can be sent
        //node.advertise() returns a ros::Publisher object
        
    //Create a variable for our Twist messages
    geometry_msgs::Twist velocity;
    velocity.linear.x = velocity.linear.y = velocity.linear.z = 0;          //Default is no linear motion
    velocity.angular.x = velocity.angular.y = velocity.angular.z = 0;   //Default is no angular motion
        
    ros::Rate loop_rate(10);    //The loop frequency will be 10Hz
    int msg_count = 0;

    
    //Make the Husky drive back and fourth in a straight line
    for(int i=0; i<3; i++) //Repeate three times
    {
        //For some time, drive forwards
            msg_count = 0;
            //while(ros::ok());
        
        for(int n=0; n<50; n++)
        {
            //Update the velocity
            velocity.linear.x = +1;
            
            //Publish the topic
            velocity_pub.publish(velocity);
            
            loop_rate.sleep();
                ++msg_count;
        }
        
        //For some time, drive backwards
            msg_count = 0;
        for(int n=0; n<50; n++)
        {
            //Update the velocity
            velocity.linear.x = -1;
            
            //Publish the topic
            velocity_pub.publish(velocity);
            
            loop_rate.sleep();
                ++msg_count;
        }
        
        //For some time, halt
            msg_count = 0;
        for(int n=0; n<50; n++)
        {
            //Update the velocity
            velocity.linear.x =  0;
            
            //Publish the topic
            velocity_pub.publish(velocity);
            
            loop_rate.sleep();
                ++msg_count;
        }
        
    //Loop
    }
    
    return 0;
}

package.xml:
<?xml version="1.0"?>
<package>
  <name>drive_husky</name>
  <version>0.0.0</version>
  <description>Drives a Husky forwards and backwards three times</description>

  <maintainer email=""></maintainer>
  <license>LGPLv3</license>

  <buildtool_depend>catkin</buildtool_depend>
  <build_depend>geometry_msgs</build_depend>
  <build_depend>roscpp</build_depend>
  <run_depend>geometry_msgs</run_depend>
  <run_depend>roscpp</run_depend>

  <export>    
  </export>
</package>

CMakeLists.txt:
cmake_minimum_required(VERSION 2.8.3)
project(drive_husky)

find_package(catkin REQUIRED COMPONENTS
  geometry_msgs
  roscpp
)

catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES drive_husky
#  CATKIN_DEPENDS geometry_msgs roscpp
#  DEPENDS system_lib
)

###########
## Build ##
###########

include_directories(
  ${catkin_INCLUDE_DIRS}
)

add_executable(drive_husky src/drive.cpp)
target_link_libraries(drive_husky ${catkin_LIBRARIES})

Originally posted by fborok on ROS Answers with karma: 13 on 2015-04-26
Post score: 0

A:

You need to use the C++ namespace separator (::) instead of the / when specifying the topic type:
ros::Publisher velocity_pub = node.advertise<geometry_msgs::Twist>(topic_name, 1000);

Originally posted by ahendrix with karma: 47576 on 2015-04-26
This answer was ACCEPTED on the original site
Post score: 1

