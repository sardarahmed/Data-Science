Q:

Can you structure the include folder in a ROS C++ Package with subfolders?

I currently have some c++ libraries that i would like to implement and build in ROS using catkin workspaces.  My method so far has been to let each library be its own package, but I've recently run into a problem of circular dependencies with the packages. My approach to fix this has been to implement the libraries within a single package, but i somehow wish to keep the libraries separated and i therefore wonder if it is possible to structure the include folder for a ROS c++ package with subfolders?
The idea would look something like this

--my_package
  --include
    --library_1
      someheaderfile.h
    --library_2
      someotherheaderfile.h
        ..
  --src
    --library_1
      somecppfile.cpp
    --library_2
      someothercppfile.cpp
  CMakelists.txt
  package.xml

I guess my main concern lies within breaking the catkin structure needed for proper compilation.
Thanks!

Originally posted by Paal on ROS Answers with karma: 3 on 2020-10-06
Post score: 0

A:

I guess my main concern lies within breaking the catkin structure needed for proper compilation.

there is no such structure.
Catkin ~= CMake.

is [it] possible to structure the include folder for a ROS c++ package with subfolders?

yes, of course.
There is no magic here. It's all just regular C++ and CMake.
As long as you make sure everything which needs to be on the include path ends up there things will just work.

Originally posted by gvdhoorn with karma: 86574 on 2020-10-06
This answer was ACCEPTED on the original site
Post score: 1

