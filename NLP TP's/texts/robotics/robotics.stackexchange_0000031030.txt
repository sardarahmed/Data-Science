Q:

How to use RGBD-6D-SLAM for path planning and navigation with Kinect

I am able run and record data using the RGBD-6D-SLAM code and the Kinect and would like to now use the recorded 3D "map" of the room(s) for navigation and path planning.
What would be the best way to go about this?
Ultimately I'd like to have some identified locations in the 3D map "space" that I can have the robot plan a path to and then try to navigate there.
Note: RVIZ and RGBD-6D-SLAM packages are too resource intensive for me to run very well simultaneously (seems to be a common issue based on other comments on this site) and that limits my options for trying to use the navigation and path planning components of rviz in conjunction with the RGBD-6D-SLAM code.
Thanks in advance for your recommendations.
-Scott

Originally posted by Scott on ROS Answers with karma: 693 on 2011-04-12
Post score: 3

Original comments
Comment by Scott on 2011-04-15:
As Felix pointed out below, The UCSB work is an example of projecting the 3D map onto 2D and then doing 2D navigation and planning from there. Very excited for the updates to the RGBD-6D-SLAM package Felix has said they are working on as well . If anyone tries UCSB package, post your tips here!
Comment by Scott on 2011-04-15:
Check out their floor collision map video at http://code.google.com/p/ucsb-ros-pkg/
Comment by Scott on 2011-04-15:
While researching other teams that might be making progress on this front. I came across some work by a team at the University of California, Santa Barbara, that has made some good first steps. They have a ros package as well under ucsb-ros-pkg.

A:

Edit1: The new version of rgbdslam is out and available at here at ros.org and on openslam.org
For ground-bound robots, I think most people project 3d-maps to 2d and do navigation and planning in 2d.
Edit2: An octomap of the registered point cloud can be created using experimental octomapping code from the alufr-repository and the following procedure:

Edit (a copy of) octomap_server/launch/octomap_mapping.launch such that the mapping from cloud_in goes to /rgbdslam/batch_clouds and the value of frame_id is "openni_camera"
Start rgbdslam, capture a scene
Roslaunch the adapted file from the first step
In rgbdslam select Graph->Send Model
rosrun octomap_server octomap_saver <filename.bt>

The parameters in octomap_mapping.launch allow for some fine-tuning of voxel resolution and sensor range. You can use rosrun octovis octovis <filename.bt> to view the octomap.

Originally posted by Felix Endres with karma: 6468 on 2011-04-12
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by Scott on 2011-06-04:
Update from threads below...to get the mapping to work correctly you need to edit the frame_id line in the octomap_mapping.launch to this:  (Thanks to Armin, Gavin and Felix for working with us to debug this.)
Comment by Scott on 2011-05-05:
OK this package can be built and run without error along with Octomap, but has anyone (besides Felix) successfully generated an octomap following the instructions? If so, please add a comment with steps you took. If you have tried and have not gotten an octomap to show up, please post that as well.
Comment by Scott on 2011-05-03:
...but it had some dependencies I was not able to resolve. If anyone else had tried this and gotten it to work, please share your notes.
Comment by Felix Endres on 2011-04-27:
Saving registered point clouds is included. Octomaps are not yet. I will include that somewhen. It's easy but I'm quite busy. If you'd like to use it offline, save the clouds "node-wise", then read each pcd file, using octomap::OctomapROS::insertScan for each cloud.
Comment by Scott on 2011-04-27:
Hi Felix, I see you released a new version of rgbdslam on the 18th. Were you able to add in the functionality for the 3D mapping and navigation with this release? -Scott
Comment by magnate on 2013-02-16:
Since, the openni_camera package has been deprecated, what should 'frame_id' be nowadays?
Comment by Felix Endres on 2013-02-17:
I'd guess /camera_link. But as of the latest version (only a couple of days old), you can save the octomaps from the GUI: Graph->Save octomap
Comment by magnate on 2013-02-18:
Is there an RGBDSLAM headless rosservice command for that -- "rosservice call /rgbdslam/ros_ui save_octomap," perhaps?
Comment by magnate on 2013-02-18:
By the way, when I do fun the GUI, use the 'Save Octomap' command, save the file with a *.bt extension, then try to open in it Octovis, I receive: "ERROR: Binary file does not contain an OcTree! First line of OcTree file header does not start with "# Octomap OcTree binary file" ... cont'd ...
Comment by magnate on 2013-02-18:
... cont'd ... even though the top of the .bt file looks like this:

Octomap OcTree file
(feel free to add / change comments, but leave the first line as it is!)

id ColorOcTree
size 536112
res 0.05
data

Comment by Felix Endres on 2013-02-18:
Yes, I just added the service call for headless mode. Be careful, I moved around some service calls.  The problem with octovis seems to be caused by changing the extension to "bt", when it should be "ot", as is the default setting. You can use "convert_octree" to get a "bt" file from the "ot" file.

