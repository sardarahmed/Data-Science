Q:

Understanding MoveIt! and OMPL more deeply

I wanted to know the actual mathematics behind the path planners MoveIt! uses for manipulators from OMPL. I tried to look into source codes but couldn't get enough details.
I wish to know:

How cost function is implemented, i.e., how path cost is calculated in configuration space. It can't be Euclidean distance I guess?! So what is it.
How Sampling is done. A sampler is called in the src files but i couldn't get the details. Is it done in configuration space or workspace or both can be done?
What is the exact pipeline? Like after sampling(depending on state space), is inverse kinematics implemented to get into configuration space or foward-kinematics is implemented to get into work space and such details. Which is the better option?

Actually I wish to implement my own algorithm (like some variation of RRT) without MoveIt!/OMPL hence it is important for me to know all the details.
I am really confused about this. Any explanations or links where I can find the details and understand them would be really helpful.

A:

Actually I wish to implement my own algorithm (like some variation of
  RRT) without MoveIt!/OMPL hence it is important for me to know all the
  details.
I am really confused about this. Any explanations or links where I can
  find the details and understand them would be really helpful.

OMPL and MoveIt have a ton of features that are already implemented so you don't have to do that.  However, that has made the software too large to quickly comprehend if you don't know about the underlying algorithms.  Instead of learning more about their implementation and methods, I recommend you go directly to the original source!
Check out the textbook Planning Algorithms by Steven LaValle.  The whole text is available online for free, but I have my own copy and it's literally sitting on my desk right now (lol).  http://planning.cs.uiuc.edu/
Simple RRT in python
On LaValle's website he has very simple RRT code that you can run in python right away. 
http://msl.cs.uiuc.edu/~lavalle/code.html
http://msl.cs.uiuc.edu/~lavalle/sub/rrt.py

