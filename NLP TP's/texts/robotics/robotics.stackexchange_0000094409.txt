Q:

Recommendation to manage multiple lifecycle nodes

I imagine a scenario in which there are states, such as standby, hovering, and landing, and each one of these states corresponds to a certain set of active LifecycleNodes. Let's say A, B, and C for standby; D, E, and A for hovering and F, G, and H for landing. It is important to guarantee that in each state the respective nodes will be correctly set and as fast as possible. It may also be necessary to reload parameters.
Questions:
Any recommendations on how to do that and deal with possible state transition failures?
Are there plans to create a ROS2 native node/tool to manage multiple lifecycle nodes and perform that sort of task?

Originally posted by ignacio on ROS Answers with karma: 68 on 2020-01-16
Post score: 2

Original comments
Comment by stevemacenski on 2020-01-16:
What good timing, I just posted a ticket trying to suss out some of the same topics: https://github.com/ros-planning/navigation2/issues/1472. I think we're in early days of lifecycle nodes (and even just people understanding them enough to use them) and there's a lot of room for improvement. I would like to hear the answer to your question as well from folks that might be more directly involved in that sort of thing, but I think it would also be valuable in this question to add what types of things you might want in this tool to help build design requirements (or be involved building yourself :-) ).

A:

Your description reminds me of what the system_modes package created by Bosch was created for.
It essentially almost recursively applies the lifecycle management concept and allows you to configure the mode of a system (your states) through a relatively high-level interface, controlling all required nodes and their individual life-cycles for you.
See the system_modes_examples package for a nice example of how this all works and what it can do.
An alternative could be using behaviour trees, but those would not have support for the domain concepts directly (but would be capable of managing this sort of thing).
Some (related) links:

Lifecycle and System Modes in the Micro-ROS documentation
Lifecycle and System ModesSoftware Release Y1, Deliverable 4.8 of the Ofera project

Originally posted by gvdhoorn with karma: 86574 on 2020-01-16
This answer was ACCEPTED on the original site
Post score: 4

Original comments
Comment by ignacio on 2020-01-27:
That is very useful. Thank you very much! This package seems to change the node state accordingly.
I still have one concern regarding state transition failure, though. Is it possible to try to change from inactive to active and it just doesn't change. I ask that because I couldn't find any control that guarantees that my node will change its state.
Comment by gvdhoorn on 2020-01-28:
I would advise you to ask the authors/maintainers of that package. I'm not one of them.
Comment by ignacio on 2020-01-28:
Could you help me to do that? I don't know how to reach them. Should I ask as a form of Issue on Github?
Comment by gvdhoorn on 2020-01-28:
Yes. Post an issue on their tracker.
Comment by ralph-lange on 2020-01-29:
If a node does not switch from inactive to active, then the mode monitor of the system modes package will detect this discrepancy between target state and actual state. The provided mode inference mechanism allows to query this state even from another application node (e.g., inside some task execution state machine or behavior tree). Furthermore, we are currently working on a simple rules mechanism to define recovery behaviors for such cases.
Comment by ralph-lange on 2020-01-29:
Please find another example for the use of the system modes concept (besides the integrated example in the system modes repo) at https://github.com/MROS-RobMoSys-ITP/Pilot-URJC. This demo shows the runtime reconfiguration of the whole Navigation2 stack using system modes. As a teaser, you may watch the video at https://youtu.be/PTyfaGybxl8

