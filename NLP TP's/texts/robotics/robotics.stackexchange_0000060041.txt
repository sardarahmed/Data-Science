Q:

Segmentation Fault (core dump)

I am working on ROS and Opencv. I am able to run the code but after some times the code stops and show the error Segmentation Fault (Core Dumped). The following is the code in which a quadrotor is finding the color box which I will modify by giving the values of RGB through trackbars. I have added some of the debugging statements to find out the line of error. and I think the line of error is hsv=cv2.cvtColor(cv_image,cv2.COLOR_BGR2HSV)
The following is the whole code
#!/usr/bin/env python
import roslib
import sys
import time
import math
import rospy
import cv2
import cv2.cv as cv
import numpy as np
from geometry_msgs.msg import PoseStamped
from geometry_msgs.msg import Vector3
from geometry_msgs.msg import Twist
from geometry_msgs.msg import Wrench
from geometry_msgs.msg import Pose
from geometry_msgs.msg import Point
from sensor_msgs.msg import NavSatFix
from sensor_msgs.msg import CameraInfo
from sensor_msgs.msg import Image
from sensor_msgs.msg import RegionOfInterest
from cv_bridge import CvBridge, CvBridgeError
from rospy.numpy_msg import numpy_msg
     
H_MIN = 0
H_MAX = 255
V_MIN = 0
V_MAX = 255
S_MIN = 0
S_MAX = 255
  
class test_vision_node_fly:
    def __init__(self):
        print('a')
        self.image_pub = rospy.Publisher("quadrotor/videocamera1/camera_info",Image)
        print('b')
        self.ROI = rospy.Publisher("roi", RegionOfInterest)
        print('c')  
        rospy.sleep(1)
        print('d')
        self.cv_window_name = "Image window"
        print('e')
            cv.NamedWindow(self.cv_window_name, 0)
        print('f')
            cv.NamedWindow("trackbars" , 0) 
        print('g')      
            self.bridge = CvBridge()
        print('h')
            self.image_sub = rospy.Subscriber("quadrotor/videocamera1/image",Image,self.callback)
        print('i')
        rospy.loginfo("Waiting for image topics...")
        print('j')
    def on_trackbar(self,x):
            global H_MAX
            global H_MIN
            global S_MAX
            global S_MIN
            global V_MAX
            global V_MIN
            print('k')
        H_MIN = cv2.getTrackbarPos('H_MIN', 'trackbars')
            H_MAX = cv2.getTrackbarPos('H_MAX', 'trackbars')  
            S_MAX = cv2.getTrackbarPos('S_MAX', 'trackbars')
            S_MIN = cv2.getTrackbarPos('S_MIN', 'trackbars')
            V_MIN = cv2.getTrackbarPos('V_MIN', 'trackbars')
            V_MAX = cv2.getTrackbarPos('V_MAX', 'trackbars')
        print('l')     
            pass   
    def callback(self,data):
        
        """ Convert the raw image to OpenCV format using the convert_image() helper function """
            cv_image = self.convert_image(data)
        print('m')
        # Convert the image to a Numpy array since most cv2 functions
            # require Numpy arrays.
            cv_image = np.array(cv_image, dtype=np.uint8)
        print('n')
            """ Apply the CamShift algorithm using the do_camshift() helper function """
            cv_image = self.do_camshift(cv_image)
        print('o')
            """ Refresh the displayed image """
            cv.ShowImage(self.cv_window_name, cv_image)
        print('p')
    def convert_image(self, ros_image):  
        try:
                cv_image = self.bridge.imgmsg_to_cv(ros_image, "bgr8")
            print('q')
            return cv_image
            except CvBridgeError, e:
                print e
    def do_camshift(self, cv_image):            
            ''' converting bgr to hsv ''' 
        print('r')         
            hsv=cv2.cvtColor(cv_image,cv2.COLOR_BGR2HSV) 
        print('s')    
        '''creating trackbars'''
        cv2.createTrackbar('H_MIN', 'trackbars', H_MIN, H_MAX, self.on_trackbar) 
        cv2.createTrackbar('H_MAX', 'trackbars', H_MAX, H_MAX, self.on_trackbar)
            cv2.createTrackbar('S_MIN', 'trackbars', S_MIN, S_MAX, self.on_trackbar) 
        cv2.createTrackbar('S_MAX', 'trackbars', S_MAX, S_MAX, self.on_trackbar)    
        cv2.createTrackbar('V_MIN', 'trackbars', V_MIN, V_MAX, self.on_trackbar)    
            cv2.createTrackbar('V_MAX', 'trackbars', V_MAX, V_MAX, self.on_trackbar)
        print('t')                                      
            ''' threshdolding '''
        COLOR_MIN = np.array([H_MIN, S_MIN, V_MIN],dtype=np.uint8)
        print('u')
            COLOR_MAX = np.array([H_MAX, S_MAX, V_MAX],dtype=np.uint8)
        print('v')
            mask=cv2.inRange(hsv, COLOR_MIN, COLOR_MAX)
        print('w')
            new_mask = mask.copy()
        print('z')
        # Bitwise-AND mask and original image
            res = cv2.bitwise_and(cv_image,cv_image, mask= mask)
        print('aa')
        #removing noise 
        kernel = np.ones((12,12),np.uint8)
        print('ab')
            new_mask = cv2.morphologyEx(new_mask, cv2.MORPH_CLOSE, kernel)
        print('ac')
            new_mask = cv2.morphologyEx(new_mask, cv2.MORPH_OPEN, kernel)
        print('ad')
        contours, hierarchy = cv2.findContours(new_mask,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
        print('ae')
        # Draw contours on the original image
            cv2.drawContours(cv_image, contours, -1, (0,0,0), 3)
        print('af')
        x,y,w,h = cv2.boundingRect(contours[-1])
        print('ag')
        cv2.rectangle(cv_image,(x,y),(x+w,y+h),(0,254,0),3)
        print('ah')
        if x>0 or y>0 or w>0 or h>0:
            print('ai')
                roi = RegionOfInterest()
            print('aj')
                roi.x_offset = x
            print('ak')
                roi.y_offset = y
            print('al')
                roi.width = w
                roi.height = h
                self.ROI.publish(roi)
            print('am')
            ''' displaying'''
        print('an')           
            cv2.imshow("Image window", cv_image) 
        print('ao') 
        cv2.imshow("mask", mask) 
        print('ap')
        cv2.imshow("resulatant", res)           
            cv.WaitKey(3)
        print('aq')
  

def stop():
    cmd = rospy.Publisher("/quadrotor/rotorcraftvelocity", Twist)   
    motion = Twist()
    motion.linear.x = +0.0
    motion.linear.y = +0.0
    motion.linear.z = +0.0
    cmd.publish(motion) 
    print 'stop'

def left():
    cmd = rospy.Publisher("/quadrotor/rotorcraftvelocity", Twist)   
    motion = Twist()
    motion.linear.y = -0.2
    cmd.publish(motion) 
    print 'left'

def right():
    cmd = rospy.Publisher("/quadrotor/rotorcraftvelocity", Twist)   
    motion = Twist()
    motion.linear.y = +0.2
    cmd.publish(motion) 
    print 'right'

def straight():
    cmd = rospy.Publisher("/quadrotor/rotorcraftvelocity", Twist)
    motion = Twist()
    motion.linear.x = -0.2
    cmd.publish(motion)         
    print 'straight'

def back():
    cmd = rospy.Publisher("/quadrotor/rotorcraftvelocity", Twist)
    motion = Twist()
    motion.linear.x = +0.2
    cmd.publish(motion)         
    print 'back'

def up():
    cmd = rospy.Publisher("/quadrotor/rotorcraftvelocity", Twist)
    motion = Twist()
    motion.linear.z = +0.1
    cmd.publish(motion)         
    print 'up'

def find(argv):
    vn = test_vision_node_fly()
    print('ar')
    print('yes')

def where(msg):
    global x
    global y
    global z
    x = msg.pose.position.x
    y = msg.pose.position.y
    z = msg.pose.position.z
    if z < 2.5 and y <= -1 and y > -1.09:
        up()
        find(sys.argv)
        #stop() 
        print('1')
        print(z)
    elif y > -2.4 and z > 2.498 and z < 2.6 and x >= 0 and x < 0.5:
        left()
        print(y)
        print('2')
        stop()
    elif x > -7 and y < -2.4 and y > -3.15 and z > 2.498 and z < 2.6:
        straight()
        stop()
        print(x)
        print('3')
    elif y < -2.4 and x < -7 and x > -8 and z > 2.498 and z < 2.6:
        right()
        stop()
        print(y)
        print('4')
    elif x < -0.6 and y > -2.4 and y < -1.4 and z > 2.498 and z < 2.6:
        back()
        stop()
        print(x)
        print('5')
    elif y < -1.3 and x < 0 and x > -0.9 and z > 2.498 and z < 2.6:
        right()
        stop()
        print(y)
        print('6')
    elif x > -6.5 and y < -0.5 and y > -1.3 and z > 2.498 and z < 2.6:
        straight()
        stop()
        print(x)
        print('7')
    elif y < -0.3 and x < -7 and x > -8 and z > 2.498 and z < 2.6:
        right()
        stop()
        print(y)
        print('8')
    elif x < -0.8 and y > -0.3 and y < 0.7 and z > 2.498 and z < 2.6:
        back()
        stop()
        print(x)
        print('9')
    elif y < 1 and x < 0 and x > -0.9 and z > 2.498 and z < 2.6:
        right()
        stop()
        print(y)
        print('10')
    elif x > -6.5 and y < 1.8 and y > 1.0 and z > 2.498 and z < 2.6:
        straight()
        stop()
        print(x)
        print('11')
    elif y < 1.9 and x < -7 and x > -8 and z > 2.498 and z < 2.6:
        right()
        stop()
        print(y)
        print('12')
    elif x < -0.8 and y > 1.9 and y < 2.5 and z > 2.498 and z < 2.6:
        back()
        stop()
        print(x)
        print('13')
    elif y < 2.7 and x < 0 and x > -0.9 and z > 2.498 and z < 2.6:
        right()
        stop()
        print(y)
        print('14')
    elif x > -6.5 and y < 3.3 and y > 2.7 and z > 2.498 and z < 2.6:
        straight()
        stop()
        print(x)
        print('15')
    elif y < 3.4 and x < -7 and x > -8 and z > 2.498 and z < 2.6:
        right()
        stop()
        print(y)
        print('16')
        elif x < -0.8 and y > 3.4 and y < 4.0 and z > 2.498 and z < 2.6:
        back()
        stop()
        print(x)
        print('17')
    elif y < 4.2 and x < 0 and x > -0.9 and z > 2.498 and z < 2.6:
        right()
        stop()
        print(y)
        print('18')
    elif x > -6.5 and y < 4.75 and y > 4.2 and z > 2.498 and z < 2.6:
        straight()
        stop()
        print(x)
        print('19')
        print('20')
    elif y < 4.8 and x < -7 and x > -8 and z > 2.498 and z < 2.6:
        right()
        stop()
        print(y)
        print('21')
    elif x < -0.6 and y > 4.8 and y < 5.3 and z > 2.498 and z < 2.6:
        back()
        stop()
        print(x)
        print('22')
    elif y < 5.35 and x < 0 and x > -0.9 and z > 2.498 and z < 2.6:
        right()
        stop()
        print(y)
        print('23')
    elif x > -6.5 and y < 5.85 and y > 5.35 and z > 2.498 and z < 2.6:
        straight()
        stop()
        print(x)
        print('24')
    elif y < 5.9 and x < -7 and x > -8 and z > 2.498 and z < 2.6:
        right()
        stop()
        print(y)
        print('25')
    elif x < -0.7 and y > 5.9 and y < 6.35 and z > 2.498 and z < 2.6:
        back()
        stop()
        print(x)
        print('26')
    else:
        stop()
        find(sys.argv)
        print(z)

#def getCameraInfo(msg):
#   global image_width
#   global image_height
#   image_width = msg.width
#       image_height = msg.height

def pilot():
    rospy.init_node("pilot")
    
    #rospy.Subscriber("/quadrotor/videocamera/camera_info", CameraInfo, getCameraInfo)  
    rospy.Subscriber("/quadrotor/pose", PoseStamped, where)
            
    print('hi') 
    
    rospy.spin() # this will block untill you hit Ctrl+C
if __name__ == '__main__':
        pilot()

Originally posted by jashanvir on ROS Answers with karma: 68 on 2014-06-12
Post score: 0

Original comments
Comment by Vincent Rabaud on 2014-06-12:
use bridge.imgmsg_to_cv2 and drop cv. support is a first advice
What is the error message ?
Please also print the shape of the numpy array.
Comment by jashanvir on 2014-06-12:
The following is the error:-
o
OpenCV Error: Assertion failed (size.width>0 && size.height>0) in imshow, file /tmp/buildd/ros-hydro-opencv2-2.4.6-3precise-20140303-2244/modules/highgui/src/window.cpp, line 261
[ERROR] [WallTime: 1402584675.408560] bad callback: <bound method test_vision_node_fly.callback of <main.test_vision_node_fly instance at 0x3431170>>
Traceback (most recent call last):
File "/opt/ros/hydro/lib/python2.7/dist-packages/rospy/topics.py", line 682, in _invoke_callback
cb(msg)
File "/home/user/catkin_ws/src/my_package/scripts/pilot.py", line 81, in callback
cv2.imshow(self.cv_window_name, cv_image)
error: /tmp/buildd/ros-hydro-opencv2-2.4.6-3precise-20140303-2244/modules/highgui/src/window.cpp:261: error: (-215) size.width>0 && size.height>0 in function imshow
m
(256, 256, 3)
and when i print the numpy arraY I GOT

A:

You are displaying an empty image. Just add a test: if it is empty, do not display it.

Originally posted by Vincent Rabaud with karma: 1111 on 2014-06-15
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by jashanvir on 2014-06-16:
Where ? can u help me find that command ?
Comment by Vincent Rabaud on 2014-06-16:
you have 3 imshow, it's one of those.

