Q:

Standalone OpenCV

This is an old question, but I couldn't find any good solution.
I have recently installed the latest (unrealesed) OpenCV 3.0 in my machine for some programs. Nothing related with ROS at all. This OpenCV version is installed at /usr/local as usual.
The thing is that, when trying to compile my code, cmake always find the ROS groovy OpenCV version (2.X) and fails. The only way I can compile it is uninstalling ROS OpenCV version or renaming it.
I have tried instead of:
find_package( OpenCV REQUIRED )
target_link_libraries( foo ${OpenCV_LIBS} )

Using:
include_directories(/usr/local/include usr/local/include/opencv2 usr/local/include/opencv)
link_directories(/usr/local/lib)
target_link_libraries( foo opencv_core opencv_highgui opencv_imgproc)

But, no result. Any ideas?

Originally posted by Jep on ROS Answers with karma: 195 on 2014-02-12
Post score: 3

A:

Thanks to both for your help. I've tried the bchr first approach, and it looks like it finds properly the new OpenCV installation. But, there's something more here. Without ROS opencv it compiles without problem:
-- OpenCV Root directory is /usr/local/share/OpenCV
-- OpenCV include directories are /usr/local/include/opencv
-- OpenCV libs directory is: /usr/local/lib/libopencv_core.so.3.0.0;/usr/local/lib/libopencv_imgproc.so.3.0.0;/usr/local/lib/libopencv_highgui.so.3.0.0;/usr/local/lib/libopencv_ml.so.3.0.0;/usr/local/lib/libopencv_video.so.3.0.0;/usr/local/lib/libopencv_features2d.so.3.0.0;/usr/local/lib/libopencv_calib3d.so.3.0.0;/usr/local/lib/libopencv_objdetect.so.3.0.0;/usr/local/lib/libopencv_contrib.so.3.0.0;/usr/local/lib/libopencv_legacy.so.3.0.0;/usr/local/lib/libopencv_flann.so.3.0.0

When ROS opencv is installed, it fails to compile:
foo.cpp:(.text+0x661): undefined reference to `cv::_OutputArray::_OutputArray(cv::Mat&)'

But the includes and libraries variables are the same!!
-- OpenCV Root directory is /usr/local/share/OpenCV
-- OpenCV include directories are /usr/local/include/opencv
-- OpenCV libs directory is /usr/local/lib/libopencv_core.so.3.0.0;/usr/local/lib/libopencv_imgproc.so.3.0.0;/usr/local/lib/libopencv_highgui.so.3.0.0;/usr/local/lib/libopencv_ml.so.3.0.0;/usr/local/lib/libopencv_video.so.3.0.0;/usr/local/lib/libopencv_features2d.so.3.0.0;/usr/local/lib/libopencv_calib3d.so.3.0.0;/usr/local/lib/libopencv_objdetect.so.3.0.0;/usr/local/lib/libopencv_contrib.so.3.0.0;/usr/local/lib/libopencv_legacy.so.3.0.0;/usr/local/lib/libopencv_flann.so.3.0.0

EDITED:
Ok! Ive done some good progress. The problem is that ROS sets the CPATH environment variable as:
echo $CPATH 
/usr/local/include:/home/jep/catkin_ws/devel/include:/opt/ros/groovy/include

So, even if you include the correct headers gcc wil always find the old ones if you don't delete the CPATH variable...
I've tried adding /usr/local/include to CPATH, but the same behaviour appears, it only seems to work unsetting CPATH... Any ideas? I would like to keep CPATH as it is to avoid breaking anythin when I need to use ROS!

Originally posted by Jep with karma: 195 on 2014-02-12
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by bchr on 2014-02-12:
Try to use make in verbose mode, get the exact compilation command used by gcc, and paste it here. It may also help us if you give us more information on the rest of your CMakeLists.txt.
Comment by Jep on 2014-02-14:
thanks! II've edited the answer
Comment by bchr on 2014-02-14:
You can probably overwrite CPATH in your CMakeLists.txt only, so that this does not affect whatever you do after. You can access it with $ENV{CPATH}, you could try to save it and set it back at the end.
Comment by bchr on 2014-02-14:
Still, the fact that OpenCV 3 precedes ROS' OpenCV in your path, yet this still fails, is quite surprising (if you do not use OpenCV2-only headers, obviously).
Comment by Jep on 2014-02-17:
Yep... It's very strange for me. I don't understand it always find opencv2 headers even if setting /usr/local/include to CPATH as well... I've tried unsetting CPATH from CMakeLists but it didn't work... Seems that setting them in CMakeLists it's only somehow temporal... Thanks!
Comment by J.M.T. on 2015-06-02:
Could you post your FindOpenCV3.cmake file? I'm have the same trouble...

