Q:

ARM-friendly visual odometry node?

Are there any good visual odometry nodes that play well with ARM? I have an Xtion Pro Live, an Odroid U3, and an itch to make them play together. viso2 requires SSE and ccny_rgbd_tools has yet to be converted to a wet package (not that this is a huge issue). svo caught my eye, but it claims that it's not currently well-suited to forward motion. Has anyone had any success on this front?

Originally posted by Tom Moore on ROS Answers with karma: 13689 on 2014-11-12
Post score: 6

Original comments
Comment by Tanmay on 2015-06-02:
Have you managed to run ccny_rgbd on the Odroid? I'm trying to do the same.
Comment by Tom Moore on 2015-06-03:
I think I may have, but it didn't work out for one reason or another. I want to try rtabmap as @Bhargav suggested. It uses very little CPU on my laptop, so perhaps my ARM board will get away with it.
Comment by Tanmay on 2015-06-03:
Thanks for the information. Do let me know if rtabmap works well for you - I'll try meddling with it then.
Also, (sorry for digressing), would you happen to know how to configure the tf tree for ccny_rgbd?
Comment by Tanmay on 2015-06-03:
Your robot_localization packages looks pretty cool. I shall try it out once I have a map to use it on!
Comment by Tom Moore on 2015-06-03:
I'm afraid I don't recall much about ccny_rgbd. Also, my package name is a bit misleading - it's really for doing pose estimation through sensor fusion (no map required).
Comment by Tanmay on 2015-06-15:
Hi Tom,
I have been trying to use rtabmap - it compiles fine on my laptop, but I am unable to compile it on my Odroid. Also, no luck finding the binary for apt-get. Have you seen otherwise?
Comment by Tom Moore on 2015-06-16:
Sorry, my ARM stuff is really a side project, and I haven't had much time to devote to it. Why does it fail to build? Does it use SSE?

A:

Hello,
I have tried various visual odometry solutions on the Jetson TX1 (Quad-core ARM Cortex-A57 CPU). I have used (in no specific order):

RTABMap - Built from source, few modifications needed. If you suggest a suitable place to detail the steps I took, I can post these.
ORB_SLAM2 - Built from source, same as above.
LSD_SLAM -  Also built from source. By default uses SSE, is kind of slow with this disabled. Same as previous two, happy to share.
ZED Camera SDK - Closed source, but their built in tracking works wonders ... I wonder which algorithm they use under the hood, probably a modification of a leader.

All of these work on the Jetson with reasonable frame-rates and accuracy. For completeness sake here are my scrap notes for building, but as mentioned if there is an appropriate place to detail these correctly, I will.
LSD SLAM Notes
ORB_SLAM2 Notes
RTABMap Notes

Originally posted by NZNobody with karma: 156 on 2016-07-13
This answer was ACCEPTED on the original site
Post score: 4

