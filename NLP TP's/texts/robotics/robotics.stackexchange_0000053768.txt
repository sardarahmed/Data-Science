Q:

When to call generate_message() in CMakeLists.txt

Do I need to call generate_message() when I am only using a message defined in another package, and not defining one in my package?
It seems like I should not, since the code for the messages are already generated in the package defining it, which I am including. But the tutorial "Writing a Simple Publisher and Subscriber (C++)" has a call to generate_message() even though it only uses the std_msgs/String message, and does not define any of its own.
Can someone clarify the situation?

Originally posted by munnveed on ROS Answers with karma: 77 on 2013-08-28
Post score: 1

A:

The tutorial seem to be wrong in several aspects.
If your package does not contain message/service files you should not invoke that function.
But when you use messages/services from other packages at compile time (e.g. including generated message headers) your targets (executables as well as libraries) should have an explicit dependency on the target which generates the code. catkin supports you in identifying which targets generate code so that you can add a dependency on all exported target from packages which you have find_package() before:
add_dependencies(exe_or_lib_target ${catkin_EXPORTED_TARGETS})

Originally posted by Dirk Thomas with karma: 16276 on 2013-08-28
This answer was ACCEPTED on the original site
Post score: 4

Original comments
Comment by munnveed on 2013-08-28:
This makes sense. I want to clarify one thing though. I need the add_dependency() only if it is one of the packages I am building that has the code generating target, right? If I am using a message from std_msgs for example, I don't need the add_dependency()?
Comment by dornhege on 2013-08-28:
std_msgs should also generate messages, although in most cases you'd already have them from a system install.

