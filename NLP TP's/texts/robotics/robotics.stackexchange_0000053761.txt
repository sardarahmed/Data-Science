Q:

contributing to ros

Hi,
I wrote a new package for ros groovy (here) and I would like to share it with others so that they can use just apt-get to install it. However, I have some questions before I do so:

there is a static library that the node needs to run. What should my CMakeLists.txt look like so that the library gets installed when somebody uses apt-get install?

This is more of a linux question:
I read the page about contributing to ros - so I know I only share my repo. But the repo does not contain the executables. From what I have read online it seems that apt-get install does not involve any compiling - by using apt-get we are downloading executables right away. So where are they stored and how do they come to life?

thanks for anwerring

Originally posted by vonovak on ROS Answers with karma: 88 on 2013-08-28
Post score: 2

A:

Usually packages are built with shared libraries when being installed onto a system.  I recommend you do some reading on CMake Tutorials in general.

To contribute code back to the community there's a Contributing link on the home page www.ros.org
And from that you specifically want to look at http://ros.org/wiki/rosdistro/Tutorials/Indexing%20Your%20ROS%20Repository%20for%20Documentation%20Generation for releasing.

The released source is built into binary debian packages on a buildfarm and then stored in apt repositories.  The web interface for the buildfarm is at http://jenkins.ros.org and the packages are hosted at http://packages.ros.org

Originally posted by tfoote with karma: 58457 on 2013-08-28
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by vonovak on 2013-08-28:
I still don't quite understand the answer to 1. My node needs an external library that I have downloaded and compiled and put it in the lib directory of the package. It is also in the repo. Will it get installed when I do all the steps in the page you linked?
Comment by dornhege on 2013-08-29:
If you downloaded and compiled that I'd recommend to provide the sources and include them in the build instead of a pre-compiled library. For binaries you'd need to provide builds for every system that will be supported.

