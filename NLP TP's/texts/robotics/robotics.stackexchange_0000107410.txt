Q:

What is prioritized in Nav2? bt_navigator or simple commander API?

upon reading the documentation of nav2, I've came accross bt_navigator and simple commander api. Both ways allows modification of the behavior of the robot. For example bt_navigator has FollowPath action while simple commander api has also one. If I run both, what is prioritized?

A:

You should probably not find yourself ever using the simple_commander. I wrote that for creating easy demos that students and hobbyists could better understand. While it works, its not feature complete nor is it built to handle the full breadth of what Nav2 can do. You'd be kneecapping yourself with most of the advanced features. However, if you planned to write your task autonomy or application in Python3, then the NavigateToPose, FollowWaypoints, or NavigateThroughPoses demos might be something you'd leverage as a starting point, which calls the BT Navigator.
The Simple Commander includes APIs to call all of Nav2's Task Servers, including the lower level systems like the individual planner, controller, behaviors, etc. This is nice for basic testing that systems are working and are used in system and integration tests. I suppose you could also bypass the BT Navigator and design your own navigator-logic scripted in Python3, but that is not recommended and going 10+ years backwards in terms of robotics capabilities.
The BT Navigator leverages Behavior Trees (i.e. BT) for configurable navigation logic that can be easily changed and formally modeled. Its best to go that route.

If I run both, what is prioritized?

So, this question is not fully correct, but:

Simple Commander's calls to the BT Navigator actions (ie Nav2Pose, NavThruPoses, WaypointFollower) so the commander acts as the autonomy application where Nav2 is the implementation of navigation
Simple Commander's calls to individual task servers (ie Spin, ComputePathToPose, FollowPath) completely bypasses the BT Navigator and calls the constituent parts

