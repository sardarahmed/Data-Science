Q:

about packages and ros distributions

Hi,
earlier during the times of fuerte, groovy and I guess to some extent in hydro versions there was the concept of dry packages (which follow rosbuild) and wet packages (which follow the catkin build structure). Please correct me if I am wrong, In newer versions (indigo, jade and future releases...) the concept of dry package no more exists and will not exist. So I have few questions on this regard:

Suppose one has to use a package having rosbuild structure in a newer version of ROS, would it be possible to rebuild the source code simply by using catkin_make on my ~/catkin_ws/src folder containing my dry package?
What are the challenges involved in moving the rosbuild package from a lower version of ROS to a latest version?
What are the challenges involved in moving the catkin package from a lower version of ROS to a latest version?
Issues with respect to dependency, Will this be the main problem one has to handle, when working with same package on different versions of ROS? or are there many more issues one has to take care of?
I have gone through the concept of overlay, will it be useful for the above tasks?

these are lot of questions, under one heading. But, I somehow feel these tasks will be a little tricky when handling several packages of different build structure for many ROS users. Awaiting response from experienced users.
Thanks and Regards,
Murali
EDIT: for example let us consider these packages here and this one here.

Originally posted by MKI on ROS Answers with karma: 246 on 2014-10-29
Post score: 0

A:

To start off rosbuild based packages, aka dry packages, continue to work and exist using the old tool chain and building from source. We no longer support them being released and built into debian packages, but you can continue using them from source as you always have. More specifics below.

You cannot build a dry package with catkin_make you need to use the older build toolchain and the common entry point of rosmake.

The challenges of moving from rosbuild to catkin are that you need to update your CMakeLists.txt and switch from manifest.xml to package.xml  There is a guide for migrating packages here: http://wiki.ros.org/catkin/migrating_from_rosbuild

The effort required when porting a package forward between ROS distributions depends heavily on what package and which distribution change. The core of the ROS ecosystem is quite stable. However if you depend on actively developed or research code near the fringes. You will need to fix any changed APIs that you rely upon.

There's only one major issue you can run into in terms of dependencies and that is a catkin based package cannot depend on a rosbuild based package so you will need verify that all dependencies have been ported forward before attempting to do a package.

Overlays are generally useful for speeding up development. They can give you a smaller workspace and let you iterate more quickly. You can also continue to use an overlay of dry packages on top of wet, catkin, packages.

Originally posted by tfoote with karma: 58457 on 2014-10-29
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by MKI on 2014-10-30:
@tfoote, Thank you for answering all the questions. This cleared some issues I have been facing so far.
Comment by danzda on 2016-11-06:
You mentioned that rosbuild packages can be used from source. Is there a guide on how to do that?
Thanks
Comment by joq on 2016-11-08:
http://wiki.ros.org/rosbuild/Tutorials

