Q:

What is exact sync message filter?

I am writing a ROS node for a stereo camera. It publishes sensor_msgs::Image objects to two topics, one for left camera and another for right camera. The subsequent node uses ExactSync synchronizer to subscribe to the published topics. I assume it is for making sure all the published images have the same timestamp. But this is just the guess. Can someone here help me understand what an ExactSync message filter is?

Originally posted by shankk on ROS Answers with karma: 18 on 2021-09-27
Post score: 0

A:

Publishers and subscribers in ROS are agnostic to each other. So

I assume it is for making sure all the published images have the same timestamp.

No. In ROS, what you do on the subscriber's end will have no effect on what (and how) the publisher does.
Here is the message_filter wiki page. A message filter is defined as something which a message arrives into and may or may not be spit back out of at a later point in time.
What the ExactSync message filter does is that it will only spit out messages with the exact timestamp. If they are few nanoseconds different, they will not be identified as a matching pair. To quote the documentation,

The
message_filters::sync_policies::ExactTime
policy requires messages to have
exactly the same timestamp in order to
match. Your callback is only called if
a message has been received on all
specified channels with the same exact
timestamp. The timestamp is read from
the header field of all messages
(which is required for this policy).

Therefore this subscriber will only work if your publisher explicitly synchronizes the left and right images using the timestamps. That is something you have to implement on your publisher node. If the left and right images are not explicitly synchronized, but you want to logically synchronize them based on the timestamp on the subscriber node, perhaps you can use the Approximate Time Policy instead.

Originally posted by janindu with karma: 849 on 2021-09-27
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by shankk on 2021-09-27:
Okay. I understand this better now. Since I have a while loop which publishes image messages for both cameras in each iteration, I think the appropriate thing to do is to explicitly set the same value for the header timestamp of both. I think the reason why we use the ExactTime policy is to make sure that the left image from one capture does not erroneously get matched with the right image from another capture instance. Right?
Comment by janindu on 2021-09-27:
Yes, that should work if you explicitly set the same timestamp to both image messages.

