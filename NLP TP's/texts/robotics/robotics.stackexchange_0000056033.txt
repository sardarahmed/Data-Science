Q:

How cost_maps and global/local planner works?

Hi,
I have gone through http://wiki.ros.org/move_base; but some doubt comes to my mind.

Why odometry affects only the local planner and how?
Sensor data may be fed into both local and global cost map. Which module in ROS decides this?
How global cost_map influence the global planner (similarly local cost_map/local planner) for effective planning?

What the internal navigation messages (flown from global planner to local planner) contains?

Thanks for your time..

Originally posted by RB on ROS Answers with karma: 229 on 2013-12-11
Post score: 1

Original comments
Comment by Tirjen on 2013-12-11:
For parameters tuning (that isn't simple, as Dereck says), I suggest you to look at this tutorial:
http://wiki.ros.org/navigation/Tutorials/Navigation%20Tuning%20Guide

A:

The global planner only uses the current map and the radius of the robot to plan a path from point A to B. It doesn't care how the robot moves in order to accomplish this trajectory.

The local planner uses the motion model of the robot to find the best set of commands that accomplish the global plan. For a skid steer robot for example, it would 'simulate' every forward and rotational velocity that it is capable of performing and choosing the best set of velocities that accomplish the goal.

You define these relationships in your launch file for the navigation stacks.

the cost map is used to avoid obstacles, set the inflation radius slight larger than the radius of your robot to make sure the planner avoids the corners of objects as  it goes around them.

You can see all of the messages passed between ros nodes with 'rostopic list', 'rostopic echo /topic', and rqtgraph.

Specifically however, the global planner subscribes to the map, the robot's current position, and the specified goal position and publishes a path between those points
The local planner subscribes to the map, and the global planner's path. It then publishes a cmd_vel message to the robot.
It's a complex system to wrap your head around at first, because ROS is a huge ecosystem, but once it 'clicks' I think you'll agree that it's quite simple. (but difficult to tune perfectly... :P
This is the navigation stack for my robot, perhaps it will serve as a good example?
https://github.com/dawonn/ros-pioneer3at
Happy robot-ing!

Originally posted by Dereck with karma: 1070 on 2013-12-11
This answer was ACCEPTED on the original site
Post score: 5

Original comments
Comment by RB on 2013-12-12:
@Derek Thanks a lot

