Q:

ROS2 Package using both C++ and Python

How can I configure a ROS2 package that contains both C++ and python code for installation? I am aware of a previous question here, but the answer does not provide an example. I tried following the tutorial here, but I get No executable found when trying to run my python script with ros2 run (the C++ executables run without issue).
How do I configure my CMakeLists.txt to install python scripts so that ros2 run can find them?
Edit: I have also tried the call to install(FILES <script.py> DESTINATION share/${PROJECT_NAME}) used here to no avail.

Originally posted by beck on ROS Answers with karma: 121 on 2018-11-26
Post score: 1

Original comments
Comment by poonam1120 on 2018-12-03:
Hi,
have you tried adding launch.py in CMakelist.txt and launch the nodes  pass the test.
I have migrated .test files from ros1 to launch.py in ros2 but not able to add it in CMakelist.txt.
With ros1, we can do with rostest.
Thanks,
Poonam
Comment by William on 2018-12-05:
@poonam1120 I've already asked you to not use answers to ask questions. Please use comments.
Comment by poonam1120 on 2018-12-06:
@william,
My apologies.
Comment by William on 2018-12-06:
No worries, just try to use comments unless it's actually an answer :)

A:

This works for me in bouncy:
install(PROGRAMS scripts/demo.py DESTINATION lib/${PROJECT_NAME})

https://github.com/lucasw/imgui_ros/blob/bouncy/imgui_ros/CMakeLists.txt#L96
PROGRAMS sets the installed file permissions to be executable- but the file has to already be executable, e.g. chmod a+x my_node.py.

Originally posted by lucasw with karma: 8729 on 2018-11-28
This answer was ACCEPTED on the original site
Post score: 4

Original comments
Comment by beck on 2018-11-28:
This works, but only after clearing the build and install directories, and does not work with the --symlink-install option. Is it possible to get it to play nice with --symlink-install?
Comment by lucasw on 2018-11-28:
I'll take a look at symlink install- I didn't realize until looking it up now that it was the new approach to the ros1 'devel' build directory.
Comment by lucasw on 2018-11-29:
I ran symlink-install with a clean workspace (also used with --base-paths to use the same src directory as I already set up without making a symlink) and in install/imgui_ros/lib/imgui_ros there is a symlink to demo.py, it works:
source install/setup.bash
ros2 run imgui_ros demo.py

Comment by beck on 2018-11-29:
This still doesn't work for me. The symlink to the script is being created in the install folder, but ros2 run is not finding it. I installed bouncy from binaries, so if you did an install from source, perhaps this was bug that was fixed?
Comment by lucasw on 2018-11-29:
I've been using the bouncy binaries.
Comment by beck on 2018-11-29:
Well, then I'm at a loss as to why this doesn't work.
Comment by lucasw on 2018-11-30:
Can you makie a minimal example and put it on github, just a cpp and py node that print something?
Comment by beck on 2018-11-30:
See here.
Comment by beck on 2018-11-30:
Setting the script as executable does the trick! Presumably colcon copies the file and sets it as executable normally, but using --symlink-install preserves the existing permissions. Thanks for your help!

