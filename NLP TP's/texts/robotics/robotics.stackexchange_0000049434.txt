Q:

Inverse Kinematics algorithm implementation

Dear Friends,
I am newbie to ROS and Ubuntu and a Masters Student. I am basically a windows user and have now switched to Ubuntu to learn ROS. But ROS + UBUNTU = (GREAT FUN);
As my masters project I have designed an Inverse Kinematics algorithm for joints. My supervisor advised me to implement the same using ROS showing the algorithm in action using Simulation. I completed the tutorials and was able to understand most of the ROS fundamental and now my questions are
Q1 - Am I on the right direction? Do I need ROS to show the algorithm in action using Simulation? I have already done this using Flash and Webgl.
Q2 - Are there any tutorials for ROS to get started with regards to Kinematics and Joints ?
Regards,
Srinivasan!

Originally posted by aalavandhaann on ROS Answers with karma: 3 on 2013-03-16
Post score: 2

A:

ROS is a great way for you to test/demonstrate your inverse kinematics algorithms!
The arm_kinematics_constraint_aware package provides a plugin interface for integrating different kinematics algorithms into the standard ROS ecosystem.  See the tutorials for an introduction on how to set up your own kinematics plugin.
Once you have implemented the standard kinematics-plugin interface for your algorithms, then you can easily swap between the default ROS kinematics methods and your own algorithms, for comparison and benchmarking.
You can test your kinematics in a few different ways:

Qualitatively - create a arm navigation package for your robot arm, then use the planning components visualizer to interactively drag the end-effector and observe the joint solutions computed by your IK algorithms.

Quantitatively - write a program to call the kinematics service for a set of random, critical, or evenly-spaced poses to evaluate the performance (timing, accuracy, etc.) of your kinematics algorithms.  One easy method is to iterate through all valid joint-angle combinations, and calculate a round-trip kinematic solution (forward-kinematics followed by inverse-kinematics).  Comparing the IK results against the original joint-angles can help evaluate your IK algorithms.

Good luck!  Hope these pointers are helpful.

Originally posted by Jeremy Zoss with karma: 4976 on 2013-03-17
This answer was ACCEPTED on the original site
Post score: 5

Original comments
Comment by aalavandhaann on 2013-03-18:
Thank you very very much for having taken time to have answered my queries despite the stupidity of mine for having not included in the query about the technical details like the ubuntu and the ros verison.
The details about the versions of the softwares I am using
Ubuntu 13.04
ROS - Groovy

