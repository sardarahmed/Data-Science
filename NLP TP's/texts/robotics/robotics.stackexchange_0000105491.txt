Q:

Using MoveIt2 to plan a smooth path consisted of several discretized points to control a UR5e robot

I would like to generate a "smooth" trajectory in space, and plan it using Moveit2 (along with ROS2 humble) in order to make a UR5e robot drive these points.
I am aware that I need to discretize this trajectory into several points.
My guess is that I would need the MoveIt2 path planner to compute the joint positions, and I would send these to the joint trajectory controller of ros_control.
I tried to google around but could not find a similar implementation.
I would appreciate any help, or any road map that I should follow.

A:

I would like to generate a "smooth" trajectory in space, and plan it using Moveit2 (along with ROS2 humble) in order to make a UR5e robot drive these points.

Usually, you would make use of the MoveGroupInterface, which provides a C++ API to interface with your robot. If you take a look at the file move_group_interface.h, you will find a couple of functions that will help you setup and plan for poses with your robot.
The general order of usage is as follows:

setup MoveGroupInterface to accept the robot description and the SRDF (look at the tutorial for a clearer explanation)
Set the planning parameters using the setPlannerParams function
Set a target for the robot. You can either use setJointValueTarget, or setPoseTarget depending on your use-case.
Generate a plan for the robot.
Once happy with the generated plan, you want to execute it.

NOTE: In the general context of MoveIt2, "plan" just constructs a trajectory, that the robot needs to follow. When you want the robot to follow the generated trajectory, you want to call the "execute" function.

My question is: how should I provide these points (which would be in Cartesian coordinates) so that they would be used to create the respective joint coordinates and be sent to ros_control?

You should ideally not be putting in a trajectory by hand, as it leads to augmentation of human error. What you should do instead, is use setPoseTargets, or in your case, I think you would like to use setJointValueTargets, plan for these joint values, store the plan, do some post-processing if necessary, and then send it off to execute.
Normally, the UR5 should have some moveit_config file pertaining to ros2_control, this YAML should take care of passing the output of the MoveIt-generated trajectory over to the ros2_control side of things. IIRC, for the simplest operation, there is a JointTrajectoryController used, which takes in the generated plan and sends it over to the dedicated robot controller.
Hope this helps to make things clearer !

