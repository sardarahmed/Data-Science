Q:

Redistribute ROS-based library

Breaking up several questions I asked here:
http://answers.ros.org/question/45234/multiplatform-dotnet-ros-workflow-redistribution-issues/
Issue #4: Last but not least, and this is really important on our final decision of using ROS or not: Me and my colleague are building and linking together a bunch of independent modules that provide behavior and expressivity control to characters independently of their mind or body, so our packages will be used to link different minds to different robots, and even to virtual characters in Unity3D.
The purpose of this is that anyone in our research lab that needs a character can use our stuff.
So even if we get this working, will we be able to redistribute our libraries running over ROS easily to someone who isn't familiarized with ROS, but just wants to use whatever we build over it?
I think this is an important question regarding my vision on the whole purpose of ROS: everything looks and works great, but it's a pain to install and setup. It definitely looks like something I don't want to depend on if I'm developing stuff for other people to use. And it is definitely something that would make me think twice before using something that depended on it - especially if I just develop cultural agents that just smile and run around inside a Unity3D scene and someone just says "hey I have this stuff here that will look great on your character, you just have to spend a couple of days going through this whole process of getting ROS to run on your machine/OS"
Is there any guide or workflow for redistributing a ROS-based library/application?

Originally posted by TiagoRibeiro on ROS Answers with karma: 41 on 2012-10-07
Post score: 0

A:

It seems that you would be better served if you first develop an API that is subsequently used with a light ROS wrapper to manage messaging and other housekeeping.
I do not know your code but when I hear "link different minds to different robots", it sounds like you would have to define and effective abstraction for the mind software that you are developing. This has nothing to do with ROS, and if you wanted to share your code, you would face the same issue if developing this application for Unity, Second Life, or any other tool/environment.
The language, and the framework you use to structure your project also will impact how easy it will be to use in other languages/distros/etc.
Things to consider as well: Do you plan to develop something that plays nicely with SWIG? Can you develop a C library that could be imported with ctypes (python), or LoadLibrary (Java)? What are the languages that are required by the tools you'd like to develop for? Do you know the places that useful methods like sleep() or say() are defined?
At the end of the day, it comes does to what are you willing to do, and how much you (plan to) understand about the potential users of your API.
Just my 2 cents. I really hope it helps.

Originally posted by SL Remy with karma: 2022 on 2012-10-09
This answer was ACCEPTED on the original site
Post score: 1

