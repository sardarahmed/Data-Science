Q:

Installing ROS on Ubuntu Bash in Windows 10

Hello, everyone.
This is rather a documentation of what I came across while messing around. Windows 10 in the latest release in April features an internal Ubuntu OS in the build, This holds the possibility for installing ROS on Ubuntu directly.
In order to install it, I followed the instructions on building ROS from source on the wiki :
ROS Indigo Source Installation
The version of Ubuntu in Windows 10 is 14.04, so Indigo and earlier versions will work, most likely.
Try it out, and if you face problems, please document them here.
Thanks

Originally posted by Mahmoud Abdul Galil on ROS Answers with karma: 106 on 2016-07-02
Post score: 8

A:

Update (2017-10-28): @k-okada
I have successfully running ros,  rviz + stage or rviz + gazebo (though the gazebo screen is black), on Windows Fall Creators Updates

Windows 10 Pro, 64bit, Version 1709, Build 16299.19
ros_comm 1.12.7
PubicDomain version of Xming (http://www.straightrunning.com/XmingNotes/), rviz/gazebo clashes with Xming-mesa
need to install ubuntu-gnome-desktop manually (https://github.com/Microsoft/WSL/issues/2016)

Update (2017-05-09):
There is now a PR against ros_comm (ros/ros_comm#1050) which appears to address one of the main remaining issues with ROS on WSL.
A regular ROS install with ros_comm (really only roscpp) with the patch built from sources in an overlay workspace now results in an (almost) working ROS install running on WSL on build 16188.

Update (2017-04-05) by @RodBelaFarin:

Status quo in build 15063: roscore, turtlesim, rviz, rqt_graph starting up, rostopic list works, even rostopic echo works sometimes, but no communication between nodes. Using WSL 14.04 and Indigo binary install, just added localhost to .bashrc as ROS_MASTER_URI and ROS_HOSTNAME. Using Xming and DISPLAY=:0.

Update (2017-02-02): Build 15019 hasn't improved things significantly, but at least most of the tricks for getting networking to work (Teredo issue etc) have been addressed.
See Microsoft/BashOnWindows/#issues/1450 and Microsoft/BashOnWindows#1391 for issues tracking current state / progress.

Update (2016-11-11): the Anniversary Update didn't improve things, but as of Build 14965, the below mentioned getifaddrs preload library is no longer needed. Network interface enumeration now works correctly. If you are having problems (permission denied errors from Python netifaces.interfaces(), see this comment about the Teredo interface.
RQT runs (after export DISPLAY=:0 and installing an X server on Windows). RViz could work, if you have an X server supporting OpenGL.
One remaining issue is that there is still a problem with publishing and subscribing from WSL.
Note that new installations of WSL will install Ubuntu Xenial (16.04), requiring you to install ROS Kinetic. Just follow the Ubuntu ROS Kinetic installation documentation.

tl;dr: you can install ROS Indigo for amd64 from binaries on WSL, but the current state of the network stack is such that it makes any kind of serious use of ROSonWSL impossible (at least as of build 14376 14905).
edit: it could be that things will improve after the Anniversary Update (from Microsoft/BashOnWindows#567):

We are working to enhance the networking/socket level support post Anniversary update release. Stay tuned!

(note: the following text is left here for reference only. Most of the comments about the networking stack don't apply to recent builds any more)
It's perfectly possible to install ROS on WSL as you found out: just follow the Ubuntu Trusty installation tutorial. No need to build from source actually, WSL supports the amd64 architecture, which is well supported by the ROS buildfarm.
The problem is that for ROS to be really useful (other than just using it as a build infrastructure on a Windows10 machine) the networking support in WSL needs to be extended significantly / finished.
One of the major problems is that raw / netlink socket support is absent currently (build 14376 as of writing, see the WSL release notes), which makes getifaddrs(..) not work. That is the cause of the backtrace @Mahmoud Abdul Galil posts in his answer. MS is aware of this (see Microsoft/BashOnWindows#118, Microsoft/BashOnWindows#134 and Microsoft/BashOnWindows#308), and there is a User Voice topic for this, which you can vote on. I'd recommend you do that.
To get around getifaddrs(..) not working, I wrote gavanderhoorn/getifaddrs_preload, which LD_PRELOADs itself and returns the minimal data needed to get netifaces.interfaces() to work. This just always returns 127.0.0.1, and whatever you have ROS_IP set to.
To get roscore to start, do the following (in a WSL Bash terminal):
$ export ROS_IP=<your actual IP>
$ export ROS_MASTER_URI=http://<your actual ip>:11311/
$ source /opt/ros/indigo/setup.bash
$ LD_PRELOAD=/path/to/_getifaddrs.so roscore

This roscore is perfectly usable: other Linux and OSX machines can use it as well, rostopic list, rosservice list etc all work correctly.
But at this point things become less interesting: as @m4k mentions, WSL doesn't have an X server, which means no RViz, no RQT etc. WSL does have an X client though (or more precisely, the Ubuntu root fs that is used does, after you install ROS), so a Windows X-Server (such as the ones @petermitrano suggests) is enough to get basic X working (export DISPLAY=:0 && xcalc fi). At this point, RQT and RViz still crash however. I haven't put any more time in this, but I suspect something is either not implemented in WSL, or it's running into things like what ros-visualization/qt_gui_core#62 was meant to address. I suspect issues with getting OpenGL to work after these are fixed as well.
Ignoring GUI applications, the next limitation is in the socket support: publishing, subscribing and service invocation typically fail with an error such as:
Inbound TCP/IP connection failed: connection from sender terminated before handshake header received. 0 bytes were received.  Please check sender for additional details.

I've had intermittent success, but things like rostopic pub -r1 /chatter std_msgs/String "data: 'bla'" most of the times result in the error above, and no data being exchanged. Pub or sub from remote machines fail similarly (but that is to be expected).
As to the netlink / raw socket support: there is a (small) chance that it might have gotten more priority for the WSL dev team after Microsoft/BashOnWindows#468 was reported:

This will be required for the new SharePoint Framework update released by Microsoft. Because it use [sic] Yeoman generator to extend SharePoint from Linux, MacOSX as well as Windows.

I have no insight into the WSL development process, but in the past, requirements for internal projects have been known to have influence on the priority of outstanding issues at MS, so who knows ..

At this point I've had to get back to other things, so it is well possible that a few, correctly placed work-arounds like getifaddrs_preload could make things work (although things like Microsoft/BashOnWindows#616 also still exist). I suspect though that without MS getting the network stack working properly, it'll require some effort to get WSL to be a useful deployment target for ROS (even if we can re-use the amd64 binaries directly).

Originally posted by gvdhoorn with karma: 86574 on 2016-07-03
This answer was ACCEPTED on the original site
Post score: 21

Original comments
Comment by Jon Stephan on 2016-09-24:
edit: it could be that things will improve after the Anniversary Update (from Microsoft/BashOnWindows#567
I just installed the anniversary update.  roscore still doesn't work.:
Comment by gvdhoorn on 2016-09-25:
Yes, I can confirm that. Haven't been keeping this post up-to-date. Latest builds (14926) don't change anything. But things are moving, as the status of the user voice topic about netlink/raw socket support has been changed to working on it.
Comment by tjs000 on 2016-10-12:
I don't know if doing this is bad form, but: http://answers.ros.org/question/238646/installing-ros-on-ubuntu-bash-in-windows-10/?answer=245503#post-id-245503 Somewhat of an issue! :)
Comment by gvdhoorn on 2016-10-13:
Yes, that is bad form. I've seen your post, but haven't had time to check what is going wrong.
If you've just installed that Win10 machine, it could be that it's now running a 16.04 root fs, which might have introduced changes to how getifaddrs(..) is supposed to work.
Comment by tjs000 on 2016-10-13:
I'm sorry. I think that it probably is related to that. Thankyou for even reading the post. I will check back daily and if there's anything that you need from me i'll be happy to provide it, but obviously there is no pressure... :)
Comment by gvdhoorn on 2016-10-13:
Don't worry about it. Could you perhaps report the issue to the issue tracker over at gavanderhoorn/getifaddrs_preload? Thanks.
Comment by gvdhoorn on 2016-10-13:
I'd actually be interested how you got RViz to work on WSL. Which XServer did you install? Anything special on the WSL side? Last time I tried it always crashed.
Comment by tjs000 on 2016-10-13:
I just put 'export DISPLAY=:0' in ~/.bashrc and used Xming in Windows. RViz starts then complains that roscore isn't running so that's as far as I can get now.
Comment by gvdhoorn on 2016-10-13:
Interesting. Perhaps something has been updated/changed since the last time I tried. I also believe I didn't use Xming. I'll have to check that out again.
Comment by Mahmoud Abdul Galil on 2016-11-12:
So why is there a problem with publishing and subscribing?
Comment by gvdhoorn on 2016-11-12:
Haven't spent too much time on it, but there seems to be an issue with either accepting or opening TCP connections. There's a good chance this is an already known issue, just haven't had a chance to look further into it.
Comment by Mahmoud Abdul Galil on 2016-11-12:
any hope of a solution soon?
Comment by gvdhoorn on 2016-11-12:
I don't know. I haven't even determined what the cause is. There are still lots of issues with WSL though, so I wouldn't be surprised if there is something missing in the network stack.
Comment by janb on 2016-11-19:
The issue seems to persists in insider build 14971. I created an issue on github and an entry on user voice.
Comment by gvdhoorn on 2016-11-20:
I think your claims in your user voice post are a bit contentious (especially the "torn between Linux and Windows" and "due to hw" bit, as especially hw access is impossible (and I don't see it changing or becoming easy)), but let's see whether this helps.
Comment by RodBelaFarin on 2017-04-05:
Status quo in build 15063: roscore, turtlesim, rviz, rqt_graph starting up, rostopic list works, even rostopic echo works sometimes, but no communication between nodes. Using WSL 14.04 and Indigo binary install, just added localhost to .bashrc as MASTER_URI and HOSTNAME. Using Xming and DISPLAY=:0
Comment by meleagrosy on 2017-06-03:
nvm - 16.04 seems to work fine with ros_comm on branch lunar-devel
Comment by janb on 2017-07-07:
A writeup with step by step guide to get ROS running on WSL is available here http://janbernloehr.de/2017/06/10/ros-windows. Thank you all for making this possible!
Comment by VictorLamoine on 2017-08-07:
I have tested this and it works at least for basic things (running RViz etc.), several persons are reporting that it works on @janb's blog. I have updated the http://wiki.ros.org/Installation/Windows page to point to these instructions.
Comment by gvdhoorn on 2017-08-07:
It would actually be nice if we can update the installation instructions on the wiki itself instead of linking to an external blog post. When the ros_comm fix is backported to Kinetic, this will make even more sense.
Also: to be precise: this is actually not ROS on Windows, but on WSL ..
Comment by gvdhoorn on 2017-08-07:
.. if we want to be correct, it should get its own set of installation instructions. Or at the very least get its own landing page -- which may just redirect / include the regular Ubuntu installation instructions.
Reason the difference is important to recognise is that ROS on WSL does not have ..
Comment by gvdhoorn on 2017-08-07:
.. access to the resources (ie: software, files, hardware, etc) that 'live' on the Win32/64 side. A native ROS on Windows would have that access, so ROSonWSL != ROSonWin64.
Comment by VictorLamoine on 2017-08-07:
I agree: this is not a native build. I think it's possible to access the file system, not the other items you mentioned. What you mean is dedicated page here: http://wiki.ros.org/Installation? Feel free to edit my wiki entry and add a warning stating this is not native!
Comment by gvdhoorn on 2017-08-07:\

What you mean is dedicated page here: http://wiki.ros.org/Installation?

yes, exactly.
That would also be a good place -- at the end -- to list some of the limitations and possible work-arounds (like the software rendering, need for an X server, etc).
Current Windows page could point to the ..
Comment by gvdhoorn on 2017-08-07:
.. new one as the as-of-yet and for-ROS1 best alternative then.
Comment by gvdhoorn on 2017-10-28:
@Kei Okada : thanks for the update, but I'm a bit confused: did you test this with multiple machines? @Dirk Thomas opened ros/ros_comm#1205 against ros_comm only two days ago and it hasn't been merged yet. That PR backports a critical fix to Kinetic, ..
Comment by gvdhoorn on 2017-10-28:
.. and hasn't been released yet. Your update says:

ros_comm 1.12.7

which I assume means ROS Kinetic.
Additionally, ros/ros_comm#1202 would seem to be needed.
Comment by randaz on 2017-11-28:
Using ROS on WSL on a similar setup, but still there's something weird.
I have:

Windows 10 Build 16299.19 (as yours)
ROS lunar, ros_comm 1.13.2
I am able to "rostopic echo /tf" successfully.
RVIZ works correctly, it just cannot visualize /tf tree. ROSwtf says rviz is not connected to /tf. Why?

Comment by gvdhoorn on 2017-11-29:
Not sure. This is all highly experimental, and WSL is also largely a moving target (ie: MS keeps changing it). Something that worked some time ago may not work anymore when you try it.
Remember that ROS on WSL is not 'a thing', we just happen to be able to reuse the amd64 Ubuntu binaries.

