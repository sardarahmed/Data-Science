Q:

How do I deploy a rosdep mirror?

Github is starting to throttle my requests to https://raw.githubusercontent.com/ros/rosdistro . How do I deploy a mirror of such a package index and tell rosdep to consume it?
Edit: responding the obvious question; it's probably in the neighborhood of 5000 invocations daily from my employer's office. I've already taken steps eliminate the ones I make during sundry container initialization, but there are some that I can't eliminate --- notably the one issued by bloom-release when I bloom my projects.

Originally posted by rubicks on ROS Answers with karma: 193 on 2019-11-20
Post score: 1

Original comments
Comment by gvdhoorn on 2019-11-20:
Just to get some sense of scale here: how many package (re)builds are you running? Or how many packages are you building per time-unit?
I'm not aware of build.ros.org using any mirror or cache for ros/rosdistro specifically, so I'm wondering what it would take for Github to start throttling you.
Comment by tfoote on 2019-11-20:
Wow, that's a lot of calls. Can you confirm which operations are problematic, is it the rosdep updates that are failing? Those should not be necessary to call that often as the rosdep database doesn't change that often. Most rosdistro operations are designed to use the cache.
It would be possible to add an enhancement to rosdep to use a github token to do authenticated fetching with a much higher limit. And bloom could also be enhanced to do the same as well as pass the credentials through.
For reference this implies that this is governed by the unauthenticated API rate limit of 60/hour, Authenticating will get you up to 5000/hour. GitHub API rate limiting 
Comment by gvdhoorn on 2019-11-21:\

it's probably in the neighborhood of 5000 invocations daily from my employer's office

can you say anything about what you're actually doing that requires that many rosdep updates?

there are some that I can't eliminate --- notably the one issued by bloom-release when I bloom my projects.

5000 bloom-releases per day (?).
Comment by rubicks on 2019-11-21:
There's about 50 invocations to bloom-release daily. I've been able to eliminate all other invocations to rosdep update. Now, I rosdep update as root during the construction of a build environment and then copy ~root/.ros to ~luser when I wish to build catkin projects.

A:

As a direct answer to your question you can setup your own rosdep sources. See the documentation here: https://docs.ros.org/independent/api/rosdep/html/sources_list.html
But I have to agree with @gvdhoorn that we have used this a lot and have not experienced throttling from github on our CI setups. How often are you calling rosdep update?
I put together a quick Dockerfile to demo how to use a local copy:
FROM ros
# pull a copy of the rosdistro
RUN mkdir -p /cache && cd /cache && git clone https://github.com/ros/rosdistro.git -b master --depth 1
# Update it to self reference
RUN sed -i s#https://raw.githubusercontent.com/ros/rosdistro/master/#file:///cache/rosdistro/# /cache/rosdistro/rosdep/sources.list.d//20-default.list
# Tell the local environment to use the local instance of rosdistro
ENV ROSDISTRO_INDEX_URL="file:///cache/rosdistro/index-v4.yaml"
# Tell rosdep where to look for sources
ENV ROSDEP_SOURCE_PATH=/cache/rosdistro/rosdep/sources.list.d
# Clear system sources for clarity. They will be overridden anyway, but to show for this demo they're not being used.
RUN rm -rf /etc/ros/rosdep

# Show rosdep working using local resources
CMD rosdep update

You can host the clone of the rosdistro anywhere you want. it's convenient for this demo to be on the filesystem.

Originally posted by tfoote with karma: 58457 on 2019-11-20
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by rubicks on 2019-11-20:
I can certainly replace the default list...
https://github.com/ros/rosdistro/blob/master/rosdep/sources.list.d/20-default.list

...with something that references the same gbpdistro and yaml content under file:/// URIs instead of https:// URIs. But when I try that trick with the DEFAULT_INDEX_URL...
https://github.com/ros-infrastructure/rosdistro/blob/838099d161b15940eb102c0c13d99675f6752562/src/rosdistro/__init__.py#L68
...it errors out looking for non-existent files on my host. Any ideas what's happening there?
Comment by tfoote on 2019-11-20:
What are you doing to change the DEFAULT_INDEX_URL? What are you running? And what are the errors?
Comment by rubicks on 2019-11-21:
Here's a Dockerfile demonstrating what I mean: https://hastebin.com/raw/ocitiqujeg
The error produced is as follows:
    ERROR: error loading sources list:
    <urlopen error <urlopen error [Errno 2] No such file or directory: '/var/lib/rosdep/crystal/distribution.yaml'>(file:///var/lib/rosdep/crystal/distribution.yaml)>

Comment by tfoote on 2019-11-21:
I saw your hastebin posting this morning, but now it' won't load on a heroku error
Application error
An error occurred in the application and your page could not be served. If you are the application owner, check your logs for details. You can do this from the Heroku CLI with the command
heroku logs --tail
Comment by rubicks on 2019-11-22:
Shucks. Try this one: https://gist.github.com/rubicks/0a9e2ad9f08a22acd23ac95ee3f2648e
Comment by tfoote on 2019-11-22:
I updated my answer with an example of how to use rosdep using a local copy of the rosdistro in a Dockerfile
Comment by rubicks on 2019-11-25:
That will certainly work for my purposes --- thanks very much.

