Q:

ethzasl_icp_mapper Field normals not found

I've been using ethzasl_icp_mapper to perform SLAM on some odometry free velodyne data. Until a few weeks ago all of my scripts were working perfectly. Then they started throwing a "Field normals not found" error. I cannot figure out why this began occurring as neither the velodyne_pointcloud package or the ethzasl_icp_mapper package were updated. Looking through the code it appears that it occurs in DataPoints.cpp of the libpointmatcher library. However my attempts to use GDB end up pointing me to ros::spin() instead of any of the ethzasl_icp code.
I think it has to do with the available fields in my PointClouds2 message but as I mentioned earlier I have no clue what could have happened between March 25th and April 1st that could have changed the behavior of the code.

Originally posted by flashedarling on ROS Answers with karma: 36 on 2014-04-22
Post score: 0

A:

SOLVED.
The problem was not with the input PointCloud2 msg. The error was occuring in PointtoPlaneErrorMinimizer::compute() when it attempted to load the normals of the previous reference point cloud. It turns out that it can be solved by inserting
"param name="inputFiltersConfig" value="$(find ethzasl_icp_mapper)/launch/artor/input_filters.yaml"
into my launch file. This turns on SurfaceNormalDataPointsFilter which inserts the normals field into the reference point cloud.  Something I noticed when I went back to the original "artor_mapping.launch" file that was my original template.

Originally posted by flashedarling with karma: 36 on 2014-04-23
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by krishnaece1505 on 2016-02-29:
Hi, I want to use the ethzasl_icp_mapping to create a 3D map with the pointclouds I obtain from the velodyne VLP-16 lidar. Since, you said you got it to work even without odometry, can you describe the procedure you followed? Which velodyne lidar did you use by the way?

