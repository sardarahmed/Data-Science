Q:

How to improve communication performance between Gazebo Ubuntu and Windows?

Hi
I'm working on an application that runs on Windows using Unity3d while Gazebo is running on Ubuntu in a virtual machine. The communication between them is made via ROS topics/services and Gazebo plugins. The physics is calculated on Gazabo while the Windows application is used for visualization and user control.
Right now, my windows application calls Gazebo API functions using ROS services, but  the performance is too bad. Every time my main application calls a service (e.g for setting a joint velocity), it freezes until the service is complete. Calling a dozen services in each simulation step is enough to make the application execution impossible.
Is there a way to improve communication performance between the two platforms?  Any suggestion is welcome. We are thinking about using ROS actions, but we're not sure it's gonna solve our problem.
Thanks
Eduardo de Albuquerque

Originally posted by Eduardo Albuquerque on Gazebo Answers with karma: 89 on 2015-02-23
Post score: 0

Original comments
Comment by TwoBid on 2016-05-05:
Hi Eduardo,
can I ask you why you choose Unity3D only for visualization & Ui? I currently evaluating an approach for developing a software for a virtual implementation. We want to test our robots in a virtual factory. I played a little with Unity3D and the whole API is very need. I like also the design approach in the editor but when it comes to sensors and the physics engine, definitely Gazebo has a better solution. Can you share your experiences? Would be great to hear from you,
Robert

A:

I have 2 suggestions:

Move all applications to single platform. Unity3D editor doesn't come for linux, but you can publish applications for linux based os. So, use that. It will result in faster execution, since the VM is eliminated. You can also use Wine, but I haven't tried that
Use ROS actions. Basically, using a ROS service is like calling a function in the same thread. If that function takes a lot of time, the service blocks the thread, till the service call is completed. Either use another thread to call the service, or use ROS actions which implement this crude hack in a more elegant manner

Originally posted by Kunal Tyagi with karma: 36 on 2015-02-24
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by Eduardo Albuquerque on 2015-02-24:
Thanks for the suggestions. We need to use the Unity3d editor, so create a Linux application is not an option. At first, we were using only Ubuntu and Wine, but the application was very unstable and kept crashing randomly. For this reason, we moved to windows and a VM.
We gonna try to use ROS actions as you suggested. Right now, we are doing some tests and then I will publish the results here.
Again, thanks for the advices.
Comment by Kunal Tyagi on 2015-02-24:
You can use the Unity3D editor in windows, use the publish option to get an application for linux. Use that application to interact with gazebo.
Comment by Eduardo Albuquerque on 2015-02-24:
Thanks again! But for some pratical reasons, for our current project, it would impossible to do this. For now, we're gonna try ROS actions. We hope Gazebo 6.0 will support windows.

