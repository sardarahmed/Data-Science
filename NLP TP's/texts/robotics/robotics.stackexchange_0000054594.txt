Q:

Building and linking ros library

Hi All,
I'm trying to rosbuild a library, which will then be included in several other ROS-packages. Right now, I have successfully created the library in "DeviceHandler" package by:
rosbuild_add_library(Advertiser src/Advertiser.cpp)

This library consists of a class (Advertiser.cpp and Advertiser.hpp)
I have exported the following flags in the Manifest.xml of "DeviceHandler":
<export>
<cpp cflags="-I${prefix} -I${prefix}/include/ -I${prefix}/include/DeviceHandler/ -I${prefix}/msg_gen/cpp/include/DeviceHandler -I${prefix}/srv_gen/cpp/include/DeviceHandler" lflags="-Wl,-rpath,${prefix}/lib -L${prefix}/lib -lAdvertiser"/>
</export>

And I have made my new package (let's call it NewPackage) depend on this "DeviceHandler" package - which builds the "libAdvertiser.so".
So far so good, however, when I try to utilise the library (libAdvertiser.so) in the "NewPackage", it simply can't find "Advertiser.hpp" when included inside code.
Inside my main.cpp in "NewPackage" I have:
#include "Advertiser.hpp"

And the compiler fails on this one, with the output:
/home/casper/ros_workspace/MobileManipulator/hardware_reconfig_system/DeviceEmulators/src/GripperEmulator.cpp:26:26: fatal error: Advertiser.hpp: No such file or directory

The DeviceHandler package both builds the library + an executable, but is that the problem?
Also, should I do anything in the CMakeList.txt of "NewPackage" in order to link the library?
I have been searching for a couple of hours for an answer and nothing really seemed to do the trick. Hoping that it is just some detail I'm missing, any help is much appreciated.
Thanks
/Casper

Originally posted by cschou on ROS Answers with karma: 3 on 2013-10-04
Post score: 0

Original comments
Comment by dornhege on 2013-10-04:
Copy the compile errors that you get in your question and also add the code that doesn't compile.
Comment by cschou on 2013-10-04:
Hi, sure, that should be in there now...
Comment by dornhege on 2013-10-04:
And where is the file in the package?
Comment by cschou on 2013-10-04:
Well, the Advertiser.hpp is not in the "NewPackage". Is is in the shared object "libAdvertiser.so" created by the "DeviceHandler" package. So, the Advertiser.hpp is in /DeviceHandler/src/Advertiser.hpp.. Shouldn't I be able to access the headerfile used in a shared object? I should note, that this library stuff is a bit new to me...

A:

Headers are not in the library at all. You need to provide them to the compiler. You add a bunch of -I include flags in you cpp export, but not one pointing to src, where your header lies. Either add that additional export or follow the standard ros way and move the header file to include/Advertiser in your package.
Your and client code should include that as #include "Advertiser/Advertiser.hpp. You'd probably also be able to remove a lot of the include exports.

Originally posted by dornhege with karma: 31395 on 2013-10-04
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by cschou on 2013-10-04:
Perfect!. I don't know why I didn't think of that. Sometimes you can really get so focused at a problem that you really miss the obvious. But your answer was spot on, I just moved the header file to the include folder and it works.
Thank you for your help.

