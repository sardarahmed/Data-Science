Q:

Why robot needs to set NTP?

In turtlebot tutorials NTP , why turtlebot robot needs to set Network Time Protocol?

If I didn't set that protocol, what will happen? cause some errors?

Every robot needs NTP?

Thank you~

Originally posted by sam on ROS Answers with karma: 2570 on 2012-03-28
Post score: 2

A:

To have TF and all the other time based things properly, it is important to have all clocks synchronized. NTP is just a very simple way to achieve that. Another one that is used e.g. on the PR2 is chrony.
If you don't set up NTP everything will be working fine as long as you are executing it on the same PC. If you have a setup using several computers communicating over a network, make sure that times are synchronized.
Edit:
Sensors, odometry, etc. publish data with a time-stamp that is generated from using system time which is set by NTP. The stamp is then used by TF to transform between coordinate frames. Example: You have a tilting laser sensor. The position of the tilt-joint and the laser scans are continuously published on topics, with a time stamp. If you now want to build up a 3D point cloud in your robot's base frame, you need to transform each laser point (using its time stamp) to the base frame, using the position of the joint at the time when the laser scan has been taken. If now the joint and the laser are connected to two different computers and the clocks are not synchronized, the resulting point cloud will be wrong.

Originally posted by Lorenz with karma: 22731 on 2012-03-28
This answer was ACCEPTED on the original site
Post score: 5

Original comments
Comment by sam on 2012-03-28:
What's the relation between with TF and NTP? And why synchronize is important when run 2 computers?
Comment by Pablo Iñigo Blasco on 2012-03-28:
If you are a TF user you can lookup a transformation in a bounded time interval. This is useful for instance if you untrust older transformations due to movement of the frames. Therefore time synchronization is important. http://www.ros.org/wiki/tf/Theory.
Comment by Pablo Iñigo Blasco on 2012-03-28:
In any case IMHO TF should handle uncertainty for hidding or muffling little time synchronizations errors (or  frames in movement, etc.). http://answers.ros.org/question/30498/tf-handling-frame-uncertainty
Comment by Thomas D on 2012-03-28:
Another useful alternative to NTP is PTPd (http://ptpd.sourceforge.net/). To me PTPd is easier to setup and use if some of your machines do not have an internet connection, since you can set one machine as master and all the other machines as slaves that will try to sync their time with the master.

