Q:

Logging and processing the same sensor data

Hi all,
In my system I have a sensor that sends data via TCP/IP. This data should be logged for future processing and also used for a live computation at the same time.
Since i am a newbie to ROS, I have a question concerning a good design for the situation above. Does it make sense to write a node(let) which simply opens the socket, reads the data and publishes the bytes as they come from the sensor. Then use two node(let)s to subscribe to the topic? Or better, one node reads the data, processes it and writes the data to a rosbag?
What happens to this design if there are 20 sensors?
Regards

Originally posted by quantum on ROS Answers with karma: 15 on 2018-11-09
Post score: 0

A:

For the task you have described you should make a node which connects to the sensor and publishes it's data. The raw data from the sensor should be converted either to one of the standard ROS messages or a suitable custom message type. This is the recommended architecture within ROS.
As you suggested you can use rosbag to record the data and play it back later. This way your processing node will subscribe to the sensor topic so it can be used just as easily with the live data as with the recorded data.
If you need more sensors you can start multiple sensor nodes and remap their outputs to different topics.
Hope this helps.

Originally posted by PeteBlackerThe3rd with karma: 9529 on 2018-11-09
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by quantum on 2018-11-10:
Assuming my sensor is GPS, then based on your recommendation, I should decode the data and transfer it to e.g. geometry_msgs/Pose and then published and loggen this "compact" data set. In case of a bug in my decoder, that geometry_msgs/Pose won't make sense, my rosbag won't help me.
Comment by gvdhoorn on 2018-11-10:
Assuming your sensor is GPS, you should try to find an existing component.
As to @PeteBlackerThe3rd's suggestion: that is indeed how sensors should be integrated into ROS.
@quantum: debugging internal algorithms is typically part of unit tests, not integration tests. ROS nodes do not come ..
Comment by gvdhoorn on 2018-11-10:
.. into play in unit tests. So verifying your decoder is ok would be a unit-test level task and at that point you'd have access to the serialised packets/streams/X and the decoded ones and can do all the verification you'd need (it would most likely not even be against an actual device).
Comment by quantum on 2018-11-10:
@gvdhoorn, thanks for trying to explain newbie how ROS works. Assuming my sensor is a camera, then i saw sensor_msgs/Image Message. Fine for me, since i have, uint8[] data, which contain the actual matrix data, size is (step * rows), then i am with you.
Comment by quantum on 2018-11-10:
Normally moving from one format to another causes for reduce of information, that is why I would always like to log in a rosbag the original information. How knows, maybe in one year you will need something that now you do not need\thought about it.
Comment by PeteBlackerThe3rd on 2018-11-10:
The question is one of abstraction, to reduce overall system complexity. The idea of the sensor driver node is that the rest of the ROS system doesn't need to know anything specific about the sensor, just that it's a camera/gps/etc.
Comment by quantum on 2018-11-10:
@PeteBlackerThe3rd, i agree with you. The idea is always to have the sensor data in an abstract layer.
Comment by gvdhoorn on 2018-11-10:
Perhaps you can take a look at how the velodyne_driver approaches this: it uses custom messages as a first step that try to capture as much of the original data and semantics, and then uses a post-processing node that turns those msgs into ..
Comment by gvdhoorn on 2018-11-10:
.. standard ROS messages. To avoid introducing undesirable overhead, it's implemented as a nodelet, so in the end only the standardised msgs get (de)serialised (unless of course a non-local node(let) subscribes to the topic carrying the custom msgs).
A bag could contain both msgs in that case.
Comment by Thomas D on 2018-11-10:
With 20 sensors you have to be careful about saturating network interfaces for message passing and disk write speeds for bagging. In that regard, 20 GPS sensors is a lot different than 20 cameras.
Comment by quantum on 2018-11-10:
@Thomas D, I have ca. 20 sensors and not all of them are GPS ;) (Camera, Radar, Lidar and GPS),
Comment by quantum on 2018-11-10:
@gvdhoorn, your suggestion (velodyne_drive) is what i was searching for. For Camera data i would probably use sensor_msgs/Image, for the rest i guess i use the velodyne_drive as a start. thanks a lot for the help.
Comment by gvdhoorn on 2018-11-11:
@Thomas D: of course. But velodyne approach uses nodelets, so at least for the dataflow between the bare device interface and the ROS conversion parts no network bandwidth is used.
That changes of course if any subscriptions outside the nodelet manager to the custom msgs exist.
Comment by gvdhoorn on 2018-11-11:\

For Camera data i would probably use sensor_msgs/Image, for the rest i guess i use the velodyne_drive as a start

I don't understand where the difference is: the velodyne driver in the end still uses standard(ised) ROS msgs for everything.

