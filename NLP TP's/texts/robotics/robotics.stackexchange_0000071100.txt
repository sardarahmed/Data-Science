Q:

Using subscriber to subscribe the Lidar's signal Topic

Hello ROS users,
I am using a subscriber to subscribe lidar's signal. I have watched the subscriber and publisher example(C++) tutorial's video and use catkin_ws to build a package, and I make a sick_listen roscpp file which the coding is copied from the listener in the tutorial. And I modify the coding for using it to subscribe the my lidar's signal topic. The coding as below is what I modified and my spec of my ROS
include "ros/ros.h"

include "std_msgs/String.h"

void laser_msg_Callback(const std_msgs::String::ConstPtr& msg)
{
  ROS_INFO("I heard: [%s]", msg->data.c_str());
}                  

int main(int argc, char **argv)
{

  ros::init(argc, argv, "sick_listener"); 

  ros::NodeHandle n;

  ros::Subscriber sub = n.subscribe("scan", 811, laser_msg_Callback);

  ros::spin();

  return 0;

}

Spec: ubuntu 14.04LTS, Jade ROS, sick tim 561 lidar
And These are the message type of the "lidar's topic" and "talker's topic which is from the tutorial" comparison:
 1. terry@terry-All-Series:~$ rostopic type  /chatter std_msgs/String
 2. terry@terry-All-Series:~$ rostopic type  /scan sensor_msgs/LaserScan

When I run the code of sick_listen, it shows the error as below:
[ INFO] [1451458683.021191460]: Waiting 50 seconds for device to connect.
[ INFO] [1451458683.021602292]: Succesfully connected to 192.168.1.144:2111
[ERROR] [1451458683.224815412]: Client [/sick_listener] wants topic /scan to have datatype/md5sum [std_msgs/String/992ce8a1687cec8c8bd883ec73ca41d1], but our version has [sensor_msgs/LaserScan/90c7ef2dc6895d81024acba2ac42f369]. Dropping connection.

I am a niewbe in the ROS and not to familiar to the c code,so do I need to use the other header of the code for the lidar?
I would be thankful if someone can give me some direction.

Originally posted by Terry Su on ROS Answers with karma: 23 on 2015-12-30
Post score: 0

A:

As the error tells, your message types are inconsistent.
Try the correct message type which is sensor_msgs::LaserScan instead of std_msgs::String.
void laser_msg_Callback(const sensor_msgs::LaserScan::ConstPtr& scan)
{
  //you can get readings with scan->ranges[]
}     

And also of course you should add #include "sensor_msgs/LaserScan.h".

Originally posted by Akif with karma: 3561 on 2015-12-30
This answer was ACCEPTED on the original site
Post score: 4

Original comments
Comment by Terry Su on 2015-12-30:
Hello Akif, when I follow your advice to add the header and "scan->ranges[]", it has an error as:
expected primary-expression before ‘]’ token
ROS_INFO("I heard: [%s]", scan->ranges[]);
Comment by Akif on 2015-12-30:
@Terry Su, You should also write your index of data. Like scan->ranges[0], scan->ranges[1] etc. , whichever reading you want to get.
Comment by Terry Su on 2015-12-30:
@Akif, It is really works! Thank you so much! Could you please tell me that the index meaning in the braket of "range[]", I search it after you told me to input the index, but nothing. Finally, thank you.
Comment by Akif on 2015-12-30:
index will depend on the sensor. For example, if it is measuring 180 deg. with 1 deg. resolution, then your ranges array size will be probably 181, i.e., each range measurement depending on the angle. You can check the size of ranges. Also, if your problem solved please mark answer as correct.
Comment by Terry Su on 2015-12-30:
@Akif, My lidar's scan range is 270 deg with 0.333 deg resolution, so the index what I need is ranges[811] because 270/0.33=811,its right? And the subscriber's receive data what terminal shows is like:

[ INFO] [1451481162.429434168]: I heard: [P?j]
[ INFO] [1451481162.429434168]: I heard:[?]

Comment by Terry Su on 2015-12-30:
Is this because the value is array, so that shows up the strange value as "[P?j]", "[?]" or something like that?
Comment by Akif on 2015-12-30:
Are you printing with %s? I think you should try %f for float.
Comment by Terry Su on 2015-12-30:
@ Akif, Yes! Thank you so much. But when I change the index to range[811], it just show 1 value of distance. But when I use the "rostopic echo /scan", it shows 811 values. I also search the "range[]" in the website and ROS, but just see the laser msg type.
Comment by Akif on 2015-12-30:
@Terry Su, all of your scan readings are stored in ranges array. You can loop through it and do whatever you want. Like, for (int x=0;x< scan->ranges.size();x++){ ROS_INFO("Scan %d: %f", x, scan->ranges[x]); }
Comment by Terry Su on 2015-12-30:
@Akif, So when the index is ranges[811], there are 811 values store in the ranges? And when I put you code in my file, it shows the:

error: expected initializer before ‘for’
error: ‘x’ does not name a type

Comment by Terry Su on 2015-12-30:
After that, I put the #include "String.h" in my header, but it still has same error. Sorry that I not familiar about c code. Thank you for your kindly help.
Comment by Akif on 2015-12-30:
@Terry Su, if you have 811 readings, ranges can have index maximum of 810 since it starts from 0. For the error, I need to see your whole code at that point. Can you share it somewhere?
Comment by Terry Su on 2016-01-01:
@Akif, This is the coding of mine which I follow your example in the void laser part:
void laser_msg_Callback(const sensor_msgs::LaserScan::ConstPtr& scan) for (int x=0;x< scan->ranges.size();x++) { ROS_INFO("Scan %d: %f", x, scan->ranges[x]);); } Thank you for your kindly help.
Comment by Akif on 2016-01-01:
@Terry Su, you are missing brakets for the callback function and you have extra paranthesis after ROS_INFO. Maybe you should check some C/C++ tutorials. This code should work.
Comment by Terry Su on 2016-01-01:
@Akif, Thank you for your kindly help really!

