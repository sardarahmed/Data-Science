Q:

How to use `ros2_control`s `joint_limits`?

I want to control a UR5 using Universal Robots Driver and MoveIt2 using Pilz Industrial Motion Planner (ROS2 Humble). If I plan a path using RViz with e.g. PTP I receive errors which disable successful planning.
Errors at start-up:
[move_group-9] [ERROR] [1706777537.271727051] [move_group]: Parameter 'robot_description_planning.cartesian_limits.max_trans_vel', is not set in the config file.
[move_group-9] [ERROR] [1706777537.271727051] [move_group]: Parameter 'robot_description_planning.cartesian_limits.max_trans_acc', is not set in the config file.
[move_group-9] [ERROR] [1706777537.271727051] [move_group]: Parameter 'robot_description_planning.cartesian_limits.max_trans_dec', is not set in the config file.
[move_group-9] [ERROR] [1706777537.271727051] [move_group]: Parameter 'robot_description_planning.cartesian_limits.max_rot_vel', is not set in the config file.

Error at planning request:
[move_group-9] [ERROR] [1706777811.530897247] [moveit.ros_planning_pipeline]: Exception caught: 'acceleration limit not set for group up_group'

I've done some digging in the code. pilz_industrial_motion_planner uses for some reason a modified and probably deprecated local copy of ros2_controls joint_limits. Before using the current version the print-out for the most strict joint limit was incomplete.
RCLCPP_ERROR(LOGGER, most_strict_limit_.to_string().c_str()):
has position limits: true [-2.99159, 2.99159]
has velocity limits: true [3.14159]

When using the current version of joint_limits:
has position limits: true [-2.99159, 2.99159]
has velocity limits: true [3.14159]
has acceleration limits: false [nan]
has jerk limits: false [nan]
has effort limits: false [nan]
angle wraparound: false

I've got the joint_limits.yaml from UR Description but I added acceleration limits of an arbitrary value and also set has_acceleration:limits: true. The robot URDF is build using these limits. I've got the impression, that ros2_control also uses the limits from this file, but this doesn't seem to be the case.
Additionally when I look at the parameters using ros2 param get <node> <param>, parameters of move_group like robot_description_planning.joint_limits.shoulder_pan_joint.max_velocity are not set, even if they got a value if I print them out.
How do I get ros2_control/joint_limits to read and interpret the values from joint_limits.yaml?
How does the node parameters play into that?

A:

Thanks Anubhav Singh for the help, since the node parameters where now set properly, I was able to identify the problem. JointLimitsAggregator of the Pilz motion planner doesn't collect other limits then positions and velocities on default.
I've added the function updateAccelerationLimitFromJointModel which does basically the same as the other update functions in order to get the accelerations. Basically the Pilz industrial motion planner cannot be run in MoveIt as is and I am stunned, that nobody has noticed it.
void pilz_industrial_motion_planner::JointLimitsAggregator::updateAccelerationLimitFromJointModel(const moveit::core::JointModel* joint_model, JointLimit& joint_limit)
{
 switch (joint_model->getVariableBounds().size())
 {
  case 0:
   RCLCPP_WARN_STREAM(LOGGER, "no bounds set for joint " << joint_model->getName());
   break;
  case 1:
   joint_limit.has_acceleration_limits = joint_model->getVariableBounds()[0].max_acceleration_;
   break;
  default:
   RCLCPP_WARN_STREAM(LOGGER, "Multi-DOF-Joint '" << joint_model->getName() << "' not supported.");
   joint_limit.has_acceleration_limits = true;
   joint_limit.max_acceleration = 0;
   break;
  }
 }

The function gets then used in pilz_industrial_motion_planner::JointLimitsAggregator::getAggregatedLimits(const rclcppp::Node::SharedPtr& node, const std::string& param_namespace, const std::vector<const moveit::core::JointModel*>& joint_models) in the same vain as the other update functions.
Unfortunately, no boundary check can be performed yet, since that would require additional implementation of a helper function in moveit_core. But that would go beyond the scope of this question.

