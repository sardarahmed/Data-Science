Q:

Customize CameraLens function for Wide angle (fish eye) cameras

In class CameraLens(), [r = c1ffun(theta/c2+c3)], I like to define my own mapping function using theta as input for the function (for example - Polynomial Fish Eye Transform). I like to know what is the better way of doing it.
Some important issues are:

I cannot access the value of 'theta' and so I could not define anything on my own.
I cannot set the value of 'r' for the above mentioned mapping function.
I don't have access to the source code of CameraLens() class? If so, then I could implement something on my own.

How the see the implementation of CameraLens() class?
PS: I already checked this tutorial http://gazebosim.org/tutorials?tut=wide_angle_camera&branch=wideanglecamera .
I dont want to use any standard models like gnomonical, stereographic, equidistant, equisolid_angle, orthographic.

Originally posted by sekaran on Gazebo Answers with karma: 3 on 2016-10-20
Post score: 0

A:

Theta is the <horizontal_fov>, and r is the result of the function which means you don't set that value.
According to the tutorial, you can set everything in SDF: http://gazebosim.org/tutorials?tut=wide_angle_camera&branch=wideanglecamera#PluginExample
All of our source code is open: https://bitbucket.org/osrf/gazebo

Originally posted by nkoenig with karma: 7676 on 2016-10-20
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by sekaran on 2016-10-21:
I already in the tutorial how to use the custom type lens with the same mapping function r = c1ffun(theta/c2+c3). But, I need to change the function itself.
In the source code, I see the values for c1, c2, c3 etc are set to the shader. But I cannot really find, where r = c1ffun(theta/c2+c3) is implemented in the source code?
Comment by sekaran on 2016-10-21:
Thanks for the reply. I just found its implemented in the shader 'wide_lens_map_vs.glsl'. But <horizontal_fov> is not 'theta' exactly. The value of 'theta' is calculated in the same shader.
Comment by owais2k12 on 2018-07-24:
Hi! I am wondering if someone actually changed the mapping function according to the actual fish eye model used in opencv? if yes, can anyone point me towards the source. If not, can somebody explain me whether this function can be related with that model and produce the same results, in that case I am looking forward to some mathematical explanation particularly used in this mapping function instead of the opencv one.

