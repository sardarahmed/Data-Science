Q:

trying to use get joint state with my urdf

hi
i am trying to use the jointstates topic of pr2 for my own urdf file, i am not sure how should i start. how do i get my robot to publish on that topic? do i need to write a code for a publisher of my own? (very new in ros & c++)
thanks everyone
so now i found this link- http://ros.org/wiki/joint_state_publisher
but istill don't understand how to work it. somehow these things aren't working for me :(

Originally posted by Nachum on ROS Answers with karma: 208 on 2012-09-05
Post score: 0

Original comments
Comment by Lorenz on 2012-09-05:
Simulation or a real robot?
Comment by Nachum on 2012-09-06:
Simulation

A:

To get joint states, a node that communicates with your robot's hardware is run on the robot. It reads the position of the encoders in all joints and constructs a sensor_msgs/JointState message that is then published on the /joint_states topic.
If you are running on a real robot, you need to implement such a node. On the PR2 that's the pr2_etherCAT node and you need to implement something similar if you are using a custom robot and want to have joint states.
In simulation, things can be a little easier because you can use the pr2 controller manager that's used on the simulated pr2 for other robots, too
The gazebo_ros_controller_manager plugin is responsible for providing the infrastructure for running controllers and for publishing the joint state. You should be able to use it in a custom urdf. I think you will have to add transmission specifications though which seem to be undocumented. To use the controller plugin, add the following to your urdf file:
  <gazebo>
    <controller:gazebo_ros_controller_manager name="gazebo_ros_controller_manager" plugin="libgazebo_ros_controller_manager.so">
      <alwaysOn>true</alwaysOn>
      <updateRate>1000.0</updateRate>
      <interface:audio name="gazebo_ros_controller_manager_dummy_iface" />
    </controller:gazebo_ros_controller_manager>
  </gazebo>

If you do not want to use that plugin, you need to write your own gazebo plugin that reads the positions of the joints specified in your URDF file, advertises the /joint_states topic and publishes the joint positions as a message of type sensor_msgs/JointState.
The joint_state_publisher node you mentioned in your question essentially publishes a constant value for all non-fixed joint positions, i.e. it does not respect the actual position of joints in simulation. It also provides a gui that lets you to change the joint state values. This node is most useful when you are creating a urdf file to check if all joints are aligned correctly.

Originally posted by Lorenz with karma: 22731 on 2012-09-06
This answer was ACCEPTED on the original site
Post score: 6

Original comments
Comment by Nachum on 2012-09-10:
o.k I understood how to run it now. the position and velocitiy look correct but the effort is giving zero when that can't be. did i miss some thing? Thanks

