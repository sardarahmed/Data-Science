Q:

Multiple Controller controller_manager instances with namespaces

UBUNTU 22.04
ROS2 HUMBLE
I have two ur3e universal robots.
I am using prefixes and namespaces for this prefixes to separate tf links name of both robots and namespaces for launching controller nodes for both robots
I have made changes to ur_controllers.yaml according to joint names
I simply want to launch 2 instances of controller_manager node in ros2 humble when I do it with namespaces controllers do not work
Here is my launch file ur_control.launch.py  that I have added namespaces in
from launch import LaunchDescription
from launch.actions import DeclareLaunchArgument
from launch.actions import OpaqueFunction
from launch.conditions import IfCondition, UnlessCondition
from launch.substitutions import Command, FindExecutable, LaunchConfiguration, PathJoinSubstitution
from launch_ros.actions import Node
from launch_ros.substitutions import FindPackageShare

def launch_setup(context, *args, **kwargs):

# Initialize Arguments
ur_type = LaunchConfiguration("ur_type")
robot_ip = LaunchConfiguration("robot_ip")
safety_limits = LaunchConfiguration("safety_limits")
safety_pos_margin = LaunchConfiguration("safety_pos_margin")
safety_k_position = LaunchConfiguration("safety_k_position")
# General arguments
runtime_config_package = LaunchConfiguration("runtime_config_package")
controllers_file = LaunchConfiguration("controllers_file")
description_package = LaunchConfiguration("description_package")
description_file = LaunchConfiguration("description_file")
prefix = LaunchConfiguration("prefix")
use_fake_hardware = LaunchConfiguration("use_fake_hardware")
fake_sensor_commands = LaunchConfiguration("fake_sensor_commands")
initial_joint_controller = LaunchConfiguration("initial_joint_controller")
activate_joint_controller = LaunchConfiguration("activate_joint_controller")
launch_rviz = LaunchConfiguration("launch_rviz")
headless_mode = LaunchConfiguration("headless_mode")
launch_dashboard_client = LaunchConfiguration("launch_dashboard_client")
use_tool_communication = LaunchConfiguration("use_tool_communication")
tool_parity = LaunchConfiguration("tool_parity")
tool_baud_rate = LaunchConfiguration("tool_baud_rate")
tool_stop_bits = LaunchConfiguration("tool_stop_bits")
tool_rx_idle_chars = LaunchConfiguration("tool_rx_idle_chars")
tool_tx_idle_chars = LaunchConfiguration("tool_tx_idle_chars")
tool_device_name = LaunchConfiguration("tool_device_name")
tool_tcp_port = LaunchConfiguration("tool_tcp_port")
tool_voltage = LaunchConfiguration("tool_voltage")

joint_limit_params = PathJoinSubstitution(
    [FindPackageShare(description_package), "config", ur_type, "joint_limits.yaml"]
)
kinematics_params = PathJoinSubstitution(
    [FindPackageShare(description_package), "config", ur_type, "default_kinematics.yaml"]
)
physical_params = PathJoinSubstitution(
    [FindPackageShare(description_package), "config", ur_type, "physical_parameters.yaml"]
)
visual_params = PathJoinSubstitution(
    [FindPackageShare(description_package), "config", ur_type, "visual_parameters.yaml"]
)
script_filename = PathJoinSubstitution(
    [FindPackageShare("ur_robot_driver"), "resources", "ros_control.urscript"]
)
input_recipe_filename = PathJoinSubstitution(
    [FindPackageShare("ur_robot_driver"), "resources", "rtde_input_recipe.txt"]
)
output_recipe_filename = PathJoinSubstitution(
    [FindPackageShare("ur_robot_driver"), "resources", "rtde_output_recipe.txt"]
)

robot_description_content = Command(
    [
        PathJoinSubstitution([FindExecutable(name="xacro")]),
        " ",
        PathJoinSubstitution([FindPackageShare(description_package), "urdf", description_file]),
        " ",
        "robot_ip:=",
        robot_ip,
        " ",
        "joint_limit_params:=",
        joint_limit_params,
        " ",
        "kinematics_params:=",
        kinematics_params,
        " ",
        "physical_params:=",
        physical_params,
        " ",
        "visual_params:=",
        visual_params,
        " ",
        "safety_limits:=",
        safety_limits,
        " ",
        "safety_pos_margin:=",
        safety_pos_margin,
        " ",
        "safety_k_position:=",
        safety_k_position,
        " ",
        "name:=",
        ur_type,
        " ",
        "script_filename:=",
        script_filename,
        " ",
        "input_recipe_filename:=",
        input_recipe_filename,
        " ",
        "output_recipe_filename:=",
        output_recipe_filename,
        " ",
        "prefix:=",
        prefix,
        " ",
        "use_fake_hardware:=",
        use_fake_hardware,
        " ",
        "fake_sensor_commands:=",
        fake_sensor_commands,
        " ",
        "headless_mode:=",
        headless_mode,
        " ",
        "use_tool_communication:=",
        use_tool_communication,
        " ",
        "tool_parity:=",
        tool_parity,
        " ",
        "tool_baud_rate:=",
        tool_baud_rate,
        " ",
        "tool_stop_bits:=",
        tool_stop_bits,
        " ",
        "tool_rx_idle_chars:=",
        tool_rx_idle_chars,
        " ",
        "tool_tx_idle_chars:=",
        tool_tx_idle_chars,
        " ",
        "tool_device_name:=",
        tool_device_name,
        " ",
        "tool_tcp_port:=",
        tool_tcp_port,
        " ",
        "tool_voltage:=",
        tool_voltage,
        " ",
    ]
)
robot_description = {"robot_description": robot_description_content}

initial_joint_controllers = PathJoinSubstitution(
    [FindPackageShare(runtime_config_package), "config", controllers_file]
)

rviz_config_file = PathJoinSubstitution(
    [FindPackageShare(description_package), "rviz", "view_robot.rviz"]
)

# define update rate
update_rate_config_file = PathJoinSubstitution(
    [
        FindPackageShare(runtime_config_package),
        "config",
        ur_type.perform(context) + "_update_rate.yaml",
    ]
)

control_node = Node(
    namespace="/ur1/",
    package="controller_manager",
    executable="ros2_control_node",
    parameters=[robot_description, update_rate_config_file, initial_joint_controllers],
    output="screen",
    condition=IfCondition(use_fake_hardware),
)

ur_control_node = Node(
    namespace="/ur1/",
    package="ur_robot_driver",
    executable="ur_ros2_control_node",
    parameters=[robot_description, update_rate_config_file, initial_joint_controllers],
    output="screen",
    condition=UnlessCondition(use_fake_hardware),
)

dashboard_client_node = Node(
    namespace="/ur1/",
    package="ur_robot_driver",
    condition=IfCondition(launch_dashboard_client) and UnlessCondition(use_fake_hardware),
    executable="dashboard_client",
    name="dashboard_client",
    output="screen",
    emulate_tty=True,
    parameters=[{"robot_ip": robot_ip}],
)

tool_communication_node = Node(
    namespace="/ur1/",
    package="ur_robot_driver",
    condition=IfCondition(use_tool_communication),
    executable="tool_communication.py",
    name="ur_tool_comm",
    output="screen",
    parameters=[
        {
            "robot_ip": robot_ip,
            "tcp_port": tool_tcp_port,
            "device_name": tool_device_name,
        }
    ],
)

controller_stopper_node = Node(
    namespace="/ur1/",
    package="ur_robot_driver",
    executable="controller_stopper_node",
    name="controller_stopper",
    output="screen",
    emulate_tty=True,
    condition=UnlessCondition(use_fake_hardware),
    parameters=[
        {"headless_mode": headless_mode},
        {"joint_controller_active": activate_joint_controller},
        {
            "consistent_controllers": [
                "io_and_status_controller",
                "force_torque_sensor_broadcaster",
                "joint_state_broadcaster",
                "speed_scaling_state_broadcaster",
            ]
        },
    ],
)

robot_state_publisher_node = Node(
    namespace="/ur1/",
    package="robot_state_publisher",
    executable="robot_state_publisher",
    output="both",
    parameters=[robot_description],
)

rviz_node = Node(
    package="rviz2",
    condition=IfCondition(launch_rviz),
    executable="rviz2",
    name="rviz2",
    output="log",
    arguments=["-d", rviz_config_file],
)

joint_state_broadcaster_spawner = Node(
    namespace="/ur1/",
    package="controller_manager",
    executable="spawner",
    arguments=["joint_state_broadcaster", "--controller-manager", "controller_manager"],
)

io_and_status_controller_spawner = Node(
    namespace="/ur1/",
    package="controller_manager",
    executable="spawner",
    arguments=["io_and_status_controller", "-c", "ur1/controller_manager"],
)

speed_scaling_state_broadcaster_spawner = Node(
    namespace="/ur1/",
    package="controller_manager",
    executable="spawner",
    arguments=[
        "speed_scaling_state_broadcaster",
        "--controller-manager",
        "ur1/controller_manager",
    ],
)

force_torque_sensor_broadcaster_spawner = Node(
    namespace="/ur1/",
    package="controller_manager",
    executable="spawner",
    arguments=[
        "force_torque_sensor_broadcaster",
        "--controller-manager",
        "ur1/controller_manager",
    ],
)

forward_position_controller_spawner_stopped = Node(
    namespace="/ur1/",
    package="controller_manager",
    executable="spawner",
    arguments=["forward_position_controller", "-c", "ur1/controller_manager", "--inactive"],
)

# There may be other controllers of the joints, but this is the initially-started one
initial_joint_controller_spawner_started = Node(
    namespace="/ur1/",
    package="controller_manager",
    executable="spawner",
    arguments=[initial_joint_controller, "-c", "ur1/controller_manager"],
    condition=IfCondition(activate_joint_controller),
)
initial_joint_controller_spawner_stopped = Node(
    namespace="/ur1/",
    package="controller_manager",
    executable="spawner",
    arguments=[initial_joint_controller, "-c", "ur1/controller_manager", "--inactive"],
    condition=UnlessCondition(activate_joint_controller),
)

nodes_to_start = [
    control_node,
    ur_control_node,
    dashboard_client_node,
    tool_communication_node,
    controller_stopper_node,
    robot_state_publisher_node,
    rviz_node,
    joint_state_broadcaster_spawner,
    io_and_status_controller_spawner,
    speed_scaling_state_broadcaster_spawner,
    force_torque_sensor_broadcaster_spawner,
    forward_position_controller_spawner_stopped,
    initial_joint_controller_spawner_stopped,
    initial_joint_controller_spawner_started,
]

return nodes_to_start

The output from the terminal
    c[INFO] [launch]: All log files can be found below /home/goalbytes/.ros/log/2022-11-14-09-57-09-231667-goalbytes-39691
[INFO] [launch]: Default logging verbosity is set to INFO
[INFO] [ros2_control_node-1]: process started with pid [39695]
[INFO] [robot_state_publisher-2]: process started with pid [39697]
[INFO] [rviz2-3]: process started with pid [39699]
[INFO] [spawner-4]: process started with pid [39701]
[INFO] [spawner-5]: process started with pid [39703]
[INFO] [spawner-6]: process started with pid [39705]
[INFO] [spawner-7]: process started with pid [39707]
[INFO] [spawner-8]: process started with pid [39709]
[INFO] [spawner-9]: process started with pid [39711]
[ros2_control_node-1] free(): invalid pointer
[robot_state_publisher-2] Link ur1/base_link had 2 children
[robot_state_publisher-2] Link ur1/base had 0 children
[robot_state_publisher-2] Link ur1/base_link_inertia had 1 children
[robot_state_publisher-2] Link ur1/shoulder_link had 1 children
[robot_state_publisher-2] Link ur1/upper_arm_link had 1 children
[robot_state_publisher-2] Link ur1/forearm_link had 1 children
[robot_state_publisher-2] Link ur1/wrist_1_link had 1 children
[robot_state_publisher-2] Link ur1/wrist_2_link had 1 children
[robot_state_publisher-2] Link ur1/wrist_3_link had 2 children
[robot_state_publisher-2] Link ur1/flange had 1 children
[robot_state_publisher-2] Link ur1/tool0 had 0 children
[robot_state_publisher-2] Link ur1/ft_frame had 0 children
[robot_state_publisher-2] [INFO] [1668401830.001683495] [ur1.robot_state_publisher]: got segment ur1/base
[robot_state_publisher-2] [INFO] [1668401830.002288509] [ur1.robot_state_publisher]: got segment ur1/base_link
[robot_state_publisher-2] [INFO] [1668401830.002681026] [ur1.robot_state_publisher]: got segment ur1/base_link_inertia
[robot_state_publisher-2] [INFO] [1668401830.003042989] [ur1.robot_state_publisher]: got segment ur1/flange
[robot_state_publisher-2] [INFO] [1668401830.003395492] [ur1.robot_state_publisher]: got segment ur1/forearm_link
[robot_state_publisher-2] [INFO] [1668401830.003773250] [ur1.robot_state_publisher]: got segment ur1/ft_frame
[robot_state_publisher-2] [INFO] [1668401830.004181386] [ur1.robot_state_publisher]: got segment ur1/shoulder_link
[robot_state_publisher-2] [INFO] [1668401830.004550257] [ur1.robot_state_publisher]: got segment ur1/tool0
[robot_state_publisher-2] [INFO] [1668401830.004900711] [ur1.robot_state_publisher]: got segment ur1/upper_arm_link
[robot_state_publisher-2] [INFO] [1668401830.005253082] [ur1.robot_state_publisher]: got segment ur1/wrist_1_link
[robot_state_publisher-2] [INFO] [1668401830.005594472] [ur1.robot_state_publisher]: got segment ur1/wrist_2_link
[robot_state_publisher-2] [INFO] [1668401830.005925523] [ur1.robot_state_publisher]: got segment ur1/wrist_3_link
[robot_state_publisher-2] [INFO] [1668401830.006249560] [ur1.robot_state_publisher]: got segment world
[spawner-8] [INFO] [1668401830.268979412] [ur1.spawner_forward_position_controller]: Waiting for '/ur1/controller_manager' node to exist
[spawner-9] [INFO] [1668401830.347034376] [ur1.spawner_joint_trajectory_controller]: Waiting for '/ur1/controller_manager' node to exist
[spawner-7] [INFO] [1668401830.347620215] [ur1.spawner_force_torque_sensor_broadcaster]: Waiting for '/ur1/controller_manager' node to exist
[spawner-6] [INFO] [1668401830.353431446] [ur1.spawner_speed_scaling_state_broadcaster]: Waiting for '/ur1/controller_manager' node to exist
[rviz2-3] [INFO] [1668401830.363403777] [rviz2]: Stereo is NOT SUPPORTED
[rviz2-3] [INFO] [1668401830.363782400] [rviz2]: OpenGl version: 4.6 (GLSL 4.6)
[spawner-5] [INFO] [1668401830.368414209] [ur1.spawner_io_and_status_controller]: Waiting for '/ur1/controller_manager' node to exist
[spawner-4] [INFO] [1668401830.381896433] [ur1.spawner_joint_state_broadcaster]: Waiting for '/controller_manager' node to exist
[rviz2-3] [INFO] [1668401830.384755565] [rviz2]: Stereo is NOT SUPPORTED
[ERROR] [ros2_control_node-1]: process has died [pid 39695, exit code -6, cmd '/opt/ros/humble/lib/controller_manager/ros2_control_node --ros-args -r __ns:=/ur1 --params-file /tmp/launch_params_7ltk2lr6 --params-file /home/goalbytes/workspace/ros_ur_driver/install/ur_robot_driver/share/ur_robot_driver/config/ur5e_update_rate.yaml --params-file /home/goalbytes/workspace/ros_ur_driver/install/ur_robot_driver/share/ur_robot_driver/config/ur_controllers_ur1.yaml'].
[spawner-8] [INFO] [1668401832.281162641] [ur1.spawner_forward_position_controller]: Waiting for '/ur1/controller_manager' node to exist
[spawner-9] [INFO] [1668401832.359148652] [ur1.spawner_joint_trajectory_controller]: Waiting for '/ur1/controller_manager' node to exist
[spawner-7] [INFO] [1668401832.359180740] [ur1.spawner_force_torque_sensor_broadcaster]: Waiting for '/ur1/controller_manager' node to exist
[spawner-6] [INFO] [1668401832.365116711] [ur1.spawner_speed_scaling_state_broadcaster]: Waiting for '/ur1/controller_manager' node to exist
[spawner-5] [INFO] [1668401832.380461178] [ur1.spawner_io_and_status_controller]: Waiting for '/ur1/controller_manager' node to exist
[spawner-4] [INFO] [1668401832.395388596] [ur1.spawner_joint_state_broadcaster]: Waiting for '/controller_manager' node to exist
[spawner-8] [INFO] [1668401834.291457977] [ur1.spawner_forward_position_controller]: Waiting for '/ur1/controller_manager' node to exist
[spawner-7] [INFO] [1668401834.368092322] [ur1.spawner_force_torque_sensor_broadcaster]: Waiting for '/ur1/controller_manager' node to exist
[spawner-9] [INFO] [1668401834.368258719] [ur1.spawner_joint_trajectory_controller]: Waiting for '/ur1/controller_manager' node to exist
[spawner-6] [INFO] [1668401834.373476386] [ur1.spawner_speed_scaling_state_broadcaster]: Waiting for '/ur1/controller_manager' node to exist
[spawner-5] [INFO] [1668401834.389638229] [ur1.spawner_io_and_status_controller]: Waiting for '/ur1/controller_manager' node to exist
[spawner-4] [INFO] [1668401834.403900314] [ur1.spawner_joint_state_broadcaster]: Waiting for '/controller_manager' node to exist
[spawner-8] [INFO] [1668401836.302992523] [ur1.spawner_forward_position_controller]: Waiting for '/ur1/controller_manager' node to exist
[spawner-7] [INFO] [1668401836.377558136] [ur1.spawner_force_torque_sensor_broadcaster]: Waiting for '/ur1/controller_manager' node to exist
[spawner-9] [INFO] [1668401836.377899347] [ur1.spawner_joint_trajectory_controller]: Waiting for '/ur1/controller_manager' node to exist
[spawner-6] [INFO] [1668401836.383552682] [ur1.spawner_speed_scaling_state_broadcaster]: Waiting for '/ur1/controller_manager' node to exist
[spawner-5] [INFO] [1668401836.400557142] [ur1.spawner_io_and_status_controller]: Waiting for '/ur1/controller_manager' node to exist
[spawner-4] [INFO] [1668401836.413084852] [ur1.spawner_joint_state_broadcaster]: Waiting for '/controller_manager' node to exist
[spawner-8] [INFO] [1668401838.314095380] [ur1.spawner_forward_position_controller]: Waiting for '/ur1/controller_manager' node to exist
[spawner-9] [INFO] [1668401838.387859975] [ur1.spawner_joint_trajectory_controller]: Waiting for '/ur1/controller_manager' node to exist
[spawner-7] [INFO] [1668401838.388085991] [ur1.spawner_force_torque_sensor_broadcaster]: Waiting for '/ur1/controller_manager' node to exist
[spawner-6] [INFO] [1668401838.392326844] [ur1.spawner_speed_scaling_state_broadcaster]: Waiting for '/ur1/controller_manager' node to exist
[spawner-5] [INFO] [1668401838.410726052] [ur1.spawner_io_and_status_controller]: Waiting for '/ur1/controller_manager' node to exist
[spawner-4] [INFO] [1668401838.422346946] [ur1.spawner_joint_state_broadcaster]: Waiting for '/controller_manager' node to exist
[spawner-8] [ERROR] [1668401840.323617974] [ur1.spawner_forward_position_controller]: Controller manager not available
[spawner-9] [ERROR] [1668401840.396285023] [ur1.spawner_joint_trajectory_controller]: Controller manager not available
[spawner-7] [ERROR] [1668401840.400496365] [ur1.spawner_force_torque_sensor_broadcaster]: Controller manager not available
[spawner-6] [ERROR] [1668401840.401350561] [ur1.spawner_speed_scaling_state_broadcaster]: Controller manager not available
[spawner-5] [ERROR] [1668401840.420010735] [ur1.spawner_io_and_status_controller]: Controller manager not available
[spawner-4] [ERROR] [1668401840.431361903] [ur1.spawner_joint_state_broadcaster]: Controller manager not available
[ERROR] [spawner-8]: process has died [pid 39709, exit code 1, cmd '/opt/ros/humble/lib/controller_manager/spawner forward_position_controller -c ur1/controller_manager --inactive --ros-args -r __ns:=/ur1'].
[ERROR] [spawner-9]: process has died [pid 39711, exit code 1, cmd '/opt/ros/humble/lib/controller_manager/spawner joint_trajectory_controller -c ur1/controller_manager --ros-args -r __ns:=/ur1'].
[ERROR] [spawner-6]: process has died [pid 39705, exit code 1, cmd '/opt/ros/humble/lib/controller_manager/spawner speed_scaling_state_broadcaster --controller-manager ur1/controller_manager --ros-args -r __ns:=/ur1'].
[ERROR] [spawner-4]: process has died [pid 39701, exit code 1, cmd '/opt/ros/humble/lib/controller_manager/spawner joint_state_broadcaster --controller-manager controller_manager --ros-args -r __ns:=/ur1'].
[ERROR] [spawner-5]: process has died [pid 39703, exit code 1, cmd '/opt/ros/humble/lib/controller_manager/spawner io_and_status_controller -c ur1/controller_manager --ros-args -r __ns:=/ur1'].
[ERROR] [spawner-7]: process has died [pid 39707, exit code 1, cmd '/opt/ros/humble/lib/controller_manager/spawner force_torque_sensor_broadcaster --controller-manager ur1/controller_manager --ros-args -r __ns:=/ur1'].

any help how i should launch controllers in namespaces or is there any other way to do it please guide

Originally posted by Osal22 on ROS Answers with karma: 15 on 2022-11-14
Post score: 1

A:

I have the same issue with my 2 turtlebot4 on Ubuntu 20 Galactic . I implemented a fix here: https://github.com/ros-controls/ros2_control/pull/852. Might be helpful

Originally posted by hugob with karma: 26 on 2022-11-14
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by Osal22 on 2022-11-16:
Thank you will surely look into detail

