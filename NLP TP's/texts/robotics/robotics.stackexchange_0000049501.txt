Q:

ros::service::waitForService() blocks infinite

When i use ros::service::call() to call e.g. gazebo/apply_joint_effort inside a rostest (c++,gtest) the call sometimes fail and sometimes don't fail ?
So i thought, using ros::service::waitForService("gazebo/apply_joint_effort", -1)) to wait for "something" and then use the call() function, but the waitForService() is blocking endless. But when i call the service with the commandline tool "rosservice", the service is available and returns success ?
is waitForService() for another usage?
thanks
flo
Change 1:
Inserting
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
rosbuild_add_gtest(test/mytest test/mytest.cpp)

into CMakeList.txt file and running then the binary bin/test/mytest the service call returns success, but the service (force) does not get applied to the model in gazebo?
gazebo dies with:
terminate called after throwing an instance of 'std::runtime_error'
  what():  Time is out of dual 32-bit range

Aborted (core dumped)

I got ubuntu-12.04-amd64 installed. Someone knows what this error causes?
Also if i use:
rosbuild_add_executable()
rosbuild_add_gtest_build_flags()
rosbuild_add_rostest()

in my CMakeList.txt file instead the two other options mentioned before, and run rostest mypackage mytest the test is run 3 times in a row after building? Why is that so?  Also the rostest lib cannot call the service, but the test-binary can call the service (but gazebo dies) ?
Is there a way to prevent the test from running after building it with make test?

Originally posted by inflo on ROS Answers with karma: 406 on 2013-03-18
Post score: 0

Original comments
Comment by inflo on 2013-03-19:
the call ros::service::waitForService("/gazebo/apply_joint_effort", -1) blocks also infinite ?
my test is just:
TEST(MyTest, firstTest)
{
ros::Time::init();   //used for waitForService
if(ros::service::waitForService("/gazebo/apply_joint_effort", -1))
EXPECT_EQ(1,2) << "wait for service ok";
}
Are there some other functions i can call to get more info? like what namespace i am in, or something?
thanks
flo
Comment by dornhege on 2013-03-19:
Please do not create answers for discussion or comments. Instead, either edit and append to your original post or use the comment functionality.
Comment by dornhege on 2013-03-20:
I think running it is the intended behaviour of make test.

A:

You are passing -1 for the timeout, which means: wait infinite.
Just pass a real timeout that you want to wait for.

Originally posted by dornhege with karma: 31395 on 2013-03-18
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by inflo on 2013-03-18:
yes i pass -1 because i want to block so long till i get the service. I know that the service is available because i can run rosservice from console "before" and "after" i run the rostest with the awaitForService() call.  The question is more: why is it blocking, but the service is available ?
Comment by dornhege on 2013-03-19:
Maybe you did something wrong in the software. You can just call the service to see, if it works in principle.
Comment by inflo on 2013-03-19:
like i wrote in my question, it sometimes works and sometimes fails
Comment by dornhege on 2013-03-19:
How are you registering the service client/calling the service? Also ros::service::call?
Comment by inflo on 2013-03-19:
what does the <2> and the green check-mark right beside your answer mean ?
Comment by inflo on 2013-03-19:
yes i use  (ros::service::call("/gazebo/apply_joint_effort", req, res)
Comment by dornhege on 2013-03-19:
Your call does have a / before gazebo unlike the waitForService. Did you try @Hansg91's suggestion?
Comment by inflo on 2013-03-19:
yes i tried it, like i wrote in the answer to Hansg91  :)
Comment by dornhege on 2013-03-19:
If you are using the same string for waiting as for calling then this should work and be consistent.
Comment by inflo on 2013-03-19:
if i use the same part of the main() routine of the file fuerte/stacks/ros_control/controller_manager_tests/test/cm_test.cpp it blocks till it prints on console: in run_test
raise RLTestTimeoutException("test max time allotted")
Comment by bit-pirate on 2013-03-20:
@inflo the number to the left of an answer is its vote - you can up- or downvote an answer, if you like/dislike it, using the arrow above/below. The check sign is for accepting an answer and thereby marking your question as answered.

