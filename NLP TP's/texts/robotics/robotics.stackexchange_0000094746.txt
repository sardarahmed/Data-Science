Q:

How to use robot_localization correctly?

Hi All,
I would like to ask you opinions and best practices of using the robot_localization package for the following use case:

The vehicle has two wheels (left and right), more accurately two tracks (a robotic vehicle for agriculture).
Eventually I will have to achieve automatic GPS waypoint finding.
The wheels have fairly accurate encoders, so I can measure travelled distance and speed of both left and right tracks, calculate and publish Odometry messages from that with at least 10Hz.
The vehicle is equipped with a navigational device which provides me GPS latitude, longitude and orientation (roll, pith, yaw) and speed. I can use these data to calculate and publish another Odometry message. Latitude and longitude is updated with 1Hz, orientation is updated with 10Hz.

I'm planning to fuse these two odometry sources with one ekf_localization_node and use its output for the waypoint finding. I'm wondering if this is a viable approach to do this or there would be a better way?
Many thanks,
Tam√°s
EDIT 23/08/2020: I have updated my setup based on the answers from @tom-moore (see below and other posts). It's available on GitHub here, just on case it will be useful for someone.

Originally posted by tbondar on ROS Answers with karma: 29 on 2020-02-14
Post score: 0

A:

Seems viable to me. Are you doing the conversion of the GPS data into your world frame coordinates, are are you using navsat_transform_node? Make sure the IMU adheres to the specifications in the r_l wiki. The package isn't great at handling IMU and GPS only fusion, so the fact that you have encoders will help you immensely.

Originally posted by Tom Moore with karma: 13689 on 2020-03-25
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by tbondar on 2020-07-07:
Sorry about the delay, there's been a pause in the project, like in everything. I don't plan to use the navsat_transform_node because I don't have direct access to the GPS and IMU inside my navigational device. It reports lat, long and orientation (yaw) values directly and I don't have access to the details. I'll have to put together the Odometry message myself from these. Does this change your opinion regarding feasibility?
I guess the covariances will be the most challenging. I will probably have to ask further questions when I'll get there.
Comment by Tom Moore on 2020-07-14:
If it gives you lat/long/orientation, you should still be able to use navsat_transform_node, but you may need a translation node so it outputs the right message types for consumption by navsat_transform_node. But as long as your GPS conversion outputs usable world-frame coordinates, you should be fine, absolutely. Just fuse pose data from your GPS (or GPS conversion node) and velocity data from the wheel encoders.
Comment by tbondar on 2020-08-23:
@tom-moore Thanks for your reply, I've updated my setup according to your suggestions here and other posts. I've uploaded it with a simple vehicle emulator to GitHub (link above in my original post). My current node graph is here. Would you mind having a quick look just in case you spot something incorrect?
Comment by Tom Moore on 2020-08-31:
Is anything misbehaving, or is it working as expected? I don't have the cycles to dig into it right now, but if there are specific issues, feel free to ask new questions.

