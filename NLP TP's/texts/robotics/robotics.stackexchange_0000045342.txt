Q:

why GetConstraintAwarePositionIK return a failure so quickly?

when using GetConstraintAwarePositionIK, i set the timeout to 5 seconds. but sometimes it returnes an error code "NO_IK_SOLUTION" very very quickly(less than 1 seconds). why does this happen? according to my understanding, if it cannot find a solution, it should keep trying until timeout.
thanks.

Originally posted by yangyangcv on ROS Answers with karma: 741 on 2012-10-29
Post score: 0

A:

If the maximum number of iterations/retries is reached and no solution is found, or if an IK solution is found but does not satisfy the constraints, GetConstraintAwarePositionIK will not succeed. This can very easily take less than 5s, especially if your IK routine is fast, and the max_search_iterations parameter is set to a low number. If you would like to keep on trying until the timeout is reached, try increasing max_search_iterations to a large-enough value. Btw, what value are you currently using? (if unspecified it defaults to three).

Originally posted by Adolfo Rodriguez T with karma: 3907 on 2012-10-30
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by yangyangcv on 2012-10-30:
well, i'm using the default value... where can i set this value? seems it's not in the param list
Comment by Adolfo Rodriguez T on 2012-10-31:
If you use the KDL arm kinematics plugin, then in the same place you configure the root and tip links of the IK solver, Depending on your setup, this might be in a launch file or a yaml file.
Comment by Adolfo Rodriguez T on 2012-10-31:
Here is the relevant plugin code that fetches the parameter.
Comment by yangyangcv on 2012-10-31:
I'm using KDL and i just set max_search_iterations to 1,000,000, still IK fails very quickly
Comment by Adolfo Rodriguez T on 2012-10-31:
Can you confirm that 1e6 iterations are taking place?, or put otherwise, that your computation time is now six orders of magnitude higher?.
Comment by yangyangcv on 2012-10-31:
now i know the reason. the ik program will check the state validity of the goal state first. if it's invalid(e.g. in collision), it will directly return a failure
Comment by Adolfo Rodriguez T on 2012-11-05:
This does not make much sense, as there is no way to check state validity before performing IK. That's the whole point of the IK search, find a joint configuration that satisfies both the task-space goal and limits/collision constraints. Which overload of searchPositionIK(...) are you invoking?.
Comment by yangyangcv on 2012-11-05:
sorry for not explaining it clearly. the validity check before IK only checks the validity for the end effector. so if the goal pose makes the end effector collides with other objects, this check return a failure.

