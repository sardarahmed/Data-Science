Q:

keeping state: Latched Topics vs ROS Parameters vs Service Request

Hi!
I'm trying to hold state about a piece of software in my stack. For instance, to tell if a fan is on or not from another process through ROS.
The 3 ways that come to mind is changing a parameter but the parameter server is super not high performance and I will be querying this at well over 5 hz. Another option is to have the state be a latched topic but I'm unsure if this is actually any better performancewise. Finally, just have a service call that asks for the state of that component
Any thoughts?

Originally posted by stevemacenski on ROS Answers with karma: 8272 on 2018-03-10
Post score: 2

A:

I would use a latched topic.
A brief comparison of the differences relevant to what you're doing:

Parameter

Polling or using cached parameters places load directly on the ROS master; this doesn't scale well to large data
cached parameters help but still result in load on the ROS master
Data is stored on the master, so it's available (but maybe out of date) if the node that sets that parameter isn't running

Topics

Data is transferred directly between nodes, so it scales better to larger data and number of subscribers
Data isn't available if the publisher node stops
Push-based; updates are delivered to a callback in the receiving node only when the publisher publishes a new message
If you need staleness detection, it must be done in the subscriber

Services

Data is transferred directly between nodes
Data isn't available if the server node stops
Will require polling the service server; this results in additional load in both the server and client when compared with topics.
Easy to detect that the server has stopped responding

Originally posted by ahendrix with karma: 47576 on 2018-03-10
This answer was ACCEPTED on the original site
Post score: 5

Original comments
Comment by gvdhoorn on 2018-03-11:
I would add that typically in dataflow applications, 'state' is derived from data. "fan is on" is something that should either be directly represented by a dataflow, or be derived from one. Hence a topic. Latching such a topic is then just a minor optimisation.
Comment by stevemacenski on 2018-03-11:
Thanks for the input! I did some rough testing and found that the CPU of publishing a state at 10 Hz vs 100 Hz to provide near real-time state information for other nodes works better than parameters (obviously) and slightly better than persistent services.
Comment by stevemacenski on 2018-03-11:
I do wish though that ROS had built in a better parameter server. Maybe my next big project.
Comment by gvdhoorn on 2018-03-12:\

I do wish though that ROS had built in a better parameter server. Maybe my next big project

can you clarify this a bit? The type of information that you describe is definitely not something that should be stored on the parameter server. It's state info that encodes the state of one of your ..
Comment by gvdhoorn on 2018-03-12:
.. sensors. / actuators. It seems like a textbook example of what pub-sub is for.
Comment by stevemacenski on 2018-03-13:
A sensor or actuator, I agree. There's often times you have state about the state of a particular program (Is this thing active, what's the last person that called it, when did that happen). These are great small sized things that would make sense to be able to grab when needed...
Comment by stevemacenski on 2018-03-13:
and calling it a "parameter server" I agree, but equivalently if there's just a call response for the status of things registered, it is useful for high level applications. Other middlewares like zeromq allow for this, ROS's param server wasn't written with high rate access / modification in mind.
Comment by stevemacenski on 2018-03-13:
Which is fine, that wasn't the purpose at the time, but if we can make a ROS "param server" that allows efficiently for constant querying and doesn't place stress on the master, its a win win win.
Comment by viktor.holova on 2020-02-18:
in case folks come across this answer I just wanted to share one good link that I ussualy  share with others for this type of question.
There is a good practice/pattern documented in ROS wiki
http://wiki.ros.org/ROS/Patterns/Communication
And yes, I would recommend a topic for this case
Comment by saulzar on 2021-06-15:
Sorry to dig up an old topic, this is something I'm struggling with as well. In my case I wish to query the state for some part of the system which is not publishing as rapidly as 5hz (I'm querying if some cameras are capturing or not which may not change for hours at a time). Is the recommended solution to this to start publishing this information at a high frequency? The trouble is when another node starts but it misses the initial state it may never not receive it in a reasonable time period.
Comment by gvdhoorn on 2021-06-15:
@saulzar: I'd say using a latched topic for that should work. A latched publisher could publish just once a day, and as long as it's online, all late joiners will receive that message as soon as they subscribe. There would be no need to periodically publish anything.

