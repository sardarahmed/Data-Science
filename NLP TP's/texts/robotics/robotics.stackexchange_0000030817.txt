Q:

How can I completely disable writing logs to filesystem?

I don't want logs written to the filesystem.  The system is an embedded robot platform (Roboard) running from an SD card, ideally the filesystem would be mounted read only.  I also don't want to divert the logs to a ramfs.
I still would like to use rxconsole and the 'live' logging facilities though.
From what I gathered on ROS answers I should look at the $ROS_ROOT/config directory.
For rosconsole.config:
I looked at http://www.ros.org/wiki/rosconsole and it appears that one can compile out logging but does that kill the rxconsole facility then?  The 5 logging levels described there don't include a NONE.  But when I put NONE into the rosconsole.config, roslaunch reports that no logging facilities are available (good) but then dumps all logs of all levels to the console (bad)
For python_logging.conf
According to http://www.ros.org/wiki/rospy/Overview/Logging I should look at http://docs.python.org/library/logging.html#configuration-file-format but I am not clear of how to disable things.  I tried deleting the loggers declared in this config file, and changing their levels to be quieter, but neither seemed to have any effect.
Last ditch effort to blackhole the log directory to /dev/null of course failed ;)

Originally posted by veltrop on ROS Answers with karma: 295 on 2011-04-03
Post score: 18

Original comments
Comment by Asomerville on 2011-05-05:
Which solution did you end up using? Also, if you filed a ticket, could you post a link to it?
Comment by veltrop on 2015-05-07:
I used Daniel Stonier's suggestion.

A:

Hrm, I think it might still need some effort to completely disable everything (as jack suggested, be sure to write a ticket if you wish), but here are some things you can play around with:
No Rosout
Start with 'rosmaster --core' instead of 'roscore'. This avoids firing up rosout.
Cpp Logging
Create an empty $ROS_ROOT/rosconfig.cmake and add the empty line
set(ROS_COMPILE_FLAGS "-DROSCONSOLE_MIN_SEVERITY=5 ${ROS_COMPILE_FLAGS}")

(note ROSCONSOLE_MIN_SEVERITY_NONE = 5 as defined in rosconsole/include/ros/console.h) and then recompile everything. This should disable all your cpp loggers. There is an exception though - the roscpp_internal named logger bypasses this as it seems it uses the log4cxx logger interfaces directly. I actually can't seem to change that logger's level (also roscpp.superdebug) at all via the rosconsole.config file, but that is a separate problem.
Python Logging
If you delete ${ROS_ROOT}/config/python_logging.conf, python programs will just completely abort any logging. I don't know that this is the recommended way of doing it though ;)
Conclusions
So, in conclusion, looks like it might be possible to disable everything, just roscpp might need a better look at so you can disable those two named internal loggers.
However, this doesn't address your initial query - i.e. how to disable file logging whilst maintaining rosout topics. That would, I suspect, require a change in the architecture of the logging system.
Possible Solutions
If you really want to be minimal, then escape the overhead of the ros logging architecture completely by disabling things as above. Write a couple of your own topics that do publishing work only publish when there's a subscriber.
If not, then like any framework, its probably easier to find ways to work with it than fight it. Use a small ramdisk reserved for logging, or if possible, while developing, have a usb port with which you can plug a pen drive into. Either point your config and log directories there or create a union filesystem.
The last alternative is to request an overhaul of rosconsole, rospy and rosout so that they don't write to file on request. This would enable debugging output locked only on the rosout topics. Which, is not exactly an unreasonable idea for read only embedded systems.

Originally posted by Daniel Stonier with karma: 3170 on 2011-04-03
This answer was ACCEPTED on the original site
Post score: 7

Original comments
Comment by veltrop on 2011-04-03:
I think I will kill the logging architecture as you suggested.  Back to printf() for me :(  It would make sense for rosconsole etc to have the option of disabling file output.
Comment by Raptor on 2014-03-20:
Has there been any updates to this since 2011?  A more straight forward solution?

