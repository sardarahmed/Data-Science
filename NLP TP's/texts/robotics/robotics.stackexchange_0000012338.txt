Q:

Combining centres of mass and Inertia tensors

I'm trying to build the dynamic model of a 6DOF robot, and the company that has built it, kindly provides a document having the masses, centres of mass, principal axes of inertia and principal moments of inertia taken at the center of mass, taken at the center of mass and aligned with the output coordinate system, and taken at the output coordinate system (I've come to known that this was obtained from a tool in SolidWorks)
The robot has 6 actuators responsible for the motion of each one of the 6 links available. The problem that I have here is the way I should calculate the inertia matrix $M(q)$. Since the matrix has to have a 6x6 dimension, I know that I have to do some kind of "combining" between one link and the correspondent actuator. 
The problem is that I don't really know how can I find the respective centre of mass between the two "objects" and the respective moment of inertia of the "multiobject". I've seen people saying that it is simply the summation of the respective moments of inertia but they need to be in respect to the same orientation and translation.
Can anyone shed some light into this? Suggestions would be greatly appreciated.
Thanks

A:

You are lucky to have the inertial parameters for the robot! This is something that manufacturers very rarely share and it is hard to reverse engineer.
Given that you have these inertial parameters, plus a kinematic model expressed in Denavit-Hartenberg parameters, then a very well known and efficient algorithm called recursive Newton-Euler (RNE) can compute the joint torquse required to achieve a particular acceleration, given joint angles and velocities.  Calling this algorithm 6 times (with zero velocity, unit acceleration, and zero gravity) will allow you to build up the joint-space inertia matrix column by column.
In practice the inertia of the motors, amplified by the gear ratio squared, is of a similar order to the link inertias and must be taken into consideration.  These terms are added to the diagonal of M.
The RNE algorithm can be found in most robotics textbooks and is implemented in various robotic software packages.  Using this algorithm to determine the joint-space inertia matrix is part of "Method 1" described in: Efficient dynamic computer simulation of robotic mechanisms, M. W. Walker and D. E. Orin, ASME Journal of Dynamic Systems, Measurement and Control, vol. 104, no. 3, pp. 205-211, 1982.  Other algorithmic approaches exist but given the efficiency and ubiquity of RNE this is a pretty good way to compute M for a 6-axis manipulator. 
Both algorithms mentioned are implemented in the Robotics Toolbox for MATLAB. The Toolbox allows you to enter the kinematic and inertial parameters, as well as friction models and motor inertia, to investigate the dynamics of robot manipulator arms.

