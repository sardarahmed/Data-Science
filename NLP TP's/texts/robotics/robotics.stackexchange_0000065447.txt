Q:

cross-compile ros_comm for ARM9 LPC3250

Looking for information on how to cross-compile ROS for my embedded system, the main references I've found are eros (which is dead) and installing from source (which assumes you have a proper package manager to get the bootstrap dependencies).
Unfortunately, I don't have the luxury of a proper package manager. We build our kernel and root filesystem using LTIB, since that is the approach in the board support package provided by the manufacturer.
I would appreciate any and all tips on cross-compiling from the ground up -- I have a gcc cross-compiler, and kernel version 2.6.27.8 (yes, I know that is from 2008).
What I would really love is a bullet list of the dependencies for the most basic core components. We only need ros_comm on the embedded system, at least to start.
There are a few other middleware options in the running, but we want to give ROS a shot because it looks like it can offer an integrated system with many tools. But I can't spend two weeks just getting it to run, so I'm hoping someone with recent experience can provide some advice or point me to a good reference to start with.
Thanks,

Originally posted by bluesquall on ROS Answers with karma: 11 on 2015-01-27
Post score: 1

Original comments
Comment by stevej_80 on 2016-04-11:
Hi @bluesquall, I am having a hard time making ROS work on my small embedded system. been looking for alternative options to migrate my codes from ROS to another middleware / toolbox. Could you please name a few of the viable options or put me in a direction so I look into them? Thank you.

A:

You may want to check meta-ros, which is a cross-compilation toolchain for ROS, similar to LTIB.

Originally posted by ahendrix with karma: 47576 on 2015-01-27
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by bluesquall on 2015-01-27:
Our board support package and toolchain don't currently work outside LTIB, but I'll take a look at meta-ros. Thanks.

