Q:

ros::init() must be called before creating a node handle

Hello,
I have defined a library (i.e. another ROS package) that node "X" depends upon. In the header file of the library I have a class that declares a node handle. When "X" is being preprocessed, the library's header file is pulled into "X".
When I run the system (via roslaunch), I immediately get this: "ros::init() must be called before creating a node handle" and the node crashes b/c it finds the node handle before it finds main(), which is where ros::init is called.
The question: How do I allow a node handle to exist in the library header file (so the library class can use it) without causing such an error?
Here is an example:
Lib.h:
class Z
{
     public: ...
     private: ros::NodeHandle nh;
};

Node "X" source (.cpp):
#include <Lib/Lib.h>
...
main()
{
     Z z;
     ros::init(...);
}

When I launch "X", which depends upon Lib (and by extension "Z"), the node handle is found before ros::init() is executed, even though the node handle is not used until afterwards...
Again, the runtime error is: "ros::init() must be called before creating a node handle"
Thanks a lot!

Originally posted by gavinmachine on ROS Answers with karma: 353 on 2012-04-24
Post score: 8

A:

There is nothing wrong with your example as described; in fact it's a typical usage. The NodeHandle is not created until you create the instance of Z, which happens after the call to ros::init(), so there should be no problem.
Most likely you are declaring a global instance of Z (or some other class containing a NodeHandle) either in your main.cpp or in the library. Since globals are created before main(), ros::init() has not yet been called and you get the error.
Get a stack trace from the failed assertion to see where the NodeHandle is being created.

Originally posted by Patrick Mihelich with karma: 4336 on 2012-04-24
This answer was ACCEPTED on the original site
Post score: 10

Original comments
Comment by gavinmachine on 2012-04-24:
That makes sense. Would is work to create a node handle/publisher in a member function of Z, and then call the member function to publish something? The reason I'm not just creating Z after init() is because I need Z to be global so that anything (classes included) in node "X" can access it...
Comment by 2ROS0 on 2014-11-25:
I have the same problem you mentioned ^
Could you tell me how you fixed it?

