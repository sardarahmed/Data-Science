Q:

Is modelling a robot and deriving its Equations of Motions more applicable to a system that is inherently unstable?

As someone who is new and is still learning about robotics, I hope you can help me out.
Let's say I have two systems: 

(a) Inverted Pendulum (unstable system)
(b) Pole Climbing Robot (stable system)

For system (a), I would say that generally, it is a more dynamic system that produces fast motion. So, in order to effectively control it, I would have to derive the Equations of Motions (EOM) and only then I can supply the sufficient input to achieve the desired output. Eventually, the program will implement the EOM which enables the microcontroller to produce the right signal to get the desired output.
However for system (b), I assume that it is a stable system. Instead of deriving the EOM, why cant I just rely on the sensor to determine whether the output produced is exactly what I want to achieve? 
For unstable system, controlling it is just difficult and moreover, it does not tolerate erratic behavior well. The system will get damaged, as a consequence. 
On the contrary, stable system is more tolerant towards unpredictable behavior since it is in fact stable.
Am I right to think about it from this perspective? What exactly is the need for deriving the EOM of systems (a) and (b) above? What are the advantages?  How does it affect the programming of such systems?
Edited:
Some examples of the climbing robot that I'm talking about: 

i.ytimg.com/vi/gf7hIBl5M2U/hqdefault.jpg
ece.ubc.ca/~baghani/Academics/Project_Photos/UTPCR.jpg

A:

A system is (marginally) stable if all of the poles are (equal to or) less than zero. In general, the poles of a system determine whether a system is stable or not, and the zeros of a system determine the approach to stability (rise time, settling time, overshoot, etc.) 
A PID controller operates with no system model taken into account. A PID controller adds a pole at zero and two zeros to the system; these can be adjusted to tune the system response. 
The problem with trying to use a PID controller on an unstable system is that you need to tune the zeros of the controller to exactly equal to the unstable poles to achieve pole-zero cancellation. If, for some reason (friction, wear, capacitor aging, vibration, etc.) the controller's zero end up not exactly equal to the unstable poles, then the unstable poles are no longer cancelled and the system goes unstable again. 
In scenarios like this, adding zeros is not the solution. The way to control an unstable pole is to actually place the (unstable) open-loop poles somewhere else. In this manner you're not trying to control the system by cancelling the poles, you're actually acting to change the fundamental dynamics of the system. 
The technique to achieve pole placement is generally state feedback control. This requires a system model because (hand-waving) you need to know which poles are unstable and in order to be able to make them stable. Remember, for stability, a positive pole is unstable and a negative pole is stable, from the inverse Laplace tranform of the pole, $e^{\pm pt}$ - the time response either decays or "explodes" exponentially. 
So, once you have a system model and evaluate which poles need to be moved from the right- to the left-hand plane you can calculate the gains required to do the move et voila, the controller is complete. Note the (hand-waving); this can be a very time-consuming task.
So, in conclusion, while you might be able to "skate by" with a PID controller on an unstable system, PID control will never change the pole locations of the underlying system so you will only ever achieve tenuous stability. In order to change the underlying system dynamics, you first need to know the underlying system dynamics, and that's why you need a system model.  

