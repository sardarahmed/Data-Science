Q:

github actions catkin build example?

Does anyone have a github actions (https://github.com/features/actions) catkin build example?
I imagine I can cut and paste a lot from a .travis.yml (https://github.com/lucasw/image_to_v4l2loopback/blob/master/.travis.yml for example), but haven't gotten too far into it.

Originally posted by lucasw on ROS Answers with karma: 8729 on 2019-10-24
Post score: 1

A:

I've got something working here: https://github.com/lucasw/frei0r_image/blob/master/.github/workflows/ubuntu_20_04.yml
(see also https://github.com/lucasw/frei0r_image/actions for how the results are reported)
name: Noetic Ubuntu 20.04

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04
    env:
      ROS_CI_DESKTOP: "`lsb_release -cs`"  # e.g. [trusty|xenial|...]
      ROS_DISTRO: noetic
    steps:
      - uses: actions/checkout@v2
      - name: Install Non-ROS Dependencies
        run: |
            ls -l $GITHUB_WORKSPACE
            sudo apt-get install -y frei0r-plugins-dev
      - name: Install ROS
        run: |
            sudo sh -c "echo \"deb http://packages.ros.org/ros/ubuntu $ROS_CI_DESKTOP main\" > /etc/apt/sources.list.d/ros-latest.list"
            sudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
            sudo apt-get update -qq
            sudo apt-get install dpkg
            sudo apt-get install -y python3-catkin-pkg
            sudo apt-get install -y python3-catkin-tools
            sudo apt-get install -y python3-osrf-pycommon
            sudo apt-get install -y python3-rosdep
            sudo apt-get install -y python3-wstool
            sudo apt-get install -y ros-cmake-modules
            sudo apt-get install -y ros-$ROS_DISTRO-catkin
            source /opt/ros/$ROS_DISTRO/setup.bash
      - name: Install ROS packages with rosdep
        run: |
          source /opt/ros/$ROS_DISTRO/setup.bash
          sudo rosdep init
          rosdep update
          mkdir -p ~/catkin_ws/src
          ln -s $GITHUB_WORKSPACE ~/catkin_ws/src/frei0r_image
          cd ~/catkin_ws
          rosdep install --from-paths src --ignore-src -r -s  # do a dry-run first
          rosdep install --from-paths src --ignore-src -r -y
      - name: catkin build
        run: |
          source /opt/ros/$ROS_DISTRO/setup.bash
          cd ~/catkin_ws
          catkin build --no-status
          source devel/setup.bash
      - name: lint
        run: |
          cd ~/catkin_ws
          catkin build frei0r_image --no-deps --catkin-make-args roslint

It would be fantastic if there was a ubuntu-20.04 target image that already has noetic on it to speed up the build.  (In other contexts I've seen downloading a large custom pre-installed image is slower than starting with a clean base image and installing everything from highly available apt repos, but I'm sure that can vary wildly).

Originally posted by lucasw with karma: 8729 on 2019-10-25
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by abhishek47 on 2021-03-30:
For build, why is the second catkin build required? Is the symbolic link for some added functionality?
Comment by lucasw on 2021-03-30:
I'm not sure why I did that, I had just got it working when I posted it, I'll clean it up later.  Here's a more up-to-date example for 20.04, no symlink because the checkout puts the source into the right catkin_ws path
https://github.com/ros/ros_comm/blob/7a284cad5057f4014f999a20aa3b3e12ad471de1/.github/workflows/ubuntu_20_04.yml
Comment by abhishek47 on 2021-04-02:
Thanks for the new example. After mucking around, I can confirm "source is checked out to ~/work, which may not be true forever" still holds true. As for the two catkin build you do, I'm theorizing the second one is to create a symbolic link to ~/work and then catkin build again in case the first one was done on an empty /src.
Comment by lucasw on 2021-04-02:
I update the action to get rid of that anyhow, maybe later it could do also do catkin install build and zip up the install contents and push that into the github actions build artfiacts so it can be downloaded.

