Q:

Iterative Closest Point for 2-D LIDAR Data

I have two 2-D point clouds obtained from LIDAR (Light Detection And Ranging) scans at two different poses (positions and orientations) inside a circular structure, where a small object (vertical cylindrical column) is placed at a fixed location. My objective here is to match as closely as possible the two point clouds and find the planar transformation (translation and rotation) to do that. One useful technique—I believe—would be the point set registration using the ICP (Iterative Closest Point) algorithm.
The issue now is that the algorithm fails to match perfectly the two point clouds, specifically in terms of rotation because it didn't complete matching the data points related to the object inside the circle. Therefore, my question is: would this be a limitation of the ICP algorithm, or a problem in implementing it (which I doubt it since I double-checked with Matlab ICP embedded function)?
Are there other methods/algorithms that can solve this problem?

A:

You can use 3D feature descriptors here to register two point clouds. I've personally used two most recent ones that performed well enough for a similar application.
Following are the references to the papers:

A novel binary shape context for 3D local surface description link
TOLDI: An effective and robust approach for 3D local shape description link

The approach is: a) Detect good keypoints from the point clouds -> b) Compute descriptors for them -> c) Match descriptors -> d) Use RANSAC to find inlier matches and compute rigid body transformation between the point clouds.
In the paper (1) above, methods for (a) and (b) are given. I found them to be robust enough in an application I used which is similar to yours. For (c), I used Hamming distance based descriptor matching algorithm BFMatcher of OpenCV (link). For (d) I developed my own RANSAC implementation and used estimateRigidTransformation method in pcl library (link).
You can follow an example implementation of point cloud registration at pcl library in this link, that uses different feature descriptors. It did not work for me, but you can give it a try.
If you need help in implementing paper (1) above, you may follow my codes in this link

