Q:

float64 and eigen

Hi,
I have a subsriber node that reads IMU measurements. For computational reasons I have to write the
geometry_msgs/Vector3 angular_velocity
into an eigen-library vector, any suggestions?
this is the code:
VectorXd imuData;
imuData(0) = msg->angular_velocity.x;

this is the error I get:
dede@ubuntu:~$ rosrun labrob_project my_subscriber 

(view:3495): Gtk-WARNING **: Unable to locate theme engine in module_path: "pixmap",

(view:3495): Gtk-WARNING **: Unable to locate theme engine in module_path: "pixmap",

(view:3495): Gtk-WARNING **: Unable to locate theme engine in module_path: "pixmap",

(view:3495): Gtk-WARNING **: Unable to locate theme engine in module_path: "pixmap",
my_subscriber: /usr/include/eigen3/Eigen/src/Core/DenseCoeffsBase.h:407: Eigen::DenseCoeffsBase<Derived, 1>::Scalar& Eigen::DenseCoeffsBase<Derived, 1>::operator()(Eigen::DenseCoeffsBase<Derived, 1>::Index) [with Derived = Eigen::Matrix<double, -0x00000000000000001, 1>, Eigen::DenseCoeffsBase<Derived, 1>::Scalar = double, Eigen::DenseCoeffsBase<Derived, 1>::Index = long int]: Assertion `index >= 0 && index < size()' failed.
Aborted

Originally posted by schizzz8 on ROS Answers with karma: 183 on 2012-11-27
Post score: 1

Original comments
Comment by dornhege on 2012-11-27:
I don't really see what the problem is with that. Can you say why this should be problematic?
Comment by schizzz8 on 2012-11-28:
VectorXd imuData; imuData(0) = msg->angular_velocity.x; I have no problem in compiling this but at run time there's a typecast problem between float64 and double
Comment by dornhege on 2012-11-28:
float64 are doubles in ROS. This should work in principle. Please copy the exact error and the referred code in your post and have a look at the support guidelines: http://ros.org/wiki/Support.

A:

The relevant bit of the assertion is Assertion index >= 0 && index < size()' failed.
Before you access an element of the VectorXd, you need to resize the VectorXd to be large enough. Another option, since you know the number of elements that you want from the angular velocity, is to use a fixed size vector such as Vector3d . That would not require a .resize() call and may be faster than the dynamically sized VectorXd.
Here's a snippet that reproduces your error:
#include <Eigen/Geometry>

int main(int argc, char** argv)
{

   Eigen::VectorXd vec;
   //vec.resize(1);
   vec(0) = 1.0;

   return 0;
}

Commenting in that vec.resize(1) allows it to compile and run fine.

Originally posted by Eric Perko with karma: 8406 on 2012-11-28
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by schizzz8 on 2012-11-28:
thanks, it worked
Comment by v.leto on 2020-01-15:
Hi I have a similar problem but I can't understand why imy code is not working. I think the problem is in this chunck of code. what do you think?
Eigen::VectorXd x_hat(n);
double attitude = x_hat(4);
t += dt;
F << 1,0, dtcos(attitude), dt(-sin(attitude)),
0, 1, dt*sin(attitude),dt *cos(attitude),
0, 0, 1, 0,
0,0,0,1;
L<<  0,0,
0,0,
dt,0,
0,dt;

