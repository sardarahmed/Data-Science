Q:

laser_scan(/scan) topic not showing and driving 4wheel bot using diff_drive_controller

Hi folks, I am currently implementing a 4wheel bot. I added a laser_scan topic in urdf file, you can see the file below...when i run the launch file, i can't visualize any laser and the "/scan" topic also when i run the rostopic list. Am i doing anything wrong?
this is my urdf file
`

<xacro:property name="constant"     value = "0.083333333"/> #1/12
<xacro:property name="mass"         value = "0.5"/>
<xacro:property name="width"        value = "0.75"/> 
<xacro:property name="height"       value = "0.15"/>
<xacro:property name="depth"        value = "0.4"/>
<xacro:property name="radius"        value = "0.033"/>
<xacro:property name="length"        value = "0.018"/>

<!-- rover base link -->
<link name="world"/>

<joint name="Chassis_joint" type="fixed">
    <parent link="world"/>
    <child link="Chassis"/>
    <origin xyz="0.0 0.0 0.135" rpy="0.0 0.0 0.0"/>
    <axis xyz="0.0 0.0 0.0"/>       
</joint>

<link name="Chassis">

    <inertial> 
        <mass value="0.5"/>
        <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0"/>
        <inertia ixx="0.007601" ixy="0.0" ixz="0.0" 
                 iyy="0.03009" iyz="0.0" 
                 izz="0.024365"/>
    </inertial>
    <visual>
        <geometry>
            <box size="0.75 0.4 0.15" />
        </geometry>
        <material name="">
            <color rgba="1.0 0.3 0.1 1.0"/>
        </material>
    </visual>
    <collision>
        <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0"/>
        <geometry>
            <box size="0.75 0.4 0.15" />
        </geometry>
    </collision>
</link>

<gazebo reference = "Chassis">
    <material> Gazebo/Orange </material>
</gazebo> 

    <!-- camera/sensor mount -->
<joint name="mount_joint" type="fixed">
    <parent link="Chassis"/>
    <child link="mount_link"/>
    <origin xyz="0.2 0.0 0.124" rpy="0.0 0.0 0.0"/>
    <axis xyz="0.0 0.0 0.0"/> 
</joint>

<link name="mount_link">
    <inertial>
        <mass value="0.0"/>
        <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0"/>
        <inertia ixx="0.0" ixy="0.0" ixz="0.0"
                iyy="0.0" iyz="0.0"
                izz="0.0" />
    </inertial>  
    <visual>                     
        <geometry>
            <cylinder radius="0.08" length="0.1"/>
        </geometry>
        <material name="">
            <color rgba="0.0 0.0 0.0 1.0"/>
        </material>
    </visual>
    <collision>
        <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0"/>
        <geometry>
            <cylinder radius="0.08" length="0.1"/>
        </geometry>
    </collision>
</link> 

<gazebo reference = "mount_link">
    <material> Gazebo/Black</material>
</gazebo>  

<!-- defining xacro style for repeating elements -->
<xacro:macro name="wheel" params="name path x y">
    
    <joint name="${name}_wheel_joint" type="continuous">
        <parent link="Chassis"/>
        <child link="${name}_wheel"/>
        <origin xyz="${x} ${y} 0.0" rpy="0.0 0.0 0.0"/>
        <axis xyz="0.0 1.0 0.0"/> 
    </joint>
    
    <link name="${name}_wheel">
        <inertial>
            <mass value="0.5"/>
            <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0"/>
            <inertia ixx="0.00042" ixy="0.0" ixz="0.0"
                    iyy="0.00014" iyz="0.0"
                    izz="0.00063" />
        </inertial>             
        <visual>           
            <geometry>
                <mesh filename="${path}" scale="0.005 0.005 0.005"/> #length = 0.018 radius = "0.066"
            </geometry>
            <material name="">
                <color rgba="1.0 0.0 0.0 1.0"/>
            </material>
        </visual>
        <collision>
            <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0"/>
            <geometry>
                <mesh filename="${path}" scale="0.005 0.005 0.005"/>
            </geometry>
        </collision>

    </link>

    <gazebo reference = "${name}_wheel">
        <material> Gazebo/Red </material>
    </gazebo>  

</xacro:macro>

<!-- wheel creating using macros -->
<xacro:wheel name = "front_left" path ="package://mobile_robot/meshes/right_tire.stl" x = "0.187" y = "0.25"/>
<xacro:wheel name = "front_right" path ="package://mobile_robot/meshes/left_tire.stl" x = "0.187" y = "-0.25"/>
<xacro:wheel name = "rear_left" path ="package://mobile_robot/meshes/right_tire.stl" x = "-0.187" y = "0.25"/>
<xacro:wheel name = "rear_right" path ="package://mobile_robot/meshes/left_tire.stl" x = "-0.187" y = "-0.25"/>

<!-- camera/sensor mount -->
<joint name="lidar_joint" type="fixed">
    <parent link="mount_link"/>
    <child link="lidar_link"/>
    <origin xyz="0.0 0.0 0.1" rpy="0.0 0.0 0.0"/>
    <axis xyz="0.0 0.0 0.0"/> 
</joint>

<link name="lidar_link">
    <visual>                     
        <geometry>
            <cylinder radius="0.08" length="0.1"/>
        </geometry>
        <material name="">
            <color rgba="0.0 0.0 0.8 1.0"/>
        </material>
    </visual>
    <collision>
        <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0"/>
        <geometry>
            <cylinder radius="0.08" length="0.1"/>
        </geometry>
    </collision>
    <inertial>
        <mass value="0.1"/>
        <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0"/>
        <inertia ixx="0.00024" ixy="0.0" ixz="0.0"
                iyy="0.00024" iyz="0.0"
                izz="0.00005" />        
    </inertial>
    <sensor name = "laser" type = "ray">
        <pose> 0 0 0 0 0 0 </pose>
        <visualize>true</visualize>
        <update_rate>10</update_rate>
        <ray>
            <scan>
                <horizontal>
                    <samples>360</samples>
                    <resolution>1</resolution>
                    <min_angle>-2.356194</min_angle>  <!-- -135 degrees in radians -->
                    <max_angle>2.356194</max_angle>   <!-- 135 degrees in radians -->
                </horizontal>
            </scan>
            <range>
                <min>0.02</min>   <!-- Minimum range in meters -->
                <max>15.0</max>   <!-- Maximum range in meters -->
                <resolution>0.01</resolution>   <!-- Range resolution in meters -->
            </range>
        </ray>
        <plugin name="laser" filename="libgazebo_ros_ray_sensor.so">
            <ros>
                <argument>~/out:=scan</argument>
            </ros>
            <output_type>sensor_msgs/LaserScan</output_type>
            <frame_name>lidar_link</frame_name>
        </plugin>
    </sensor> 
</link>

<gazebo reference = "lidar_link">
    <material> Gazebo/Blue </material>

</gazebo> 

`
this is my gazebo.launch file
`

<param name="robot_description" command="xacro '$(find mobile_robot)/urdf/rover.urdf.xacro'"/>
<arg name="rviz_config_file" default="$(find mobile_robot)/config/robot_config.rviz"/>

<node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output = "screen"/>
<node pkg="joint_state_publisher_gui" type="joint_state_publisher_gui" name="joint_state_publisher_gui"/>

<node pkg="rviz" type="rviz" name="rviz" args = "-d $(arg rviz_config_file)"/>

<include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="use_sim_time" value="true"/>
</include>

<node name="spawning_urdf" pkg="gazebo_ros" type="spawn_model" args = "-urdf -model rover -param robot_description" />

`
this is my rostopic list command output
*/clicked_point
/clock
/gazebo/link_states
/gazebo/model_states
/gazebo/parameter_descriptions
/gazebo/parameter_updates
/gazebo/performance_metrics
/gazebo/set_link_state
/gazebo/set_model_state
/initialpose
/joint_states
/move_base_simple/goal
/rosout
/rosout_agg
/tf
/tf_static
*
and this is the image of gazebo

And i want to drive it using diff_drive_controller, how can i do that?

Originally posted by the_one on ROS Answers with karma: 41 on 2023-07-14
Post score: 0

Original comments
Comment by Mike Scheutzow on 2023-07-15:
I suggest that you look at a project like turtlebot3 that already has all these things implemented. You can even download a complete world & simulation if you want to.
https://wiki.ros.org/turtlebot3_simulations

A:

For the simulated lidar, we use this in melodic and noetic:
  <plugin name="lidar_model" filename="libgazebo_ros_laser.so">
    <topicName>/scan</topicName>
    <frameName>scan_link</frameName>
  </plugin>

Also, having the sensor name= and the plugin name= the same might be an issue for gazebo, I'm not sure.

Originally posted by Mike Scheutzow with karma: 4903 on 2023-07-15
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by the_one on 2023-07-17:
yes i changed that after i did not find the libgazebo_ros_ray_sensor.so file in the gazebo_ros package, also i read the gazebo documentation from gazebo... what @mike suggested is right way to do the laser part.

