Q:

Feasibility of using Docker to isolate ROS and other tools in Robotics

I am very new to Docker and I want to use it to isolate ROS (Melodic), OpenCV and Deep Learning libraries. I have Ubuntu 18.04 LTS running with CUDA, Eclipse, cmake and a few other basic tools installed. Ideally, I would like three isolated entities, one each for ROS, OpenCV and Deep Learning Libraries. These three isolated entities run on top of the image of existing Ubuntu platform. When I install a new package/ module related to ROS, I don't want it to cause any conflicts with a package used by OpenCV or Deep Learning Libraries. At the same time ROS should be able to use OpenCV or Deep Learning Libraries as well as the common resources in the Ubuntu platform. I have already read this, but it only deals with ROS, not the interaction between different software packages.

Is such a system possible using Docker?

Can anyone provide some guidance regarding  a roadmap towards such an implementation?

Originally posted by skr_robo on ROS Answers with karma: 178 on 2018-11-13
Post score: 0

Original comments
Comment by gvdhoorn on 2018-11-14:
Something to consider: if a ROS node has a dependency on OpenCV, and they're not in the same image, how is the ROS node going to be linked against / use OpenCV?
Comment by skr_robo on 2018-11-14:
@gvdhoom Based on the research I have done so far, I believe the three isolated entities I have mentioned in the question should be three different containers within same image. I think the networking and interfacing abilities of Docker would handle how ROS talks to OpenCV libraries.
Comment by gvdhoorn on 2018-11-14:
So saying that you'd like three "isolated entities" with "one each for ROS, OpenCV and Deep Learning Libraries" to me implies that you'll have 3 images. They are only isolated if they don't derive from each other, in which case anything in image A cannot use anything from image B. This makes ..
Comment by gvdhoorn on 2018-11-14:
.. linking/using OpenCV with ROS rather difficult.

When I install a new package/ module related to ROS, I don't want it to cause any conflicts with a package used by OpenCV or Deep Learning Libraries.

This further suggests that the images should not share anything.
Comment by skr_robo on 2018-11-14:
But cannot it not be designed in such a way that ROS and OpenCV have their own separate container? Something similar to Multi Container Environment mentioned here.
Comment by gvdhoorn on 2018-11-14:
Think of it this way: take 2 computers. Install ROS on the first, and OpenCV on the second. You want to keep everything isolated ("don't want [..] any conflicts"), so no copying of files. How is ROS are ROS nodes going to use OpenCV if it doesn't have access to the libraries?
Comment by gvdhoorn on 2018-11-14:
Multi-container setups are certainly nice and can have their benefits, but they are not magical. If your ROS node needs an OpenCV library, it's going to have to have access to that library, one way or the other. If all your images are indeed "isolated", that cannot happen.
Comment by skr_robo on 2018-11-14:
When I use the term 'isolated', I mean isolated enough to handle the issues mentioned in first few paragraphs [Are you, .......  Docker may be for you!] of this; things like dependency conflicts.
Comment by skr_robo on 2018-11-14:
In the scenario you mentioned with two computers, once the setup is completed, can't the system with ROS talk to the computer with OpenCV to access the libraries through an interface and proper networking setup?
Comment by gvdhoorn on 2018-11-14:\

can't the system with ROS talk to the computer with OpenCV to access the libraries through an interface

of course.
What sort of interface were you thinking of? Because "interface and proper networking setup" sounds like something network based, which ROS happens to be ..
Comment by gvdhoorn on 2018-11-14:
... That seems to suggest you'd like to use some other networking technology to have something on the OpenCV side communicate with another something on the ROS side, which then finally communicates with ROS itself?
It's all possible, but sounds a bit convoluted.
"Dependency conflicts" are ..
Comment by gvdhoorn on 2018-11-14:
.. exactly those conflicts you run into when trying to link to / use two things together that have different or conflicting dependencies. If you complete isolate everything, there won't be any conflicts. But it would also make it rather difficult to use those two things inside the same program.
Comment by skr_robo on 2018-11-14:
I understand the point you are trying to make. However, I would like to do some more research before dismissing the idea.
Comment by gvdhoorn on 2018-11-14:
I did not post anything as an answer. Just some additional thoughts.
Note: I mostly discussed static (ie: compile/build time) concerns. Not runtime.

A:

Containers are runtime concepts. Images are static. Containers are created from images. If your image doesn't contain something, neither will a container created from that image (unless you add it in a session in the container of course, but that would add it to the container, not the image).

Originally posted by gvdhoorn with karma: 86574 on 2018-11-14
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by jadran on 2020-03-13:
Docker commands includes a command to do the image search on client.

