Q:

Not getting any output with python message_filter ApproximateTimeSynchronizer

I am trying to project 3d bounding box detected on a point cloud data to Image. I am using message filters to subscribe to image and detection topic. when I run the node i get the debug message on console but after that there is no output.
#!/usr/bin/env python3
from typing import List
import rclpy
from rclpy.context import Context
from rclpy.node import Node
from rclpy.parameter import Parameter

from sensor_msgs.msg import Image
from vision_msgs.msg import Detection3DArray
import message_filters

import numpy as np
import ros2_numpy as rnp
import cv2
from cv_bridge import CvBridge, CvBridgeError

class Projection(Node):
    def __init__(self):
        super().__init__("projection")

        self.bridge = CvBridge()
        # self.lidar_sub = self.create_subscription(Detection3DArray, "cloud_detections", self.posecallback, 10)
        self.rot_matrix = np.array([[0.691, 0.599, 0.405],
                                    [0.516, 0.801, 0.303],
                                    [-0.506, -0.00, 0.863]])
        
        self.trans_vec = np.array([-5.976, 6.080, 0.018] )
        
        self.intrinsic_ = np.array([[553.817335, 0.000000, 319.184693], 
                                    [0.000000, 553.998394, 319.639937],
                                    [0.000000, 0.000000, 1.000000]] )

        self.distortion_ = np.array([-0.002324, 0.004655, 0.000222, -0.000076, 0.000000])

        self.lidar_detection_sub = message_filters.Subscriber(self, Detection3DArray, "cloud_detections")
        self.image_sub = message_filters.Subscriber(self, Image, "camera")

        self.camera_pub = self.create_publisher(Image, "bbbox_projection", 10)

        self.proj = message_filters.ApproximateTimeSynchronizer([self.image_sub, self.lidar_detection_sub], 10, 10)
        self.proj.registerCallback(self.posecallback)

        self.get_logger().info("Projecting bounding box on image.....")

    def posecallback(self, img_msg, detection_msg):
        try:
            img = self.bridge.imgmsg_to_cv2(img_msg, "bgr8")    
        except CvBridgeError as e:
            self.get_logger().error(e)

        for detection in detection_msg.detections:
            object_point = rnp.numpify(detection.bbox.center.position)
            size = rnp.numpify(detection.bbox.size)
            self.get_logger().info(f"object_point:{object_point}")
            
            image_point,_ = cv2.projectPoints(object_point, self.rot_matrix, self.trans_vec, self.intrinsic_, self.distortion_)
            self.get_logger().info(f"image_point:{image_point}")

            bbox_image_ = self.draw_box(img, object_point[0], object_point[1], size.x, size.y,(255,255,245))

            bbox_msg = self.bridge.cv2_to_imgmsg(bbox_image_) 
            self.camera_pub.publish(bbox_msg)

    
    def draw_box(self, cv_image: np.array, x_position, y_position,x_size, y_size, color) -> np.array:

        min_pt = (round(x_position - x_size / 2.0), 
                  round(y_position - y_size /2.0))
        
        max_pt = (round(x_position + x_size / 2.0), 
                  round(y_position + y_size /2.0))
        
        # draw box
        cv2.rectangle(cv_image, min_pt, max_pt, color, 2)
        return cv_image

def main(args=None):
    rclpy.init(args=args)
    node = Projection()
    rclpy.spin(node)
    rclpy.shutdown()

if __name__ == '__main__':
    main()

console output is just a message: Projecting bounding box on image.....
Any guidance is appreciated. Thank you!
I am using ros2 humble on linux 22.04.

A:

This was an error related to time stamp of the both the messages. DetectionArray was using sim time and camera was not using it. so I made a new Node which subscribe to the camera, update the time stamp and managed to get the next error;-)

