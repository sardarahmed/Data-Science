Q:

How to avoid hardcoding package name in python?

#!/usr/bin/env python
PACKAGE_NAME = 'puddingPackage'
import roslib; roslib.load_manifest(PACKAGE_NAME)
  :
  :

Other than declaring in each .py files like above, what is the official/recommended way to give the package name to roslib that's mandatory in rospy?
Might / Should not be often the case but in my team the pkg name gets changed esp. at its earlier stage where the usage and stack/pkg structure isn't mature enough.
Thank you.

Originally posted by 130s on ROS Answers with karma: 10937 on 2011-12-08
Post score: 5

A:

Workaround?
#!/usr/bin/env python
import os, sys

#pkg_name = os.path.basename(os.getcwd()) # not working when called from wherever
#pkg_name = os.path.basename(os.path.realpath(sys.path[0])) # might work in every case
pkg_name = os.path.basename(os.path.dirname(os.path.realpath(__file__))) # should work in every case

if pkg_name in ['src','bin','python']: # typical sub dirs 
    pkg_name = os.path.basename(os.path.dirname(os.path.dirname(os.path.realpath(__file__))))
import roslib; roslib.load_manifest(pkg_name)
  :

A "more proper but expensive" solution would be to recursively search the path for a manifest.xml and parse that.

Originally posted by felix k with karma: 1650 on 2011-12-11
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by felix k on 2011-12-18:
@IsaacSaito: I just updated the if-inside path call, as I forgot to change it to file.
Comment by 130s on 2011-12-13:
Thx guys, the one @felix k suggests works out for me for now. Also nice to know ROS function like get_dir_pkg. So far it sheds error in my env. (looks like related to roslib/packages.py#get_pkg_dir()) as it mentions itself as "not 100% stable", but I'll keep it mind too.
Comment by Dan Lazewatsky on 2011-12-13:
roslib actually has something built in to do this:
pkg_dir, pkg_name = roslib.packages.get_dir_pkg(os.getcwd()).
That said, I'm sure there's a reason this isn't standard practice.
Comment by felix k on 2011-12-13:
Oh, yeah, that's the old cwd thing. Did some research and made an edit. Seems to be quite competent, unless you import another module instead of running it, at which you might have to use 'inspect'...
Comment by dornhege on 2011-12-12:
What happens in that case if you rosrun a python script from another package?

