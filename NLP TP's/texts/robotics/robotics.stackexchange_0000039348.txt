Q:

Tele-Operation of an Arm's End-Effector

Is there a way in ROS to tele-operate the arm's end-effector location? What I am envisioning is something like the move_arm_warehouse but instead of setting start and end positions, the robot's end-effector just follows the location of the interactive marker.

Originally posted by John Hoare on ROS Answers with karma: 765 on 2012-04-05
Post score: 0

A:

For that you'll need two things: some form of controller that operates in Cartesian end-effector space (like a J-transpose or J-inverse controller), and then a simple interactive_marker application that will just send the location of the interactive marker to the controller as a set point.
We have both implemented for the PR2, and the pr2_marker_control package in the pr2_object_manipulation stack is a good starting point. For a generic robot, I expect the Cartesian controller to be the most significant hurdle; the interactive_marker based app should be relatively straightforward.
Alternatively, you could just compute inverse kinematics on the location of the interactive marker and then feed the result directly to your regular joint-space controller. You run the risk of sudden movements in the redundant space of the arm (if your arm is redundant), or inability to get close to locations where IK can not find solutions. We do not have anything generic like that already implemented, but if your IK is fast enough, then it should be a relatively straightforward implementation, at least for a proof of concept.

Originally posted by Matei Ciocarlie with karma: 586 on 2012-04-05
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by John Hoare on 2012-04-06:
Do you have an opinion of what would happen if I were to just feed end_effector goals into the command side of move_arm ? Is that essentially equivalent to your paragraph 3?
Comment by Matei Ciocarlie on 2012-04-06:
Could work. You could get sudden jerky movement in the redundancy. It will just flat out refuse to move if IK can not find a solution (whereas a Cartesian controller would get you close). You would need to send goals slow enough to give it time to plan.
Comment by Matei Ciocarlie on 2012-04-06:
Also, not sure how well move_arm is set up to handle being interrupted and asked to re-plan all the time. All in all, I would say it's worth a try.

