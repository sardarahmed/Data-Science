Q:

Few basic questions regarding some ROS basic code

I have gone through the basic ROS tutorial but I am not still getting some parts of it. Could someone please provide me some explanations about them.
My confusions:

Why most of the time I see, the way people who are embracing object-oriented paradigm code does not invoke a specific or every member function, instead, they just instantiate an object, then call ros::spin() and done (eg. a code found here)
What is the use of ros::spin() and its effect of using it to the callback function?
Why people tend to use callback function a lot, what is pros of it and when is it appropriate to utilize it?
Can in a class contain more than one callback function?

Thanks in advance..

Originally posted by alfa_80 on ROS Answers with karma: 1053 on 2011-12-16
Post score: 1

A:

Using a class is a convenient way of encapsulating the code and of having persistent storage across callback invocations.  Generally, subscriptions are set up in the constructor for the class.  The callbacks are triggered by incoming messages, so no explicit calls to them have to be made.
ros::spin() gives control over to ROS, and waits until the node shuts down.
Callbacks are one of the main design elements of ROS code.  This is the only way to respond to messages coming in on topics.
Yes, although you will need to subscribe to a topic for each of the callbacks you want to be active.

Originally posted by Bill Smart with karma: 1263 on 2011-12-16
This answer was ACCEPTED on the original site
Post score: 4

Original comments
Comment by alfa_80 on 2011-12-17:
@Bill Smart: If you can help me on this, kindly answer here (http://answers.ros.org/question/3355/some-functions-are-not-called-and-rosspin-issue)
Comment by alfa_80 on 2011-12-16:
@Bill Smart: If I declare one of the methods not as a callback function, will it be invoked implicitly? I just understand, I could be the case one of my methods not called, maybe it's not of callback one, am I right in this regard?
Comment by alfa_80 on 2011-12-16:
Yes, it exists, perhaps other reasons could be in my case. Thanks a lot anyway.
Comment by Bill Smart on 2011-12-16:
You should make sure that messages are actually being published on the topic you're subscribed to.  Calling the function explicitly won't make sense, since the message is passed to the function by the callback mechanism.  Calling it explicitly, you don't have the message to supply as a parameter.
Comment by alfa_80 on 2011-12-16:
Regarding no.1, the strange thing is that when I don't call explicitly a member function that is supposed to callback subscribing some messages on a topic, it does not work. It seems that, sometimes, I need to explicitly call it. What is the possible culprit?

