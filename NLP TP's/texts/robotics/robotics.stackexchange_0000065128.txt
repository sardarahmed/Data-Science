Q:

Ros timing issue

We did a simple code to subscribe to laser ranges and velocity of a robot in ros stage. But the order of execution of the functions seems to be different. Is this a problem in timing? The python code and output is given below.
CODE:
 #!/usr/bin/env python

import rospy                           
import sensor_msgs.msg
from geometry_msgs.msg import Twist

ranges = []

def start():
    rospy.init_node('robot_values', anonymous = True)
    
def laser_scanner():
    rospy.Subscriber('base_scan', sensor_msgs.msg.LaserScan,laser_processor)
    
def laser_processor(data):
    global ranges
    ranges = data.ranges
    print "ranges[0] = ",ranges[0]
    print "ranges[1] = ",ranges[1]

def robot_mon():
    rospy.Subscriber('cmd_vel', Twist, robot_velocity)

def robot_velocity(data):
    all_velocities = data
    linear_velocity = all_velocities.linear.x
    angular_velocity = all_velocities.angular.z
    print "linear_velocity = ",linear_velocity 
    print "\n"
    
if __name__ == '__main__':
    start()
    laser_scanner()
    robot_mon()
    rospy.spin()

OUTPUT:
ranges[0] =  5.0
ranges[1] =  5.0
ranges[0] =  5.0
ranges[1] =  5.0
linear_velocity =  0.044

ranges[0] =  5.0
ranges[1] =  5.0
linear_velocity =  0.044

linear_velocity =  0.044

ranges[0] =  5.0
ranges[1] =  5.0
linear_velocity =  0.044

ranges[0] =  5.0
ranges[1] =  5.0
ranges[0] =  5.0
ranges[1] =  5.0
linear_velocity =  0.044

Originally posted by robospace on ROS Answers with karma: 23 on 2015-01-13
Post score: 0

A:

Depending on how the data you subscribe to is published, you might get some jitter in the order of how your callbacks are called. You should not rely on the order in which your callbacks are called too much, as ROS communication does not provide strict guarantees here.
For instance, if you transmit data over WiFi a small message that originally got published after a bigger message might arrive at another node earlier due to packet loss or latency.

Originally posted by Stefan Kohlbrecher with karma: 24361 on 2015-01-13
This answer was ACCEPTED on the original site
Post score: 4

Original comments
Comment by robospace on 2015-01-13:
Thanks for the reply. Is there any way to correct it using Time in ROS. For example, by selecting a rate at which we subscribe to the different topics.
Comment by Stefan Kohlbrecher on 2015-01-15:
Most messages contain have a "stamp" field in the standardized header which can (and should) be used to do timestamp based operations. You cannot specify a "subscription rate", but you can republish to another topic at slower rate or do processing in your callback and throw away messages.
Comment by robospace on 2015-01-15:
Is there any examples showing the use of the "stamp" field of the messages?

