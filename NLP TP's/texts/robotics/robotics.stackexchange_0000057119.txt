Q:

Using IKFast with ROS

I am trying to do exactly as this other question, which is moving the nao arms using cartesian coordinates. I did follow AHormung answer and setup IKFast with MoveIt for both my nao's arms. My problem is, how do I use the resulting plugin/cpp generated with IKFast with ROS?
In the previous question, he suggested to "feed the results into the nao_controller node, probably with some lightweight conversion of messages.", but I am not sure of what it clearly means.

Originally posted by TopSecret on ROS Answers with karma: 37 on 2014-02-07
Post score: 3

Original comments
Comment by Martin Günther on 2014-02-10:
Which ROS distro are you using? Are you (planning on) using arm_navigation, MoveIt or something else?
Comment by TopSecret on 2014-02-11:
I am using Hydro. I wasn't planning on using any of these at the time I posted the question, but now I also want to use OMPL. In this case, I'd like to use both with MoveIt and not arm_navigation.

A:

Since you're using Hydro, arm_navigation is out of the question (it doesn't exist in Hydro any more). Instead, use MoveIt (it's the successor of arm_navigation). Since MoveIt is the future, I'd have recommended that anyway.
There is a good tutorial on how to generate a IKFast plugin for MoveIt here: http://docs.ros.org/hydro/api/moveit_ikfast/html/doc/ikfast_tutorial.html. Before you can do that tutorial however, you'll need to create a moveit config package for the nao. Just follow the "Integrating a new robot with MoveIt!" section of the MoveIt tutorials. There already seems to be a nao_moveit_config created by some very competent people, so probably you can also just use that one.
Once you have a working nao_moveit_config package, follow the first tutorial I linked to to see how to integrate the generated IKFast plugin.

Edit in response to TopSecret's comment:

Maybe I simply misunderstood what IKFast does. I tought I could use the plugin/cpp in a ROS node to get super fast inverse kinematic for my robot by calling a function or something like that. Is it possible to use it directly form C++/python code?

You are right, the generated IKFast solver is just that: a class that gives you super fast IK. The IKFast MoveIt plugin wraps that generated code so it can be used from MoveIt. Your moveit_ikfast package compiles that plugin into a shared library and exports it, and you can configure MoveIt to import and use it.
I think there are three ways you can get IK from your node:

Start MoveIt and call the provided /compute_ik ROS service. (Make sure your move_group.launch includes the move_group/MoveGroupKinematicsService capability.) Advantages: super easy to implement, and you'll also get collision-aware IK (I think). Disadvantage: If you want thousands of IK calls per second, the ROS service call will slow you down a lot (which isn't the point of having IKFast, is it?). For the odd IK call now and then this is okay.
The hackish version: Simply copy your IKFast solver into your own package and try calling the provided functions from your code there.
Figure out how MoveIt includes the plugin, and mimic that. Seems the cleanest way to do it.

I don't have any hands-on experience with (2) and (3), so if you want to go down that road, your best bet is to ask your question on the moveit google group, there the real gurus can help you. Perhaps provide a link to this question.

Originally posted by Martin Günther with karma: 11816 on 2014-02-11
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by TopSecret on 2014-02-12:
As I mentionned in my question, I already did the IKFast/MoveIt setup, although I used nao_description urdf and MoveIt setup assisstant instead of the nao_moveit_config you pointed me. I also generated the IKFast plugin/cpp, but I don't know what to do with it. However I skipped parts of the MoveIt tutorials.
Comment by Martin Günther on 2014-02-12:
So you've already created your <moveit_ik_plugin_pkg> and entered it into your nao_moveit_config, as explained in the tutorial? And you can move the arm around using RViz + MoveIt? Then you're done. If not, please be more specific at what step of the tutorial you have problems.
Comment by TopSecret on 2014-02-12:
Yes, I can move it in RViz. Maybe I simply misunderstood what IKFast does. I tought I could use the plugin/cpp in a ROS node to get super fast inverse kinematic for my robot by calling a function or something like that. Is it possible to use it directly form C++/python code?
Comment by severin on 2014-02-14:
@TopSecret: if the setup (both move_it configuration and IKFast) works well for you, would you mind sharing it, so we can make it available to everyone on https://github.com/ros-nao ?
Comment by TopSecret on 2014-02-14:
Thank you Martin. I don't have much time to work on this right now to verify your proposed solutions, but it seems to be the answer I was looking for. @severin: If I succeed to implement what Martin suggested in the future, I will certainly share it with the community for others to use.
Comment by puru on 2016-11-30:
Hi!!
I am trying to use the rosservice /compute_ik provided by move it. I am not sure what arguments to pass for the rosservice call. Can you please tell me how to do it?
Thanks!
Comment by JarvisRobot on 2017-07-11:
I have the generated IKFast cpp solver, but I don't know how to use it as a function

