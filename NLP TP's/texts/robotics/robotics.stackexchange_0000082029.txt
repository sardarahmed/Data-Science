Q:

RViz throws "undefined symbol" exception when including from include folder

Rough Description: (intro / tl;dr)
The Problem is that when i move my header files for an RViz panel plugin to a dedicated include folder, the project will compile, but rviz will throw a "Poco exception = ...my_panel.so: undefined symbol: _ZTVN16my_panel14MyPanelE" Exception.
more precisely, this happens when i change the folder structure from:
meta_package/my_panel/my_panel.h
meta_package/my_panel/my_panel.cpp (including the header with "#include my_panel.h")

to:
meta_package/my_panel/include/meta_package/my_panel.h
meta_package/my_panel/src/my_panel.cpp (including the header with "#include <my_panel/my_panel.h>")

Project in Detail:
meta_package/my_panel/include/meta_package/my_panel.h , former @ meta_package/my_panel/my_panel.h
#ifndef MY_PANEL_H
#define MY_PANEL_H

#ifndef Q_MOC_RUN
#include <ros/ros.h>

#include <rviz/panel.h>
#endif //Q_MOC_RUN

class QLineEdit;

namespace my_panel
{

class MyPanel: public rviz::Panel
{
 
Q_OBJECT
public:
  
    MyPanel(QWidget *parent = 0);
    
    virtual void load( const rviz::Config& config);
    virtual void save( rviz::Config config ) const;
  
public Q_SLOTS:
  
    void savePathFile (const QString& save_file_name);
    void loadPathFile (const QString& load_file_name); //"const QString& " ?
    
    
protected Q_SLOTS:
    
    void dumpParamServer();
    void clearParamServer();
    
protected:

    QString open_file;
    QString save_file_name;
    QString load_file_name;
    QLineEdit* save_file_editor;
    QLineEdit* load_file_editor;
    ros::NodeHandle nh;
    
};
} //end namespace my_panel

#endif //MY_PANEL_H

meta_package/panel/src/my_panel.cpp , former @ meta_package/my_panel/my_panel.cpp
#include <stdio.h>
#include <QPainter>
#include <QLineEdit>
#include <QHBoxLayout>
#include <QVBoxLayout>
#include <QLabel>

#include <my_panel/my_panel.h> //former #include "my_panel.h"

namespace my_panel 
{

MyPanel::MyPanel( QWidget *parent )
  : rviz::Panel( parent )
 {
    
  QHBoxLayout* save_file_layout = new QHBoxLayout;
  save_file_layout->addWidget( new QLabel( "Save File with Name:" ));
  save_file_editor = new QLineEdit;
  save_file_layout->addWidget( save_file_editor );
  
  QHBoxLayout* load_file_layout = new QHBoxLayout;
  load_file_layout->addWidget( new QLabel( "Load File with Name:" ));
  load_file_editor = new QLineEdit;
  load_file_layout->addWidget( load_file_editor );
  
  QVBoxLayout* layout = new QVBoxLayout;
  layout->addLayout( load_file_layout );
  layout->addLayout( save_file_layout );
  setLayout( layout );
 }
 
void MyPanel::savePathFile(const QString& save_file_name)
{
  //TODO
}
  
void MyPanel::loadPathFile(const QString& load_file_name)
{
  //TODO
}
  
void MyPanel::dumpParamServer()
{
  //TODO
}
  
void MyPanel::clearParamServer()
{
  //TODO   
}

void MyPanel::save( rviz::Config config ) const
{
  rviz::Panel::save( config );
  //config.mapSetValue( "String", suff );
}

// Load all configuration data for this panel from the given Config object.
void MyPanel::load( const rviz::Config& config )
{
  rviz::Panel::load( config );
  /*  if( config.mapGetString( "String", &stuff ))
  {
    updateStuff();
  }*/
}

} //end namespace my_panel
#include <pluginlib/class_list_macros.h>
PLUGINLIB_EXPORT_CLASS(my_panel::MyPanel,rviz::Panel )

meta_package/my_panel/CMakeLists.txt
cmake_minimum_required(VERSION 2.8.3)
project(my_panel)

find_package(catkin REQUIRED COMPONENTS rviz)
catkin_package()
include_directories(${catkin_INCLUDE_DIRS} include)
link_directories(${catkin_LIBRARY_DIRS})

## This setting causes Qt's "MOC" generation to happen automatically.
set(CMAKE_AUTOMOC ON)

## This plugin includes Qt widgets, so we must include Qt.
## We'll use the version that rviz used so they are compatible.
if(rviz_QT_VERSION VERSION_LESS "5")
  message(STATUS "Using Qt4 based on the rviz_QT_VERSION: ${rviz_QT_VERSION}")
  find_package(Qt4 ${rviz_QT_VERSION} EXACT REQUIRED QtCore QtGui)
  ## pull in all required include dirs, define QT_LIBRARIES, etc.
  include(${QT_USE_FILE})
else()
  message(STATUS "Using Qt5 based on the rviz_QT_VERSION: ${rviz_QT_VERSION}")
  find_package(Qt5 ${rviz_QT_VERSION} EXACT REQUIRED Core Widgets)
  ## make target_link_libraries(${QT_LIBRARIES}) pull in all required dependencies
  set(QT_LIBRARIES Qt5::Widgets)
endif()

## The tutorial prefers the Qt signals and slots to avoid defining "emit",
##"slots", etc because they can conflict with boost signals, so define 
## QT_NO_KEYWORDS here.
add_definitions(-DQT_NO_KEYWORDS)

set(HDR_FILES
    include/my_panel/my_panel.h
)

set(SRC_FILES
    src/my_panel.cpp
)

qt_wrap_cpp(${PROJECT_NAME} ${SRC_FILES} ${HDR_FILES})

## An rviz plugin is just a shared library, so here we declare the
## library to be called ``${PROJECT_NAME}`` and specify the list of
## source files we collected above in ``${SRC_FILES}``.
add_library(${PROJECT_NAME} ${SRC_FILES})

## Link the myviz executable with whatever Qt libraries have been defined by
## the ``find_package(Qt4 ...)`` line above, or by the
## ``set(QT_LIBRARIES Qt5::Widgets)``, and with whatever libraries
## catkin has included.
target_link_libraries(${PROJECT_NAME} ${QT_LIBRARIES} ${catkin_LIBRARIES})

## Mark executables and/or libraries for installation
install(TARGETS ${PROJECT_NAME}
  ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
)

## Mark cpp header files for installation
install(DIRECTORY include/${PROJECT_NAME}/
  DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
  FILES_MATCHING PATTERN "*.h"
)
    
install(FILES
  plugin_description.xml
  DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION})

install(DIRECTORY media/
  DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}/media)

install(DIRECTORY icons/
  DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}/icons)

meta_package/my_panel/package.xml
<package>
  <name>my_panel</name>
  <version>0.10.1</version>
  <description>
     RViz Plugin for My project
  </description>
  <maintainer email="My@email.example">MyName</maintainer>
  <license>BSD</license>

  <author>MyName</author>

  <buildtool_depend>catkin</buildtool_depend>

  <build_depend>qtbase5-dev</build_depend>
  <build_depend>rviz</build_depend>

  <run_depend>libqt5-core</run_depend>
  <run_depend>libqt5-gui</run_depend>
  <run_depend>libqt5-widgets</run_depend>
  <run_depend>rviz</run_depend>

  <export>
      <rosdoc config="${prefix}/rvizdoc.yaml"/>
      <rviz plugin="${prefix}/plugin_description.xml"/>
  </export>
</package>

meta_package/my_panel/plugin_description.xml
<library path="lib/libmy_panel">
  <class name="my_panel/MyPanel"
         type="my_panel::MyPanel"
         base_class_type="rviz::Panel">
    <description>
      A RViz plugin panel for the My project
    </description>
  </class>
</library>

Error Message:
[ERROR] [1501182670.698822643]: PluginlibFactory: The plugin for class 'my_panel/MyPanel' failed to load.  Error: Failed to load library /home/ros/ros/devel/lib//libmy_panel.so. Make sure that you are calling the PLUGINLIB_EXPORT_CLASS macro in the library code, and that names are consistent between this macro and your XML. Error string: Could not load library (Poco exception = /home/ros/ros/devel/lib//libmy_panel.so: undefined symbol: _ZTVN16my_panel14MyPanelE)

Thanks in advance!

Originally posted by G on ROS Answers with karma: 46 on 2017-07-27
Post score: 0

Original comments
Comment by ahendrix on 2017-07-29:
I remember seeing a similar question recently, and I think it ended up being a problem with cmake's automoc no longer running MOC on the headers when they were in a different directory.
Comment by ahendrix on 2017-07-29:
http://answers.ros.org/question/265610/undefined-reference-to-vtable-for-myviz/
Comment by G on 2017-07-30:
@ahendrix thanks for the suggestion! followed your link and their answers, so i added this to the CMakeLists.txt: "qt_wrap_cpp(${PROJECT_NAME} ${SRC_FILES} ${HDR_FILES})". pittily didn't work, and was the only suggestion except putting headers into the src folder. am i doing it wrong?

A:

I simply needed to add my new "HDR" macro to the add_library function!
in total:
set(HDR_FILES
    include/heika_panel_beta/heika_panel_beta.h
)

set(SRC_FILES
  src/heika_panel_beta.cpp
)

add_library(${PROJECT_NAME} ${SRC_FILES} ${HDR_FILES})

Works now! Thanks to everyone!

Originally posted by G with karma: 46 on 2017-08-06
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by jayess on 2017-08-07:
If this solved your problem, you should mark it as the correct answer.

