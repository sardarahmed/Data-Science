Q:

Using CHOMP in arm_navigation

Hi there!
I'm currently trying to get the CHOMP motion planner working for my robot arm using arm_navigation. So far with no luck, because the planner crashes here at line 795 (@chomp_motion_planner/src/chomp_optimizer.cpp):
00791       const string& jointName = joint_names_[joint];
00792       const KinematicModel::JointModel* jointModel = modelGroup->getJointModel(jointName);
00793       const KinematicModel::RevoluteJointModel* revoluteJoint = dynamic_cast<const KinematicModel::RevoluteJointModel*>(jointModel);
00794 
00795       if(revoluteJoint->continuous_)
00796       {
00797         continue;
00798       }

Crashing here makes sense, since my arm contains prismatic joints.
Before I start modifying the code, I would like to ask:

Is anybody currently using this planner with arm_navigation?
Did someone successfully apply this planner to arms containing joints other than revolute ones?
Is there any reason, why the planner is limited to revolute joints? E.g. Is the planner itself not capable of handling joints other than revolute ones?

Thanks!

Originally posted by bit-pirate on ROS Answers with karma: 2062 on 2012-07-10
Post score: 2

A:

I've used CHOMP with many arms with all revolute joints, and it should work with such arms.  I've never used it with prismatic joints, but don't know of any reason why it shouldn't work.  I bet you can at least get to point where the code doesn't crash with not much effort - it should be clear pretty quickly if things are working or not.  I'm happy to accept a patch if you get things functional.

Originally posted by egiljones with karma: 2031 on 2012-07-17
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by bit-pirate on 2012-07-29:
I filed a ticket plus patch: https://kforge.ros.org/armnavigation/trac/ticket/8. Apparently, there was just one missing check. I have been using CHOMP with this patch for a while now and couldn't find other bugs related to prismatic joints.

