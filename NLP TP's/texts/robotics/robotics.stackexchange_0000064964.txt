Q:

Dependancy Problem Packaging c library

Hey there.
Unfortunately I have another problem:
With the dependencies in the Cmakelist:
cmake_minimum_required(VERSION 2.8)
project(grampc)

find_package(catkin REQUIRED COMPONENTS roscpp rospy std_msgs message_runtime rosbag)

add_service_files(FILES grampc_IO.srv)
generate_messages(DEPENDENCIES std_msgs)

catkin_package(
  CATKIN_DEPENDS roscpp rospy std_msgs message_runtime message_generation rosbag
)

include_directories(
  include ${catkin_INCLUDE_DIRS}
)

# define libgrampc sources
set(
  grampc_SRCS

  src/euler1.c
  src/eulermod2.c
  src/grampc_init.c
  src/grampc_mess.c
  src/grampc_run.c
  src/grampc_setopt.c
  src/grampc_setparam.c
  src/heun2.c
  src/probfct.c
  src/ruku45.c
)

# define a libgrampc target
add_library(grampc ${grampc_SRCS})

# define a grampc_node target
add_executable(grampc_node src/grampc.cpp)

# now link our node to the library, and all the libraries from the other pkgs
target_link_libraries(grampc_node grampc ${catkin_LIBRARIES})

add_dependencies(grampc_node grampc_gencpp)

When I execute: catkin_make grampc, than the pkg compiles:
####
#### Running command: "make grampc -j4 -l4" in "/home/dentler/Workspace/catkin/build"
####
[100%] Built target grampc

But when I build the whole workspace with catkin_make I have the same issue like before?!
Linking CXX executable /home/dentler/Workspace/catkin/devel/lib/grampc/grampc_node
[100%] Built target record
[100%] Built target poller
CMakeFiles/grampc_node.dir/src/grampc.cpp.o: In function `grampc_IO_callback(grampc::grampc_IORequest_<std::allocator<void> >&, grampc::grampc_IOResponse_<std::allocator<void> >&)':
grampc.cpp:(.text+0x88): undefined reference to `grampc_run(typeGRAMPC*)'
grampc.cpp:(.text+0xaa): undefined reference to `grampc_setparam_vector(typeGRAMPC*, char*, double*)'
CMakeFiles/grampc_node.dir/src/grampc.cpp.o: In function `main':
grampc.cpp:(.text+0x45e): undefined reference to `grampc_init(typeGRAMPC**)'
grampc.cpp:(.text+0x477): undefined reference to `grampc_setopt_string(typeGRAMPC*, char*, char*)'
grampc.cpp:(.text+0x4a4): undefined reference to `grampc_setopt_real(typeGRAMPC*, char*, double)'
grampc.cpp:(.text+0x4d1): undefined reference to `grampc_setopt_real(typeGRAMPC*, char*, double)'
grampc.cpp:(.text+0x4ea): undefined reference to `grampc_setopt_string(typeGRAMPC*, char*, char*)'
grampc.cpp:(.text+0x517): undefined reference to `grampc_setopt_real(typeGRAMPC*, char*, double)'
grampc.cpp:(.text+0x544): undefined reference to `grampc_setopt_real(typeGRAMPC*, char*, double)'
grampc.cpp:(.text+0x571): undefined reference to `grampc_setopt_real(typeGRAMPC*, char*, double)'
grampc.cpp:(.text+0x59e): undefined reference to `grampc_setopt_real(typeGRAMPC*, char*, double)'
grampc.cpp:(.text+0x5cb): undefined reference to `grampc_setopt_real(typeGRAMPC*, char*, double)'
CMakeFiles/grampc_node.dir/src/grampc.cpp.o:grampc.cpp:(.text+0x5f8): more undefined references to `grampc_setopt_real(typeGRAMPC*, char*, double)' follow
CMakeFiles/grampc_node.dir/src/grampc.cpp.o: In function `main':
grampc.cpp:(.text+0x607): undefined reference to `grampc_printopt(typeGRAMPC*)'
grampc.cpp:(.text+0x631): undefined reference to `grampc_setparam_real(typeGRAMPC*, char*, double)'
grampc.cpp:(.text+0x65b): undefined reference to `grampc_setparam_real(typeGRAMPC*, char*, double)'
grampc.cpp:(.text+0x675): undefined reference to `grampc_setparam_int(typeGRAMPC*, char*, int)'
grampc.cpp:(.text+0x690): undefined reference to `grampc_setparam_vector(typeGRAMPC*, char*, double*)'
grampc.cpp:(.text+0x6ab): undefined reference to `grampc_setparam_vector(typeGRAMPC*, char*, double*)'
grampc.cpp:(.text+0x6c5): undefined reference to `grampc_setparam_int(typeGRAMPC*, char*, int)'
grampc.cpp:(.text+0x6e0): undefined reference to `grampc_setparam_vector(typeGRAMPC*, char*, double*)'
grampc.cpp:(.text+0x6fb): undefined reference to `grampc_setparam_vector(typeGRAMPC*, char*, double*)'
grampc.cpp:(.text+0x716): undefined reference to `grampc_setparam_vector(typeGRAMPC*, char*, double*)'
grampc.cpp:(.text+0x731): undefined reference to `grampc_setparam_vector(typeGRAMPC*, char*, double*)'
grampc.cpp:(.text+0x74c): undefined reference to `grampc_setparam_vector(typeGRAMPC*, char*, double*)'
grampc.cpp:(.text+0x75b): undefined reference to `grampc_printparam(typeGRAMPC*)'
collect2: error: ld returned 1 exit status
make[2]: *** [/home/dentler/Workspace/catkin/devel/lib/grampc/grampc_node] Error 1
make[1]: *** [grampc/CMakeFiles/grampc_node.dir/all] Error 2
make: *** [all] Error 2
Invoking "make" failed

Do you have any ideas?
Thanks in advance.
==================================================================
Thanks a lot for your efforts.
Unfortunately I still haven't found the solution
You are completely right Dirk Thomas .
Also cleaning and rebuilding the whole workspace did not effect the result.
The problem I don't understand is:
If I build the executable (grampc_node) how can I ensure that it gets all the headers (e.g. euler1.h, usw.). I thought they are automatically linked with my the commands:
target_link_libraries(grampc_node grampc ${catkin_LIBRARIES})

I also tried to link them via:
# define a libgrampc target
add_library(grampc ${grampc_SRCS})

target_link_libraries(grampc ${catkin_LIBRARIES})

# define a grampc_node target
add_executable(grampc_node src/grampc.cpp)

...
and got the same result.
Task:
in my grampc_node i want to simply include the headers represented by the libraries grampc_SRCS (which are simple  c++ headers).
This node should be accessable via ros. I don't really need the grampc_SRCS libraries outside of the package.
How can I make the link?
Thanks again in advance!

Originally posted by JanOr on ROS Answers with karma: 170 on 2015-01-05
Post score: 0

Original comments
Comment by Dirk Thomas on 2015-01-07:
Please do not overwrite your previous question with a new one. Either add information to your question or create a new question.
Comment by gvdhoorn on 2015-01-08:
In addition to what @Dirk Thomas said: try cleaning out your current build/ and devel/ directories (as in: delete them), then invoke catkin_make again. You cannot use catkin_make as a 1-on-1 substitute for regular make.
Comment by gvdhoorn on 2015-01-12:
@JanOr: if you make your current pkg available somewhere, I can take a look.
Comment by JanOr on 2015-01-14:
Thanks to your help, I learned a lot.
As I changed the problem specification. I will open a question more specific soon.
Thx
Comment by JanOr on 2015-01-14:
New question:
http://answers.ros.org/question/200939/communication-node-with-c-funktion-as-executable-in-catkin/

A:

What is the purpose of the Makefile? Are you trying to do a hybrid package that can be compiled using both CMak/catkin & make? Catkin pkgs don't use/have a Makefile.
Also:

[..] With $ make grampc in - catkin/src i get: [..]

Unless you are really doing some hybrid thing, I wouldn't do that. This doesn't look like a normal cmake / catkin workflow to me.
From what I can gather from your OP:

remove grampc/Makefile
remove any other 'left overs' from your previous build attempts in the src dir
cd /path/to/catkin/
catkin_make -j1

Now see whether you get any more errors, and try to solve them.
The -j1 is just for debugging your build infrastructure, it disables parallel building, which can get confusing when trying to fix things.

Edit:
Try something like this. I've assumed there is something called grampc_node.cpp, as it seems like you are trying to create a ROS node, that uses libgrampc to do something. If not (and this is a library-only pkg), just remove the add_executable(..) (and associated target_link_libraries(..)) statement.
In general, you'll want to link against ${catkin_LIBRARIES}, which will contain all libraries exported by the packages that you specify in your find_package(catkin REQUIRED COMPONENTS ..) statement. You were only linking roscpp, hence the linker errors about rosbag fi.
cmake_minimum_required(VERSION 2.8)
project(grampc)

find_package(catkin REQUIRED COMPONENTS roscpp rospy std_msgs genmsg message_runtime rosbag)

add_service_files(FILES grampc_IO.srv)
generate_messages(DEPENDENCIES std_msgs)

catkin_package(
  CATKIN_DEPENDS roscpp rospy std_msgs genmsg message_runtime message_generation rosbag
)

include_directories(
  include ${catkin_INCLUDE_DIRS}
)

# define libgrampc sources
set(
  grampc_SRCS

  src/euler1.c
  src/eulermod2.c
  src/grampc_init.c
  src/grampc_mess.c
  src/grampc_run.c
  src/grampc_setopt.c
  src/grampc_setparam.c
  src/heun2.c
  src/probfct.c
  src/ruku45.c
)

# define a libgrampc target
add_library(grampc ${grampc_SRCS})

# define a grampc_node target
add_executable(grampc_node src/grampc_node.cpp)

# now link our node to the library, and all the libraries from the other pkgs
target_link_libraries(grampc_node grampc ${catkin_LIBRARIES})

add_dependencies(grampc_node grampc_gencpp)

This is untested, so this could still fail, but at least it should be closer to what you need.
Also: make sure to check your (catkin) dependency lists, I don't know which packages you really need.

Originally posted by gvdhoorn with karma: 86574 on 2015-01-05
This answer was ACCEPTED on the original site
Post score: 1

