Q:

Incorporating ROS without using catkin for C++ projects

I've done reading the ROS tutorials for beginners. What I would like to do next is to use ROS classes inside my C++ projects. I usually use Qt for this matter. ROS heavily uses catkin tools which prevents me from easily incorporating its tools inside other C++ projects. How can I smartly mix CMakeLists generated by catkin to CMakeLists generated by Qt? I would like to use talker/listener example in GUI in Qt framework. Also, how can I know the dependencies of ROS for C++ projects? Any suggestions?

Originally posted by CroCo on ROS Answers with karma: 155 on 2020-11-13
Post score: 0

Original comments
Comment by gvdhoorn on 2020-11-13:
I'm not sure this is what the OP is looking for, but the go-to answer for "can I build ROS nodes without using Catkin" is typically a reference to gerkey/ros1_external_use.
And as a result of this discussion on ROS Discourse, @gerkey added the Writing a Simple Publisher and Subscriber (C++) (plain cmake) tutorial to the ROS wiki.
This might also provide some insight.

A:

Hello,
I had the same issue that you had. What I found is that ROS has all their C++ libraries under /opt/ros/[version]/lib. What you need to link to get ROS working is roscpp, rostime, rosconsole, roscpp_serialization, and boost_system. Include the ros headers to your project. They are under /opt/ros/[version]/include.
To make ROS recognize that you have a project place an xml file called package.xml and load it the basic data for it to work. Then you need to set a ROS package path to the directory above the project root.
For example if your project is under ~/git/my_ros_project you need to have the ROS_PACKAGE_PATH environment variable set to export ROS_PACKAGE_PATH=~/git:$ROS_PACKAGE_PATH. Then under the ~/git/my_ros_project you need an project.xml file.
You can checkout my repository for a relative decent template structure if you need help. https://git.root3287.site/Root3287/ROS-Template. Then look into the premake5.lua file and see how the project is set up. All that is currently missing is generating MSG and SRV files which could be generated by the rosrun gencpp gen_cpp.py command.
I hope this helps!
Edit 1: From the comments, if you installed ROS anywhere else, you need to change the /opt/ros to where ever you installed ros. Check comments.

Originally posted by Root3287 with karma: 16 on 2020-11-13
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by gvdhoorn on 2020-11-13:
While this is great, please do add this works for packages which have been installed in /opt/ros. Not for packages in user workspaces, or any other overlays.

