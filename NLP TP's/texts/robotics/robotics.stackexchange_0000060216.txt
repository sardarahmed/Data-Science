Q:

problems with ros loop iteration

Hi, I am having problems with the amount of time this loop iterates.
 #include <ros/ros.h>
#include <geometry_msgs/Twist.h>

class GoStraight{
public:
  GoStraight();

private:
  void callback(const ros::TimerEvent&);
  ros::NodeHandle ph_, nh_;
  ros::Publisher vel_pub_;
  geometry_msgs::Twist vel;
  ros::Timer timer_;

};

GoStraight::GoStraight(){
   vel_pub_ = ph_.advertise<geometry_msgs::Twist>(
    "/cmd_vel_mux/input/navi", 1);
   vel.angular.z = 0.0;
   vel.linear.x = .2;
   timer_ = nh_.createTimer(ros::Duration(3.0), &GoStraight::callback );
}

void callback(const ros::TimerEvent& event){
  
   vel_pub_.publish(vel);
  
  ROS_INFO_STREAM("Sending random velocity command:"
      << " linear=" << vel.linear.x
      << " angular=" << vel.angular.z);  

}

int main(int argc, char** argv){

  ros::init(argc, argv, "g_straight");
  GoStraight g_straight;
  ros::spin();

}

    this is the output that I get:
    [ INFO] [1403283564.623071038]: Sending random velocity command: linear=0.2 angular=0 at time =0.07
    [ INFO] [1403283564.723195177]: Sending random velocity command: linear=0.2 angular=0 at time =0.07
    [ INFO] [1403283564.823198861]: Sending random velocity command: linear=0.2 angular=0 at time =0.07
    [ INFO] [140328

3564.923198642]: Sending random velocity command: linear=0.2 angular=0 at time =0.07
[ INFO] [1403283565.023199258]: Sending random velocity command: linear=0.2 angular=0 at time =0.08
[ INFO] [1403283565.123149431]: Sending random velocity command: linear=0.2 angular=0 at time =0.08
[ INFO] [1403283565.223199416]: Sending random velocity command: linear=0.2 angular=0 at time =0.08
[ INFO] [1403283565.323155826]: Sending random velocity command: linear=0.2 angular=0 at time =0.08
[ INFO] [1403283565.423198781]: Sending random velocity command: linear=0.2 angular=0 at time =0.08
[ INFO] [1403283565.523200109]: Sending random velocity command: linear=0.2 angular=0 at time =0.08
[ INFO] [1403283565.623197323]: Sending random velocity command: linear=0.2 angular=0 at time =0.08
I would like an output that goes like this:
[ INFO] [1403283565.523200109]: Sending random velocity command: linear=0.2 angular=0 at time =0.0
[ INFO] [1403283565.623197323]: Sending random velocity command: linear=0.2 angular=0 at time =1.0
[ INFO] [1403283565.523200109]: Sending random velocity command: linear=0.2 angular=0 at time =2.0
[ INFO] [1403283565.623197323]: Sending random velocity command: linear=0.2 angular=0 at time =3.0
[ INFO] [1403283565.523200109]: Sending random velocity command: linear=0.2 angular=0 at time =4.0
[ INFO] [1403283565.623197323]: Sending random velocity command: linear=0.0 angular=0 at time =5.0

I am having a hard time understand how the rate.sleep() affects the speed that the ROS loop iterates and help is greatly appreciated.

Originally posted by choog on ROS Answers with karma: 101 on 2014-06-20
Post score: 0

A:

If you want a random velocity command being sent every second only, then set your ros::Rate rate(10) to rate(1) meaning it will be at 1hz and not 10hz. So it with happen 1 time every second, not ten like you were seeing before

Originally posted by l0g1x with karma: 1526 on 2014-06-20
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by choog on 2014-06-20:
oops I forgot to change the ROS INFO text but its not a random velocity. Either way I tried that, where it only loops at 1 hz, but then it still proceeds with a similar output except it iterates slower.
Comment by l0g1x on 2014-08-05:
Is an update happening around every 3 seconds? If so, that means your timer is set to fire every 3 seconds. Set this value to say 0.1 instead of 3, and you should get a message every 1/10th of a second (10hz). Hope this helped.
Comment by choog on 2014-08-05:
I figured this out. Thank you though.
Comment by l0g1x on 2014-08-05:
What was the issue?
Comment by choog on 2014-08-05:
I didn't use a call back function anymore and I just used a regular while(ros::ok()) to have the loop iterate at the rate that I wanted. I also implemented ros::time to control the rate that the actual messages were published to the topic.

