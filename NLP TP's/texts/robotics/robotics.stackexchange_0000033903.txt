Q:

urdf in rviz lags

Hi,
I am seeing my urdf model, and all tf frames specified by robot_state_publisher, lag behind the actual robot motion (which the transform /odom->/base_footprint appears to track perfectly).  The lag is around 5 seconds.
I have also tried with a simplified .urdf model that uses only fixed joints (and thus removes /joint_state publications as a potential cause).  No help.
I have set the ~publish_frequency param of robot_state_publisher to 10 hz, and I have a static_transform_publisher publishing at 10 hz to link the top-level urdf frame (/chassis) to the /base_footprint frame published by the rest of the localization system.
Any bright ideas?  Thanks!
PS - using diamondback and Ubuntu 10.10

Originally posted by Nick Armstrong-Crews on ROS Answers with karma: 481 on 2011-08-26
Post score: 0

Original comments
Comment by AHornung on 2011-08-26:
Is all running on the same machine, or are parts running on a laptop attached to a robot? Are all involved clocks in sync (ntp)?
Comment by David Lu on 2011-08-26:
Is this over a wireless connection?
Comment by Nick Armstrong-Crews on 2011-08-26:
Thanks for pointer, but... Nope, I actually think my problem might be a direct result of the fix described there; all elements of my robot model move together atomically, and all with the same 5-second lag. I suppose I should double-check tf pub rates with tf_monitor...
Comment by Eric Perko on 2011-08-26:
Is your behavior similar to that described here: http://answers.ros.org/question/110/has-there-been-progress-for-urdf-transform-jitter ?

A:

Yup, good suggestions!  Indeed, I am operating over wifi, and today I don't see the problem (after machines have power cycled and been connected to the internet).
Diagnosis: must have been a time sync issue.
Thanks!

Originally posted by Nick Armstrong-Crews with karma: 481 on 2011-08-26
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by Nick Armstrong-Crews on 2011-08-26:
I also want to note that it didn't matter on which machine I ran robot_state_publisher; as long as at least one node is listening to /tf topic on each machine, all those transforms get published and sent over the wire and timestamps compared. So this stymied my initial debug efforts. Watch out!

