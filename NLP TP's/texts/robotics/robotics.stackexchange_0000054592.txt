Q:

Launch setup using tf_prefix broken in hydro

We used a launch setup like this in groovy:
<node name="ghost_robot_publisher" pkg="robot_state_publisher" type="state_publisher" respawn="true">
  <remap from="robot_description" to="ghost_robot_description" />
  <remap from="joint_states" to="/ghost_robot/joint_states" />
  <param name="tf_prefix" value="/ghost_robot_model"/>
</node>

This worked flawlessly in groovy, providing a second robot model in tf, under the "/ghost_robot_model" namespace using the tf_prefix mechanism. With the dropped support of tf_prefix in hydro, everything starts as expected, but unfortunately, the tf data published does not use the namespace anymore, which means that both "normal" and "ghost" robot tf data are published to "normal" tf, resulting in a robot model twitching around as the tf data from both models are fighting each other.
What is the (or a) workaround for this?

Originally posted by Stefan Kohlbrecher on ROS Answers with karma: 24361 on 2013-10-04
Post score: 1

Original comments
Comment by dornhege on 2013-10-04:
tf_prefix support was dropped in hydro? That doesn't sound good. How are multi-robot applications supposed to work?
Comment by dornhege on 2013-10-04:
Just checked this: http://wiki.ros.org/hydro/Migration#tf2.2BAC8-Migration.Removal_of_support_for_tf_prefix Can you just remove the '/' before the prefix? When you check the raw tf messages and the frame_ids aren't prefixed, I'd assume it's a bug, where robot_state_publisher doesn't call tf::resolve
Comment by Stefan Kohlbrecher on 2013-10-04:
Tried without '/' before prefix, still does not work. Guess IÂ´m gonna open a ticket for robot_state_publisher, unless someone else chimes in in the next hours.

A:

Having robot_state_publisher apply the tf_prefix before publishing is the best solution.

Originally posted by tfoote with karma: 58457 on 2013-10-04
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by Stefan Kohlbrecher on 2013-10-04:
I guess so :) So you are suggesting changing robot_state_publisher code (or opening a ticket against it), correct? Asking because I don't see a way to do that using the ROS API.
Comment by tfoote on 2013-10-05:
Yes, it will require a code change to robot_state_publisher to make this happen.  This was really the only case successfully covered by tf_prefix before. All the others required implementers to be tf_prefix aware.

