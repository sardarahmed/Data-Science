Q:

How to get list of all tf frames programatically?

Hi all,
I have a question on how to obtain tf frames in a ros node (preferrably Python).
I am aware of the method tf2_ros.Buffer.lookup_transform(), however, one has to specify source and target frame for that.
Lets say I have an array of known markers, but only a subset of them are detected by the camera. I want to know which of these markers are detected by looking at the existing tf frames. Is there a more elegant way to do so instead of looping over all possible markers and try to lookup the transform in a try catch block?
Thanks in advance!
P.S I am using kinetic on Ubuntu 16.04

EDIT:
In the tutorial TfUsingPython I found the method allFramesAsString() but it seems to use tf, not tf2. would there be an equivalence in tf2? Or is it generally a bad practice to mix the use of tf and tf2?

Originally posted by rfn123 on ROS Answers with karma: 146 on 2020-03-30
Post score: 0

A:

It seems #q261460 is at least a partial duplicate of your question.

In the tutorial TfUsingPython I found the method allFramesAsString() but it seems to use tf, not tf2. would there be an equivalence in tf2? Or is it generally a bad practice to mix the use of tf and tf2?

TF has been implemented on-top of TF2 for quite some time now, so you cannot really "mix" them: it would all be using TF2 in the end.
As to the method you found: there is tf2::BufferCore::allFramesAsYAML(double current_time) const in TF2 (and allFramesAsStringNoLock() is available as well).
The Python API of TF2 is essentially a mirror of the C++ API, so you should be able to call that from Python as well (I have not verified this).

Originally posted by gvdhoorn with karma: 86574 on 2020-03-30
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by rfn123 on 2020-03-30:
Since the Python API is rather poorly documented, here is sth if someone has the same problem as me: After some further research I found some example usage of the Python API here: examples_tf2_py. Probably this still does not contain all methods of the C++ API, but imo it's a good start.

