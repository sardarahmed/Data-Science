Q:

cannot find follow_joint_trajectory topic in ur_robot_driver package

Hello everyone.
I have been stuck on that a few days, that's why, maybe even being a simple question, I decided to ask.
right now i have been running a UR10 with a personal project using the already deprecated ur_modern_driver package.
I found that, even being a great package, after calling a follow_joint_trajectory order ( in ur_ros_wrapper.cpp) there was no post-checks and automatically a setSucceeded call was sended(https://github.com/ros-industrial/ur_modern_driver/blob/master/src/ur_ros_wrapper.cpp#L230 ).
Due to the needs of my project, i wanted to solve that, but I decided to directly switch to the new and official ros driver for UR (ur_robot_driver) I tough it was a good idea also thinking in a future buy of a e-series robot.
The problem is that i would like to check how actually works the follow_joint_trajectory implementation but I am unable to find it. I am starting to think that, even the packagle clearly says it's compatible, the implementation is inside a dependency of the system.  If i do not find it, I am gonna work on checking using rostopic info command, but the robot have been (and will be, for a while) busy with production.
Thanks for any clue on that!

Originally posted by Solrac3589 on ROS Answers with karma: 187 on 2020-06-15
Post score: 0

A:

The problem is that i would like to check how actually works the follow_joint_trajectory implementation but I am unable to find it. I am starting to think that, even the packagle clearly says it's compatible, the implementation is inside a dependency of the system.

ur_robot_driver is a ros_control compatible hardware_interface.
This means the driver itself only implements the functionality needed to convert "ROS commands" to whatever the underlying hardware understands (in this case: the CB3 or e-Series controller).
With that in place, we can now use any of the available ros_control controllers, provided by ros_controllers, including the joint_trajectory_controller.
None of that code is included in ur_robot_driver, simply because it's not needed (and would be unwise to duplicate).
If you're interested to learn how the JointTrajectoryController works, you would have to take a look at the files in ros-controls/ros_controllers/joint_trajectory_controller.

Originally posted by gvdhoorn with karma: 86574 on 2020-06-15
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by Solrac3589 on 2020-06-15:
Thank you very much @gvdhoorn! Your upvote, sir!

