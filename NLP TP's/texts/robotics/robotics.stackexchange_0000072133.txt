Q:

Using respawn= "true" , ensure a clean restart?

When using a respawn ="true" in the launch file, does ros automatically terminate the associated process or does that have  to be handled by the user somehow. We are using kinect2_bridge nodelet and see that under some circumstances, when it crashes, fails to recover as the associated process is still hanging around or complains that a old node with the same name already exists.
Manually looking for a process with ps -lae | grep nodelet and then killing it solves the problem.
Will increasing the delay help ?
-cn

Originally posted by cnanda84 on ROS Answers with karma: 33 on 2016-02-17
Post score: 0

A:

The respawn="true" functionality detects when the node crashes by detecting when the process terminates.
If the process for the node doesn't terminate, it doesn't detect that it has crashed, and therefore it isn't restarted.

Originally posted by ahendrix with karma: 47576 on 2016-02-17
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by cnanda84 on 2016-02-25:
A simple related question, can this feature be used for a nodelet as well ? Or is it only meant for a node  ? I didn't explicitly mention it but we are using a nodelet when observing this problem.
Comment by ahendrix on 2016-02-25:
respwan was designed to work with nodes; you may see different behavior with nodelets, The nodelet runs in the manager's process space; not in the loader, but roslaunch will be trying to restart the loader.
Comment by cnanda84 on 2016-02-25:
Another unrelated question, so if my code hangs in between( some software bug ). Will the re-spawn feature help me restart the node ? Also, can I expect it to restart the node in case of a segmentation fault ?
Comment by ahendrix on 2016-02-25:
As I already explained, roslaunch only restarts your node when the process terminates (this includes segfaults). If your process is still running and is hung somewhere, roslaunch will not restart.
Comment by ahendrix on 2016-02-25:
In general, roslaunch will never stop your process; it only restarts it if it has already stopped for some other reason.

