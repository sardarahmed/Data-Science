Q:

Callback function not updating values (Rospy)

I have a program used to read in command velocities from two sources (teleop/navigation), blend them, and then publish the blended velocity to the Turtlebot. While debugging, I noticed that the code never reaches the callback functions and thus, does not update any of the values I need to read in. I have the following:
class BSCFun:

    def __init__(self):
        # Init Node
        rospy.init_node('BSCFun', anonymous=True, log_level=rospy.DEBUG);
        self.pub = rospy.Publisher('/mobile_base/commands/velocity', Twist, queue_size=100);

        # ROS Subscribers
        self.odomSub = rospy.Subscriber('/odom', Odometry, self.odomCallback);
        self.goalSub = rospy.Subscriber('/move_base/current_goal', PoseStamped, self.goalCallback)
        self.velSub = rospy.Subscriber('/cmd_vel_mux/input/navi', Twist, self.optCmdCallback)
        self.teleSub = rospy.Subscriber('/cmd_vel_mux/input/teleop', Twist, self.userCmdCallback);
        self.rate = rospy.Rate(5);

        # Main Loop
        while not rospy.is_shutdown():
            self.BSCFun1();

    def BSCFun1(self):
        # do stuff and get a 'newVelocity'
        vMsg = Twist();
        vMsg.angular.z = newVelocity;
        self.pub.publish(vMsg);
        self.rate.sleep();

    def userCmdCallback(self, msg):
        self.xVelUser= msg.linear.x;
        self.wzVelUser = msg.angular.z; 

    def optCmdCallback(self, msg):
        self.xVel = msg.linear.x;
        self.wzVel = msg.angular.z;
        rospy.loginfo("Updating Opt. Cmd.");

and a bunch of other callbacks.
if __name__ == '__main__':
    try:
        bsc = BSCFun();
    except rospy.ROSInterruptException:
        pass

I use the data from the callbacks in BSCFun1() to calculate a newVelocity and publish accordingly, but the values are not updating and all I get are zeros (the values my variables are initialized in. What seems to be the problem?

Originally posted by piraka9011 on ROS Answers with karma: 32 on 2016-10-03
Post score: 0

A:

So it turns out that I was not using rospy.spin() and so ROS was not reading in data from the topics as they come in. I solved it by making my BSC class made up of only the __init__ and the callbacks and using the member variables I need in the __main__ function
class BSCFun:

    def __init__(self):
        # ROS Publishers
        self.pub = rospy.Publisher('/mobile_base/commands/velocity', Twist, queue_size=100);

        # ROS Subscribers
        self.odomSub = rospy.Subscriber('/odom', Odometry, self.odomCallback);
        self.goalSub = rospy.Subscriber('/move_base/current_goal', PoseStamped, self.goalCallback)
        self.velSub = rospy.Subscriber('/cmd_vel_mux/input/navi', Twist, self.optCmdCallback)
        self.teleSub = rospy.Subscriber('/cmd_vel_mux/input/teleop', Twist, self.userCmdCallback);
        self.rate = rospy.Rate(5);
        rospy.spin();    # Added this line
        
        # Removed BSCFun1()
    def publishMsg(self, msg):
        self.pub.Publish(msg);

    def userCmdCallback(self, msg):
        self.xVelUser= msg.linear.x;
        self.wzVelUser = msg.angular.z; 

    def optCmdCallback(self, msg):
        self.xVel = msg.linear.x;
        self.wzVel = msg.angular.z;
        rospy.loginfo("Updating Opt. Cmd.");

if __name__ == '__main__':
    # Init Node
    rospy.init_node('BSCFun', anonymous=True, log_level=rospy.DEBUG);
    bsc = BSCFun();
    # Stuck in 'spin'
    vMsg = Twist();
    try:
        # Code never actually reaches here...
        while not rospy.is_shutdown():
            # Blend velocity
            alpha = 0.5;
            newHeading = bsc.wzVel * (alpha - bsc.wzVelUser);
            vMsg.angular.z = newHeading;
            # Publish velocity
            bsc.publishMsg(vMsg);
    except rospy.ROSInterruptException:
        pass

My new problem is that ROS stays in its 'spin' state when the BSCFun class object is created and does not move on to the while loop in the main function. I would like to take the data from the subscribers callbacks and use it to 'blend' the velocity commands coming in (as seen in the while loop) but that is not working. I will post this as a new question but any suggestions would be appreciated.

Originally posted by piraka9011 with karma: 32 on 2016-10-03
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by piraka9011 on 2016-10-06:
I simply did the blending within one of the callback functions, that was the best way I found so far.
Comment by wh11868 on 2018-01-16:
Hello friends, I also encountered the same problem，Do you find a solution about it? Looking forward to your reply，thanks
Comment by piraka9011 on 2018-01-23:
@wh11868 See my first comment for one approach. My current approach is to make a separate thread, using python's Threading package, that takes all the data from the CB functions and blends them. Note that this does not sync the data if that is important for you!

