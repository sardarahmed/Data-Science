Q:

Problem with multiple navigation on Gazebo

I tried to simulate multiple turtlebot in Gazebo. It seems there are no problem, but when I tried to see view_frames I have observed that /odom is not connect to /robot1/base_footprint and /robot2/base_footprint.
On Gazebo there isn't problem, but the problems are there when I do the navigation.
This is my tf_tree (http://db.tt/FBCGz4sD)
This is my launch file
<launch>
<arg name="base"      value="$(optenv TURTLEBOT_BASE kobuki)"/> <!-- create, roomba-->
<arg name="battery"   value="$(optenv TURTLEBOT_BATTERY /proc/acpi/battery/BAT0)"/> <!-- /proc/acpi/battery/BAT0 --> 
<arg name="stacks"    value="$(optenv TURTLEBOT_STACKS hexagons)"/>  <!-- circles, hexagons --> 
<arg name="3d_sensor" value="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>  <!-- kinect, asus_xtion_pro --> 

<param name="/use_sim_time" value="true" />

<!-- start world -->
<node name="gazebo" pkg="gazebo_ros" type="gzserver" args="$(find tesi_gazebo)/worlds/empty.world" respawn="false" output="screen" />

<!-- start gui -->
<node name="gazebo_gui" pkg="gazebo_ros" type="gzclient" respawn="false" output="screen"/>

<!-- BEGIN ROBOT 1-->
<group ns="robot1">
<param name="tf_prefix" value="robot1" />

<include file="$(find tesi_gazebo)/launch/includes/$(arg base).launch.xml">
<arg name="base" value="$(arg base)"/>
<arg name="stacks" value="$(arg stacks)"/>
<arg name="3d_sensor" value="$(arg 3d_sensor)"/>
<arg name="init_pose" value="-x 1 -y 1 -z 0" />
<arg name="robot_name"  value="Robot1" />
</include>

<node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
<param name="publish_frequency" type="double" value="30.0" />
<param name="tf_prefix" type="string" value="robot1"/>
</node>

<!-- Fake laser -->
<node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>
<node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan" args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
<param name="scan_height" value="10"/>
<param name="output_frame_id" value="/camera_depth_frame"/>
<param name="range_min" value="0.45"/>
<remap from="image" to="/camera/depth/image_raw"/>
<remap from="scan" to="/scan"/>
</node>
</group>

<!-- BEGIN ROBOT 2-->
<group ns="robot2">
<param name="tf_prefix" value="robot2" />

<include file="$(find tesi_gazebo)/launch/includes/$(arg base).launch.xml">
<arg name="base" value="$(arg base)"/>
<arg name="stacks" value="$(arg stacks)"/>
<arg name="3d_sensor" value="$(arg 3d_sensor)"/>
<arg name="init_pose" value="-x 1 -y -1 -z 0" />
<arg name="robot_name"  value="Robot2" />
</include>

<node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
<param name="publish_frequency" type="double" value="30.0" />
<param name="tf_prefix" type="string" value="robot2"/>
</node>

<!-- Fake laser -->
<node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>
<node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan"
    args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
<param name="scan_height" value="10"/>
<param name="output_frame_id" value="/camera_depth_frame"/>
<param name="range_min" value="0.45"/>
<remap from="image" to="/camera/depth/image_raw"/>
<remap from="scan" to="/scan"/>
</node>
</group>
</launch>

This is kobuki.launch.xml
<launch>
<arg name="base"/>
<arg name="stacks"/>
<arg name="3d_sensor"/>
<arg name="robot_name"/>
<arg name="init_pose"/>

<arg name="urdf_file" default="$(find xacro)/xacro.py '$(find turtlebot_description)/robots/$(arg base)_$(arg stacks)_$(arg 3d_sensor).urdf.xacro'" />
<param name="/robot_description" command="$(arg urdf_file)" />

<!-- Gazebo model spawner -->
<node name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model"
args="$(arg init_pose) -unpause -urdf -param /robot_description -model $(arg robot_name)"/>

<!-- Velocity muxer -->
<node pkg="nodelet" type="nodelet" name="mobile_base_nodelet_manager" args="manager"/>
<node pkg="nodelet" type="nodelet" name="cmd_vel_mux"
args="load yocs_cmd_vel_mux/CmdVelMuxNodelet mobile_base_nodelet_manager">
<param name="yaml_cfg_file" value="$(find turtlebot_bringup)/param/mux.yaml" />
<remap from="cmd_vel_mux/output" to="mobile_base/commands/velocity"/>
</node>

<!-- Bumper/cliff to pointcloud (not working, as it needs sensors/core messages) -->
<include file="$(find turtlebot_bringup)/launch/includes/kobuki/bumper2pc.launch.xml"/>
</launch>

I don't know if in order to make the navigation of the two turtlebot I must connect odom to /robot1/base_footprint and /robot2/base_footprint. Or if it is already correct.

Originally posted by Stefano Primatesta on ROS Answers with karma: 402 on 2014-01-06
Post score: 2

A:

Hi,
The question is number 1 :
How can we connected  robot_name/odom -> robot_name/base_footprint on Hydro ?
The question 2 :
How can we connected /map -> /robot_name/odom still on Hydro ?
Question 1:
So it's the gazebo plugin's of kobuki ros which it's does not take the namespace of robot.
To get two branches robot1/odom -> robot1/basefootprint and robot2/odom -> robot2/basefootprint we need to edit the plugin.
I don't know yet how I can tell to gazebo to use the modified plugin so I make a backup :
mv /opt/ros/hydro/lib/libgazebo_ros_kobuki.so /opt/ros/hydro/lib/libgazebo_ros_kobuki.so.old

Then in my Ros workspace I clone the Git repot :
cd ~/ros_workspace/src
git clone h t t p s : //github.com/yujinrobot/kobuki_desktop.git

Don't have enouth karma to put a link.
Once you have all file you can edit the file locate :
~/ros_workspace/src/kobuki_desktop/kobuki_gazebo_plugins/src/gazebo_ros_kobuki.cpp

For every publisher and subscriber I add
XXX.subscribe(node_name_ + "/XXXX");

Below all the edited file :

This code block was moved to the following github gist:
https://gist.github.com/answers-se-migration-openrobotics/f81e88934bf65c818b7100a06d499dae

Now you can compile the library
catkin_make gazebo_ros_kobuki
mv ~/ros_workspace/devel/lib/libgazebo_ros_kobuki.so /opt/ros/hydro/lib/libgazebo_ros_kobuki.so

It's done.
Warning : If you want to use with one turtlebot, you need to change the launch file and add a prefix. Like with two robots.
It's work for me, but I really don't know if it's a good way to use multi robots on gazebo. If you run rqt_graph you can see that gazebo publish into robot_name/joint_states and robot_name/odom. It's a good news for use.
Question 2 :
To get the gmapping publish the map on correct topics and correct frame we need to specified the odom_frame and base_frame of robot.
Then we need to modify the output_frame_id of the lazer scan to become robot_name/camera_depth_frame otherwise gmapping push information into camera_depth_frame which is connected to nothing.
On Rviz all robots are in same place another stuff to do... but we can see the map of robot1 and robot2 !
Here is the launch files I use to put many robot in Gazebo and to view it with Rviz correctly.
Environment :
 <launch>
  <!-- Gazebo config -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="debug" value="false"/>
    <arg name="gui" value="false"/>
    <arg name="world_name" value="$(find exploration)/worlds/gazebo_z.world"/>
    <!--                                                                                                                                              
    <arg name="world_name" value="worlds/willowgarage.world"/>                                                                                        
    -->
  </include>
  <!-- Launch for multi robots -->
  <include file="$(find exploration)/config/robot/robots.launch.xml" />
</launch>

Now the launch for multi-robots :
<launch>
  <!-- Plusieurs robots -->
  <!-- Turtlebot configuration pour tout les robots -->
  <arg name="base" default="$(optenv TURTLEBOT_BASE kobuki)"/>
  <arg name="battery" default="$(optenv TURTLEBOT_BATTERY /proc/acpi/battery/BAT0)"/>
  <arg name="stacks" default="$(optenv TURTLEBOT_STACKS hexagons)"/>
  <arg name="3d_sensor" default="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>

  <arg name="model" default="$(find turtlebot_description)/robots/$(arg base)_$(arg stacks)_$(arg 3d_sensor).urdf.xacro" />

   <!-- send the robot XML to param server -->
   <param name="robot_description" command="$(find xacro)/xacro.py '$(arg model)'" />

  <!-- Bring up robot1 -->
  <group ns="turtlebot_1">
    <include file="$(find exploration)/config/robot/robot.launch.xml" >
      <arg name="robot_name"  value="turtlebot_1" />
    </include>
  </group>

  <group ns="turtlebot_2">                                                                                                                            
    <include file="$(find exploration)/config/robot/robot.launch.xml" >
      <arg name="x" value="1.0" />
      <arg name="robot_name"  value="turtlebot_2" />
    </include>
  </group>
</launch>

Robot launch
<launch>

  <!-- Un robot -->
  <arg name="x" default="0.0"/>
  <arg name="y" default="0.0"/>
  <arg name="z" default="0.0"/>
  <arg name="robot_name" default="turtlebot" />

  <!-- Gazebo model spawner for turtlebot -->
  <node name="spawn_$(arg robot_name)" pkg="gazebo_ros" type="spawn_model"
        args="-param /robot_description                                                                                                               
              -urdf                                                                                                                                   
              -unpause                                                                                                                                
              -x $(arg x)                                                                                                                             
              -y $(arg y)                                                                                                                             
              -z $(arg z)                                                                                                                             
              -model $(arg robot_name)                                                                                                                
              " respawn="false" output="screen" >
  </node>

  <!-- Modification du mobile_base en robot_name pour correspondre avec notre robot -->
  <node pkg="nodelet" type="nodelet" name="$(arg robot_name)_nodelet_manager" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="cmd_vel_mux"
        args="load yocs_cmd_vel_mux/CmdVelMuxNodelet $(arg robot_name)_nodelet_manager">
    <param name="yaml_cfg_file" value="$(find turtlebot_bringup)/param/mux.yaml" />
    <remap from="cmd_vel_mux/output" to="commands/velocity"/>
  </node>
  <!-- bumper2pc.launch.xml -->
  <node pkg="nodelet" type="nodelet" name="bumper2pointcloud" args="load kobuki_bumper2pc/Bumper2PcNodelet $(arg robot_name)_nodelet_manager">
    <param name="pointcloud_radius" value="0.24"/>
    <remap from="bumper2pointcloud/pointcloud"   to="sensors/bumper_pointcloud"/>
    <remap from="bumper2pointcloud/core_sensors" to="sensors/core"/>
  </node>
<!-- End bumper2pc.launch.xml -->

  <!-- robot_state_publisher  -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="30.0" />
    <param name="tf_prefix" type="string" value="$(arg robot_name)" />
  </node>

  <!-- fake lazer -->
  <node pkg="nodelet" type="nodelet" name="$(arg robot_name)_laserscan_nodelet_manager" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan"
        args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet $(arg robot_name)_laserscan_nodelet_manager">
    <param name="scan_height" value="10"/>
    <param name="output_frame_id" value="$(arg robot_name)/camera_depth_frame"/>
    <param name="range_min" value="0.45"/>
    <remap from="image" to="camera/depth/image_raw"/>
    <remap from="scan" to="scan"/>
 <!-- Velocity smoother -->
  <node pkg="nodelet" type="nodelet" name="$(arg robot_name)_navigation_velocity_smoother" args="load yocs_velocity_smoother/VelocitySmootherNodelet \
$(arg robot_name)_nodelet_manager">
    <rosparam file="$(find turtlebot_bringup)/param/defaults/smoother.yaml" command="load"/>
    <remap from="$(arg robot_name)_navigation_velocity_smoother/smooth_cmd_vel" to="cmd_vel_mux/input/navi"/>
    <remap from="$(arg robot_name)_navigation_velocity_smoother/odometry" to="odom"/>
    <remap from="$(arg robot_name)_navigation_velocity_smoother/robot_cmd_vel" to="commands/velocity"/>
  </node>
  <!-- End Velocity smoother -->

  <!-- Safety controller-->
  <node pkg="nodelet" type="nodelet" name="$(arg robot_name)_kobuki_safety_controller" args="load kobuki_safety_controller/SafetyControllerNodelet $(\
arg robot_name)_nodelet_manager">
    <remap from="$(arg robot_name)_kobuki_safety_controller/cmd_vel" to="cmd_vel_mux/input/safety_controller"/>
    <remap from="$(arg robot_name)_kobuki_safety_controller/events/bumper" to="events/bumper"/>
    <remap from="$(arg robot_name)_kobuki_safety_controller/events/cliff" to="events/cliff"/>
    <remap from="$(arg robot_name)_kobuki_safety_controller/events/wheel_drop" to="events/wheel_drop"/>
  </node>
  <!-- End Safety controller -->

  <!-- Gmapping -->
  <include file="$(find exploration)/config/gmapping_gazebo/gmapping.launch" >
    <arg name="scan_topic" value="scan" />
    <arg name="robot_name" value="$(arg robot_name)" />
  </include>
  <!--                                                                                                                                                
      <include file="$(find exploration)/config/move_base_gazebo/move_base.xml" />
  -->
</launch>

And gmapping :
<launch>
  <arg name="scan_topic" default="scan" />
  <arg name="robot_name" default="turtlebot" />
  <node pkg="gmapping" type="slam_gmapping" name="slam_gmapping" output="screen">

    <param name="odom_frame" value="$(arg robot_name)/odom"/>
    <param name="base_frame" value="$(arg robot_name)/base_footprint"/>
    <param name="map_frame" value="/map" />
    <param name="output_frame_id" value="$(arg robot_name)/camera_depth_frame"/>
    <param name="map_update_interval" value="5.0"/>
    <param name="maxUrange" value="3.2"/>
    <param name="maxRange" value="20.0" />
    <param name="sigma" value="0.05"/>
    <param name="kernelSize" value="1"/>
    <param name="lstep" value="0.05"/>
    <param name="astep" value="0.05"/>
    <param name="iterations" value="5"/>
    <param name="lsigma" value="0.075"/>
    <param name="ogain" value="3.0"/>
    <param name="lskip" value="0"/>
    <param name="srr" value="0.01"/>
    <param name="srt" value="0.02"/>
    <param name="str" value="0.01"/>
    <param name="stt" value="0.02"/>
    <param name="linearUpdate" value="0.5"/>
    <param name="angularUpdate" value="0.436"/>
    <param name="temporalUpdate" value="10.0"/>
    <param name="resampleThreshold" value="0.5"/>
    <param name="particles" value="80"/>
    <param name="xmin" value="-5.0"/>
    <param name="ymin" value="-5.0"/>
    <param name="xmax" value="5.0"/>
    <param name="ymax" value="5.0"/>

    <param name="delta" value="0.05"/>
    <param name="llsamplerange" value="0.01"/>
    <param name="llsamplestep" value="0.01"/>
    <param name="lasamplerange" value="0.005"/>
    <param name="lasamplestep" value="0.005"/>
    <remap from="scan" to="$(arg scan_topic)"/>
    <!-- from our old setup:                                                                                                                          
         <param name="transform_publish_period" value="0.05" />                                                                                       
    -->
  </node>
</launch>

Originally posted by Zephyrin with karma: 36 on 2014-02-14
This answer was ACCEPTED on the original site
Post score: 2

