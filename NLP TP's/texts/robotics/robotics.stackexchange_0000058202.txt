Q:

using bloom to send package to launchpad?

Hi
I have package that would distribute via "official" ubuntu package, I'm not familiar with bloom or launchpad, but as far as I understand correctly we can create "official" Ubuntu package via launchpad and bloom seems to generate directory/file structure that need to upload to launch pad system. If it is correct. Does anybody have using bloom to send packages to launchpad build firm?

Originally posted by Kei Okada on ROS Answers with karma: 1186 on 2014-03-25
Post score: 2

Original comments
Comment by atp on 2014-03-25:
I don't know what launchpad is but bloom is the right tool to publish your package in the Debian repositories which will make it available in Ubuntu (and other Linux distributions based on Debian).

A:

bloom can create the files you need, but in practice the process for getting into the "official" Debian or Ubuntu package repositories is more difficult than that. Most of the time there requires some manual tweaking of the resulting files. You can produce just the debian files like this:
$ cd path/to/package
$ ls package.xml  # There must be a package.xml here
$ bloom-generate debian --os-name ubuntu --os-version precise --ros-distro hydro
==> Generating debs for ubuntu:precise for package(s) ['catkin']
No historical releaser history, using current maintainer name and email for each versioned changelog entry.
Package 'catkin' has dependencies:
Run Dependencies:
  rosdep key           => precise key
  cmake                => ['cmake']
  gtest                => ['libgtest-dev']
  python-argparse      => []
  python-catkin-pkg    => ['python-catkin-pkg']
  python-empy          => ['python-empy']
  python-nose          => ['python-nose']
Build and Build Tool Dependencies:
  rosdep key           => precise key
  gtest                => ['libgtest-dev']
  python-argparse      => []
  python-catkin-pkg    => ['python-catkin-pkg']
  python-empy          => ['python-empy']
  python-nose          => ['python-nose']
  cmake                => ['cmake']
==> Placing templates files in the 'debian' folder.
==> In place processing templates in 'debian' folder.
Expanding 'debian/changelog.em' -> 'debian/changelog'
Expanding 'debian/control.em' -> 'debian/control'
Expanding 'debian/rules.em' -> 'debian/rules'
$ ls debian
changelog compat    control   rules     source

In the above example I did this for catkin, and the resulting files in the debian folder will be a good start, but you will need to iterate on them before they are accepted into the debian repositories. Also, you must make sure all of your dependencies are in ubuntu first, so that means you cannot depend on other ROS packages.

Originally posted by William with karma: 17335 on 2014-03-25
This answer was ACCEPTED on the original site
Post score: 2

