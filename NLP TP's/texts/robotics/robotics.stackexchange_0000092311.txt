Q:

Convert PointCloud2ConstPtr to PointCloud2

Hello,
I would like to know how to convert convert PointCloud2ConstPtr to PointCloud2. I use these code:
  sensor_msgs::PointCloud2ConstPtr kinect_pointcloud_ptr;
  kinect_pointcloud_ptr = ros::topic::waitForMessage<sensor_msgs::PointCloud2> ("/voxel_output", ros::Duration (5.0));
  std::cerr << "Pointcloud points number: "<< kinect_pointcloud_ptr->width * kinect_pointcloud_ptr->height <<"";

  sensor_msgs::PointCloud2ConstPtr p_pointcloud_ptr;
  tf2_ros::Buffer tfBuffer;
  tf2_ros::TransformListener tfListener(tfBuffer);
  geometry_msgs::TransformStamped p_frame_to_kinect2_link;      
  p_frame_to_kinect2_link = tfBuffer.lookupTransform("kinect2_link", "p_frame", ros::Time::now(), ros::Duration(3.0));
  tf2::doTransform(kinect_pointcloud_ptr, p_pointcloud_ptr, p_frame_to_kinect2_link);

And I get some error:
Undefined reference to 「void tf2::doTransform<boost::shared_ptr<sensor_msgs::PointCloud2_<std::allocator<void> > const> >(boost::shared_ptr<sensor_msgs::PointCloud2_<std::allocator<void> > const> const&, boost::shared_ptr<sensor_msgs::PointCloud2_<std::allocator<void> > const>&, geometry_msgs::TransformStamped_<std::allocator<void> > const&)」

If anyone has good solution to suggest me. It will be nice.
Thank!

Originally posted by A_YIng on ROS Answers with karma: 37 on 2019-07-02
Post score: 0

A:

You'll need to use the pcl_ros::transformPointCloud to transform a point cloud, as far as I know it cannot be done using the doTransform method.
You'll also need to make a non const point cloud to store the result. Whenever you see a const type in C++ it means that its value cannot be changed. So you'll need to define a variable like sensor_msgs::PointCloud2 p_output_pointcloud_ptr; for the result.
Hope this helps.

Originally posted by PeteBlackerThe3rd with karma: 9529 on 2019-07-02
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by A_YIng on 2019-07-02:
Thank for your reply, it works for me. Here is my example code to provide to someone have the same question!
sensor_msgs::PointCloud2 pc;
sensor_msgs::PointCloud2 t_pc; 
pc = *(ros::topic::waitForMessage<sensor_msgs::PointCloud2>("/Topic_name",ros::Duration(3.0)));
pc.header.frame_id = "Source_frame";
pcl_ros::transformPointCloud("Target_frame", pc, t_pc, *tf_listener);

Comment by PeteBlackerThe3rd on 2019-07-02:
Great, glad you got it working.
Comment by alexe on 2020-03-27:
But why would you need to use pcl_ros::transformPointCloud if there are no PCL types involved? That seems to make no sense. Why wouldn't you use the transform method of the tf2_ros::Buffer object?

