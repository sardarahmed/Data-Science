Q:

KDL IK fails in Descartes

I am using Descartes library on Ubuntu 16.04 ROS kinetic for my Denso robot.
I am using IkFastMoveitStateAdapter with KDLKinematicsPlugin defined in the kinematics.yaml. I am able to load this plugin successfully. But the getAllIK() in IkFastMoveitStateAdapter fails since there no solutions found for any point of the cartesian trajectory. The pose seems to be reachable by the arm. How do I know if the kinematics plugin is setup correctly? Can I use the standard KDL plugin or I need to build a custom IKFast plugin for my robot? What else might I be missing?
I found a similar issue here, but somehow it does not solve my problem

Originally posted by ipa-hsd on ROS Answers with karma: 150 on 2018-03-13
Post score: 0

A:

Can I use the standard KDL plugin

No. You cannot use the IkFastMoveitStateAdapter with a KDL based plugin.
(this seems obvious: the name IkFastMoveitStateAdapter seems to indicate this already)

or I need to build a custom IKFast plugin for my robot?

Yes.
Descartes depends on the IK plugin returning 'all' joint space solutions for a particular Cartesian pose, otherwise it has nothing to choose from / optimise for. KDL cannot reliably return those solutions, as it is a numerical solver.

I found a similar issue here, but somehow it does not solve my problem

Jorge seems to explain it quite well in the issue you link:

Instead you can instantiate an IkFastMoveitStateAdapter object which will load the kinematics plugin of your arm as long as it is provided in the "kinematics.yaml" of the moveit config package. This flavor of the Descartes Robot Model assumes the the underlying kinematics is running a closed-form solver and so it'll exploit that fact in order to generate more pose samples and potentially produce a better path.

What would be good to verify (over at Descartes' issue tracker) is whether the MoveitStateAdapters are still needed. MoveIt's IK plugin class got extended to support everything that Descartes needs, so the intermediary may not be necessary any more. But I would suggest you verify this with the developers.

Originally posted by gvdhoorn with karma: 86574 on 2018-03-13
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by ipa-hsd on 2018-03-14:
My bad - my idea was that IkFastMoveitStateAdapter communicates with any available underlying IK solver to get multiple solutions. When you say Moveit's IK plugin is extended, do you mean KDL also should return multiple solutions? And how can I bypass MoveitStateAdapter? By replacing getAllIK()?
Comment by gvdhoorn on 2018-03-14:\

When you say Moveit's IK plugin is extended, do you mean KDL also should return multiple solutions?

No. I don't believe KDL can do this reliably. TracIK maybe, see ros-industrial-consortium/descartes#124.
Comment by ipa-hsd on 2018-03-15:
Thanks! Now I have a brief idea of how things are working. I used MoveitStateAdapter (Still waiting for a reply: https://github.com/ros-industrial-consortium/descartes/issues/215) and defined Trac IK in my kinematics.yaml. I am able to plan the trajectories now.
Comment by gvdhoorn on 2018-03-15:
I'm not sure trac_ik is the best choice, but it will probably work 'somewhat'. Note Patrick's comments at the end of the issue I linked. IIUC he's describing a hypothetical / desired situation, not the current state.
Comment by ipa-hsd on 2018-03-15:
IKFastMoveitStateAdapter calls getPositionIK in getAllIK, where as MoveitStateAdapter calls setFromIK with multiple seeds. Also, I was able to generate trajectories even with KDL+MoveitStateAdapter, just that it was 5x slower than Trac IK.
Comment by ipa-hsd on 2018-03-15:
Unfortunately, I was unable to generate IKFast plugin for my Denso robot (https://github.com/rdiankov/openrave/issues/568)
Comment by gvdhoorn on 2018-03-15:
See if the procedure in #q263925 helps. It's written for 4dof, but just replace with the appropriate solver type. Can't guarantee it'll help, but using the inversekinematics has helped me get past weird IKFast errors before.
Comment by ipa-hsd on 2018-03-19:
Used this PR: https://github.com/rdiankov/openrave/pull/408, with extraprec=100 and maxsteps=750, I was able to generate the plugin

