Q:

Why is rosjava_core/rosjava_bootstrap different between repository and deb distributions in electric?

In trying to build a rosjava package that a co-worker built using a source install of rosjava on a machine that had rosjava installed via debian/ubuntu packages I noticed there are very important differences.
Comparing:

http://code.google.com/p/rosjava/source/browse/?name=electric-tag

to the version I have installed from deb, it appears that the deb versions simply are missing large chunks of important python code from rosjava_bootstrap/src. Specifically make.py
Anyone know why this difference exists?

Originally posted by Asomerville on ROS Answers with karma: 2743 on 2011-10-12
Post score: 1

A:

rosjava is still in an alpha state with the packaging/toolchain integrating under flux.  The debian package is not directly tracking these changes as these packaging changes affect the ability to produce debian binaries.
NOTE: to verify versions:
$ rosversion rosjava_core

or,
$ tail -1 CMakeLists.txt 
rosbuild_make_distribution(0.2.0)

or (for the debian release version number, if you want to check before you install)
http://www.ros.org/wiki/rosjava_core/Releases
http://www.ros.org/wiki/rosjava_core/Releases

Originally posted by kwc with karma: 12244 on 2011-10-12
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by Asomerville on 2011-10-13:
Oh great! I was unaware of rosversion, or the fact that the version number was embedded in the CMakeLists.txt. Thanks!
Comment by kwc on 2011-10-13:
$ rosversion rosjava_core
0.2.0
Comment by Asomerville on 2011-10-13:
It doesn't seem that the version information is anywhere in the stack/package, nor on it's official page. Is knowing this more or less ad-hoc? (I ask as someone trying to manage version control across projects) Might this be something I should write up a REP about?
Comment by kwc on 2011-10-13:
In general, if something is < 1.0, you shouldn't expect the debs to stay up-to-date.
Comment by Asomerville on 2011-10-13:
Is there any formal way to know when a package is alpha/likely to be out of sync with debs? I see in stack.xml and manifest.xml 'review status="unreviewed" ' but am unsure if that would be a reliable indicator.

