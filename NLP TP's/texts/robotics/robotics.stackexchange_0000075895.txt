Q:

turn on/off a dc motor by using an IR range sensor with arduino and ros

Hi,
I am new for using Ros. I used an example to read the range data from IR range sensor by using Arduino kit and ROS. Now, I want to use the data from IR range sensor to turn on/off a small dc motor by using Arduino and ROS (for example if the distance from IR range sensor is more than 50 cm, we send a command to run the motor, and else turn off the motor). I appreciate for any help.
Thanks,
Abbas

Originally posted by Abbas on ROS Answers with karma: 11 on 2016-08-20
Post score: 0

A:

First, please don't ask the same question twice. It doesn't get answered faster, and might cause some people to disregard your question as being impolite. Better to edit your original question than ask a duplicate question with different wording.
There is more than one way to lay out your logic among ROS nodes. Perhaps the most ROS-like way might be this:

One node that reads the range sensor and publishes the range as a ROS sensor_msgs/Range message.
A decision node that reads the Range message and publishes another message to turn on or off the motor, perhaps as std_msgs/Bool.
A third node that listens for the Bool message and turns on or off the motor.

This arrangement has the advantage that input nodes, output nodes, and logic nodes are distinct and independent.
However, you might decide to collapse these into two or one node to be faster or more efficient. I don't know what software you are using on the Arduino side. I have used both rosserial_arduino and ros_arduino_bridge. rosserial makes programming on the Arduino side more ROS-like, but has fairly high RAM usage, so is more suitable for mega-class Arduinos (or Teensy, for example). ros_arduino_bridge may require you to modify the code to accept a new command to turn on or off the motor. (It has support for some motor shields.) If you give some more details, I may be able to point you to forks off of ros_arduino_bridge that do something like you want.

Originally posted by Mark Rose with karma: 1563 on 2016-08-21
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by gvdhoorn on 2016-08-21:
Just a comment on:

First, please don't ask the same question twice

it could well be that due to the moderation system @Abbas thought his post got lost and decided to post it again. Then when a moderator lets his initial post through, his second also gets posted. Result: double-post.
Comment by Abbas on 2016-08-21:
Dear sir,
Sorry for duplication the question, I did not know that I posted my question twice. Thank you so much for your help. I think it will be useful for me.  I use rosserial_arduino software and I also use Arduino Uno kit for this project .
Thanks,
Abbas
Comment by Mark Rose on 2016-08-22:
No problem, and sorry if the double-post was due to the moderation system. I have not had stable results with rosserial on an Uno. It uses a lot of RAM, due to design choices. I've given up on it and use ros_arduino_bridge instead.
Comment by Abbas on 2016-08-22:
Hi Mark,
Thank you for your answer. I am new to use ROS (I know basic knowledge about ROS), can I ask you to explain me how can I do the project in more details?
Thanks,
Abbas
Comment by Mark Rose on 2016-08-22:
Sure. My robot uses a Pololu A-Star board for robot control, and a Raspberry Pi for the ROS side. I've written a page for my study group.
Comment by Mark Rose on 2016-08-22:
That page is a little specific to the robot design our study group is using, because of the A-Star board, but has information about ros_arduino_bridge that is applicable to any Arduino. We use I2C to link the RPi and Arduino, but that requires a level shifter, so you may want to use a USB cable.
Comment by Mark Rose on 2016-08-22:
You don't have to use a Raspberry Pi, of course, though I presume you will have some Linux microcontroller on the robot. You'll have to modify ros_arduino_bridge to support your motor driver shield or wiring. I'm assuming you will have encoders. If not, navigation will be difficult.
Comment by Mark Rose on 2016-08-22:
Maybe let me know a bit more about you robot so I can give you more relevant information.
Comment by Abbas on 2016-08-22:
Actually, I do not have a robot. I am trying to control a dc motor (on/off) by reading the data from an IR sensor. For this, first I should able to read the distance from the sensor and then if the distance>=50 cm then turn on the dc motor, else send a command to turn off (stop) the motor. Thanks
Comment by Mark Rose on 2016-08-22:
OK, let's say you're using an analog IR sensor and that you're controlling the motor via PWM on some pin. (If you have a motor shield, the details of the motor control will vary with the shield – need more info.)
Comment by Mark Rose on 2016-08-22:
On the Arduino side you'll load the ROSArduinoBridge.ino sketch and upload to the Uno. On the ROS side you will use the ros_arduino_python Node and configure it using parameters to read and publish an analog input (for the IR) and listen and write an analog output (for the motor PWM).
Comment by Mark Rose on 2016-08-22:
You'll have to write one additional Node, presumably in Python, to subscribe to the IR messages, convert the analog value to a distance, and then publish a motor command value. That would be the easiest way to set this up. (Details will vary with your IR sensor and motor shield – need more info.)
Comment by Abbas on 2016-08-23:
Dear Mark,
The IR sensor that I use is "Sharp 2Y0A02 F 44 " and the dc motor is "MOLON chm -2435-1". I used rosserial for reading IR sensor data and used rqt_plot to show me the distance (I followed the tutorial and it works).Can I create a publisher in any package and also change CMakelist?
Thanks
Comment by Mark Rose on 2016-09-06:
Yes, any package can contain a publisher. You don't say whether you are using Python or C++. Easiest is in Python, probably, but not a big difference. The rospy tutorials about writing publishers and subscribers are very good starting points.

