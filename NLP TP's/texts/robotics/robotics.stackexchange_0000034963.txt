Q:

Publishing an image from disk

Hi!
What's te best way to solely stream an image from disk? How do I convert from cv::Mat to proper ROS image message?
The relevant snippet would be:
cv_bridge::CvImagePtr cv_ptr;
cv_ptr->image = cv::imread(this->filename_);
image_pub_.publish(cv_ptr->toImageMsg());

How can the cv_bridge::CvImagePtr be initialized? The command above aborts at runtime as one would expect if the constructor requires something else. The error:
iri_simple_perception: /usr/include/boost/smart_ptr/shared_ptr.hpp:418: T* boost::shared_ptr< <template-parameter-1-1> >::operator->() const [with T = cv_bridge::CvImage]: Assertion `px != 0' failed.

Having a look at toCvCopyImpl seems a bit of an overkill ( http://www.ros.org/doc/api/cv_bridge/html/c++/cv__bridge_8cpp_source.html#l00200 ). So, any suggestions?

Originally posted by quimnuss on ROS Answers with karma: 169 on 2011-10-14
Post score: 5

A:

cv_bridge::CvImagePtr is a pointer type that points to NULL by default. You have to allocate storage before you can actually use it, and the boost assertion catches the null pointer dereference.
Correct would be either something like
cv_bridge::CvImagePtr cv_ptr(new cv_bridge::CvImage);

or
cv_bridge::CvImagePtr cv_ptr;
cv_ptr.reset (new cv_bridge::CvImage);

As a rule of thumb, every ROS type xxxPtr is a pointer type for xxx.

Originally posted by roehling with karma: 1951 on 2011-10-14
This answer was ACCEPTED on the original site
Post score: 4

Original comments
Comment by quimnuss on 2011-10-24:
There was a bug, it perfectly works now.
Comment by quimnuss on 2011-10-18:
Yes, I did.  image_transport::Publisher pub = imgtransport_.advertise("disk/image", 1);
Comment by roehling on 2011-10-17:
Did you advertise the publisher properly? It is not sufficient just to declare a Publisher image_pub_, you must call ImageTransport::advertise() or something similar to get a valid Publisher object.
Comment by quimnuss on 2011-10-16:
I'll mark the question as unresolved, in case somebody steps up to this alternative approach.
Comment by quimnuss on 2011-10-14:
Yes, that looks more like what I was thinking of. There's, however, something I'm still missing: a fatal is reported by the publish(cv_ptr->toImageMsg()). 'Call to publish() on an invalid image_transport::Publisher'. I've tried both filling the header and encoding as well as leaving them blank.

