Q:

how to add a timeout for a teleop node

I have a teleop node that connects with my ps3 controller wirelessly to run my robot.
I want to add a timeout feature to set all of the parameters to zero in case the joy commands stop being sent to the teleop node. I have had my robot run away on me already and don't want that to happen again.
Can someone help and provide sudo code? And would this timeout be in the main function or in the ps3 button handler?
Thanks.

Originally posted by mte2010 on ROS Answers with karma: 80 on 2012-12-11
Post score: 0

Original comments
Comment by Lorenz on 2012-12-11:
The general approach is to not add the timeout in the teleop node but in your robot's base node (examples: PR2, Turtlebot). The reason is that it also can happen that your network connection drops. In that case, the robot would still run away.

A:

I create a public class variable called double last_cmd_vel_received that gets initialized in my constructor to last_command_vel_received = 0. Then, in the main() function of my node I read in a ROS parameter called double watchdog_timeout. For the main while loop I use ros::spinOnce() and rate.sleep() (where rate is another ROS parameter value). In my class I have a public function called zeroVelocities() that just sets all the actuator outputs to safe values. So, my main while loop looks something like the following:
...
while (nh.ok())
{
    if (ros::WallTime::now().toSec() - my_class->last_cmd_vel_received > watchdog_timeout)
    {
        my_class->zeroVelocities();
    }
    ros::spinOnce();
    rate.sleep();
}
...

In my callback function for the cmd_vel topic (where the function is part of my class) I set last_cmd_vel_received = ros::WallTime::now().toSec(). You can play with timeout values however you want, but I have found that 0.3 or so works well with my robots.

Originally posted by Thomas D with karma: 4347 on 2012-12-11
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by Ivan Dryanovski on 2012-12-11:
A variation: save the last received message in the callback function. Then, in the loop: if (ros::Time::now() - last_msg_.header.stamp).toSec() > timeout_) { ... handle timeout ... }
Comment by Thomas D on 2012-12-11:
That assumes the last received message has a header, which geometry_msgs::Twist does not (and that is what the standard cmd_vel topic publishes). But it is a viable alternative if that assumption holds.
Comment by Ivan Dryanovski on 2012-12-11:
@Thomas D: yes, good catch.

