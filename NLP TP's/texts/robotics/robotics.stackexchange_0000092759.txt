Q:

Error while adding UR5 manipulator on Husky and ROS Kinetic, using "husky_manipulation" package [SOLVED]

[SOLVED]
I'm trying to add a UR5 manipulator on Husky, which is supported only in Indigo, and I'm using Kinetic. But, I found the package "husky_manipulation" on Github ([https://github.com/husky/husky_manipulation]) which apparently make possible to run UR5 on Kinetic. So, I'm following the tutorial in this link, and after modifying the URDF file and starting the simulation, I'm getting this error:
felipe@felipe-dq77pro:~/husky_ws$ roslaunch husky_gazebo husky_playpen_mod.launch ... logging to /home/felipe/.ros/log/4a02330c-afe3-11e9-b776-a0f3c186ea4a/roslaunch-felipe-dq77pro-12050.log
Checking log directory for disk usage. This may take awhile.
Press Ctrl-C to interrupt
Done checking log file disk usage. Usage is <1GB.

resource not found: ur_description
ROS path [0]=/opt/ros/kinetic/share/ros
ROS path [1]=/home/felipe/husky_ws/src
ROS path [2]=/opt/ros/kinetic/share None
when processing file: /home/felipe/husky_ws/src/husky_manipulation/husky_ur_description/urdf/husky_ur5_description.urdf.xacro
included from: /home/felipe/husky_ws/src/husky/husky_description/urdf/husky.urdf.xacro
while processing /home/felipe/husky_ws/src/husky/husky_gazebo/launch/spawn_husky.launch:
while processing /home/felipe/husky_ws/src/husky/husky_control/launch/control.launch:
while processing /home/felipe/husky_ws/src/husky/husky_description/launch/description.launch:
Invalid <param> tag: Cannot load command parameter [robot_description]: command [/opt/ros/kinetic/lib/xacro/xacro '/home/felipe/husky_ws/src/husky/husky_description/urdf/husky.urdf.xacro'     --inorder     robot_namespace:=/     laser_enabled:=false     kinect_enabled:=true     urdf_extras:=/home/felipe/husky_ws/src/husky/husky_description/urdf/husky.urdf.xacro     ] returned with code [2]. 

Param xml is <param command="$(find xacro)/xacro '$(find husky_description)/urdf/husky.urdf.xacro'     --inorder     robot_namespace:=$(arg robot_namespace)     laser_enabled:=$(arg laser_enabled)     kinect_enabled:=$(arg kinect_enabled)     urdf_extras:=$(arg urdf_extras)     " name="robot_description"/>
The traceback for the exception was written to the log file

And my husky.urdf.xacro file after inluding the UR5 description is:
<?xml version="1.0"?>

<robot name="husky" xmlns:xacro="http://ros.org/wiki/xacro">

  <xacro:arg name="laser_enabled" default="false" />
  <xacro:arg name="laser_xyz" default="$(optenv HUSKY_LMS1XX_XYZ 0.2206 0.0 0.00635)" />
  <xacro:arg name="laser_rpy" default="$(optenv HUSKY_LMS1XX_RPY 0.0 0.0 0.0)" />

  <xacro:arg name="kinect_enabled" default="false" />
  <xacro:arg name="kinect_xyz" default="$(optenv HUSKY_KINECT_XYZ 0 0 0)" />
  <xacro:arg name="kinect_rpy" default="$(optenv HUSKY_KINECT_RPY 0 0.18 3.14)" />

  <xacro:property name="husky_bumper_extend" value="$(optenv HUSKY_FORWARD_BUMPER_EXTEND 0)" />

  <xacro:arg name="robot_namespace" default="/" />
  <xacro:arg name="urdf_extras" default="empty.urdf" />

  <!-- Included URDF/XACRO Files -->
  <xacro:include filename="$(find husky_description)/urdf/decorations.urdf.xacro" />
  <xacro:include filename="$(find husky_description)/urdf/wheel.urdf.xacro" />

  <xacro:include filename="$(find husky_description)/urdf/accessories/kinect_camera.urdf.xacro"/>
  <xacro:include filename="$(find husky_description)/urdf/accessories/sick_lms1xx_mount.urdf.xacro"/>
  <xacro:include filename="$(find husky_description)/urdf/accessories/sensor_arch.urdf.xacro"/>
  <xacro:include filename="$(find husky_ur_description)/urdf/husky_ur5_description.urdf.xacro" /> 

  <xacro:property name="M_PI" value="3.14159"/>

  <!-- Base Size -->
  <xacro:property name="base_x_size" value="0.98740000" />
  <xacro:property name="base_y_size" value="0.57090000" />
  <xacro:property name="base_z_size" value="0.24750000" />
 
 <!-- Camera -->
 <!-- <xacro:property name="height3" value="1" />  Link 3 -->
<!--  <xacro:property name="camera_link" value="0.05" />  Size of square 'camera' box -->
<!--  <xacro:property name="axel_offset" value="0.05" />  Space btw top of beam and the each joint -->

  <!-- Wheel Mounting Positions -->
  <xacro:property name="wheelbase" value="0.5120" />
  <xacro:property name="track" value="0.5708" />
  <xacro:property name="wheel_vertical_offset" value="0.03282" />

  <!-- Wheel Properties -->
  <xacro:property name="wheel_length" value="0.1143" />
  <xacro:property name="wheel_radius" value="0.1651" />

  <!-- Base link is the center of the robot's bottom plate -->
  <link name="base_link">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <mesh filename="package://husky_description/meshes/base_link.dae" />
      </geometry>
    </visual>
    <collision>
      <origin xyz="${husky_bumper_extend / 200.0} 0 ${base_z_size/4}" rpy="0 0 0" />
      <geometry>
        <box size="${base_x_size + husky_bumper_extend / 100.0} ${base_y_size} ${base_z_size/2}"/>
      </geometry>
    </collision>
    <collision>
      <origin xyz="0 0 ${base_z_size*3/4}" rpy="0 0 0" />
      <geometry>
        <box size="${base_x_size*4/5} ${base_y_size} ${base_z_size/2}"/>
      </geometry>
    </collision>
  </link>

  <!-- Base footprint is on the ground under the robot -->
  <link name="base_footprint"/>

  <joint name="base_footprint_joint" type="fixed">
    <origin xyz="0 0 ${wheel_vertical_offset - wheel_radius}" rpy="0 0 0" />
    <parent link="base_link" />
    <child link="base_footprint" />
  </joint>

  <!-- Interial link stores the robot's inertial information -->
  <link name="inertial_link">
    <inertial>
      <mass value="46.034" />
      <origin xyz="-0.00065 -0.085 0.062" />
      <inertia ixx="0.6022" ixy="-0.02364" ixz="-0.1197" iyy="1.7386" iyz="-0.001544" izz="2.0296" />
    </inertial>
  </link>

  <joint name="inertial_joint" type="fixed">
    <origin xyz="0 0 0" rpy="0 0 0" />
    <parent link="base_link" />
    <child link="inertial_link" />
  </joint>

  <!-- IMU Link is the standard mounting position for the UM6 IMU.-->
  <!-- Can be modified with environment variables in /etc/ros/setup.bash -->
  <link name="imu_link"/>
  <joint name="imu_joint" type="fixed">
    <origin xyz="$(optenv HUSKY_IMU_XYZ 0.19 0 0.149)" rpy="$(optenv HUSKY_IMU_RPY 0 -1.5708 3.1416)" />
    <parent link="base_link" />
    <child link="imu_link" />
  </joint>
  <gazebo reference="imu_link">
  </gazebo>

  <!-- Husky wheel macros -->
  <xacro:husky_wheel wheel_prefix="front_left">
    <origin xyz="${wheelbase/2} ${track/2} ${wheel_vertical_offset}" rpy="0 0 0" />
  </xacro:husky_wheel>
  <xacro:husky_wheel wheel_prefix="front_right">
    <origin xyz="${wheelbase/2} ${-track/2} ${wheel_vertical_offset}" rpy="0 0 0" />
  </xacro:husky_wheel>
  <xacro:husky_wheel wheel_prefix="rear_left">
    <origin xyz="${-wheelbase/2} ${track/2} ${wheel_vertical_offset}" rpy="0 0 0" />
  </xacro:husky_wheel>
  <xacro:husky_wheel wheel_prefix="rear_right">
    <origin xyz="${-wheelbase/2} ${-track/2} ${wheel_vertical_offset}" rpy="0 0 0" />
  </xacro:husky_wheel>

  <xacro:husky_decorate />

  <xacro:if value="$(arg laser_enabled)">

    <sick_lms1xx_mount prefix="base"/>

    <sick_lms1xx frame="base_laser" topic="scan" robot_namespace="$(arg robot_namespace)"/>

    <joint name="laser_mount_joint" type="fixed">
      <origin xyz="$(arg laser_xyz)" rpy="$(arg laser_rpy)" />
      <parent link="top_plate_link" />
      <child link="base_laser_mount" />
    </joint>

  </xacro:if>

  <xacro:if value="$(arg kinect_enabled)">

    <xacro:sensor_arch prefix="" parent="top_plate_link">
      <origin xyz="-0.35 0 0.51" rpy="0 0 -3.14"/>
    </xacro:sensor_arch>
    <joint name="kinect_frame_joint" type="fixed">
      <origin xyz="$(arg kinect_xyz)" rpy="$(arg kinect_rpy)" />
      <parent link="sensor_arch_mount_link"/>
      <child link="camera_link"/>
    </joint>

    <xacro:kinect_camera prefix="camera" robot_namespace="$(arg robot_namespace)"/>
  </xacro:if>

  <gazebo>
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
      <robotNamespace>$(arg robot_namespace)</robotNamespace>
    </plugin>
  </gazebo>

  <gazebo>
    <plugin name="imu_controller" filename="libhector_gazebo_ros_imu.so">
      <robotNamespace>$(arg robot_namespace)</robotNamespace>
      <updateRate>50.0</updateRate>
      <bodyName>base_link</bodyName>
      <topicName>imu/data</topicName>
      <accelDrift>0.005 0.005 0.005</accelDrift>
      <accelGaussianNoise>0.005 0.005 0.005</accelGaussianNoise>
      <rateDrift>0.005 0.005 0.005 </rateDrift>
      <rateGaussianNoise>0.005 0.005 0.005 </rateGaussianNoise>
      <headingDrift>0.005</headingDrift>
      <headingGaussianNoise>0.005</headingGaussianNoise>
    </plugin>
  </gazebo>

  <gazebo>
    <plugin name="gps_controller" filename="libhector_gazebo_ros_gps.so">
      <robotNamespace>$(arg robot_namespace)</robotNamespace>
      <updateRate>40</updateRate>
      <bodyName>base_link</bodyName>
      <frameId>base_link</frameId>
      <topicName>navsat/fix</topicName>
      <velocityTopicName>navsat/vel</velocityTopicName>
      <referenceLatitude>49.9</referenceLatitude>
      <referenceLongitude>8.9</referenceLongitude>
      <referenceHeading>0</referenceHeading>
      <referenceAltitude>0</referenceAltitude>
      <drift>0.0001 0.0001 0.0001</drift>
    </plugin>
  </gazebo>

  <!-- Optional custom includes. -->
  <xacro:include filename="$(arg urdf_extras)" />
</robot>

Before trying to launch the simulation I ran these commands on a terminal, although it is not clear to me if it should be run on a terminal or added to the URDF file.
source $(catkin_find husky_ur_description)/scripts/husky_ur5_envar.sh
export HUSKY_URDF_EXTRAS=$(catkin_find husky_description urdf/husky.urdf.xacro --first-only)

Does someone know what's going wrong?

Originally posted by xxros on ROS Answers with karma: 3 on 2019-07-26
Post score: 0

Original comments
Comment by jayess on 2019-08-02:
Just so you know, you don't have to write

[SOLVED]

in your question or title. Having an answer marked as "correct" (with the check mark) shows that it has been solved.

A:

resource not found: ur_description

this seems to suggest you don't have the ur_description package installed.
That package is listed as a dependency of husky_ur_description here so I'm wondering how you made sure you had all the required dependencies installed for that package before trying to build and use it. Did you run rosdep?
In any case: if the output of dpkg -l | grep ur-description is empty, try installing it with sudo apt install ros-kinetic-ur-description and try again.

Originally posted by gvdhoorn with karma: 86574 on 2019-07-28
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by xxros on 2019-07-30:
Thanks, man. It was so simple... I didn't see that. It's working now, I will just need to adjust my urdfs because Husky got unstable.

