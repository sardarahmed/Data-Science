Q:

joint_state ROS topic from Gazebo and ros_control

I am trying to learn Gazebo/ROS from the tutorials and I am confused about a couple of things.

When I run Gazebo as a ROS node, does Gazebo publish to the /joint_state topic? It does not seem like it does from looking at the topic subscriber/publisher graph. Is there a way for me to do this? It seems like necessary information to have for programming the robot from ROS. Also, I would like to view the state of the robot in rviz, which needs /tf data which in turn needs /joint_states (afaik).

I do not understand ros_control and how it works with gazebo at all. ros_control is pretty much undocumented in ROS. Any suggestions on where to start looking for information? Or if somebody could give me a quick high level overview that would be incredibly helpful.

Thanks in advance.

Originally posted by munnveed on Gazebo Answers with karma: 45 on 2013-08-20
Post score: 3

A:

Question 1
When using ros_control, the /joint_states topic is published by an instance of the JointStateController. This is a read-only controller that does not command any joint, but rather publishes the current joint states at a configurable frequency.
To run this controller you need to load its configuration to the ROS parameter server and load/start it in the controller manager. This launch file in the controller's repository does just that.
Once you have a valid joint_states topic, tf should start publishing frame data, and tf-dependent Rviz plugins like RobotModel should also work.
Question 2
These resources are currently available:

Tutorial on ros_control with Gazebo
ros_control overview on the ROS wiki
ros_control repository wiki

At some point these should probably be consolidated in a single place.
If you still have unanswered questions, don't hesitate to ask. There's a ROS Control SIG you might be interested in joining for ros_control-specific discussions.
Finally, consider that ros_control is not yet officially released, and not all parts of the documentation have reached maturity. Feature requests and patches are always welcome.

Originally posted by Adolfo Rodríguez T with karma: 275 on 2013-08-21
This answer was ACCEPTED on the original site
Post score: 4

Original comments
Comment by munnveed on 2013-08-21:
Question 1: That explains it! Ok, I got my /joint_states published. It turns out there was a bug in the ROS control with Gazebo tutorial. The configuration of the joint_state_controller is setup in the parameter server but the controller was not loaded into the manager. I updated the wiki to fix that.
Comment by munnveed on 2013-08-21:
Question 2: Given that ros_control is not quite released, is there an alternative standard way in which control joints in Gazebo from ROS? How was it done before ros_control? Do I have to write my own plugin to interface with ROS? I very much appreciate your help. This is clarifying a lot of things for me.
Comment by Adolfo Rodríguez T on 2013-08-22:
Before ros_control it was mostly a do-it-yourself thing. To save time, many people ended up adapting the pr2_controller_manager to their simulated robot, but that often resulted in different interfaces for the simulated and real robot scenarios. The ros_control project is in fact an evolution of the pr2_controller_manager aimed at being robot-agnostic.
Leveraging ros_control should be much less work than you doing a rewrite from scratch of a Gazebo plugin.
Comment by munnveed on 2013-08-22:
Thanks. I think I have gotten to the point where I can at least proceed further. I'm getting /joint_state updates and I can publish to the controllers to move my (toy) robot.
Comment by duhyu1 on 2018-04-04:
I remap /joint_states to /MY_ROBOT_NAME/joint_states when node robot_state_publisher is started. Even if joint_state_publisher is not started, why there will be a joint_states topic?
Comment by Kloping on 2018-05-18:
Hi Munnveed, how did you manage to solve the question 1?  Do you need to write your own .yaml file to map all the joints?

