Q:

ROS Groovy, robot_mechanism_controllers: cannot find -lPyKDL

Hi,
On a fresh ROS Groovy install (on Ubuntu 12.04), I'm failing to compile robot_mechanism_controllers. I get a linkage error:
Linking CXX shared library ../lib/librobot_mechanism_controllers.so/usr/bin/ld:
cannot find -lPyKDL

robot_mechanism_controllers is depending on kdl (which depends on python_orocos_kdl). The python_orocos_kdl in /opt/ros/groovy/stacks does contain a PyKDL.so, but not the one in /opt/ros/groovy/share (which is coming first in the ROS_PACKAGE_PATH).
I found this as I was trying to compile my own controllers based on robot_mechanism_controllers and was getting this error. I tried to compile the already installed robot_mechanism_controllers package (installed through standard apt-get), and also tried to download it in an overlay from the svn.
Any idea?
Cheers,
Ugo

Originally posted by Ugo on ROS Answers with karma: 1620 on 2013-01-15
Post score: 0

Original comments
Comment by Ugo on 2013-01-15:
I can "fix" it by manually prepending the path to the python_orocos_kdl in /opt/ros/stacks to ROS_PACKAGE_PATH (export ROS_PACKAGE_PATH=/opt/ros/groovy/stacks/orocos_kinematics_dynamics/python_orocos_kdl:${ROS_PACKAGE_PATH}). What's wrong here?

A:

So it seems that currently groovy is released with 2 python_orocos_kdl packages, a catkin one, and a rosbuild one as part of the orocos_kinematics_dynamics stack. That cannot be good.
The catkin one overlays the rosbuild one in the ROS_PACKAGE_PATH. Which is why it works if you change the ROS_PACKAGE_PATH.
I guess you could probably remove ros-groovy-python-orocos-kdl with apt for the time being, until the migration to catkin is complete. At least for me it was an optional apt library. Else contact the orocos kdl maintainer maybe.

Originally posted by KruseT with karma: 7848 on 2013-01-15
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by Ugo on 2013-01-15:
Hi, thanks for the answer. Removing ros-groovy-python-orocos-kdl is not possible (due to apt dependencies on my side). But I can keep this prepended to the package path for the time being.

