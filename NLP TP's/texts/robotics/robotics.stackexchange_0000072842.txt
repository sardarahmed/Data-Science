Q:

what is the right way to inverse a transform in python

I am wondering if you know a better way (less boiler code) that will allow me to inverse a transform msg, in Python. For now I use the following code:
from geometry_msgs.msg import PoseStamped, TransformStamped
from tf import TransformerROS

res = TransformStamped()  # creating new transform msg
res.header.stamp = input_transform.header.stamp  # same timestamp
res.header.frame_id = input_transform.child_frame_id  # inverting frame_id and child_frame_id manualy
res.child_frame_id = input_transform.header.frame_id
transformer = TransformerROS()  # using a transformer in order to compute inverse transform
transformer.setTransform(input_transform)  # using the input_transform
translation, rotation = transformer.lookupTransform(res.header.frame_id, res.child_frame_id, rospy.Time(0))  # using lookup in order to get the inverse of input transform (here I use input_transform.child_frame_id to input_transform_frame_id
for attr_name, val in zip(['x', 'y', 'z'], translation):
    res.transform.translation.__setattr__(attr_name, val)
for attr_name, val in zip(['x', 'y', 'z', 'w'], rotation):
    res.transform.rotation.__setattr__(attr_name, val) 

what do you think ?

Originally posted by lgeorge on ROS Answers with karma: 123 on 2016-03-17
Post score: 2

Original comments
Comment by eric-wieser on 2016-03-17:
setattr(x, y) should always be preferred over x.__setattr__(y)

A:

There are a million ways to do this and none of them are really right or wrong. But personally, I like to use numpy (actually the tf.transformations library which is a nice wrapper for numpy) for everything inside my code.
I only use the transform messages to receive and send transforms to other processes. So as soon as any of my software takes in a transform, pose, point, or whatever, and I know I need to manipulate it, the first thing I do is convert it to a numpy type. I think always working with the same types and library makes things cleaner and easier in the long run.
So if you're grabbing a transform and want to invert it, that would look like this:
from tf import transformations as t

(trans, rot) = transformer.lookupTransform(frame1, frame2, rospy.Time(0))
transform = t.concatenate_matrices(t.translation_matrix(trans), t.quaternion_matrix(rot))
inversed_transform = t.inverse_matrix(transform)

Is that what you're looking for?

Originally posted by Airuno2L with karma: 3460 on 2016-03-17
This answer was ACCEPTED on the original site
Post score: 8

Original comments
Comment by lucasw on 2017-02-22:
Can you add making the inversed_transform back into a translation vector and quaternion?
Comment by Airuno2L on 2017-02-25:
I think it's something like this:
translation = t.translation_from_matrix(inversed_transform)
quaternion = t.quaternion_from_matrix(inversed_transform)

The transformations.py is documented well for future reference.
Comment by Will Chamberlain on 2018-03-27:
Note:
https://github.com/ros/geometry/blob/indigo-devel/tf/src/tf/transformations.py  and  http://www.lfd.uci.edu/~gohlke/code/transformations.py.html  are different

