Q:

Is there a nice way to convert the built-in JPEG compressed image message to an AWT BufferedImage?

Like it says on the tin, we need to process a compressed_image transport from Java code. We aren't developing on Android and so can't leverage any of the Android-specific stuff packaged in to rosjava.
Specifically, we need to go from a CompressedImage message to a native AWT BufferedImage.  But to do this, we need a lot of information required to decompress the image that we can't seem to get a hold of (things like width and height, which I suppose we could get from the CameraInfo but we're trying to keep the number of subscription handlers to a minimum because they seem to be pretty heavyweight in all of our benchmarks).

Originally posted by dljsjr on ROS Answers with karma: 51 on 2013-04-05
Post score: 1

A:

Looks like this was as simple as using a ByteArrayInputStream and ImageIO.read().  We ran in to some hiccups because we forgot to offset from the ChannelBuffer but we got it figured out.

Originally posted by dljsjr with karma: 51 on 2013-04-05
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by Robocop87 on 2014-12-15:
Hey, working on the same problem, what do you mean by offset the ChannelBuffer?
Comment by jubeira on 2017-04-11:
I'm having the same problem also, could you post more details about your solution?

