Q:

How to convert between different point cloud types using PCL?

I wonder whether there is an elegant way to convert instances of pcl::PointCloud<pcl::PointXYZ>  to pcl::PointCloud<pcl::PointXYZRGB>and vice-versa?
I am trying to load point cloud data from a .pcd-file that only includes XYZ data. Finally, I want to feed this point cloud into a module that requires PointXYZRGB data (but actually does not use the RGB data).
My current solution is to call pcd::io::loadPCDFile in order to populate pcl::PointCloud<pcl::PointXYZ> and then just copy points over one-by-one to a XYZRGB point cloud. Note that I am relatively new to C++ programming and might have overseen an obvious solution.
(I am using diamondback)

Originally posted by Julius on ROS Answers with karma: 960 on 2011-03-21
Post score: 11

A:

In the meantime, I found the effective (and simple) solution
PointCloud<PointXYZ> cloud_xyz;
// [...]
PointCloud<PointXYZRGB> cloud_xyzrgb;
copyPointCloud(cloud_xyz, cloud_xyzrgb);

a quick diff on serialized files showed this to be equivalent to
cloud_xyzrgb.points.resize(cloud_xyz.size());
for (size_t i = 0; i < cloud_xyz.points.size(); i++) {
    cloud_xyzrgb.points[i].x = cloud_xyz.points[i].x;
    cloud_xyzrgb.points[i].y = cloud_xyz.points[i].y;
    cloud_xyzrgb.points[i].z = cloud_xyz.points[i].z;
}

See API documentation.

Originally posted by Julius with karma: 960 on 2011-06-05
This answer was ACCEPTED on the original site
Post score: 19

