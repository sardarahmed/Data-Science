Q:

How does ROS work with real/actual robot in general? How's the process when we send a data to the actual robot?

These are basic questions. I've been wondering how does ROS work with real robot, in GENERAL.
Please help me to clarify these things

When we install ROS packages, we install it in our PC, and not in the actual robot. So the ROS library, driver,etc isonly in our PC, and not in the microprocessor of the robot. Is that right?
Which means that only our PC knows/recogizes ROS message types (e.g. cmd_vel) ,but the actual robot does not recognize the ROS message types. The actual robot only recognizes primitive data types (e.g. int) or whatever data types are present in its microcontroller.
So when we publish message to a topic e.g. cmd_vel to velocity topic. This topic is only known in our PC, and not in the robot's computer?
For a ROS package (e.g. navigation) working , the ROS package actually do all the works in our PC and just send result or information to the actual robot right.
So when we use/code all these ROS packages, we actually code just on our PC, meaning that we do not change anything on the robot's microcontroller itself. The robot has its own microcontroller and program, and what we do is just sending info to the microcontroller from our PC. Is that correct?
For a specific robot, Where/how to find out what data(message, command) an actual robot expects to receive?

Please elaborate on those things. If possible, please give step by step example on those things e.g. when sending velocity command to an actual robot, how's the process? The data that we send from our PC is of cmd_vel type. does the robot knows this type, or it is being converted first in our PC before sending? and after the data is received on the robot, does the robot has its own program to react on that data?
PS: I've worked with a drone with ROS before. And I got the impression that we only send info to the drone.. cause I didn't install ROS to the drone, I just install it to my PC. I'm so confused how do we send the info to the drone?

Originally posted by alienmon on ROS Answers with karma: 582 on 2016-10-13
Post score: 3

A:

Yes, but not every robot has a microprocessor. Bigger/more complex robots typically only have a PC communicating directly with the motor drivers, sensors, ...
Yes, ROS messages are for ROS, you need to translate this to whatever your actuators/sensors understand. For cmd_vel you typically have a base driver which translates the velocity of the robot base link to motor commands and sends those to the motor drives. This could be a message to a microprocessor which then sets the motor velocities or a CAN message going to a motor drive over CAN bus.
Well, yes
yes. but it needs information from the robot (sensor data, odometry, ...)
Not necessarily. You have to interface the PC with the microcontroller. If the microcontroller has a defined interface, you could do anything on the PC, but probably you have to write the microcontroller interface to the PC as well.
This is up to your hardware. Check how the microcontroller commands the robot, this is what you need to do in the end. How you send the data from ROS to your system is up to you.

There cannot be a step for step explanation for how to do this, because this depends on the HW. If you can control the robot to your liking from a self-written program on the microcontroller, you can write the rest yourself. But ROS is not just: "Plug in any roboter and they magically understand ROS".

EDIT
The answer to all your questions below is actually the same:
Any sensor or actuator provides an interface specification how to retrieve the data from it. What you need to do is to write a ROS driver for this HW, that adheres to the interface specification of the sensor/actuator and then "translates" this in the respective ROS message type.
The same basically holds for a micro controller, however, there you might have the chance to decide on the interface specification yourself.

Originally posted by mgruhler with karma: 12390 on 2016-10-13
This answer was ACCEPTED on the original site
Post score: 6

Original comments
Comment by alienmon on 2016-10-13:
When we create nodes, subscribers,and publishers etc, we create it in our PC. SO when we publish, only our PC knows. SO we do not send the info to the robot when we publish. How does the robot knows the info?
Comment by alienmon on 2016-10-13:
2. Where does all these translating process happen? in the actual robot or in our PC?
Comment by alienmon on 2016-10-13:
4. How does this reading info from the robot's sensors happen?
I know that in simulation , the robot will publish message containing the sensor readings to certain topics.
How is it in real robot? How does the real robot know how to publish things to topics, if it does not have ROS installed in it?
Comment by mgruhler on 2016-10-13:
see edit above.
Comment by alienmon on 2016-10-13:
Thanks for your reply. But I'm still confused. When writing code , we publish message to a topic, and we do not send it to the robot. How does the robot know the information/msg since the robot does not have subscriber to the topic.
Comment by alienmon on 2016-10-13:
I meant when we publish message , it's only to the ros master which is our own pc. And i don't remeber  sending it e.g. cmd_vel to the robot. Where(in the code) does this(sending data from pc to robot , which is different from publishing message to a topic) happen?
Comment by mgruhler on 2016-10-13:
you have a ROS node which subscribes to this topic and this then is the HW driver which translates it to whatever the robot understands.
Comment by gokhan.acer on 2020-05-12:
Your explain is very well. Firstly, thank you. But, I'm wondering about turtlebot3 communication protocol. I try to understand the Turtlebot3 code for PC, and OpenCR code for MCU. On Turtbot3-PC side, the robot generates and Twist message and publish on cmd_vel. But other side (MCU), there is an ardunio code and there are some ROS libs which are included. Code here. I am confused. Do you know about this achitecture?

