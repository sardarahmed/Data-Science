Q:

Arduino Operational Frequency

Just wanted to clarify some pretty basic Arduino concept:
If I put this code into an arduino board:
double start, endTime;
long int counter = 0;

void setup()
{
  Serial.begin(19200);
start = micros();
}

void loop()
{
  endTime = micros();
  counter++;

  //Point A

  if((endTime - start) > 1000000)
  {
    Serial.println(counter);
    counter = 0;
    start = micros();
  }

}

...I see >38000 value in my serial monitor (for the 'counter' variable).
However, the moment I put in some heavy calculation in 'Point A', the value drops to 150 - 170. This is expected, I guess.
My question is: Is the only way to push up the operational frequency lies in optimising the code/calculation? Or, is there some other way I can get faster execution?

A:

The microcontroller you are using has a certain clock frequency. Every operation you make it compute takes a specific (but constant) number of clock cycles to perform. What your code does is it enters the loop function, it performs all the tasks within it and then it jumps back to it's beginning and does everything again.
As you are limited by the number of operations you can perform per second and not the number of loop iterations, you need to either decrease the number of operations you are performing per loop iteration or find a way to increase the number of operations you can do per second.
In order to increase the number of operations you can do per second you need to increase the clock frequency which might mean buying a new chip if the one you are using is already at it's maximum.

