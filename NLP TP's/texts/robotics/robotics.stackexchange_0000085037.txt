Q:

Managing internal ros project through GIT

I am setting up a robotics project within my company, and will have 10+ people working on the project. Since its still in the early stages I want to get some version control system underway. Our company uses BitBucket so was going to use that.
My question: Is it possible to download all the ROS files needed that one normally builds ROS with, host it on a private repo, and then myself and team members can add/modify our own packages. The reason for hosting everything in one spot is for new team members to come to our repo and download everything in one place. Once we get the system running, and hide any company specific intellectual property (dont want to run into any company legal issues) we plan on publishing it publicly.

Originally posted by AC3021 on ROS Answers with karma: 13 on 2018-01-30
Post score: 0

A:

It's probably possible, but seems a bit unnecessary (and somewhat infeasible: how are you going to manage tracking upstream?).
ROS has various tools for managing source checkouts, such as vcstool, wstool and rosinstall_generator.
For binary management and installation -- of both ROS package dependencies as well as system dependencies -- rosdep is used (#q215059).
Setting up a source workspace from a given my_awesome_ros_application.rosinstall file (which only contains references to source repositories of your own packages or forks of upstream packages) is a matter of:
# init only needed once, update regularly
$ sudo rosdep init && rosdep update
$ source /opt/ros/$distro/setup.bash

# create and populate workspace (done once)
$ mkdir $HOME/catkin_ws && cd $HOME/catkin_ws
$ wstool init -j8 $HOME/catkin_ws/src http://location/of/your/my_awesome_ros_application.rosinstall
$ rosdep install -y --from-paths $HOME/catkin_ws/src --ignore-src -y

At this point you'll have your entire system setup to start developing on the packages. Change management can be done per repo, or when using vcstool per workspace.
My suggestion would be to store only the source repositories of your own packages (not the entire catkin_ws, #q264600), and deploy dependencies from the binary repositories as much as possible. Using released binaries is preferable in any case, unless:

there are no binaries available (because the pkg has not been released, in general, for your platform / cpu arch, or a particular version is no longer / not yet available)
you need a source checkout as you want to work on the actual pkg itself
you deploy to systems that absolutely cannot use released binaries
you must absolutely guarantee reproducable builds and need a source snapshot of all your dependencies (and their dependencies, etc)

Originally posted by gvdhoorn with karma: 86574 on 2018-01-30
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by gvdhoorn on 2018-01-30:
Note that you don't even need a full ROS install before starting the workspace setup process. With just the first steps of the installation tutorial (up to and including section 1.3) you can already do this. Provided all your pkgs declare their dependencies correctly, rosdep will install ..
Comment by gvdhoorn on 2018-01-30:
.. everything for you.
(you do need to install vcstool/wstool and rosdep of course)

