Q:

How to solve 'undefined reference to `ros::init' on Groovy?

I use ROS groovy on ubuntu 12.04 64 bits.
I try to write the simplest program.
I run:
  roscd
  cd ../src
  catkin_create_pkg sam_hello roscpp
  roscd sam_hello

src/sam_hello_src1.cpp:
  #include <ros/ros.h>
  
  int main(int argc,char **argv)
  {
      ros::init(argc,argv, "sam_hello_node");
      ros::spin();
      return 0;
  }

Then I edit CMakeLists.txt,add a line:
  add_executable(sam_hello_node src/sam_hello_src1.cpp)
                                      

Then I try to make:
  roscd
  cd ..
  catkin_make

It shows:
  sam@sam:~/code/ros_groovy$ catkin_make
  Base path: /home/sam/code/ros_groovy
  Source space: /home/sam/code/ros_groovy/src
  Build space: /home/sam/code/ros_groovy/build
  Devel space: /home/sam/code/ros_groovy/devel
  Install space: /home/sam/code/ros_groovy/install
  ####
  #### Running command: "make cmake_check_build_system" in "/home/sam/code/ros_groovy/build"
  ####
  ####
  #### Running command: "make -j4 -l4" in "/home/sam/code/ros_groovy/build"
  ####
  Scanning dependencies of target sam_hello_node
  [100%] Building CXX object sam_hello/CMakeFiles/sam_hello_node.dir/src/sam_hello_src1.cpp.o
  Linking CXX executable /home/sam/code/ros_groovy/devel/lib/sam_hello/sam_hello_node
  CMakeFiles/sam_hello_node.dir/src/sam_hello_src1.cpp.o: In function `main':
  sam_hello_src1.cpp:(.text+0x46): undefined reference to `ros::init(int&, char**, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)'
  sam_hello_src1.cpp:(.text+0x63): undefined reference to `ros::spin()'
  collect2: ld 回傳 1
  make[2]: *** [/home/sam/code/ros_groovy/devel/lib/sam_hello/sam_hello_node] Error 1
  make[1]: *** [sam_hello/CMakeFiles/sam_hello_node.dir/all] Error 2
  make: *** [all] Error 2
  Invoking "make" failed
  sam@sam:~/code/ros_groovy$                                

How to solve it?
Thank you~
---The following is the process that I setup groovy environments---
Commands:
  source /opt/ros/groovy/setup.sh
  mkdir -p ~/code/ros_groovy/src
  cd ~/code/ros_groovy/src
  catkin_init_workspace
  cd ~/code/ros_groovy/
  catkin_make
  echo 'source $HOME/code/ros_groovy/devel/setup.bash' >> ~/.bashrc
  source devel/setup.bash
  

Setting process:
  sam@sam:~$ source /opt/ros/groovy/setup.sh
  sam@sam:~$ mkdir -p ~/code/ros_groovy/src
  sam@sam:~$ cd ~/code/ros_groovy/src
  sam@sam:~/code/ros_groovy/src$ catkin_init_workspace
  Creating symlink "/home/sam/code/ros_groovy/src/CMakeLists.txt" pointing to "/opt/ros/groovy/share/catkin/cmake/toplevel.cmake"
  sam@sam:~/code/ros_groovy/src$ cd ~/code/ros_groovy/
  sam@sam:~/code/ros_groovy$ catkin_make
  Base path: /home/sam/code/ros_groovy
  Source space: /home/sam/code/ros_groovy/src
  Build space: /home/sam/code/ros_groovy/build
  Devel space: /home/sam/code/ros_groovy/devel
  Install space: /home/sam/code/ros_groovy/install
  ####
  #### Running command: "cmake /home/sam/code/ros_groovy/src -DCATKIN_DEVEL_PREFIX=/home/sam/code/ros_groovy/devel -DCMAKE_INSTALL_PREFIX=/home/sam/code/ros_groovy/install" in "/home/sam/code/ros_groovy/build"
  ####
  -- The C compiler identification is GNU
  -- The CXX compiler identification is GNU
  -- Check for working C compiler: /usr/bin/gcc
  -- Check for working C compiler: /usr/bin/gcc -- works
  -- Detecting C compiler ABI info
  -- Detecting C compiler ABI info - done
  -- Check for working CXX compiler: /usr/bin/c++
  -- Check for working CXX compiler: /usr/bin/c++ -- works
  -- Detecting CXX compiler ABI info
  -- Detecting CXX compiler ABI info - done
  -- Using CATKIN_DEVEL_PREFIX: /home/sam/code/ros_groovy/devel
  -- Using CMAKE_PREFIX_PATH: /opt/ros/groovy
  -- This workspace overlays: /opt/ros/groovy
  -- Found PythonInterp: /usr/bin/python (found version "2.7.3")
  -- Looking for include files CMAKE_HAVE_PTHREAD_H
  -- Looking for include files CMAKE_HAVE_PTHREAD_H - found
  -- Looking for pthread_create in pthreads
  -- Looking for pthread_create in pthreads - not found
  -- Looking for pthread_create in pthread
  -- Looking for pthread_create in pthread - found
  -- Found Threads: TRUE 
  -- Found gtest sources under '/usr/src/gtest': gtests will be built
  -- Using CATKIN_TEST_RESULTS_DIR: /home/sam/code/ros_groovy/build/test_results
  -- catkin 0.5.65
  -- BUILD_SHARED_LIBS is on
  -- Configuring done
  -- Generating done
  -- Build files have been written to: /home/sam/code/ros_groovy/build
  ####
  #### Running command: "make -j4 -l4" in "/home/sam/code/ros_groovy/build"
  ####
  sam@sam:~/code/ros_groovy$ echo 'source $HOME/code/ros_groovy/devel/setup.bash' >> ~/.bashrc
  sam@sam:~/code/ros_groovy$ source devel/setup.bash
  sam@sam:~/code/ros_groovy$
                                                               

Originally posted by sam on ROS Answers with karma: 2570 on 2013-05-27
Post score: 5

A:

Add
target_link_libraries(sam_hello_node
   ${catkin_LIBRARIES}
)

to your  CMakeLists.txt

Originally posted by fivef with karma: 2756 on 2013-05-27
This answer was ACCEPTED on the original site
Post score: 24

Original comments
Comment by joq on 2013-05-28:
Here is the current draft of some catkin tutorials I am working on: http://farnsworth.csres.utexas.edu/docs/catkin/html/howto/index.html
Comment by ctguell on 2013-10-10:
@fivef right now im working with pcl17 and with the program to detect people. when I included ros/ros.h and then ros::init(argc, argv, "talker") in the code and tried to compile; i got the following error "undefined reference to `ros::init", do you now why and how to solve it?? I would really appreciate some help
Comment by William on 2013-10-10:
That's because you are not linking against roscpp. Things to check, (assuming catkin) do you build_depend on roscpp in your package.xml? do you find_package(catkin REQUIRED COMPONENTS roscpp <other_things>)? do you target_link_libraries(<your_program_or_library_name> ${catkin_LIBRARIES})?
Comment by ctguell on 2013-10-10:
@William im using rosbiuld do you have any idea how to solve it in rosbuild?
Comment by William on 2013-10-10:
@ctguell Make sure you depend (<depend package="roscpp"/>) on roscpp in your manifest.xml and that you are using rosbuild_add_executable or rosbuild_add_library for your executables or libraries respectively.
Comment by ctguell on 2013-10-10:
@William i added  to the maifest.xml, where should i look to see if im using rosbuild_add_executable or rosbuild_add_library?
Comment by William on 2013-10-10:
@ctguell in your CMakeLists.txt
Comment by ctguell on 2013-10-10:
@William right now i have this     PCL_ADD_EXECUTABLE(pcl_ground_based_rgbd_people_detector ${SUBSYS_NAME} apps/main_ground_based_people_detection.cpp)
target_link_libraries(pcl_ground_based_rgbd_people_detector pcl_people pcl_common pcl_kdtree pcl_search pcl_features pcl_sample_consensus pcl_filters pcl_io pcl_visualization pcl_segmentation) , how should i add the ros library??

