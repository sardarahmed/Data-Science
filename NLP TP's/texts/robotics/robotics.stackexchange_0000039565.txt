Q:

Python or C++ for serial communication

I've created a node which uses the PySerial library to communicate with an XBee module wirelessly. The only occasional issue I encounter is dropped communication, which I resolved by just setting the node to auto-respawn in the launch file.
It did get me thinking though. I'm not a programming expert so I'm not sure what sort of overhead behind the scenes I'm encountering when I use python to perform serial communication.
My question is would it be better in the long run to use C++ for serial communication (ie would computations be faster, more reliable, etc.) over Python?

Originally posted by mrtc on ROS Answers with karma: 112 on 2012-04-15
Post score: 1

A:

I prefer C/C++, but I don't think it really matters for serial comm. If you are comfortable with Python and it does what you want, then I would stick with it. If you really want to learn C/C++ then go for it. It really depends on what you want to do. My understanding is Python is already highly optimized, so I doubt you are really missing anything.

Originally posted by Kevin with karma: 2962 on 2012-04-15
This answer was ACCEPTED on the original site
Post score: 4

Original comments
Comment by mrtc on 2012-04-16:
That's great to hear. I think I got a good handle on C/C++ but why reinvent the wheel right?
Comment by mkoval on 2012-04-16:
If you use C++, I strongly suggest using boost::asio for serial communication. It is not the easiest library to use, but it saves you from reinventing the entire wheel (i.e. setting up the serial port). In any case, you can't go wrong going with PySerial.

