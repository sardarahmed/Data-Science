Q:

Why we want to write all linear system into form of first order differential equations?

It seems to be taken granted that when we deal with some control system, the first thing we want to do is to linearize the system and put it in form of first order differential equations like $\dot x = Ax + Bu$.
But why do we want to do this? And most importantly, why it is always first order? Why we don't want to write the dynamics like $\ddot x = A\dot x + Bx + Cu$?

A:

I will use Mr. Richard Feynman's quote to answer your first question:

Finally, we make some remarks on why linear systems are so important.
The answer is simple: because we can solve them!

Yes. That's all there is to it. It is well understood how to deal with linear systems. It is possible to generalize any notion about linear systems, but not about nonlinear systems (i.e. nonlinear systems need to be thoroughly studied). There are some systems, however, that cannot be linearized, so nonlinear methods exist to deal with these nonlinear systems (e.g., a very fast pendulum cannot be modeled accurately with a linearized model).
The second question involves why differential equations are converted into first order systems. Once again, solving them is the answer. First order differential equations are much simpler and easier to handle than higher order differential equations. In control systems, this representation is called space-state representation. You can read more about this technique.

A:

:EDIT:
I was writing a comment that I don't think there's going to be a definitive answer on this question, that the question is akin to "Why do we draw free body diagrams for an engineering analysis?" or, "Why do we factor polynomials?" 
I then realized that this question is very much like, "Why do we factor polynomials?" Factoring a polynomial is useful because it reduces a higher order expression into products of first order expressions. 
Translating a system's dynamics equations into a series of coupled first order linear ODEs does the same thing. This still isn't an answer more than the original answer below, just a reinforcing concept that we generally choose to start with the simplest representation available because it affords the simplest means of solving the problem. 
:Original post:
Dynamic systems are usually represented that way because it's a "canonical form" for control problems.
A canonical form is advantageous because, if you can express your problem in a canonical format, you get to use all of the preexisting tools that have been developed to analyze and solve that problem. 
Consider standard interfaces in other settings - I can connect my watch, a printer, an Arduino, a game controller, etc. to my computer because they all use the USB standard interface. I don't need to keep a kit full of proprietary cables, or have a laptop that has a bank of proprietary connectors, thanks to the standard interface. 
Similarly, I don't need a "toolkit" of methods to evaluate or solve controls problems if I can get to the canonical control form. In particular, some important "standard tools" include:

Eigenvalues of $\bf{A}$ reveal system stability,
Standard methods to check for observability and controllability,
The separation principle, which shows that you can design the controller and observer independently,
Standard method for modifying system response (pole placement),
Scalability from single input, single output (SISO) systems to multi-input, multi-output (MIMO) systems, and the associated linear quadratic regulator,
Relatively easy to construct a Kalman filter from that representation (if the Kalman filter has $\hat{x}_{k|k-1} = F_k \hat{x}_{k-1|k-1} + B_k u_k$, then you can use $F_k = (I + A\Delta t)$ and $B_k = B \Delta t$, and then $H_k = C$).

This is a list of things that rely on your system to be in the form:
$$
\dot{x} = Ax + Bu \\
y = Cx + Du \\
$$
If you want (or need) to express your problem differently then the tools I've mentioned above are no longer valid and you need to find/make equivalents for your application. The hard part there isn't just finding something that "looks like" the tools mentioned, or that has "similar looking step responses," but proving things like BIBO stability, etc. This is the hard work that has been done for you already if you (can) use the existing tools. 

