Q:

how to replace rosbuild_link_boost() with the catkin macro

I am trying to convert a rosbuild package(DSP-3000 package source) to catkin package.
Currently on section 1.3 step 5 of this tutorial.
In the old package (rosbuild), the DSP-3000/CMakeLists.txt has the following:
cmake_minimum_required(VERSION 2.4.6)
include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)

rosbuild_init()
rosbuild_add_boost_directories()
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

include_directories(cereal_port/include)
rosbuild_add_executable(dsp3000 src/dsp3000.cpp)
target_link_libraries(dsp3000 cereal_port)
rosbuild_link_boost(dsp3000 thread)

add_subdirectory(cereal_port)

The tutorial said If rosbuild macros were used, switch from rosbuild macros to the underlying CMake commands. so, I replaced all the rosbuild macros with catkin macros, shown below:
cmake_minimum_required(VERSION 2.4.6)
include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)

find_package()
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

include_directories(cereal_port/include)
add_executable(dsp3000 src/dsp3000.cpp)
target_link_libraries(dsp3000 cereal_port)

add_subdirectory(cereal_port)

Now the next step is to Declare how your targets (C++ binaries) shall be installed. In my  case, Can anyone tell me what do I need to add in my DSP-3000/CMakeLists.txt to complete this step?
Also, can anyone check if I did the rosbuild to catkin conversion correctly for this file?
Thank you.

Originally posted by frodyteen on ROS Answers with karma: 62 on 2018-05-09
Post score: 0

A:

Please refer to catkin documentation: C++ system library dependencies. Then follow through to catkin documentation: Building and installing C++ executables.
On both pages, Boost is used as an example.

Edit: I'm slightly confused. Looking at the master branch of ros-drivers/kvh_drivers it already appears to be a Catkin package (CMakeLists.txt here and package.xml here). It was converted in ros-drivers/kvh_drivers#2.
Do you have any specific reason to want to use the indigo branch? I'm not sure why that is still there, as it seems to have lagged behind master quite a bit.

Edit2: I've opened ros-drivers/kvh_drivers#6 to ask the maintainer(s) what the status of the Indigo branch is.

Edit3:

You are right, I was able to build it successfully, then I ran rosrun kvh dsp3000 and it gave me an error shown in this link

that would seem to be a different issue. Let's not mix them.
If your current question was answered, please mark the question as answered by ticking the checkmark.

Originally posted by gvdhoorn with karma: 86574 on 2018-05-10
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by frodyteen on 2018-05-10:
Thank you so much for the help, The robot that I am working on uses ubuntu 14.04 Indigo. Therefore, I am trying to download the Indigo release of kvh_drivers.
Also, The master branch is for kinetic version and I tried to build and run it but it gave me an error.
Comment by gvdhoorn on 2018-05-10:
What makes you think it's "for Kinetic"?
I just built it in an Indigo Docker container and it seems to build fine.
As I don't have the hw, I can't run it, but I would expect it to just work.
What 'error' did it give you?
Comment by frodyteen on 2018-05-10:
this link
You are right, I was able to build it successfully, then I ran rosrun kvh dsp3000 and it gave me an error shown in this link
Comment by gvdhoorn on 2018-05-10:
That just tells you the package has been released into Kinetic. It doesn't mean it only works on Kinetic.
Please just try to build the master branch on Indigo. It should work.
Be sure to update the launch file with the correct port before you try to start it.
Comment by gvdhoorn on 2018-05-10:
And please also make sure to use the correct procedure for building pkgs from source. See #q252478 for an example workflow if needed.
Comment by frodyteen on 2018-05-10:
Thank you.

