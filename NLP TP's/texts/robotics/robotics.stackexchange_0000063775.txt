Q:

rostest & Python - Multiple Test Fixtures In Single File

With integration testing and rostest with Python, is it possible to define multiple test fixtures (classes inheriting from unittest.TestCase) and run them from a single file? Or do I need to create a new file for every test fixture I create?
I would like to have a single file which contains functional tests (tests which cover acceptable usage of code) and halt-catch-fire tests (tests which blatantly abuse code to evoke failure responses). Ideally the functional and HCF tests are classes which inherit from unittest.TestCase, and in turn these classes have multiple feature-specific tests.
However I am running into problems trying to run two integration tests from a single file. It's as if the first test's results are overwritten by the second test. Is this not the intended use of rostest? I.e. what I would like to do is have a file my_node_integration_tests.py contain the following:
if __name__ == '__main__':
    import rostest
    rostest.rosrun('my_package', 'my_functional_test', FunctionalTestFixture, sys.argv) 
    rostest.rosrun('my_package', 'my_hcf_test', HcfTestFixture, sys.argv) 

And my .test file contains:
<test test-name="my_node_test_suite" pkg="my_package" type="my_node_integration_tests.py" />

Originally posted by trianta2 on ROS Answers with karma: 293 on 2014-11-03
Post score: 1

A:

A reading of the rostest.rosrun source code reveals that it is in fact overwriting the results file with each function call: http://docs.ros.org/indigo/api/rostest/html/rostest-pysrc.html#rosrun
rosunit.unitrun has a similar pattern and likely has the same flaw: http://docs.ros.org/indigo/api/rosunit/html/rosunit.pyunit-pysrc.html#unitrun
I think the best thing to do here is to split your tests into separate files. If this is a serious problem for you, you may want to consider filing a bug against rostest or submitting a patch which provides the behavior you need.

Originally posted by ahendrix with karma: 47576 on 2014-11-03
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by trianta2 on 2014-11-03:
Thanks for your response. I'm basically trying to have a good tradeoff between # of files vs amount of use per file. I could split these tests into two files; one for functionality testing and one for HCF testing.

