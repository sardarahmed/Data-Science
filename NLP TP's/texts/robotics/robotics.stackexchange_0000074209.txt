Q:

Understanding velodyne transform_node vs cloud_node to transform point clouds

Hello!
I was looking into the source code for the velodyne package and I've a couple of questions about cloud_node and transform_node which I'm hoping to learn more about.
Consider the following cases:
Case 1: I use the cloud_node to get point clouds  in the 'velodyne' frame. Given the velodyne->odom transform exists, I can use tf to transform the point clouds to the odom frame.
Case 2: I use the transform_node,  VelodynePackets are unpacked into point clouds and transform for
velodyne->odom is applied within the node (from line 111 in transform.cc)
pcl_ros::transformPointCloud(inPc_.header.frame_id,
                                     ros::Time(0), inPc_,
                                     config_.frame_id,
                                     tfPc_, listener_);

Here's my question: Is there any advantage to transforming point clouds from individual VelodynePackets (in Case 2), as opposed to the full point cloud (Case 1)? When would I use one over the other?
Thanks!

Originally posted by Venkat Ganesh on ROS Answers with karma: 57 on 2016-05-31
Post score: 1

A:

The main use of transform_node is when the device is moving fast enough for the transforms to change significantly during the 0.1 second required for a full revolution (assuming 600 RPM). This is especially important if the heading changes.

Originally posted by joq with karma: 25443 on 2016-06-01
This answer was ACCEPTED on the original site
Post score: 1

