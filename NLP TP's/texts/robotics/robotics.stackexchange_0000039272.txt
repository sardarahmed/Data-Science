Q:

openni_kinect on armv7l install from source error

Hey gang,
Running Electric on a PandaboardES with a stripped down Ubuntu 11.10 OS on it. The Pandaboard is an ARMv7l architecture.
Electric installed just fine from source. Now I'm trying to get Openni_kinect installed so I can try some stuff using the Kinect. I'm trying to do the install from source and I'm getting the following output when I attempt to perform the "make" step, with the error at the end.
Trying to install from the step 3.1 Ubuntu Installation didn't work (said it couldn't find a matching package.)

( Edit -- I got past the original problem, but now have some others. Here's what I had to do to get past the original problem and where I'm at now...)
Ok, I had to install:
libusb-1.0.0-dev
openjdk-6-jdk
doxygen
I had to fix the .py file in build/openni/Platform/Linux/CreateRedist to add in "armv7l" as a legal option.
I also had to fix /drivers/ps_engine/build/ps_engine/Platform/Linux/CreateRedist/RedistMaker to add armv7l as an option for ARM.
And I got a bit farther but ran into another one here that I don't have a clue how to fix:

(snipped out a ton of compiling here)

make[3]: Leaving directory `/home/mkopack/Downloads/drivers/ps_engine/build/ps_engine/Platform/Linux/Build/XnDeviceFile'
make[2]: Leaving directory `/home/mkopack/Downloads/drivers/ps_engine/build/ps_engine/Platform/Linux/Build'
Creating redist folder...
Creating tar...
Done!
/home/mkopack/Downloads/drivers/ps_engine
touch installed
make[1]: Leaving directory `/home/mkopack/Downloads/drivers/ps_engine'
cd nite && make
make[1]: Entering directory `/home/mkopack/Downloads/drivers/nite'
mkdir -p build
./download_checkmd5.py http://pr.willowgarage.com/downloads/openni/ 
Usage: download_checkmd5.py URI dest [md5sum]

download_checkmd5.py: error: wrong number of arguments
make[1]: *** [build/Nite-1.3.1.5/unpacked] Error 2
make[1]: Leaving directory `/home/mkopack/Downloads/drivers/nite'
make: *** [nite_lib] Error 2
mkopack@localhost:~/Downloads/drivers$ 

Looking at the drivers/nite/Makefile, it seems to have entries for 32+64 bit x86, but nothing for any other architecture, which might explain the missing parameter I think. I just don't know what to do at this point.
Is there a way I can skip around the md5check?
God this has been an absolute headache and a half!

EDIT #2:
I tried what Eric suggested as you see below, but no dice...
(Edit - I figured it out.. .NEeded to first go to my ros_workspace and do:
hg clone https://kforge.ros.org/openni/openni_launch
as that's where the openni stuff was...
Then cd into the new openni directory and perform the command Eric gave.
Compiling now... Keeping fingers crossed. Thanks Eric!

EDIT#3:
Well, that still didn't work...
It keeps saying it needs:
libusb-1.0.0-dev (even though I have libusb-1.0-dev installed)
yaml-cpp (forgot the version number) - which I can't even find when doing apt-cache search yaml-cpp)
And it's looking for openni-dev which I can't find listed anywhere on the ROS wiki or online.
About to throw my hands up in disgust soon!

Originally posted by mkopack on ROS Answers with karma: 171 on 2012-04-03
Post score: 2

Original comments
Comment by Eric Perko on 2012-04-04:
If you are sure you have the rosdeps installed (and think the problem is just that rosdep isn't detecting them properly) you can leave out the --rosdep-install step and replace it with --no-rosdep to skip rosdep checks and just try to build.
Comment by Eric Perko on 2012-04-04:
For any packages you can't find in an apt-cache search, they likely don't have an ARM .deb for 11.10. I don't know where you could search to check, but they may be available for the LTS (10.04 for the next month or so) if they don't build all ARM packages for all releases.

A:

If you don't need skeleton tracking, you may want to try to skip the compile of nite. I think those are distributed by Primesense as binaries, so if there isn't an ARM version available, it won't be found.
I suggest that you try doing rosmake openni_launch --rosdep-install instead of making the entire openni_kinect stack. That will pull in the things required to actually get RGB point clouds out of the driver, but not to build NITE skeleton tracking library.

Originally posted by Eric Perko with karma: 8406 on 2012-04-03
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by mkopack on 2012-04-03:
Just tried this and got the following:

