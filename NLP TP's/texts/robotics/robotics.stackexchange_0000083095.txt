Q:

3D reconstruction with stereo cameras

Dear ROS community!
I've started to built a stereo camera system to reconstruct the field of view. I use two Logitech C270 webcameras on a base stand to get the image streams. (Here you can see the prototype: https://www.youtube.com/watch?v=vypIrNU4G9I)
For the project it's necessary to hold the camera optics as close as I can, so I've turned one camera vertically. I use video_stream_opencv package to get and rotate the images and also to send them to the other nodes.
Because of the further operations and to save some hardware resources, I thought it's necessary to synchronize the images' and camera info's timestamps before calibration, rectification etc., so I've created a synchronization node which uses approximate synchronization between the image frames and camera info messages, and it also republishes the data with the same timestamps. I thought that after the synchronization won't be necessary to use the approx_sync, but I think I was wrong. To test the system I also started to use a static Tf publisher.
Anyway, I couldn't get out some point cloud from the system, however in the terminal a warning message appears frequently:

odometry: Could not get transform from
base_link to left
(stamp=1506788450.735916) after
0.200000 seconds ("wait_for_transform_duration"=0.200000)!
Error=". canTransform returned after
0.202835 timeout was 0.2.

I suspect to the static TF publisher, but I'm not sure.
Here is my launch file:
<!-- Stereo -->
<arg name="stereo_namespace"            default="/stereo_camera"/>
<arg name="left_image_topic"            default="$(arg stereo_namespace)/left/image_rect" />
<arg name="right_image_topic"           default="$(arg stereo_namespace)/right/image_rect" />

<arg name="approx_sync"                 default="true"/>
<arg name="queue_size"                  default="5"/>

<!-- Tranfsorm -->
<arg name="use_static_transform"        default="true"/>

<!-- 2D visualization -->
<arg name="visualize"                   default="false"/>
<arg name="show_raw"                    default="true"/>
<arg name="show_disparity"              default="true"/>

<!-- Visual SLAM -->
<arg name="frame_id"                    default="base_link"/>   <!-- Fixed frame id, set "base_link" or "base_footprint" if they are published -->
<arg name="rtabmap"                     default="true"/>
<arg name="odometry"                    default="true"/>

<!-- Odometry -->
<arg name="odom_frame_id"               default="odom"/>            <!-- If set, TF is used to get odometry instead of the topic -->
<arg name="ground_truth_frame_id"       default=""/>            <!-- e.g., "world" -->
<arg name="ground_truth_base_frame_id"  default=""/>            <!-- e.g., "tracker", a fake frame matching the frame "frame_id" (but on different TF tree) -->
<arg name="wait_for_transform"          default="true"/>
<arg name="wait_for_transform_duration" default="0.2"/>

<!-- 3D visualization -->
<arg name="rviz"                        default="false"/>
<arg name="rtabmapviz"                  default="true"/>

<arg name="localization"            default="false"/>
<arg name="time_threshold"          default="0"/>
<arg name="optimize_from_last_node" default="false"/>
<arg name="launch_prefix"           default=""/>
<arg name="convert_depth_to_mm"     default="true"/>
<arg name="subscribe_scan"          default="true"/>
<arg name="subscribe_scan_cloud"    default="false"/>
<arg name="scan_cloud_topic"        default="/scan_cloud"/>
<arg name="visual_odometry"         default="true"/> 

<arg name="camera_info" default="camera_info"/>

<!--*******************************************************************************************-->
<!-- Core functionality ***********************************************************************-->
<!--*******************************************************************************************-->

<!-- Camera -->
<group ns="/camera">
    <node pkg="nodelet" type="nodelet" name="stereo_camera_nodelet"  args="manager"/>

    <!-- Left video stream input -->
    <include file="$(find video_stream_opencv)/launch/camera.launch" >
        <arg name="camera_name"             value="left"/>
        <arg name="camera_info_url"         value="file:///$(find reconstruction)/config/left.yaml" />
        <arg name="video_stream_provider"   value="1"/>
        <arg name="flip_horizontal"         value="false" />
        <arg name="flip_vertical"           value="false" />
        <arg name="fps"                     value="$(arg fps)"/>
    </include>
    <!-- Right video stream input -->
    <include file="$(find video_stream_opencv)/launch/camera.launch" >
        <arg name="camera_name"             value="right"/>
        <arg name="camera_info_url"         value="file:///$(find reconstruction)/config/right.yaml" />
        <arg name="video_stream_provider"   value="2"/>
        <arg name="flip_horizontal"         value="false" />
        <arg name="flip_vertical"           value="true" />
        <arg name="fps"                     value="$(arg fps)"/>
    </include>
</group>

<!-- Syncronizer -->
<node name="syncronizer" pkg="reconstruction" type="syncronizer"/>

<!-- Stereo processing -->
<group ns="/stereo_camera" >
    <node pkg="nodelet" type="nodelet" name="stereo_nodelet"  args="manager"/>

    <node pkg="stereo_image_proc" type="stereo_image_proc" name="stereo_image_proc">
        <remap from="left/image_raw"            to="$(arg left_camera_raw)"/>
        <remap from="right/image_raw"           to="$(arg right_camera_raw)"/>
        <remap from="left/camera_info"          to="$(arg left_camera_info_topic)"/>
        <remap from="right/camera_info"         to="$(arg right_camera_info_topic)"/>

        <param name="prefilter_size"            value="35"/>
        <param name="prefilter_cap"             value="11"/>
        <param name="correlation_window_size"   value="41"/>
        <param name="min_disparity"             value="-15"/>
        <param name="disparity_range"           value="160"/>
        <param name="uniqueness_ratio"          value="0.0"/>
        <param name="texture_threshold"         value="1000"/>
        <param name="speckle_size"              value="500"/>
        <param name="speckle_range"             value="16"/>
        <param name="approximate_sync"          value="true"/>
        <param name="queue_size"                value="5"/>
    </node>
</group>

<!-- Visualization -->
<group if="$(arg visualize)" ns="/visualize_camera">
    <node pkg="nodelet" type="nodelet" name="visuzalize_camera_nodelet"  args="manager"/>

    <!-- Show raw data -->
    <node if="$(arg show_raw)" name="left_image_view" pkg="image_view" type="image_view">
        <remap from="image" to="$(arg left_camera_raw)"/>
    </node>
    <node if="$(arg show_raw)" name="right_image_view" pkg="image_view" type="image_view">
        <remap from="image" to="$(arg right_camera_raw)"/>
    </node>
    
    <!-- Show disparity map -->
    <node if="$(arg show_disparity)" name="disparity_image_view" pkg="image_view" type="stereo_view">
        <remap from="stereo"    to="$(arg stereo_namespace)"/>
        <remap from="image"     to="/image_rect"/>

        <param name="approx_sync"       type="bool"     value="$(arg approx_sync)"/>
        <param name="queue_size"        type="int"      value="$(arg queue_size)"/>
    </node>
</group>

<!-- Transform -->
<node if="$(arg use_static_transform)" pkg="tf" type="static_transform_publisher" name="world_to_map" 
      args="0.0 0.0 0.30 0.0 0.0 0.0 /base_link /camera_link 100" />

<group ns="rtabmap">
    <!-- Stereo Odometry -->   
    <node if="$(arg odometry)" pkg="rtabmap_ros" type="stereo_odometry" name="stereo_odometry" output="screen">
        <remap from="left/image_rect"       to="$(arg left_image_topic)"/>
        <remap from="right/image_rect"      to="$(arg right_image_topic)"/>
        <remap from="left/camera_info"      to="$(arg left_camera_info_topic)"/>
        <remap from="right/camera_info"     to="$(arg right_camera_info_topic)"/>
        
        <param name="approx_sync"                   type="bool"     value="$(arg approx_sync)"/>
        <param name="frame_id"                      type="string"   value="$(arg frame_id)"/>
        <param name="odom_frame_id"                 type="string"   value="odom"/>
        <param name="queue_size"                    type="int"      value="5"/>
    </node>
    
    <!-- Visual SLAM: args: "delete_db_on_start" and "udebug" -->
    <node if="$(arg rtabmap)" name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen" args="--delete_db_on_start --udebug">
        <remap from="left/image_rect"       to="$(arg left_image_topic)"/>
        <remap from="right/image_rect"      to="$(arg right_image_topic)"/>
        <remap from="left/camera_info"      to="$(arg left_camera_info_topic)"/>
        <remap from="right/camera_info"     to="$(arg right_camera_info_topic)"/>

        <remap from="odom" to="/rtabmap/odom"/>
        
        <param name="approx_sync"                   type="bool"     value="$(arg approx_sync)"/>
        <param name="frame_id"                      type="string"   value="$(arg frame_id)"/>
        <param name="queue_size"                    type="int"      value="30"/>
        
        <param name="subscribe_stereo"              type="bool" value="true"/>
        <param name="subscribe_depth"               type="bool" value="false"/>
    </node>

    <!-- Visualisation RTAB-Map -->
    <node if="$(arg rtabmapviz)" pkg="rtabmap_ros" type="rtabmapviz" name="rtabmapviz" args="-d $(find rtabmap_ros)/launch/config/rgbd_gui.ini" output="screen">
        <remap from="left/image_rect"       to="$(arg left_image_topic)"/>
        <remap from="right/image_rect"      to="$(arg right_image_topic)"/>
        <remap from="left/camera_info"      to="$(arg left_camera_info_topic)"/>
        <remap from="right/camera_info"     to="$(arg right_camera_info_topic)"/>
        
        <remap from="odom_info" to="/rtabmap/odom_info"/>
        <remap from="odom" to="/rtabmap/odom"/>
        
        <param name="frame_id"                      type="string"   value="$(arg frame_id)"/>
        <param name="queue_size"                    type="int"      value="10"/>
        
        <param name="subscribe_stereo"              type="bool" value="true"/>
        <param name="subscribe_odom_info"           type="bool" value="true"/>
    </node>

Originally posted by MateToth on ROS Answers with karma: 3 on 2017-09-30
Post score: 0

Original comments
Comment by gvdhoorn on 2017-10-01:\

<node .. type="static_transform_publisher" .. args=".. /base_link /camera_link 100" />

I don't know if it's the cause, but the last arg there is the period, not the rate. So static_transform_publisher (STP) is publishing at 10 Hz here.
Try STP from tf2.
Comment by MateToth on 2017-10-02:
I tried to use tf2 but unfortunately it didn't help.

A:

What is your TF tree? ($ rosrun tf view_frames)
As the error is saying, odometry cannot transform frame left to frame base_link. You may want to add a static transform between camera_link and left as this:
<arg name="pi/2" value="1.5707963267948966" />
<node if="$(arg use_static_transform)" pkg="tf" type="static_transform_publisher" name="camera_optical" 
      args="0 0 0 -$(arg pi/2) 0 -$(arg pi/2) /camera_link /left 100" />

... so you have base_link -> camera_link -> left.
Note that you don't need to pre-synchronize as stereo_odometry and rtabmap nodes can do it directly with approx_sync:=true. But yes, if you pre-syncrhonize and set the same timestamp on all image/camera_info topics, you can use approx_sync:=false for odometry and rtabmap. If you have poor results after that, it may be caused by bad stereo rectification and/or synchronization. You may add to your question an example of left/right images (as well as the disparity image generated from stereo_image_proc) to see if they seem correctly rectified at least.
I strongly suggest that you get a real stereo camera that does stereo hardware (not software!) synchronization to get good results when the robot is moving.
cheers,
Mathieu

Originally posted by matlabbe with karma: 6409 on 2017-10-02
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by MateToth on 2017-10-02:
I thought the same thing. I copied your code into my launch file, and after the modification I didn't get that warning message again, and now I see the point cloud! Thank you!
I will use a real stereo camera, but now that prototype is also good for me. Thanks again for your help and suggestions!

