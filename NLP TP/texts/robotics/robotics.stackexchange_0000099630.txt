Q:

unable to integrate local planner plugin into move_base

I am trying to integrate my local path planner plugin into move_base. On launching the modified move_base launch file, I am getting the following error -
[FATAL] [1626211675.635218297, 96.984000000]: Failed to create the local_planner/LocalPlanner planner, are you sure it is properly registered and that the containing library is built? Exception: Failed to load library /home/skpro19/catkin_ws/devel/lib//liblocal_planner_lib.so. Make sure that you are calling the PLUGINLIB_EXPORT_CLASS macro in the library code, and that names are consistent between this macro and your XML. Error string: Could not load library (Poco exception = /home/skpro19/catkin_ws/devel/lib//liblocal_planner_lib.so: undefined symbol: _ZN13local_planner12LocalPlannerD1Ev)
[move_base-1] process has died [pid 26446, exit code -11, cmd /home/skpro19/catkin_ws/devel/lib/move_base/move_base /odom:=odometry/filtered __name:=move_base __log:=/home/skpro19/.ros/log/29b07b08-e421-11eb-b77b-c8e2656b0bb1/move_base-1.log].
log file: /home/skpro19/.ros/log/29b07b08-e421-11eb-b77b-c8e2656b0bb1/move_base-1*.log

Also, is it normal that it is looking for the library at lib//lib_local_planner_lib instead of lib/lib_local_planner_lib ? I am also curious about the undefined symbol: _ZN13local_planner12LocalPlannerD1Ev part.
I have inserted the line PLUGINLIB_EXPORT_CLASS(local_planner::LocalPlanner, nav_core::BaseLocalPlanner);
in my source (my_local_planner_ros.cpp) file.
I am attaching my CMakeLists.txt, package.xml and local_planner_plugin.xml files below.
CMakeLists.txt
cmake_minimum_required(VERSION 3.0.2)
project(my_local_planner)

add_compile_options(-std=c++11)

find_package(catkin REQUIRED COMPONENTS

    base_local_planner
    costmap_2d
    #dynamic_reconfigure
    nav_core
    nav_msgs
    pluginlib
    sensor_msgs
    roscpp
    tf2
    tf2_geometry_msgs
    tf2_ros
)

#find_package(Eigen3 REQUIRED)
#remove_definitions(-DDISABLE_LIBUSB-1.0)
find_package(Boost REQUIRED COMPONENTS system)

catkin_package(
    CATKIN_DEPENDS
        base_local_planner
        #dynamic_reconfigure
        nav_msgs
        pluginlib
        sensor_msgs
        roscpp
        tf2
        tf2_ros
)

include_directories(
    include
    ${catkin_INCLUDE_DIRS}
    ${Boost_INCLUDE_DIRS}

)
#add_definitions(${EIGEN3_DEFINITIONS})

# dynamic reconfigure
#generate_dynamic_reconfigure_options(
 #   cfg/DWAPlanner.cfg
#)

add_library(local_planner_lib src/my_local_planner_ros.cpp)

package.xml
<?xml version="1.0"?>
<package format="2">
  <name>my_local_planner</name>
  <version>0.0.0</version>
  <description>The my_local_planner package</description>

  <!-- One maintainer tag required, multiple allowed, one person per tag -->
  <!-- Example:  -->
  <!-- <maintainer email="jane.doe@example.com">Jane Doe</maintainer> -->
  <maintainer email="skpro19@todo.todo">skpro19</maintainer>

  <!-- One license tag required, multiple allowed, one license per tag -->
  <!-- Commonly used license strings: -->
  <!--   BSD, MIT, Boost Software License, GPLv2, GPLv3, LGPLv2.1, LGPLv3 -->
  <license>TODO</license>

  <!-- Url tags are optional, but multiple are allowed, one per tag -->
  <!-- Optional attribute type can be: website, bugtracker, or repository -->
  <!-- Example: -->
  <!-- <url type="website">http://wiki.ros.org/my_explore_lite</url> -->

  <!-- Author tags are optional, multiple are allowed, one per tag -->
  <!-- Authors do not have to be maintainers, but could be -->
  <!-- Example: -->
  <!-- <author email="jane.doe@example.com">Jane Doe</author> -->

  <!-- The *depend tags are used to specify dependencies -->
  <!-- Dependencies can be catkin packages or system dependencies -->
  <!-- Examples: -->
  <!-- Use depend as a shortcut for packages that are both build and exec dependencies -->
  <!--   <depend>roscpp</depend> -->
  <!--   Note that this is equivalent to the following: -->
  <!--   <build_depend>roscpp</build_depend> -->
  <!--   <exec_depend>roscpp</exec_depend> -->
  <!-- Use build_depend for packages you need at compile time: -->
  <!--   <build_depend>message_generation</build_depend> -->
  <!-- Use build_export_depend for packages you need in order to build against this package: -->
  <!--   <build_export_depend>message_generation</build_export_depend> -->
  <!-- Use buildtool_depend for build tool packages: -->
  <!--   <buildtool_depend>catkin</buildtool_depend> -->
  <!-- Use exec_depend for packages you need at runtime: -->
  <!--   <exec_depend>message_runtime</exec_depend> -->
  <!-- Use test_depend for packages you need only for testing: -->
  <!--   <test_depend>gtest</test_depend> -->
  <!-- Use doc_depend for packages you need only for building documentation: -->
  <!--   <doc_depend>doxygen</doc_depend> -->
  <buildtool_depend>catkin</buildtool_depend>
  <build_depend>roscpp</build_depend>
  <build_depend>std_msgs</build_depend>
  

  <build_export_depend>roscpp</build_export_depend>
  <build_export_depend>std_msgs</build_export_depend>
 
  <exec_depend>roscpp</exec_depend>
  <exec_depend>std_msgs</exec_depend>
  
  <depend>costmap_2d</depend>
  <depend>move_base</depend>
  <depend>actionlib</depend>  
  <depend>move_base_msgs</depend>
  <depend>visualization_msgs</depend>
  <depend>nav_core</depend>
  <depend>base_local_planner</depend>
  <depend>pluginlib</depend>
  <depend>sensor_msgs</depend>
  <depend>tf2</depend>
  <depend>tf2_ros</depend>
  

  <build_depend>message_generation</build_depend>
  <exec_depend>message_runtime</exec_depend>

  <depend>nav_msgs</depend>

  <export>
  
    <nav_core plugin="${prefix}/local_planner_plugin.xml" />
  
  </export>

</package>

local_planner_plugin.xml
<library path="$HOME/catkin_ws/devel/lib/liblocal_planner_lib">
  <class name="local_planner/LocalPlanner" type="local_planner::LocalPlanner" base_class_type="nav_core::BaseLocalPlanner">
    <description>
      A implementation of a local planner using either a DWA approach based on configuration parameters.
    </description>
  </class>
</library>

move_base.launch
<?xml version="1.0"?>
<!--
Software License Agreement (BSD)

\file      description.launch
\authors   Paul Bovbel <pbovbel@clearpathrobotics.com>, Prasenjit Mukherjee <pmukherj@clearpathrobotics.com>
\copyright Copyright (c) 2015, Clearpath Robotics, Inc., All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that
the following conditions are met:
 * Redistributions of source code must retain the above copyright notice, this list of conditions and the
   following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the 
   following disclaimer in the documentation and/or other materials provided with the distribution.
 * Neither the name of Clearpath Robotics nor the names of its contributors may be used to endorse or promote
   products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WAR-
RANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, IN-
DIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE
)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->
<launch>

  <arg name="no_static_map" default="false"/>
  <arg name="ns" default="/"/>
  <!-- arg name="base_global_planner" default="navfn/NavfnROS" / -->
  
  <arg name="base_global_planner" default="global_planner/GlobalPlanner" />
  
  <arg name="base_local_planner" default="local_planner/LocalPlanner"/>
  <!-- <arg name="base_local_planner" default="base_local_planner/TrajectoryPlannerROS"/> -->

  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen" ns="$(arg ns)">

    <remap from="/odom" to="odometry/filtered" />

    <!-- Loading parameters for the move_base node -->
    <rosparam file="$(find my_global_planner)/config/move_base_params.yaml" command="load" />

    <!-- Loading parameters for the local and global planners used by move_base-->
    <param name="base_global_planner" value="$(arg base_global_planner)"/>
    <param name="base_local_planner" value="$(arg base_local_planner)"/>  
    <rosparam file="$(find my_global_planner)/config/planner.yaml" command="load"/>

    <!-- observation sources located in costmap_common.yaml -->
    <rosparam file="$(find my_global_planner)/config/costmap_common.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find my_global_planner)/config/costmap_common.yaml" command="load" ns="local_costmap" />

    <!-- local costmap, needs size -->
    <rosparam file="$(find my_global_planner)/config/costmap_local.yaml" command="load" ns="local_costmap" />
    <param name="local_costmap/width" value="10.0"/>
    <param name="local_costmap/height" value="10.0"/>

    <!-- static global costmap, static map provides size -->
    <rosparam file="$(find my_global_planner)/config/costmap_global_static.yaml" command="load" ns="global_costmap" unless="$(arg no_static_map)"/>
    
    <!-- global costmap with laser, for odom_navigation_demo -->
    <rosparam file="$(find my_global_planner)/config/costmap_global_laser.yaml" command="load" ns="global_costmap" if="$(arg no_static_map)"/>
    <param name="global_costmap/width" value="50.0" if="$(arg no_static_map)"/>
    <param name="global_costmap/height" value="50.0" if="$(arg no_static_map)"/>
  </node>

</launch>

Originally posted by skpro19 on ROS Answers with karma: 310 on 2021-07-13
Post score: 0

A:

You can use c++filt to decode your missing symbol:
>> c++filt _ZN13local_planner12LocalPlannerD1Ev
local_planner::LocalPlanner::~LocalPlanner()

Looks like maybe you forgot to actually define your destructor?

Originally posted by fergs with karma: 13902 on 2021-07-13
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by skpro19 on 2021-07-14:
Thanks. That solved the issue. Just curious, is there a reason that the error message is in such cyrptic form (a.k.a undefined symbol: _ZN13local_planner12LocalPlannerD1Ev)? Is there a way to see the error messages in not-so cryptic format by default?
Comment by fergs on 2021-07-25:
AFAIK, there is no way to automatically run c++filt during the build

