Q:

Where should I indeed place my "ros::spin()"?

I am a freshman for ROS, and I find a interesting (for me) thing:
I wrote a node, for example, let's call it my_node.cpp, it looks like this:
//in my_node.cpp
ros::init(argc, argv, "my_node");
ros::NodeHandle nh("");
ros::NodeHandle nh_local("~");
MyNode my_node(nh, nh_local);
ros::spin();

And in the construct function of MyNode, it looks like this:
MyNode (ros::Nodehandle nh, ros:Nodehandle nh_local)
{ 
message_filters::Subscriber<Image> image1_sub(nh, "image1", 1);
message_filters::Subscriber<Image> image2_sub(nh, "image2", 1); 
typedef sync_policies::ApproximateTime<Image, Image> MySyncPolicy;
// ApproximateTime takes a queue size as its constructor argument, hence MySyncPolicy(10)
Synchronizer<MySyncPolicy> sync(MySyncPolicy(10), image1_sub, image2_sub);
sync.registerCallback(boost::bind(&callback, _1, _2));
}

In fact it just looks like the tutorial of ros wiki about message filter.
The fact is, my callback function had never been called.When I add "ros::spin()" in the construct function, however, it works.
The issue is, I had wrote the construction like this before:
MyNode (ros::Nodehandle nh, ros:Nodehandle nh_local)
{ 
     auto my_sub_ = nh.subscribe("topic", 10, &mycallback, this);
}  

And there was no "ros::spin()" in the construct function but there was one in my_node.cpp's main().And it works too.
So where should I indeed place my ros::spin()?

Originally posted by Epsilon_cm on ROS Answers with karma: 5 on 2018-10-15
Post score: 0

A:

I would always put a call to spin outside of your constructor. Imagine someone needs to implement your class in his own code, as soon as he calls the constructor the code after constructor won't be executed. I think I've never seen anyone doing spin in the class itself, unless there was a function called loop() that was doing the processing.

Originally posted by msadowski with karma: 311 on 2018-10-15
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by Epsilon_cm on 2018-10-16:
I agree with you.The fact is,if i place the spin() outside my constructor, then the message_filters::Synchronizer's callback won't be called.That's strange.
Comment by msadowski on 2018-10-16:
Try making the subscribers private members of the class (e.g. defined in the header file) and only assign to them in the constructor. I think they might be optimized out and as soon as the constructor is called they are disposed.
Comment by Epsilon_cm on 2018-10-16:
That's my fault, and i tried what you said, it worked.Thanks :ï¼‰

