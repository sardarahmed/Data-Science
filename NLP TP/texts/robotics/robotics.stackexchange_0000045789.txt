Q:

urdf to lagrangian equations of motion

I'm looking for a nice programmatic way of generating Lagrange's equations of motion for a robot arm given a description like a urdf.  This should be straightforward, however I haven't found code or libraries that already do this.  The closest thing I've found is Pydy.  Does anybody else have any suggestions before I derive it by hand or implement in code something that has already been done?  thanks.

Originally posted by mkillpack on ROS Answers with karma: 340 on 2012-11-14
Post score: 9

A:

Here is a review of the libraries I am aware of. I hope it will help you make your choice!

Robotics algorithms

Forward (or direct) geometry: from joint configuration to body position,
Forward (or direct) kinematics: from joint velocity to body velocity,
Inverse kinematics: from body velocity to joint velocity,
Forward (or direct) dynamics: from forces applied on a body compute the body acceleration,
Inverse dynamics:  from body accelerations compute forces applied by the joints (RNEA).

For any of these algorithms, one may support or not:

floating-base (through the addition of a free-flyer joint as the root joint of the model)
particular structures such as trees (instead of chains) and closed-loops,
external forces (for dynamics related algorithms). For instance, it is useful to take into account external disturbances during motion.

More information:

Robot Dynamics (Scholarpedia)

Bullet (>= 2.82 / NEW)
Bullet Collision Detection & Physics SDK
Bullet is a Collision Detection and Rigid Body Dynamics Library. The Library is Open Source and free for commercial use, under the ZLib license.
Algorithms:

Geometry: unknown
Kinematics: unkown
Dynamics: forward, inverse

Supported joints:

1-DOF revolute and prismatic joints

Features:

License: ZLib
Underlying matrix library: none, uses its own types,
Frame representation: rotation matrix and translation vector,
Online model edition: unknown,
Tree support: yes,
Floating base support: yes,
URDF loading: NO

Links:

Homepage
API

KDL (Orocos)
The Kinematics and Dynamics library used by ROS core packages. Notably the robot_model one.
Algorithms:

Geometry: direct
Kinematics: direct, inverse
Dynamics: inverse

Supported joints:

1-dof: revolute (X or Y or Z), prismatic (X or Y or Z)

Features:

License: LGPL
Underlying matrix library: none, uses its own types,
Frame representation: rotation matrix and translation vector,
Online model edition: yes,
Tree support: NO,
Floating base support: NO (only 1-dof joints),
URDF loading: yes, separate ROS package kdl_parser, read only.

Links:

Homepage
API

Metapod
Metapod is a meta-programming dynamics computation library.
The objective is to achieve high efficiency by assuming the robot model is known at compile-time.
By doing so and by relying on advanced C++ techniques, dynamic allocation can be totally avoided and the compiler can achieve optimization that would not be possible in any other case.
Algorithms:

Geometry: Direct[1]
Kinematics: Direct[1]
Dynamics: Inverse

[1] Those two algorithms are currently bound to the RNEA algorithm which means it is not possible currently to compute these quantities without computing the dynamics information.
Supported joints:

1-dof: revolute (X or any arbitrary axis)
6-dof: free-floating (three translation, three rotation)

Features:

License: LGPL3
Underlying matrix library: Eigen,
Frame representation: spatial algebra (rotation matrix and translation vector),
Online model edition: NO,
Tree support: yes,
Floating base support: yes,
URDF support: yes, experimental, read only[1].

[1] This Python script lives as a specific branch of robot_model_py for now. Due to Metapod specific design, loading an URDF model means in this context generating a C++ file which then will be compiled to use the robot-specific dynamic algorithm (RNEA).
Links:

Homepage

OpenRAVE [C++, Python]
This motion planning library is able to provide kinematics and dynamics computation.
Algorithms:

Geometry: direct
Kinematics: direct, inverse
Dynamics: direct (?), inverse

Supported joints:

1-dof: revolute, prismatic
3-dof: sphere
6-dof: free-floating
mimic joint

Features:

License: LGPL
Underlying matrix library:

C++: none, uses its own types,
Python: numpy,

Frame representation: quaternion and translation vector,
Online model edition: yes,
Tree support: yes,
Floating base support: yes,
URDF loading: NO (Collada support, URDF can be converted to Collada).

Links:

Homepage
API

RBDL (Rigid Body Dynamics Library)
A modern implementation of Roy Featherstone's book based on Eigen.
Algorithms:

Geometry: direct
Kinematics: direct, inverse
Dynamics: direct, inverse

Supported joints:

0-dof: anchor
1-dof: revolute (X or Y or Z), prismatic (X or Y or Z)
2-dof: generic [1]
4-dof: generic [1]
5-dof: generic [1]
6-dof: generic [1]

[1] These are handled through the composition of 1-dof joints (revolute or prismatic) + null mass bodies which makes the algorithms slower than what is possible when dealing with these kind of joints.
Features:

License: zlib
Underlying matrix library: Eigen,
Frame representation: spatial algebra (underlying frame representation is rotation matrix and translation vector),
Online model edition: yes,
Tree support: yes,
Floating base support: NO (6-dof joint cannot handle mixed rotation/translation),
URDF support: yes, experimental/optional, read only.

Links:

Homepage
API

Sympybotics [Python]
Algorithms:

Geometry: direct
Kinematics: direct, inverse
Dynamics: direct, inverse

Supported joints:

1-dof: arbitrary joint using Denavit-Hartenberg parameters

Features:

License: GPL2
Underlying matrix library: Numpy,
Frame representation: homogeneous matrices (4x4),
Online model edition: yes (but requires code regeneration which is possibly time-consuming),
Tree support: yes,
Floating base support: NO,
URDF support: NO.

Links:

Homepage

Other libraries

HuMAnS
OpenHRP3

Thanks to Antonio El Khoury for his feedbacks and knowledge regarding state-of-the-Art dynamics libraries.

Originally posted by Thomas with karma: 4478 on 2013-01-15
This answer was ACCEPTED on the original site
Post score: 16

Original comments
Comment by mkillpack on 2013-01-17:
This is a very thorough review, great job! However, I should have been clearer that I wanted symbolic representations. The difference in this case is that many iterative methods (RNE, etc.) require a joint acceleration to evaluate the mass, Coriolis, etc. terms.  Sympybotics does not.  Thanks.
Comment by mkillpack on 2013-01-25:
Also, although sympybotics uses numpy to generate the equations of motion, it outputs functions for both python and C to calculate the mass, Coriolis, gravity, etc. terms.  These functions can then be integrated into any existing library.
Comment by isura on 2013-03-24:
It seems like RBDL has floating base support now: http://rbdl.bitbucket.org/d7/d19/struct_rigid_body_dynamics_1_1_model.html#a2bad5daca35ebe2cdde8cc5f71014844
Comment by Thomas on 2013-03-24:
Yes unfortunately it is simulated by 6 joints and not a real free floating joint which means that it is computationally inefficient...
Comment by erwincoumans on 2013-10-02:
I added Featherstone articulated body algorithm in the Bullet physics library, through btMultiBody. It supports fixed and "real" floating base, 1-DOF revolute and prismatic joints and contact constraints. It will be part of Bullet 2.82, http://bulletphysics.org. Perhaps you can add it to your list?
Comment by Thomas on 2013-10-02:
Done. Is there IK in Bullet yet? I am still missing some information.
Comment by Dave Coleman on 2013-11-20:
OpenRave URDF support should probably be modified to say that there exists an easy conversion from URDF to Collada: http://wiki.ros.org/collada_urdf/Tutorials/Exporting%20URDF%20to%20COLLADA
Comment by Martin Felis on 2014-09-09:
Would be nice if you could add RBDL to your post. The upcoming 2.4.0 version has true 3-Dof joints of various sorts: TranslationXYZ, Spherical (a singularity free spherical joint that uses Quaternions), EulerZYX, EulerXYZ, EulerZYX, and uses those for floating base joints for faster URDF models.
Comment by isura on 2014-09-15:
This is great news Martin!

