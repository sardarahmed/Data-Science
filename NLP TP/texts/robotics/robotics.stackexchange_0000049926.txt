Q:

'rostopic' and other commands fail after upgrade

I've got an issue after upgrading my machines where I can't run rostopic or other key ros commands.
I foolishly ran 'sudo apt-get update && sudo apt-get upgrade' on both robots and my workstation without checking upgrading didn't break anything, and they're all displaying the same behavior, so I'm certain it's not my config.
Here's what I get when I try and run 'rostopic':
turtlebot@turtleVM:~$ rostopic
Traceback (most recent call last):
  File "/opt/ros/groovy/bin/rostopic", line 34, in <module>
    import rostopic
  File "/opt/ros/groovy/lib/python2.7/dist-packages/rostopic/__init__.py", line 58, in <module>
    import rospy
  File "/opt/ros/groovy/lib/python2.7/dist-packages/rospy/__init__.py", line 49, in <module>
    from .client import spin, myargv, init_node, \
  File "/opt/ros/groovy/lib/python2.7/dist-packages/rospy/client.py", line 59, in <module>
    import rospy.impl.init
  File "/opt/ros/groovy/lib/python2.7/dist-packages/rospy/impl/init.py", line 107, in <module>
    class RosStreamHandler(rosgraph.roslogging.RosStreamHandler):
AttributeError: 'module' object has no attribute 'RosStreamHandler'

My .bashrc doesn't have anything super special in it, here's the end:
source /opt/ros/groovy/setup.bash
. /opt/ros/groovy/stacks/turtlebot/setup_kobuki.sh
export TURTLEBOT_3D_SENSOR=asus_xtion_pro
export ROS_MASTER_URI="http://localhost:11311"
export ROS_MASTER_URI="http://bert:11311"

Some other enviornment variables that might be relevant:
ROS_DISTRO is 'groovy'
PYTHONPATH is /opt/ros/groovy/lib/python2.7/dist-packages
$PYTHON_CODE_BUILD_ROS_PACKAGE_PATH  is set to 'from future import print_function import os env_name = 'CMAKE_PREFIX_PATH' paths = [path for path in os.environ[env_name].split(os.pathsep)] if env_name in os.environ and os.environ[env_name] != '' else [] workspaces = [path for path in paths if os.path.exists(os.path.join(path, '.catkin'))] paths = [] for workspace in workspaces: filename = os.path.join(workspace, '.catkin') data = '' with open(filename) as f: data = f.read() if data == '': paths.append(os.path.join(workspace, 'share')) paths.append(os.path.join(workspace, 'stacks')) else: for source_path in data.split(';'): paths.append(source_path) print(os.pathsep.join(paths))'
Don't know where that last one came from, but it looks like it's something quite deliberate.
My default python is 2.7.3, and if I run it and type 'import ros' it finds the package.
Any ideas what to check or how to get my system working again?
Thanks,
Gavin

Originally posted by Gav on ROS Answers with karma: 478 on 2013-03-31
Post score: 2

Original comments
Comment by jbohren on 2013-03-31:
What happens when you get rid of the source of setup_kobuki.sh?

A:

I had this same problem and it turns out that apt-get was holding back an update to the ros-groovy-rosgraph package.
Check the packages that are held back by running $sudo apt-get upgrade, and if it is held back, $sudo aptitude safe-upgrade --full-resolver, should force it to install.

Originally posted by awilson with karma: 231 on 2013-04-01
This answer was ACCEPTED on the original site
Post score: 8

Original comments
Comment by Gav on 2013-04-02:
Thanks! Held back packages seem to be the problem. My system didn't have aptitude on there, but running 'sudo apt-get dist-upgrade' solved it, and I believe turtlebot-dashboard was holding stuff back.
For others, note: 'dist-upgrade' is a dangerous command, so check man pages before running it.
Comment by jetdillo on 2013-04-21:
Indeed, 'apt-get dist upgrade' should be a last resort.

