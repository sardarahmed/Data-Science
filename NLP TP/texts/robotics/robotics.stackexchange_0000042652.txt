Q:

robot_pose_ekf and GPS

Hi all,
We're porting some of our internal code over to ROS-standard nodes for release, and I've got two questions related to robot_pose_ekf. For background, I have been working primarily from this tutorial (which advises adding a GPS as a VO sensor) and this ROS Answers thread.
Initialization
Is there a reason that this will only initialize on odometry data if it's available? I don't want our odometry publisher to know about the GPS sensor, so it would be ideal if there was a setting to allow it to "snap" to the VO data when it's first received. I can add this and submit a patch, but I wanted to see if there was something I was missing first.
Corrections
Given my review of the source, the VO data is used in a relative sense, same as the other data. Though this makes sense for true visual odometry (scan matching, etc), this isn't the standard way that GPS data would be used for correction. In fact, I'm pretty sure it means that we lose the benefit of the global reference frame the GPS provides.
Given a quick once over on the core code, there doesn't seem to be an explicit correction step at all. Am I missing something?

Originally posted by Ryan on ROS Answers with karma: 3248 on 2012-07-25
Post score: 9

Original comments
Comment by phil0stine on 2012-07-25:
Wholeheartedly agree, GPS should be used in a more comprehensive ekf (or ukf) framework that provides prediction and correction. Other improvements would be to allow N sensor sources. I would participate in a development effort if there's some interest.
Comment by DimitriProsser on 2012-07-26:
The issues that you mentioned are the reason that we were forced to write our own EKF to properly make use of the GPS on our robot
Comment by phil0stine on 2012-07-26:
@DimitriProsser We are looking into writing our own as well. I am curious if there are libraries you recommend. We are looking at bfl and bfilt, leaning toward bflit.
Comment by DimitriProsser on 2012-07-26:
We wrote our entirely from the ground up using pure matrix math with Eigen. I don't recommend this unless you're really good with math and have a lot of time to spend debugging. I'm not familiar with any of the libraries, so I can't really help there unfortunately.
Comment by joq on 2012-07-26:
+1 to a new community-developed and supported Kalman filter implementation
Comment by Ryan on 2012-07-30:
Alright, seems I wasn't off base here. Thanks, all!
Comment by martimorta on 2012-07-31:
I am interested in this issue too, I found this stack which is still under development but is worth it to keep an eye http://ros.org/wiki/ethzasl_sensor_fusion
Comment by Mario Garzon on 2012-09-05:
Any news on the idea of a new implementation of the kalman filter? i'll be happy to help
Comment by Johannes Meyer on 2012-10-20:
You can take a look at the hector_localization stack, which implements an IMU-driven Kalman filter for localization purposes extensible with sensor models plugins. Some standard models for GPS, magnetometer, barometers are already there. It is still experimental and lacks documentation.
Comment by Ryan on 2013-02-03:
In the meantime, we've submitted a patch to robot_pose_ekf which we believe is well tested. Just adding some more tests now. @Chad, @Johannes, please get in touch if you need us. We are well set up for test hardware.

A:

As part of ROS Answers cleanup week: Many companies/organizations/people are now using robot_localization instead of robot_pose_ekf

Originally posted by Ryan with karma: 3248 on 2015-06-24
This answer was ACCEPTED on the original site
Post score: 2

