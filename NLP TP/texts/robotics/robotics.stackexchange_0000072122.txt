Q:

REP-105 and robot_localization

Hello,
I have a series of questions about REP-105 and the robot_localization package.
What is confusing to me is the utility of the odom reference frame and it is possible that I don't understand its definition. REP-105 describes the odom reference frame as a world-fixed reference frame. But it also says that the pose of a robot can drift in the odom reference frame without any bounds.
I understand the problem. A vehicle whose position is estimated from dead-reckoning alone will accrue position estimate errors that will grow unbounded unless checked by an absolute position measurement.
So is the idea that one can track the dead-reckoned position estimate and the error between that and the true position separately? Perhaps this is done in the transform between the map frame and the odom frame?
What is the utility of the odom reference frame vs the map reference frame? Why is having a continuous "no-jumps" reference frame better than having a globally accurate one?
If one is using an EKF and there are jumps in the positioning due to GPS data, does that not mean that the measurement covariance (or possibly the process covariance) are not set properly? It seems to me one is relying on the GPS too much. Maybe it means the IMU is too poor quality to adequately filter the GPS?
I guess what I'm getting at is that it seems to me that a properly modeled and tuned EKF should (barring resets) not have jumps and the odom frame might be unnecessary.
I can't wait to hear your thoughts!

Originally posted by vschmidt on ROS Answers with karma: 242 on 2016-02-17
Post score: 7

A:

Imagine that your pose estimate is derived from fused GPS, wheel odometry, and IMU data. You tell your robot, whose position is (0, 0) in your world frame, to move to (10, 10), and it starts to move there. Along the way, the GPS jumps to (11, 11), and the robot suddenly thinks it's on the other side of the goal, so it tries to turn around. Then it jumps back to (9, 9), and it turns around again. The issue is that controlling your robot in a discontinuous frame can be a problem. Note that this isn't limited to GPS data: nodes that do actual localization (e.g. amcl) may undergo very small jumps in pose, but those may be enough to upset the control of the robot. One can imagine a situation where the threshold on your waypoint satisfaction is N radians, but the localization system produces measurements with error > N, and under-reports its covariance. In that instance, you may never "reach" the goal.
In this case, it isn't just the EKF parameters that need to be tuned, but the covariance matrices in the measurements themselves. If the measurement covariance is overconfident, then the filter output will have discrete jumps that match the input. Unfortunately, this is a common occurrence with drivers and localization packages.
Furthermore, REP-105 is a standard that applies to all ROS nodes, and not just those that perform fusion. You can simply run a robot controller that produces odometry in the odom frame and a localization node (e.g., amcl) that produces pose estimate in the map frame, and not bother with any sensor fusion packages like robot_localization. In that case, no fusion is occurring, so if you want to control your robot, you'll want to do so in the odom frame, as the map frame data is subject to discontinuities.
In any case, you are correct that with proper error management, you can mitigate these effects and work with a single frame. Some companies have localization solutions that are so good that they can control their robot in the map frame (i.e., fusing the localization data) and not ever run into trouble with discontinuities.

Originally posted by Tom Moore with karma: 13689 on 2016-03-01
This answer was ACCEPTED on the original site
Post score: 9

Original comments
Comment by vschmidt on 2016-03-04:
Thanks, this is great. I appreciate the time.
I will admit however, it is odd to my naive eye to accommodate in reference frames what seems to me to be a misconfigured system.
Comment by demmeln on 2016-03-04:
What seems misconfigured to you?
Comment by vschmidt on 2016-03-04:
If the gps position jumps so, and one's filtered position is then discontinuous, then would it not indicate that the gps covariance is too small? Also, seems to me I f the gps error is large then one's sense of having arrived needs to be appropriately sized.
Comment by vschmidt on 2016-03-04:
Also, in some commercial systems gps error is not assumed white. And in some, large jumps in position are not accepted into the Kalman solution until corroborated by many fixes. I'm not saying this strategy is wrong, just different from my own experience.
Comment by demmeln on 2016-03-04:
If the gps position jumps so, and one's filtered position is then discontinuous, then would it not indicate that the gps covariance is too small? --> too small covariance can be a cause, but doesn't have to be. See my answer below for a situation with perfect covariances, yet still a jump in pose.
Comment by demmeln on 2016-03-04:
As for the more advanced GPS error / outlier handling: You are right, this is currently not implemented in robot_localization, but could be implemented on top of it with some node that pre-filters the GPS data before feeding it to robot_localization. Still, to me this seems independ from odom frame.
Comment by Tom Moore on 2016-03-05:
You can reject individual outliers using the ...rejection_threshold parameter. If GPS is your only absolute pose estimate source, then after you reject a few measurements (so you have no pose measurements), the estimate covariance will grow, which should cause previous outliers to become inliers.

