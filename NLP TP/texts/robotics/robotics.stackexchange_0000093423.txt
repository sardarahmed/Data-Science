Q:

Ptr suffix in ROS messages

Hello,
I would like to know if i could get an object of message X when I have an object of message XPtr. For example, if I have an object of type geometry_msgs::PosePtr, is it possible to get an object of type geometry_msgs::Pose? Furthermore, what is the difference between geometry_msgs::Pose* and geometry_msgs::PosePtr? Thanks a lot in advance.

Originally posted by thanasis_t on ROS Answers with karma: 45 on 2019-09-28
Post score: 0

A:

You you can definitely make a concrete message type from a <Message>Ptr type. Because the original type is a pointer you'll need to copy the entire message to do this, fine for small geometry messages but it will have a performance penalty for larger point cloud or image message types. You can use the copy constructor to create a local concrete instance of a message which is the same as a given <Message>Ptr type. This is the same as if if was a regular C++ pointer.
void myFunction(geometry_msgs::PosePtr postMsg)
{
    geometry_msgs::Pose concretePose = *poseMsg;

    // ... do something with concretePose 
}

Regarding your second point the geometry_msgs::PosePtr is actually a boost::shared_ptr<geometry_msgs::Pose> not a simple C++ pointer. A Boost shared pointer is a smart pointer container that ensures memory will always deleted when no more references to the object exist. You can read more about these here.
Hope this helps.

Originally posted by PeteBlackerThe3rd with karma: 9529 on 2019-09-29
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by thanasis_t on 2019-09-29:
Yes your comment was very helpful. Thanks a lot.

