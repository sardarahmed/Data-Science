Q:

Why navfn is using Dijkstra?

As an algorithm learner, I'm just curious about why navfn was is first equipped with dijkstra search algorith. The answer at this question explains how navfn works using dijkstra, but what is the reason it was selected instead of other algorithms that are equally good (e.g. A*) ?

Originally posted by 130s on ROS Answers with karma: 10937 on 2012-02-23
Post score: 17

A:

If you look at the navfn code, you'll see that there is in fact an optimized A* algorithm in there.  It was not used because there was a bug and nobody had the cycles to fix it.  IMO there's a lot of premature optimization here, given that global planning does not need to be happening that often.  The right thing to do is to use a principled and efficient A* implementation such as sbpl :)

Originally posted by bhaskara with karma: 1479 on 2012-05-26
This answer was ACCEPTED on the original site
Post score: 14

Original comments
Comment by 130s on 2012-05-26:
While Dimitri's answer initiated a meaningful discussion, I thought I have to choose this response as a more direct answer to my particular question.
Comment by 2ROS0 on 2014-11-12:
what do you mean by nobody had the "cycles to fix it" ?
Comment by Void on 2018-11-16:
I believe it's talking about free time
Comment by navid on 2019-10-10:
Are you sure it is using an Optimized A* ?
ROS wiki says "support for an A* heuristic may also be added in the near future". You mean they have already added A* support but never edited their description in ROS wiki?

