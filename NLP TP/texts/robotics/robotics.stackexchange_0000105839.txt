Q:

Best practise for unit/integration/system testing of ros2_control hw_interfaces

I am looking for an advice how to properly test hw interface which uses ros2 control.
More details:
I have been implementing several unit/integration tests before following ROS2 best practise. However, given the hw interface of ros2 control isn't a ros node, I am really struggling to think what is a best way and if it is at all possible.
I understand that I could test my controllers in the simulation. BUT I need to test the hw_interface only (controllers are done by someone else). The only think I can think of is hardware-in-the-loop system testing. However, ideally I want to minimise the effect of the hw. Is there some way to mock it or something similar?
UPDATE:
I am writing the hw-interface for an industrial robotic arm, which comes with a library installed on Ubuntu 14.04! :/ So I am currently investigating best options how to connect to ROS2 which would also influence how I implement my hw-interface:
A) docker on Ubuntu 14.04 with ROS2 (probably won't work). If this would be the way, then I would call methods of the arm library directly in the hw-interface.
B) set up another PC with Ubuntu 22.04 and ROS2 which would communicate via MQTT/DDS/... with the Ubuntu14.04. In that case, my hw-interface would contain publishing/subscribing to the chosen protocol. Then, on the Ubuntu 14.04,  I will need to have a code publishing/subscribing (NOT ros2, just mqtt or dds) and calling the appropriate functions of the arm library.
I can see that option B would give me more options how to test as I could test both sides independently.

A:

That really depends on what you are doing inside the hardware component. How do you connect it with your hardware? You might be able to mock the communication, but there is no way how to do that from ros2_control framework.
Otherwise you will have to do a HIL test as you already mentioned.
What you can do at least is to write tests for loading the component into the resource manager and check if it initialized well (on_init() and export_state_interfaces and export_command_interfaces work). Of course this depends where you actually start your hardware, we do that normally not before on_configure.

