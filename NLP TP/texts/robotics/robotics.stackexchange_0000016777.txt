Q:

lb1847 stepper controller :how to connect to grbl atmega based board with step ,direction,enable , limit?

i like to use lb1847 chip with stepper motor "both salvaged from old copier"
i made grbl atmega board , this board gives step ,direction,enable and limit leads
so i tried to find corresponding pins on the lb1847 ,but data sheet only shows enable1 and enable2 pins and phase1 and phase2 pins???
so how can i connect the step and direction and enable pins of atmega to these pins of lb1847?!!
there are other logic pins on lb1847 chip to control current and decay .
if data sheet is required i van upload it.
thanks in advance 

A:

So how can I connect the step and direction and enable pins of ATMega to these pins of LB1847?!

You can't. The LB1847 doesn't accept those as inputs. You'll need to write your own code to send the correct signals to the LB1847. 
From the LB1847 datasheet, page 6 gives the "Sequence Table" for the first 32 (0-31) steps of a revolution. It looks like you'll need 12 digital output pins on your ATMega to interface with the LB1847; four current control pins, an enable, and a phase select, for six pins total for each phase (two phases, A and B, gives 12 total). 
There's a drawing on page 11 that gives the first half of a revolution. It's not explicitly mentioned anywhere that I saw (in a brief reading of the datasheet), but I'm assuming that you would run the sequences 0-31, then invert the phase select pins PHA1 and PHA2 and run sequences 0-31 again, for a total of 64 steps (0-63) per revolution. 
If you look again at the sequence table on page 6, you can see that Phase A's step 16 is to have the enable pin high (which disables the output), and Phase B's step 0 is also to have the enable pin high. From there on, Phase A and Phase B have the same current settings (Phase A's step 17 is the same as Phase B's step 1, etc.). 
You could try to code something slick where you only have one phase defined, like Phase A, and then the other phase is the first phase plus an offset of 16 steps, but then you have to keep the PHA pin settings straight, etc. 
Memory is generally so cheap that I'd just hard-code the entire table in an include file for your project. Probably I'd write the whole thing out to 64 steps, too, just being sure to invert the PHA settings.
Finally, you keep an internal count of which step you're currently on and write your own subroutine that accepts as inputs the values you're trying to send - direction, steps, enable. 
Depending on what you want "enable" to mean, you can "logical OR" your enable (or !enable) with the enable pin determined by the sequence table to turn the stepper off. Then it's just a matter of incrementing (or decrementing) your current step count by the number of steps and ensuring that you wrap from 0 to 63 and from 63 to 0. 

