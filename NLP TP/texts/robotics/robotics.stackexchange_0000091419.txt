Q:

Loop through unbounded tracks array in radar_msgs/RadarTrackArray

Hi,
I am having this programming problem:
void msgCallback(const radar_msgs::RadarTrackArray::ConstPtr& msg)
{
  for (int i=0; i < msg->tracks.size(); i++)
   {
      a.push_back(msg->tracks[i].track_id);
   }
}

int main(int argc, char** argv)
{
  ...
  ros::Subscriber radar_sub = nh.subscribe("/radarTrack",1000,msgCallback);
  ros::spin();
  return 0;
}

the topic "/radarTrack" publishes messages every 20ms and the tracks array is an unbounded array, that is, it gives
different length of array at each frame. For example, msg->tracks.size() can be 420, 28, 128 and so on..
When the length of tracks array is large, the calculation time of for-loop could be larger than 20ms.
In this case, Does the messages that are published by "/radarTrack" wait until the for-loop calculation is complete although its calculation time is larger than 20ms?
Any help will be much appreciated.

Originally posted by roskinetic on ROS Answers with karma: 39 on 2019-04-19
Post score: 0

A:

the topic "/radarTrack" publishes messages every 20ms, [..] When the length of tracks array is large, the calculation time of for-loop could be larger than 20ms. In this case, Does the messages that are published by "/radarTrack" wait until the for-loop calculation is complete although its calculation time is larger than 20ms?

callbacks are not pre-empted, interrupted or run in parallel (with a standard single-threaded spinner as you are using), so if callback(..) takes longer than 20 ms to process all the tracks, processing of other messages will be delayed.

Originally posted by gvdhoorn with karma: 86574 on 2019-04-19
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by roskinetic on 2019-04-19:
Thank you very much! :)

