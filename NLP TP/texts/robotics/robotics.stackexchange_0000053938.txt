Q:

ros::Time doesn't update in variable

I have trimmed most of the irrelevant code from this post.
int main(int argc, char **argv)
{
 float f_grabtime;
 do
 {
  ROS_INFO("\n###############################################");
  f_grabtime = ros::Time::now().toSec();
  ROS_INFO("f_grabtime = : %6.4f", f_grabtime);
  DummyFunction();
  ROS_INFO("ros::Time::now().toSec(); %6.4f", ros::Time::now().toSec());
  ROS_INFO("delta time; %6.4f", ros::Time::now().toSec() - f_grabtime);
 } 
 while (ros::ok());
return 0;
} //end main

When run, I get the output:
###############################################
[ INFO] [1378668866.709873391]: f_grabtime = : 1378668928.0000
[ INFO] [1378668866.709900160]: ros::Time::now().toSec(); 1378668866.7099
[ INFO] [1378668866.709920681]: delta time; -61.2901
[ INFO] [1378668866.881583005]: 
###############################################
[ INFO] [1378668866.881641471]: f_grabtime = : 1378668928.0000
[ INFO] [1378668866.881672380]: ros::Time::now().toSec(); 1378668866.8817
[ INFO] [1378668866.881696694]: delta time; -61.1183
[ INFO] [1378668867.037738183]: 
###############################################
[ INFO] [1378668867.037806140]: f_grabtime = : 1378668928.0000
[ INFO] [1378668867.037836070]: ros::Time::now().toSec(); 1378668867.0378
[ INFO] [1378668867.037860362]: delta time; -60.9622
[ INFO] [1378668867.201626074]: 
###############################################
[ INFO] [1378668867.201681767]: f_grabtime = : 1378668928.0000
[ INFO] [1378668867.201705114]: ros::Time::now().toSec(); 1378668867.2017
[ INFO] [1378668867.201727003]: delta time; -60.7983

A) why does f_grabtime have a value in the future?
B) why doesn't it update at every loop (as the raw ros::Time callout does)?

Originally posted by benjaminabruzzo on ROS Answers with karma: 45 on 2013-09-08
Post score: 1

A:

You are just observing floating point precision errors. That is why we use 64 bit precision to store ROS time values.
I added this line to your program:
   ROS_INFO("delta between float and double %f %f float cast of time %f", f_grabtime, d_grabtime, (float) d_grabtime);

Where d_grabtime is a double instead of a float. And you get this output:
[ INFO] [1378710468.378363642]: delta between float and double 1378710528.000000 1378710468.378310 float cast of time 1378710528.000000

Originally posted by tfoote with karma: 58457 on 2013-09-08
This answer was ACCEPTED on the original site
Post score: 5

Original comments
Comment by benjaminabruzzo on 2013-09-10:
Thanks.  I'll make that change tomorrow and ensure that fixes the problem (I assume it will).  I'll check this as the correct answer when I'm done.
Comment by benjaminabruzzo on 2013-09-11:
That fixed it, thanks!

