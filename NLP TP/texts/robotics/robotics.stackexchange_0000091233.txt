Q:

Automated cross-compilation failing at rosdep install step

I am trying to cross-compile ros2 crystal core for Ubuntu 18.04 armv7, building on Ubuntu 16.04 x86_64:
See the end of my question for my custom files.
During the build of the contained docker, I have this failure while trying to do:
RUN rosdep init
RUN rosdep update
RUN rosdep install --from-paths src 
    --ignore-src \
    --rosdistro crystal -y \
    --skip-keys "console_bridge \
        fastcdr \
        fastrtps \
        libopensplice67 \
        libopensplice69 \
        rti-connext-dds-5.3.1 \
        urdfdom_headers"

as rosdep trying to download these (unwanted) dependencies:
  apt: command [apt-get install -y ros-crystal-tf2] failed
  apt: command [apt-get install -y ros-crystal-tf2-eigen] failed
  apt: command [apt-get install -y ros-crystal-tf2-geometry-msgs] failed
  apt: command [apt-get install -y ros-crystal-tf2-ros] failed
  apt: command [apt-get install -y ros-crystal-kdl-parser] failed
  apt: command [apt-get install -y ros-crystal-urdf] failed
  apt: command [apt-get install -y ros-crystal-robot-state-publisher] failed
  apt: command [apt-get install -y ros-crystal-demo-nodes-py] failed
  apt: command [apt-get install -y ros-crystal-angles] failed
  apt: command [apt-get install -y ros-crystal-depthimage-to-laserscan] failed
  apt: command [apt-get install -y ros-crystal-joy] failed
  apt: command [apt-get install -y ros-crystal-pcl-conversions] failed
  apt: command [apt-get install -y ros-crystal-rviz2] failed
  apt: command [apt-get install -y ros-crystal-rviz-default-plugins] failed
  apt: command [apt-get install -y ros-crystal-teleop-twist-joy] failed
  apt: command [apt-get install -y ros-crystal-teleop-twist-keyboard] failed
  apt: command [apt-get install -y ros-crystal-composition] failed
  apt: command [apt-get install -y ros-crystal-demo-nodes-cpp] failed
  apt: command [apt-get install -y ros-crystal-demo-nodes-cpp-native] failed
  apt: command [apt-get install -y ros-crystal-dummy-map-server] failed
  apt: command [apt-get install -y ros-crystal-dummy-robot-bringup] failed
  apt: command [apt-get install -y ros-crystal-dummy-sensors] failed
  apt: command [apt-get install -y ros-crystal-image-tools] failed
  apt: command [apt-get install -y ros-crystal-intra-process-demo] failed
  apt: command [apt-get install -y ros-crystal-lifecycle] failed
  apt: command [apt-get install -y ros-crystal-logging-demo] failed
  apt: command [apt-get install -y ros-crystal-pendulum-control] failed
  apt: command [apt-get install -y ros-crystal-topic-monitor] failed
  apt: command [apt-get install -y ros-crystal-tlsf] failed
  apt: command [apt-get install -y ros-crystal-tlsf-cpp] failed
  apt: command [apt-get install -y ros-crystal-examples-rclcpp-minimal-action-client] failed
  apt: command [apt-get install -y ros-crystal-examples-rclcpp-minimal-action-server] failed
  apt: command [apt-get install -y ros-crystal-examples-rclcpp-minimal-client] failed
  apt: command [apt-get install -y ros-crystal-examples-rclcpp-minimal-composition] failed
  apt: command [apt-get install -y ros-crystal-examples-rclcpp-minimal-publisher] failed
  apt: command [apt-get install -y ros-crystal-examples-rclcpp-minimal-service] failed
  apt: command [apt-get install -y ros-crystal-examples-rclcpp-minimal-subscriber] failed
  apt: command [apt-get install -y ros-crystal-examples-rclcpp-minimal-timer] failed
  apt: command [apt-get install -y ros-crystal-examples-rclpy-executors] failed
  apt: command [apt-get install -y ros-crystal-examples-rclpy-minimal-client] failed
  apt: command [apt-get install -y ros-crystal-examples-rclpy-minimal-publisher] failed
  apt: command [apt-get install -y ros-crystal-examples-rclpy-minimal-service] failed
  apt: command [apt-get install -y ros-crystal-examples-rclpy-minimal-subscriber] failed

Using the -r option seems to be a workaround but i would like to understand why rosdep is trying to find and install these dependencies, not necessary according to ROS REP 2001 ?
Contents of files:
ros2_core.install:
- git:
    local-name: ament/ament_cmake
    uri: https://github.com/ament/ament_cmake.git
    version: crystal
- git:
    local-name: ros2/ament_cmake_ros
    uri: https://github.com/ros2/ament_cmake_ros.git
    version: crystal
- git:
    local-name: ament/ament_index
    uri: https://github.com/ament/ament_index.git
    version: crystal
- git:
    local-name: ament/ament_lint
    uri: https://github.com/ament/ament_lint.git
    version: crystal
- git:
    local-name: ament/ament_package
    uri: https://github.com/ament/ament_package.git
    version: crystal
- git:
    local-name: ros/class_loader
    uri: https://github.com/ros/class_loader.git
    version: crystal
- git:
    local-name: ros2/common_interfaces
    uri: https://github.com/ros2/common_interfaces.git
    version: crystal
- git:
    local-name: ros2/console_bridge_vendor
    uri: https://github.com/ros2/console_bridge_vendor.git
    version: crystal
- git:
    local-name: eProsima/Fast-CDR
    uri: https://github.com/eProsima/Fast-CDR.git
    version: v1.0.8
- git:
    local-name: eProsima/Fast-RTPS
    uri: https://github.com/eProsima/Fast-RTPS.git
    version: b48ce9d2fba6fc94e756da01c58b72f2ad848238
- git:
    local-name: ament/googletest
    uri: https://github.com/ament/googletest.git
    version: crystal
- git:
    local-name: ros2/launch
    uri: https://github.com/ros2/launch.git
    version: crystal
- git:
    local-name: ros2/libyaml_vendor
    uri: https://github.com/ros2/libyaml_vendor.git
    version: crystal
- git:
    local-name: osrf/osrf_pycommon
    uri: https://github.com/osrf/osrf_pycommon.git
    version: master
- git:
    local-name: osrf/osrf_testing_tools_cpp
    uri: https://github.com/osrf/osrf_testing_tools_cpp.git
    version: crystal
- git:
    local-name: ros/pluginlib
    uri: https://github.com/ros/pluginlib.git
    version: crystal
- git:
    local-name: ros2/poco_vendor
    uri: https://github.com/ros2/poco_vendor.git
    version: master
- git:
    local-name: ros2/rcl
    uri: https://github.com/ros2/rcl.git
    version: crystal
- git:
    local-name: ros2/rcl_interfaces
    uri: https://github.com/ros2/rcl_interfaces.git
    version: crystal
- git:
    local-name: ros2/rcl_logging
    uri: https://github.com/ros2/rcl_logging.git
    version: crystal
- git:
    local-name: ros2/rclcpp
    uri: https://github.com/ros2/rclcpp.git
    version: crystal
- git:
    local-name: ros2/rclpy
    uri: https://github.com/ros2/rclpy.git
    version: crystal
- git:
    local-name: rcutils
    uri: https://github.com/ros2/rcutils.git
    version: crystal
- git:
    local-name: ros2/rmw
    uri: https://github.com/ros2/rmw.git
    version: crystal
- git:
    local-name: ros2/rmw_connext
    uri: https://github.com/ros2/rmw_connext.git
    version: crystal
- git:
    local-name: ros2/rmw_fastrtps
    uri: https://github.com/ros2/rmw_fastrtps.git
    version: crystal
- git:
    local-name: ros2/rmw_implementation
    uri: https://github.com/ros2/rmw_implementation.git
    version: crystal
- git:
    local-name: ros2/rmw_opensplice
    uri: https://github.com/ros2/rmw_opensplice.git
    version: crystal
- git:
    local-name: ros2/ros2cli
    uri: https://github.com/ros2/ros2cli.git
    version: crystal
- git:
    local-name: ros/ros_environment
    uri: https://github.com/ros/ros_environment.git
    version: crystal
- git:
    local-name: ros2/rosidl
    uri: https://github.com/ros2/rosidl.git
    version: crystal
- git:
    local-name: ros2/rosidl_dds
    uri: https://github.com/ros2/rosidl_dds.git
    version: crystal
- git:
    local-name: ros2/rosidl_defaults
    uri: https://github.com/ros2/rosidl_defaults.git
    version: crystal
- git:
    local-name: ros2/rosidl_python
    uri: https://github.com/ros2/rosidl_python.git
    version: crystal
- git:
    local-name: ros2/rosidl_typesupport
    uri: https://github.com/ros2/rosidl_typesupport.git
    version: crystal
- git:
    local-name: ros2/rosidl_typesupport_connext
    uri: https://github.com/ros2/rosidl_typesupport_connext.git
    version: crystal
- git:
    local-name: ros2/rosidl_typesupport_fastrtps
    uri: https://github.com/ros2/rosidl_typesupport_fastrtps.git
    version: crystal
- git:
    local-name: ros2/rosidl_typesupport_opensplice
    uri: https://github.com/ros2/rosidl_typesupport_opensplice.git
    version: master
- git:
    local-name: ros2/tinyxml2_vendor
    uri: https://github.com/ros2/tinyxml2_vendor.git
    version: crystal
- git:
    local-name: ament/uncrustify_vendor
    uri: https://github.com/ament/uncrustify_vendor.git
    version: crystal
- git:
    local-name: ros2/unique_identifier_msgs
    uri: https://github.com/ros2/unique_identifier_msgs.git
    version: crystal
- git:
    local-name: variants
    uri: https://github.com/ros2/variants.git
    version: crystal

Dockerfile_cc:
# Copyright (c) 2018, ARM Limited.
# SPDX-License-Identifier: Apache-2.0

FROM ubuntu:bionic

# Set timezone
RUN echo 'Etc/UTC' > /etc/timezone && \
    ln -s /usr/share/zoneinfo/Etc/UTC /etc/localtime && \
    apt-get update && apt-get install -q -y tzdata && rm -rf /var/lib/apt/lists/*

# 1. Install development tools
RUN apt-get update
RUN apt-get install -y \
    build-essential \
    cmake \
    git \
    wget \
    curl \
    lsb-core \
    bash-completion

# Download the Cross-compiler for aarch64/arm and qemu
RUN apt-get update && apt-get install -y \
    qemu-user-static \
    g++-aarch64-linux-gnu \
    g++-arm-linux-gnueabihf

# ROS2 tools
RUN apt-get update
RUN apt-get install -y \
    python3-pip

RUN python3 -m pip install -U \
    colcon-common-extensions \
    rosdep \
    vcstool \
    rosinstall-generator

# Install Docker
RUN apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common
RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
RUN apt-key fingerprint 0EBFCD88
RUN add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
RUN apt-get update
RUN apt-get install -y docker-ce

# 2. Download ROS2 src
ENV CC_WS /root/cc_ws
ARG ROS2_VERSION=release-latest

WORKDIR $CC_WS/ros2_ws
RUN mkdir src
COPY ros2_core.install .
RUN vcs import --repos --recursive src < ros2_core.install
WORKDIR $CC_WS/ros2_ws/src
COPY ./cross_compile ./cross_compile

WORKDIR $CC_WS
run mkdir qemu-user-static
RUN cp /usr/bin/qemu-*-static qemu-user-static

ENTRYPOINT ["ros2_ws/src/cross_compile/entry_point.sh"]
CMD ["bash"]

Dockerfile_ubuntu_arm:
# Copyright (c) 2018, ARM Limited.
# SPDX-License-Identifier: Apache-2.0

ARG ARM_ARCH=arm32v7
FROM ${ARM_ARCH}/ubuntu:bionic

COPY ./qemu-user-static/* /usr/bin/
COPY ./ros2_ws/src /ros2_ws/src

# Set timezone
RUN echo 'Etc/UTC' > /etc/timezone && \
    ln -s /usr/share/zoneinfo/Etc/UTC /etc/localtime && \
    apt-get update && apt-get install -q -y tzdata && rm -rf /var/lib/apt/lists/*

RUN apt update && apt install -y \
    pkg-config \
    lsb-release \
    curl \
    gfortran \
    libpcre3 \
    libpcre3-dev \
    bash-completion \
    dirmngr \
    gnupg2

# ROS2 dependencies
RUN apt install -y --no-install-recommends \
    build-essential \
    cmake \
    git \
    wget

ENV LANG en_US.UTF-8
ENV LC_ALL C.UTF-8

RUN curl http://repo.ros2.org/repos.key | apt-key add -
RUN sh -c 'echo "deb [arch=amd64,armhf] http://repo.ros2.org/ubuntu/main \
    `lsb_release -cs` main" > /etc/apt/sources.list.d/ros2-latest.list'

RUN apt update
RUN apt install -y \
    python3-colcon-common-extensions \
    python3-pip \
    python3-rosdep

RUN python3 -m pip install -U \
    argcomplete \
    flake8 \
    flake8-blind-except \
    flake8-builtins \
    flake8-class-newline \
    flake8-comprehensions \
    flake8-deprecated \
    flake8-docstrings \
    flake8-import-order \
    flake8-quotes \
    pytest-repeat \
    pytest-rerunfailures

RUN python3 -m pip install -U \
    pytest \
    pytest-cov \
    pytest-runner \
    setuptools

RUN apt install --no-install-recommends -y \
    libasio-dev \
    libtinyxml2-dev

WORKDIR /ros2_ws
RUN rosdep init
RUN rosdep update
RUN rosdep install --from-paths src 
    --ignore-src \
    --rosdistro crystal -y \
    --skip-keys "console_bridge \
        fastcdr \
        fastrtps \
        libopensplice67 \
        libopensplice69 \
        rti-connext-dds-5.3.1 \
        urdfdom_headers"

WORKDIR /
RUN apt-get install -y symlinks
RUN symlinks -rc .

entrypoint.sh:
#!/usr/bin/env bash

# Copyright (c) 2018, ARM Limited.
# SPDX-License-Identifier: Apache-2.0

# Exit on error
set -e

# 3. Prepare the sysroot
if [ ! -d "$CC_WS/sysroot_docker" ]; then
    # Build sysroot image
    docker build -t arm_ros2:latest -f ./ros2_ws/src/cross_compile/sysroot/Dockerfile_ubuntu_arm .
    docker run --name arm_sysroot arm_ros2:latest

    # Export sysroot image
    docker container export -o sysroot_docker.tar arm_sysroot
    mkdir sysroot_docker

    tar -C sysroot_docker -xf sysroot_docker.tar lib usr etc

    # Remove docker container
    docker rm arm_sysroot
fi

# 4. Build
# Export toolchain-file variable
export TARGET_ARCH=armhf
export TARGET_TRIPLE=arm-linux-gnueabihf

export CC=/usr/bin/$TARGET_TRIPLE-gcc
export CXX=/usr/bin/$TARGET_TRIPLE-g++
export CROSS_COMPILE=/usr/bin/$TARGET_TRIPLE-

export SYSROOT=$CC_WS/sysroot_docker
export PYTHON_SOABI=cpython-36m-$TARGET_TRIPLE
export ROS2_INSTALL_PATH=$CC_WS/ros2_ws/install

# Hack to find Poco
## This is temporarily required to find the Poco libraries on the SYSROOT.
## The exported target comming with the pre-build binaries has a hard-coded
## path to "/usr/lib/<arch>/libz.so" and "/usr/lib/<arch>/libpcre.so"
ln -s `pwd`/sysroot_docker/lib/$TARGET_TRIPLE/libz.so.1 /usr/lib/$TARGET_TRIPLE/libz.so
ln -s `pwd`/sysroot_docker/lib/$TARGET_TRIPLE/libpcre.so.3 /usr/lib/$TARGET_TRIPLE/libpcre.so

# Ignore some packages
touch \
    ros2_ws/src/variants/desktop/COLCON_IGNORE \
    ros2_ws/src/variants/base/COLCON_IGNORE

# Trigger a build
colcon build --merge-install \
    --cmake-force-configure \
    --cmake-args \
        -DCMAKE_VERBOSE_MAKEFILE=ON \
        -DCMAKE_TOOLCHAIN_FILE="$(pwd)/src/cross_compile/cmake-toolchains/generic_linux.cmake" \
        -DSECURITY=ON \
        -DFORCE_BUILD_VENDOR_PKG=ON

Originally posted by William Bulle on ROS Answers with karma: 40 on 2019-04-02
Post score: 0

Original comments
Comment by gvdhoorn on 2019-04-02:
Can you clarify whether you've seen ros2/cross_compile?

Edit: ah, I guess you did. Would appear the Dockerfiles are from there.

A:

You appear to have the variants repository in your .install file:
- git:
    local-name: variants
    uri: https://github.com/ros2/variants.git
    version: crystal

That repository contains package manifests for all ROS 2 variants (so: ros_base, ros_core and desktop). Those are probably pulling all those additional dependencies in.
I'm not sure, but I don't believe variants is part of any ROS 2 variant, so would you know how that entry got added to the list?

Edit:

I generated my .install with
rosinstall_generator ros_core --rosdistro crystal --upstream-development --deps > ros2_core.install

why do you add --upstream-development there? That will use the source repositories for all entries, instead of the release repositories. It will also cause complete checkouts of entire repositories instead of just one specific package.
That is most likely the cause of the variants entry there in your .rosinstall file.
With the following command:
rosinstall_generator --deps --tar --rosdistro=crystal ros_core

That specific entry becomes:
- tar:
    local-name: variants/ros_core
    uri: https://github.com/ros2-gbp/variants-release/archive/release/crystal/ros_core/0.6.1-0.tar.gz
    version: variants-release-release-crystal-ros_core-0.6.1-0

Which would cause the ros_core package to be placed in your workspace. That makes sense: you asked for ros_core and its dependencies.
By specifying --upstream-development, rosinstall_generator has no choice but to add an entry for the entire source repository containing ros_core (as that is the package you asked the .rosinstall file to be generated for), resulting in all metapackages defining ROS 2 variants to be placed in your workspace (as they are all hosted in the variants repository). This then results in rosdep trying to install dependencies for all those variants.

Originally posted by gvdhoorn with karma: 86574 on 2019-04-02
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by William Bulle on 2019-04-02:
Oh it makes sense that rosdep tries to download the dependencies for ros_base and desktop.
But ultimately it failed to apt-get install as they don't exist or it doesn't manage to locate them. How come ?
I generated my .install with
rosinstall_generator ros_core --rosdistro crystal --upstream-development --deps > ros2_core.install

Comment by gvdhoorn on 2019-04-02:
I'm confused: you're ok with those additional dependencies?
Comment by William Bulle on 2019-04-02:
I specified --upstream-development as I wanted to have some upstream package in order to use the -DFORCE_BUILD_VENDOR_PKG=ON as I want to minimize the number of dependencies on my target.
They seems to not be useful in what I'm trying to do but I wanted to know why it fails to locate the packages. My guess is they don't exist for armhf but in this case, rosdep would fail to resolve any ros dependencies in the case of my ros file install being incomplete.
Comment by gvdhoorn on 2019-04-02:\

should rosdep have a option to ignore all ros packages and just download built dependencies ?

ROS pkgs can be build dependencies as well, so such an option would need to discriminate between ROS pkgs and system dependencies in that case.
If you need only certain pkgs newer than the released version, perhaps those could be added manually to the file (you can always add an additional entry to the .rosinstall file by hand, it's a simple yaml list).
Can you perhaps restate/reformulate your question? Your initial question seemed to be:

i would like to understand why rosdep is trying to find and install these dependencies, not necessary according to ROS REP 2001 ?

The answer to that is: you're adding --upstream-development to rosinstall_generator and it downloads the entire variants repository, which contains manifests for all ROS 2 variants, hence the additional deps.
you're now asking "why it fails to locate the packages".
Perhaps that should be a new question.

