Q:

Robot shatters when placed in world

I feel like I've missed something fundamental as my robot totally shatters when I place it into the world.  It also could just be late. =)
I'm using Gazebo 2.1 and SDF 1.4.  My sdf is pasted below.
Any help would be greatly appreciated.
SDF:
<?xml version='1.0'?>
<sdf version='1.4'>
  <model name="mark000">
  <static>false</static>
  <pose>0 0 0.105 0 0 0</pose>
  <link name='chassis'>
      <collision name='collision'>
        <pose>0 0.205 0.074 0 0 0</pose>
        <geometry>
          <box>
            <size>0.3075 0.655 0.206</size>
          </box>
        </geometry>
      </collision>

      <visual name="chassis-visual">
          <geometry>
            <mesh>
              <scale>0.001 0.001 0.001</scale>
              <uri>file://chassis.stl</uri>
            </mesh>
          </geometry>
      </visual>
  </link>
  
  <link name="caster_bracket">
    <collision name='collision'>
      <pose>-0.115 0.483 0.03022 0 0 0</pose>
      <geometry>
        <cylinder>
          <radius>0.06</radius>
          <length>0.1426</length>
        </cylinder>
      </geometry>
      <surface>
        <contact>
          <collide_without_contact>1</collide_without_contact>
        </contact>
      </surface>
    </collision>
    <visual name="visual">
      <geometry>
        <mesh>
          <scale>0.001 0.001 0.001</scale>
          <uri>file://caster-brkt.stl</uri>
        </mesh>
      </geometry>
    </visual>  
  </link>
      
  <link name="caster_wheel">
    <collision name='collision'>
        <pose>-0.115 0.458 -0.04448 0 1.5707 0</pose>
        <geometry>
          <cylinder>
          <radius>.061</radius>
          <length>.061</length>
         </cylinder>
      </geometry>

      <surface>
        <friction>
          <ode>
            <mu>0</mu>
            <mu2>0</mu2>
            <slip1>1.0</slip1>
            <slip2>1.0</slip2>
          </ode>
        </friction>
      </surface>
    </collision> 
  
    <visual name="visual">
          <geometry>
            <mesh>
              <scale>0.001 0.001 0.001</scale>
              <uri>file://caster-wheel.stl</uri>
            </mesh>
          </geometry>
    </visual>
  </link>
  
  
  
  <link name="left_wheel">
    <collision name="collision">
      <pose>-0.182 0 0 0 1.5707 0</pose>
      <geometry>
        <cylinder>
          <radius>.105</radius>
          <length>.04</length>
        </cylinder>
      </geometry>
      <surface>
        <friction>
          <ode>
            <mu>1</mu>
            <mu2>0</mu2>
            <slip1>1.0</slip1>
            <slip2>1.0</slip2>
          </ode>
        </friction>
      </surface>
    </collision>
    <visual name="visual">
      <pose>0 0 0 0 0 3.14157</pose>
          <geometry>
            <mesh>
              <scale>0.001 0.001 0.001</scale>
              <uri>file://wheel-rear.stl</uri>
            </mesh>
          </geometry>
        </visual>  
  </link>

  <link name="right_wheel">
    <collision name="collision">
      <pose>0.182 0 0 0 1.5707 0</pose>
      <geometry>
        <cylinder>
          <radius>.105</radius>
          <length>.04</length>
        </cylinder>
      </geometry>
      <surface>
        <friction>
          <ode>
            <mu>1</mu>
            <mu2>0</mu2>
            <slip1>1.0</slip1>
            <slip2>1.0</slip2>
          </ode>
        </friction>
      </surface>
    </collision>
   <visual name="visual">
          <geometry>
            <mesh>
              <scale>0.001 0.001 0.001</scale>
              <uri>file://wheel-rear.stl</uri>
            </mesh>
          </geometry>
        </visual>  
  </link>

  <joint type="revolute" name="left_wheel_hinge">
    <pose>-0.182 0 0 0 1.5707 0</pose>
    <child>left_wheel</child>
    <parent>chassis</parent>
    <axis>
      <xyz>0 0 1</xyz>
    </axis>
  </joint>

  <joint type="revolute" name="right_wheel_hinge">
    <pose>0.182 0 0 0 1.5707 0</pose>
    <child>right_wheel</child>
    <parent>chassis</parent>
    <axis>
      <xyz>0 0 1</xyz>
    </axis>
  </joint>
  
    <joint type="revolute" name="caster_rotation_vertical">
    <pose>-0.115 0.483 0.03022 0 0 0</pose>
    <child>caster_bracket</child>
    <parent>chassis</parent>
    <axis>
      <xyz>0 0 1</xyz>
    </axis>
  </joint>
  
  <joint type="revolute" name="caster_rotation_horizontal">
   <pose>-0.115 0.458 -0.04448 0 1.5707 0</pose>
   <child>caster_wheel</child>
   <parent>caster_bracket</parent>
   <axis>
     <xyz>0 0 1</xyz>
   </axis>
 </joint>

  </model>
</sdf>

Originally posted by qworg on Gazebo Answers with karma: 31 on 2013-12-14
Post score: 0

Original comments
Comment by qworg on 2013-12-16:
Update:  I've discovered that moving the  from within the  to the  fixes the problem in my test example.  I'm wondering if there's a way to fix this problem within Gazebo itself so I don't have to re-export my meshes.

A:

This looks to be a bug in Gazebo.
Bug Report Filed: https://bitbucket.org/osrf/gazebo/issue/1005/robot-shatters-when-collision-pose-and

Originally posted by qworg with karma: 31 on 2014-01-15
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by nkoenig on 2014-01-16:
Can you add a link to your bug report?
Comment by qworg on 2014-01-17:
Bug report link added above.

