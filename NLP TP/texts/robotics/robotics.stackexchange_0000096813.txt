Q:

C++ plugin cannot get parameter that has been uploaded to param server later

I want to load parameters from the ROS param server in the Gazebo model plugin. I do not have any problem with getting the parameters thet were set in the launch files, but I run a node that uploads a list of parameters to the rosparam server later in the run. I can see and read the parameters using terminal, but the gazebo plugin does not see the new parameters (I check for them inside the plugin on every update).
Can you provide any insight into why is this happening?
EDIT
I am accessing the parameters from gazebo plugin using
std::string param_name;
this->rosNode->getParam("/param_name", param_name);

EDIT 2
code snippet
namespace gazebo {
  // Constructor
  MyPlugin::MyPlugin() {}

  // Default plugin init call.
  void MyPlugin::Init() {}

  void MyPlugin::Load(physics::ModelPtr _model,
                                  sdf::ElementPtr _sdf) {

    this->updateConnection = event::Events::ConnectWorldUpdateBegin(
            boost::bind(&MyPlugin::OnUpdate, this));

    // Initialize ros, if it has not already been initialized.
    std::string node_name = std::string("my_node");
    if (!ros::isInitialized()) {
      int argc = 0;
      char **argv = nullptr;

      ros::init(argc, argv, node_name,
                ros::init_options::NoSigintHandler);
    }

    // Create ROS node.
    this->rosNode.reset(new ros::NodeHandle(node_name));

    ros::AsyncSpinner spinner(2); // Use 2 threads
    spinner.start(); // spin() will not return until the node has been shutdown
  }

  void MyPlugin::loadParameters()
  {
    this->parameters_loaded = true;
    std::string parameter_from_launch, parameter_from_node;
    if (! this->rosNode->getParam("/parameter_from_launch", parameter_from_launch))
    {
      gzmsg << "ROS parameter '/parameter_from_launch' was not found \n";
      this->parameters_loaded = false;
    }
    gzmsg << "Parameter from launch: " << parameter_from_launch << "\n";
    if (! this->rosNode->getParam("/parameter_from_node", parameter_from_node))
    {
      gzmsg << "ROS parameter /parameter_from_node was not found. \n";
      this->parameters_loaded = false;
    }
    gzmsg << "Parameter from node: " << parameter_from_node << "\n";
    
  }

  void MyPlugin::OnUpdate() {
    if(!this->parameters_loaded){
      MyPlugin::loadParameters();
    }
  }
}

the parameter_from_launch is found on the first try and prints the correct value. The  "ROS parameter /parameter_from_node was not found. \n" keeps being printed and the  gzmsg << "Parameter from node: " << parameter_from_node << "\n" returns an empty string

Originally posted by kump on ROS Answers with karma: 308 on 2020-08-13
Post score: 0

Original comments
Comment by Delb on 2020-08-13:\

but the gazebo plugin does not see the new parameters

What do you mean with the gazebo plugin ? The parameters of a Gazebo plugin are set in the urdf/xacro file which is parsed in the launch file or when you call the plugin in the world file. If your parameters change you have to reload the plugin.
Comment by kump on 2020-08-13:
@Delb If I initiate a ros node inside the gazebo plugin, it does not get the realtime access to rosparams?
Comment by Delb on 2020-08-13:
I've never done that so I don't know but if you've managed to start a ros node inside the plugin then to update the parameters you need to define them as dynamic parameters. When doing that you get a callback which will be triggered each time you change one of the dynamic parameters.
If you only change the parameter on the parameter server you would need to have an infinite loop always checking the parameter value (getParam ) to detect when it has changed.
Comment by kump on 2020-08-13:\

What do you mean with the gazebo plugin ?

I have no experiences with ROS plugins, so I dont know if there is any difference. I write pluggins in C++ that I register as gazebo_model_plugin using
 GZ_REGISTER_MODEL_PLUGIN(StateSamplingPlugin)

Which probably just makes it known to the gazebo system. It's probably the same like any ROS plugin. But I don't really know.
Comment by Delb on 2020-08-13:
Alright I wasn't sure if you were referring to a specific plugin or a custom one.
Comment by kump on 2020-08-13:
@Delb, If I understand correctly, then that is what I am doing. On each update I call
rosNode->getParam('param_name', param)

But even so the parameter is not found in the plugin, while I can find it using the terminal (rosparam get <param>) at the same time.
Comment by Delb on 2020-08-13:
What do you get if you print the value of the param in your plugin ?

On each update

What update ? Are you sure you function is correctly called ?
Comment by Tahir M. on 2020-08-13:
Can you share the code snippet where you upload the parameters and than run the node? That can give an insight.
Comment by kump on 2020-08-13:
@Tahir M. @Delb I eddited the question to address your remarks.
Comment by praskot on 2020-08-13:
I'm not sure if this is relevant to this, check out the comment by @gvdhoorn from here reg. setting programmatically setting parameters,
    For future readers: I believe it's important to point out that in case a node does this, and the node is started via a .launch file, parameters set by this node will not be visible to other nodes, unless they are started after the parameter-setting node (and there is no way to enforce that, at least not in ROS 1).
    
    Seeing as the order of starting nodes with roslaunch is not guaranteed, there is no way to guarantee these parameters will show up on the parameter server before they are accessed by other nodes.

This is one of the reasons why parameters are set first by roslaunch, and only then are nodes started.

The "ROS parameter /parameter_from_node was not found

Are you defining a new parameter using the node or just updating the
Comment by praskot on 2020-08-13:
... an existing parameter.
Comment by gvdhoorn on 2020-08-14:
I'm not sure that's relevant here. Basically what I'm trying to say is that ppl should not expect to be able to use any nodes which set parameters through roscpp or rospy in the same way as roslaunch, because roslaunch will make sure all parameters are set on the parameter server before starting any nodes.
So if you have a node A, which expects parameter Z to be present on the parameter server, and parameter Z is supposed to be set by node B, then when using roslaunch, node B may be started after node A, resulting in parameter Z not being present when node A needs it.

A:

Ok, the reason the this->rosNode->getParam("/parameter_from_node", parameter_from_node) returned false was because I set the variable parameter_from_nodeas string while the /parameter_from_node parameter is a float number. I expected all the parameters on the param server to be managed as strings but that is apparently not the case. The /parameter_from_launch happend to actually be a string, so it went through correctly.

Originally posted by kump with karma: 308 on 2020-08-14
This answer was ACCEPTED on the original site
Post score: 0

