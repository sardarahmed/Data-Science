Q:

ROS2 Adding a library from another package to a library

I can add a library to executable however my main problem I could not add a library to another library.
My question is as follows: How can I add a_library in package A to b_library in package B.
https://answers.ros.org/question/357633/how-to-create-a-ros2-library/

Originally posted by bekirbostanci on ROS Answers with karma: 76 on 2022-07-14
Post score: 0

Original comments
Comment by Roberto Z. on 2022-07-15:
Could you post what you have tried so far and the error message that you are getting? It certainly will be easier to narrow it down that way.
Comment by Roberto Z. on 2022-07-15:
Have you tried this out?:
https://stackoverflow.com/questions/56560309/how-to-link-shared-library-in-ament-tool-ros
Comment by bekirbostanci on 2022-07-15:
Roberto your post is also usefull but there are many question stackoverflow and answers.ros but I did not get which is the true. However these 2 lines are keyword to also docs.ros is very usefull.
https://docs.ros.org/en/crystal/Contributing/Migration-Guide.html
ament_export_libraries(LibB)
ament_export_include_directories(include)

A:

I solved the problem. I use vscode with debugging however there was a problem. I deleted install and build folders and rebuild it. It solved after rebuild.
Package A a_library
cmake_minimum_required(VERSION 3.8)
project(package_A)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(std_msgs REQUIRED)
find_package(b_library REQUIRED)

set(dependencies
  rclcpp
  std_msgs
)

include_directories(include)

add_library(a_library SHARED src/a_library.cpp ) 
ament_target_dependencies(a_library ${dependencies} b_library)

add_executable(a_node src/a_node.cpp)
ament_target_dependencies(a_node  ${dependencies} b_library)
target_link_libraries(a_node a_library)

install(TARGETS a_node a_library
  ARCHIVE DESTINATION lib
  LIBRARY DESTINATION lib
  RUNTIME DESTINATION lib/${PROJECT_NAME}
)

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  ament_lint_auto_find_test_dependencies()
endif()

ament_package()

Package B b_library
cmake_minimum_required(VERSION 3.8)
project(package_B)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(std_msgs REQUIRED)

set(dependencies
  rclcpp
  std_msgs
)

include_directories(include)

add_library(b_library SHARED src/b_library.cpp) 
ament_target_dependencies(b_library ${dependencies})
ament_export_libraries(b_library)
ament_export_include_directories(include)

install(
  DIRECTORY include/
  DESTINATION include
)

install(
  TARGETS b_library
  LIBRARY DESTINATION lib
  ARCHIVE DESTINATION lib
  RUNTIME DESTINATION bin
)

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  ament_lint_auto_find_test_dependencies()
endif()

ament_package()

Originally posted by bekirbostanci with karma: 76 on 2022-07-15
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by Roberto Z. on 2022-07-22:
I am glad to hear that you have solved the problem.

