Q:

is int8[] a valid data type in c++?

So I am trying to publish an array of int8 type. The following lines are used (not together).
ArbitraryLibrary::int8[] msg;
template<class int8[]>
ros::Publisher chatter_pub = n.advertise<std_msgs::int8[]>("Chatter", 1000);

I can't really test it right now, but will this allow me to publish an array of int8 type messages?

Originally posted by Bholms on ROS Answers with karma: 83 on 2013-07-14
Post score: 0

A:

Your code example won't work, because topics always have a message type (not an array of primitives). So there are two options:

Use the std_msgs/Int8MultiArray; this is the message definition:
 # Please look at the MultiArrayLayout message definition for
 # documentation on all multiarrays.

 MultiArrayLayout  layout        # specification of data layout
 int8[]            data          # array of data

Then instantiate your publisher like this:
 ros::Publisher chatter_pub = n.advertise<std_msgs::Int8MultiArray>("Chatter", 1000);

Alternatively, define your own message type (my_pkg/Int8Array):
 int8[] data

Then instantiate your publisher like this:
 ros::Publisher chatter_pub = n.advertise<my_pkg::Int8Array>("Chatter", 1000);

It's probably better to define your own message type, because message types should always have a semantic meaning. If the topic type is "array of integers", this doesn't tell the subscriber how the data should be interpreted (range measurements in meters? encoder readings? temperatures?). Depends on the circumstances, though.

Originally posted by Martin Günther with karma: 11816 on 2013-07-15
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by thebyohazard on 2013-07-15:
hmm... In regards to your last comment, I would have thought the exact opposite. I like the message types simple and the topic names semantic. Might be a good topic for a best practice question...
Comment by Martin Günther on 2013-07-15:
Oh, there have been plenty of best practice discussions around that (e.g., this ros-users thread ).
Comment by Martin Günther on 2013-07-15:
Of course, the design decision depends on the specific case. If you want to represent a 6D pose, float[7] would be too generic, geometry_msgs/PoseStamped is just right, and my_pkg/PathPlanningTargetPose would be too specific.

