Q:

Inconsistency of `read_points` and opencv coordinates?

Hi, I'm trying to get lines from an image and get the corresponding points from a point cloud.
Note that I ran Realsense camera D455 and ran a launch file that converts color and depth images to a point cloud, based on [point_cloud_xyzrgb, depth_image_proc].
For now, I detected lines from a color image as described here.
Note that I artifically chose only one line for the test (lines = [lines[-1]]).
Then, read the corresponding points from the ponit cloud like this using point_cloud2.read_points. Note that I can choose specific points by giving the argument uvs.
I thought uvs is an iterator of (u, v) where u and v corresponds to uv coordinate systems in opencv.
That is, u is right, v is down.
But the result looks like it is flipped.
Here are intermediate results:

lines[0]

array([411.38839626, 186.68757629, 442.08746529, 539.14202881])
(each line = [x1, y1, x2, y2])

line_iterators[0], that is, points along with each line on the color image:

(Pdb) p line_iterators[0]
[[411, 187], [411, 188], [411, 189], [411, 190], [411, 191], [411, 192], [411, 193], [411, 194], [411, 195], [411, 196], [411, 197], [412, 198], [412, 199], [412, 200], [412, 201], [412, 202], [412, 203], [412, 204], [412, 205], [412, 206], [412, 207], [412, 208], [413, 209], [413, 210], [413, 211], [413, 212], [413, 213], [413, 214], [413, 215], [413, 216], [413, 217], [413, 218], [413, 219], [413, 220], [414, 221], [414, 222], [414, 223], [414, 224], [414, 225], [414, 226], [414, 227], [414, 228], [414, 229], [414, 230], [414, 231], [415, 232], [415, 233], [415, 234], [415, 235], [415, 236], [415, 237], [415, 238], [415, 239], [415, 240], [415, 241], [415, 242], [416, 243], [416, 244], [416, 245], [416, 246], [416, 247], [416, 248], [416, 249], [416, 250], [416, 251], [416, 252], [416, 253], [416, 254], [417, 255], [417, 256], [417, 257], [417, 258], [417, 259], [417, 260], [417, 261], [417, 262], [417, 263], [417, 264], [417, 265], [418, 266], [418, 267], [418, 268], [418, 269], [418, 270], [418, 271], [418, 272], [418, 273], [418, 274], [418, 275], [418, 276], [418, 277], [419, 278], [419, 279], [419, 280], [419, 281], [419, 282], [419, 283], [419, 284], [419, 285], [419, 286], [419, 287], [419, 288], [420, 289], [420, 290], [420, 291], [420, 292], [420, 293], [420, 294], [420, 295], [420, 296], [420, 297], [420, 298], [420, 299], [421, 300], [421, 301], [421, 302], [421, 303], [421, 304], [421, 305], [421, 306], [421, 307], [421, 308], [421, 309], [421, 310], [421, 311], [422, 312], [422, 313], [422, 314], [422, 315], [422, 316], [422, 317], [422, 318], [422, 319], [422, 320], [422, 321], [422, 322], [423, 323], [423, 324], [423, 325], [423, 326], [423, 327], [423, 328], [423, 329], [423, 330], [423, 331], [423, 332], [423, 333], [423, 334], [424, 335], [424, 336], [424, 337], [424, 338], [424, 339], [424, 340], [424, 341], [424, 342], [424, 343], [424, 344], [424, 345], [425, 346], [425, 347], [425, 348], [425, 349], [425, 350], [425, 351], [425, 352], [425, 353], [425, 354], [425, 355], [425, 356], [426, 357], [426, 358], [426, 359], [426, 360], [426, 361], [426, 362], [426, 363], [426, 364], [426, 365], [426, 366], [426, 367], [426, 368], [427, 369], [427, 370], [427, 371], [427, 372], [427, 373], [427, 374], [427, 375], [427, 376], [427, 377], [427, 378], [427, 379], [428, 380], [428, 381], [428, 382], [428, 383], [428, 384], [428, 385], [428, 386], [428, 387], [428, 388], [428, 389], [428, 390], [429, 391], [429, 392], [429, 393], [429, 394], [429, 395], [429, 396], [429, 397], [429, 398], [429, 399], [429, 400], [429, 401], [429, 402], [430, 403], [430, 404], [430, 405], [430, 406], [430, 407], [430, 408], [430, 409], [430, 410], [430, 411], [430, 412], [430, 413], [431, 414], [431, 415], [431, 416], [431, 417], [431, 418], [431, 419], [431, 420], [431, 421], [431, 422], [431, 423], [431, 424], [431, 425], [432, 426], [432, 427], [432, 428], [432, 429], [432, 430], [432, 431], [432, 432], [432, 433], [432, 434], [432, 435], [432, 436], [433, 437], [433, 438], [433, 439], [433, 440], [433, 441], [433, 442], [433, 443], [433, 444], [433, 445], [433, 446], [433, 447], [434, 448], [434, 449], [434, 450], [434, 451], [434, 452], [434, 453], [434, 454], [434, 455], [434, 456], [434, 457], [434, 458], [434, 459], [435, 460], [435, 461], [435, 462], [435, 463], [435, 464], [435, 465], [435, 466], [435, 467], [435, 468], [435, 469], [435, 470], [436, 471], [436, 472], [436, 473], [436, 474], [436, 475], [436, 476], [436, 477], [436, 478], [436, 479], [436, 480], [436, 481], [436, 482], [437, 483], [437, 484], [437, 485], [437, 486], [437, 487], [437, 488], [437, 489], [437, 490], [437, 491], [437, 492], [437, 493], [438, 494], [438, 495], [438, 496], [438, 497], [438, 498], [438, 499], [438, 500], [438, 501], [438, 502], [438, 503], [438, 504], [439, 505], [439, 506], [439, 507], [439, 508], [439, 509], [439, 510], [439, 511], [439, 512], [439, 513], [439, 514], [439, 515], [439, 516], [440, 517], [440, 518], [440, 519], [440, 520], [440, 521], [440, 522], [440, 523], [440, 524], [440, 525], [440, 526], [440, 527], [441, 528], [441, 529], [441, 530], [441, 531], [441, 532], [441, 533], [441, 534], [441, 535], [441, 536], [441, 537], [441, 538], [442, 539]]

Therefore, the line_iterator looks fine. Also, I can draw a line on the image to check it whether it's correct or not.
The blue line in this photo corresponds to the lines[0] that I printed.
This is the visualisation of the entire point cloud. And in this photo, the white line in the point cloud corresponds to the line.
As you can see, it looks like the y-coordinate is flipped.
So my question is:

What coordinate does uvs follow in read_points?
Is there any something that I did wrongly?

EDIT: sorry for the poor visualisation. I edited the links for better visualisation.
EDIT2: I'm so sorry. I guess the problem is that lines are defined for the specific aspect ratio (512 x 512), which is different from streaming images. After fixing this if it works, I'll take a note here.
EDIT3: It was my fault. I fixed my mistake (the aspect ratio issue) and checked that it works well according to @Mike's answer!

Originally posted by iHany on ROS Answers with karma: 5 on 2022-08-26
Post score: 0

A:

What coordinate does uvs follow in read_points?
The uvs argument is a list of (x,y) coordinates. "Iterable" is referring to the fact that uvs is a list. The coordinate system is that of the full PointCloud2. For the 2-D arrangement of Points, the message definition does not specify whether the rows are ordered top-to-bottom or bottom-to-top. In my experience, the origin is in upper left, with y incrementing as you move down the rows.

Originally posted by Mike Scheutzow with karma: 4903 on 2022-08-27
This answer was ACCEPTED on the original site
Post score: 1

