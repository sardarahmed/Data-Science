Q:

Decision behind ROS2's Python tutorial switched from src layout to flat layout

As far as I can see, the entire tutorial suite of ROS2 (citing Creating a package (docs.ros.org) to begin with) has switched from what is called "src layout" to "flat layout" (i.e. Python packages are directly placed at the top level directoryin a ROS/Ament package) regarding folder structuring in a package that hosts Python modules and even executables (Ref. "src layout vs flat layout" (python.org)). Back in ROS1, Python binding tutorials were predominantly using "src layout" (i.e. Putting Python packages under a sub-folder called src) if I'm not mistaken.
Arguing about the decision is not my intention. I'm curious to see what was the decision behind the switch, as I haven't found anything. Personally I'm undecided if I choose either side, choice may depend on the type of package.

UPDATE-1: Just FYI, though this should be irrelevant from the "src/flat layout" decision, I found the current implementation of ament(/colcon) doesn't support "src layout" usecase well -- Using ament_python_install_package(%PACKAGE_TOPDIR%), if I do ament_python_install_package(src) in order to let ament know where my Python modules/executables are in, then I get src installed, which is not a Python package I am making. The same cmake macro doesn't seem to support slash in the argument so passing src/mypackage errors.

A:

I expect that the rationale behind that exact change is likely lost to time. However, my intuition says this is likely a change related to one or more of:

The removal of "devel" workspaces in ament. Python documentation notes that the "src layout" requires an installation step. With catkin, we had this going on, but ament only provides the --symlink-install option. Catkin had some really crazy CMake going on, and one of the main goals of Ament was to streamline things.
ROS2 supports pure Python packages (with no CMakeLists.txt, just setup.py)
Developer preferences. While there is some overlap in the team that created Catkin and the team that created Ament, the lead developers at inception of each project were different people.

