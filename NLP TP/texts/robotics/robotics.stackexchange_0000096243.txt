Q:

trajectory_msgs/JointTrajectory Exception :AttributeError: 'str' object has no attribute 'positions'

I wrote a python script to publish a JointTrajectory message. It results in an Exception: AttributeError: 'str' object has no attribute 'positions'.
The python script:
#!/usr/bin/env python3

import rospy
import numpy
from trajectory_msgs.msg import JointTrajectory

rospy.init_node('topic_publisher')

pub= rospy.Publisher('Command',JointTrajectory,queue_size=2)
rate = rospy.Rate(2)

msg=JointTrajectory()
#msg.points=dict()
pos=[1.0,1.1,1.2,1.3]
velo=[0.0,0.0,0.0,0.0]
time=[2.0,0.0]
msg.joint_names=["hip","shoulder","elbow","wrist"]
msg.points=dict([('positions', pos), ('velocities', velo), ('time_from_start', time)])
#msg.points={'position':pos,'velocities':velo,'time_from_start':time}
print (msg)
while not rospy.is_shutdown():
    pub.publish(msg)
    rate.sleep()

I added a print to show the message.
Result:

header: 
  seq: 0
  stamp: 
    secs: 0
    nsecs:         0
  frame_id: ''
joint_names: 
  - hip
  - shoulder
  - elbow
  - wrist
points: {'positions': [1.0, 1.1, 1.2, 1.3], 'velocities': [0.0, 0.0, 0.0, 0.0], 'time_from_start': [2.0, 0.0]}
Traceback (most recent call last):
  File "/KubuntuDaten/myrobot_ws/src/myrobot/topic_publisher.py", line 23, in 
    pub.publish(msg)
  File "/opt/ros/noetic/lib/python3/dist-packages/rospy/topics.py", line 882, in publish
    self.impl.publish(data)
  File "/opt/ros/noetic/lib/python3/dist-packages/rospy/topics.py", line 1066, in publish
    serialize_message(b, self.seq, message)
  File "/opt/ros/noetic/lib/python3/dist-packages/rospy/msg.py", line 152, in serialize_message
    msg.serialize(b)
  File "/opt/ros/noetic/lib/python3/dist-packages/trajectory_msgs/msg/_JointTrajectory.py", line 110, in serialize
    length = len(val1.positions)
AttributeError: 'str' object has no attribute 'positions'

Now I am a bit confused of which type the data element points should be. Is it a list, a dict or a string? I tried several variations of the message format, always with the same result.
ROS noetic runs on Ubuntu focal.
This is my testcoding:

import rospy
import numpy
from trajectory_msgs.msg import JointTrajectory
from trajectory_msgs.msg import JointTrajectoryPoint

rospy.init_node('topic_publisher')

pub= rospy.Publisher('arm_controller/command',JointTrajectory,queue_size=2)
rate = rospy.Rate(30)

r0=0.0
r1=0.5
r3=0.0
r4=0.0
t=20.0
msg=JointTrajectory()
point=JointTrajectoryPoint()
point.positions=[r0,r1,r3,r4]
point.velocities=[0.0,0.0,0.0,0.0]
point.time_from_start=rospy.Duration(t)
msg.joint_names=["hip","shoulder","elbow","wrist"]
msg.points.append(point)
while not rospy.is_shutdown():

    pub.publish(msg)
    if point.positions[0] >= 2*numpy.pi :
        point.positions[0] = 0.0
    point.positions[0]+=0.7854*2

    rate.sleep()

---

[Originally posted](https://answers.ros.org/question/355108/trajectory_msgs/jointtrajectory-exception-:attributeerror:-'str'-object-has-no-attribute-'positions'/) by [GUENNI](https://answers.ros.org/users/55678/guenni/) on ROS Answers with karma: 56 on 2020-06-17

Post score: 1

A:

Now I got my robot arm to work. I switched from the python interface to c++. The central aspect for my problem with the jointTrajectory structure was, that I had to resize the arrays for joint_names, points, positions etc. to the desired number of elements.
Here my example code:

#include "ros/ros.h"
#include "std_msgs/String.h"
#include "trajectory_msgs/JointTrajectory.h"
#include "trajectory_msgs/JointTrajectoryPoint.h"

#define PI 3.141592653589793

int main(int argc, char **argv)
{
  ros::init(argc, argv, "topic_publisher");

  ros::NodeHandle n;

  ros::Publisher chatter_pub = n.advertise("arm_controller/command", 10);

  ros::Rate loop_rate(0.5);

 trajectory_msgs::JointTrajectory msg;
        msg.joint_names.resize(4);
        msg.joint_names[0] = "hip";
        msg.joint_names[1] = "shoulder";
        msg.joint_names[2] = "elbow";
        msg.joint_names[3] = "wrist";
        msg.points.resize(1);
        msg.points[0].positions.resize(4);
        msg.points[0].positions[0] = 1.5;
        msg.points[0].positions[1] = 0.5;
        msg.points[0].positions[2] = 0.6;
        msg.points[0].positions[3] = 0.6;

        msg.points[0].velocities.resize(4);
        msg.points[0].velocities[0] = 0.0;
        msg.points[0].velocities[1] = 0.0;
        msg.points[0].velocities[2] = 0.0;
        msg.points[0].velocities[3] = 0.0;

        msg.points[0].time_from_start=ros::Duration(2);
  while (ros::ok())
  {
          if (msg.points[0].positions[0] >= 2*PI)
                  msg.points[0].positions[0] = 0.0;
          else
                msg.points[0].positions[0] += 0.7;
//      ROS_INFO("%f:%f", msg.points[0].positions[0],msg.points[0].positions[0]);
    chatter_pub.publish(msg);

    ros::spinOnce();

    loop_rate.sleep();
  }

  return 0;
}

Originally posted by GUENNI with karma: 56 on 2020-06-23
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by Solrac3589 on 2020-06-25:
Great! seems a very clear code!
The line:
ros::Publisher chatter_pub = n.advertise<trajectory_msgs::jointtrajectory>("arm_controller/command", 10);

i think the message type sould be changed to trajectory_msgs::JointTrajectory (if not, i do not know how that's gonna work, but you know, is something minimal!
Personally i prefer to use C++ and this resize. It could seem annoying but actually you are controlling better the code! :)
Comment by GUENNI on 2020-06-26:
Thank you for your good ideas. The misspelled jointtrajectory must be an error on copying the source code. I agree with you concerning coding in C++. It makes it also more clear to me.

