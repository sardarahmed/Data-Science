Q:

how to tell roslaunch to use the shared libraries from my catkin work space lib directory before the default ros libraries

I'm debugging my node written in cpp. My code calls ControllerManager::update from controller_manager package. But the gdb doesn't step into the function.
I cloned https://github.com/ros-controls/ros_control.git and rebuilt it. My node is linked against libcontroller_manager.so built with the controller_manager package.
Probably roslaunch loads the version of the libcontroller_manager.so from /opt/ros/hydro/lib instead of the one which was built with the controller_manager package.
So the question is how to tell roslaunch to use the shared libraries from my catkin work space lib directory before the default ros libraries.

Originally posted by sd on ROS Answers with karma: 21 on 2014-05-26
Post score: 1

A:

If you source the workspace containing your modified controller_manager package, it should prefer your modified version over the system version.
You can verify that it's set up properly by inspecting the LD_LIBRARY_PATH variable, and running ldd on your node to see  the exact paths of the dynamic libraries that it's using.
If something isn't right, DON'T MODIFY LD_LIBRARY_PATH directly; instead, check to make sure that you've built and sourced your catkin workspace properly.
The reason that you shouldn't modify LD_LIBRARY_PATH is because it's only one of the many variables that are set by the setup scripts, and if isn't set correctly, chances are the other environment variables aren't set correctly either. Sorting out your workspace and which setup file to use will be a far more robust solution.

Originally posted by ahendrix with karma: 47576 on 2014-05-26
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by sd on 2014-05-26:
It turned out that LD_LIBRARY_PATH did include the path to catkin workspace lib directory, but libcontroller_manager.so built there didn't include symbol files. One way to to enable the debug info is probably  to add  set (CMAKE_CXX_FLAGS "-g")  in the CMakeLists.txt . But isn't there an easier way to built all packages in the catkin work space with the debug symbol info?
Comment by ahendrix on 2014-05-26:
Yes; you can set the cmake build type by running catkin_make with -DCMAKE_BUILD_TYPE=Debug or -DCMAKE_BUILD_TYPE=RelWithDebInfo
Comment by sd on 2014-05-26:
It worked. Greatly appreciated.

