Q:

Is there any function in ROS which specifies time duration?

Hello all ! I want to ask you is there any function for specifying time-duration and we pass that duration as argument to while loop and ask the loop to apply specific commands inside the loop for that specified duration of time. If yes, what is that and how use it please do comment. Bunch of thanks

Originally posted by Ibrahim_aerospace on ROS Answers with karma: 93 on 2018-12-09
Post score: 0

Original comments
Comment by gvdhoorn on 2018-12-09:
Are you (implicitly) asking about task scheduling?
Comment by Ibrahim_aerospace on 2018-12-09:
@gvdhoorn I am not sure about task scheduling but what I want to do is to apply a command for specific interval of time let say 5 seconds, this is what I want to do.

A:

If I'm understanding your question you want run a while loop for a specific period of time to repeatedly performing some processing or action. This is perfectly possible, although it's not really a function since this is part of the structure of your own program you need to write.
Using ros::Time you can record the time before your while loop, then continue iterating until a certain amount of time has passed. This structure would look like this:
ros::Time startTime = ros::Time::now();
ros::Duration loopDuration(5.0); // 5 seconds
while (ros::Time::now() < startTime+loopDuration)
{
  // do your processing here
}

Since ROS is an event driven system it's not a good idea to execute a block of code for a long period of time without checking for messages, so it's good practice to add a call to spinOnce in there to keep up-to date with message processing.
ros::Time startTime = ros::Time::now();
ros::Duration loopDuration(5.0); // 5 seconds
while (ros::Time::now() < startTime+loopDuration)
{
  // do your processing here

  ros::spinOnce(); //  check for messages
}

You may also want your loop run at a particular frequency as opposed to going 'flat out' as the previous two will. Using the ros::Rate object you can control this as below:
ros::Time startTime = ros::Time::now();
ros::Duration loopDuration(5.0); // 5 seconds
ros::Rate loopRate(30.0); // 30 Hz
while (ros::Time::now() < startTime+loopDuration)
{
  // do your processing here

  ros::spinOnce(); //  check for messages

  loopRate.sleep(); // delay loop so it doesn't run faster than 30 Hz
}

Hope this helps you get this working the way you want.

Originally posted by PeteBlackerThe3rd with karma: 9529 on 2018-12-09
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by Ibrahim_aerospace on 2018-12-09:
@PeteBlackerThe3rd Thanks this is what I want.
Comment by PeteBlackerThe3rd on 2018-12-10:
Great, can you accept this answer by clicking the tick next to it. Thanks.

