Q:

Blacklist ROS2 package for ARM build

I've recently added a repository with three ROS2 packages (https://index.ros.org/r/ets_ros2/github-brunodmt-ets_ros2/) to the Crystal distribution (https://github.com/ros/rosdistro/pull/21461). The amd64 build is working fine and I can already install the packages through the testing repository.
The problem is that the arm64 build keeps failing. This is actually expected since the plugin uses a third party library that does not support arm, and since the package is a plugin for a game that only works on amd64 it makes sense.
Is there a way to prevent the buildfarm from trying to build these packages for arm64?
I've found that for ROS (1) there is a blacklist in https://github.com/ros-infrastructure/ros_buildfarm_config/blob/production/kinetic/release-armhf-build.yaml, but the ROS2 distributions aren't listed in that repository and couldn't find anything equivalent.

Originally posted by bruno_dmt on ROS Answers with karma: 3 on 2019-06-15
Post score: 0

A:

The ROS 2 buildfarm configuration is stored in the ros2/ros_buildfarm_config fork of ros/ros_buildfarm_config.
I believe the file you are looking for is ros2/ros_buildfarm_config/crystal/release-bionic-arm64-build.yaml.
There don't appear to be any packages blacklisted yet for arm, but release-bionic-arm64-build.yaml is a REP-143 compatible release build file so it should support the package_blacklist field (refer to REP-141: Release build file - package_blacklist).

Originally posted by gvdhoorn with karma: 86574 on 2019-06-15
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by bruno_dmt on 2019-06-15:
Thanks!! I was focusing so much on finding the blacklist (which doesn't exist yet) that it didn't occur to me to look for the ROS 2 buildfarm configuration.
Comment by gvdhoorn on 2019-06-15:
That's an interesting plugin/node you have there.
What do you use ROS 2 for after you get the telemetry out of ETS? An actual driving simulator?
Comment by bruno_dmt on 2019-06-15:
Last year we built a cockpit (sort of) with actual car components (like the cluster and the infotainment system) using ETS. At that time we used this plugin https://github.com/Funbit/ets2-telemetry-server but it had two limitations for us: only works on Windows and it uses a REST API.
This year the goal is to build a system that gives recommendations based on the driving behavior (like aggresive acceleration) using machine learning. As part of that project we started building this new plugin.
At the same time, other team is working on detecting the driver behavior (like distractions or drowsiness) using OpenVINO. They started using the plugin to adapt the alerts based on the state. You can check that project at https://github.com/incluit/OpenVino-Driver-Behaviour

