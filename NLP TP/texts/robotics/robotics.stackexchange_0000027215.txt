Q:

Gazebo Topics disappear

I am trying to control a robot in Gazebo through the messaging system. For this I have a model plugin and four different topics. The model plugin subscribes to two of the topics and advertises on the other two. This works fine for one robot.
Now I want to do this with more than one robot in one world. I.e. I want to have two robot models in Gazebo, each with a model plugin and each with its own set of topics.
The problem I have is that some of the topics I create for the first robot seem to disappear once I create the topics for the second robot.
For each robot I create an instance of a controller class that subscribes and advertises to topics (which are named based on the robots' names). After the constructor for the first robot is done, I can see all four topics by opening the Gazebo Topic selector window (Ctrl + T).
If I then let the constructor of the second constructor run, two of the four topics of the first robot are no longer listed in the Gazebo Topic selector window. Specifically, the topics that the model plugin subscribes to (i.e. the ones that are advertised in the controller class) disappear.
One thing that I could see being a problem is that each controller object has its own node, i.e. the constructor does
gazebo::transport::NodePtr node(new gazebo::transport::Node());
node->Init();

Is it a problem that the don't both use the same node?
If so, how should I avoid this?
Otherwise, what else could be the problem?

Originally posted by NickDP on Gazebo Answers with karma: 186 on 2014-11-18
Post score: 0

A:

I have figured out a solution.
The problem was that both controllers called
gazebo::setupClient(0, NULL);

in their constructors.
It appears that this has to be called exactly once, so I have to take it out of the controller's constructor and call it manually in my main().

Originally posted by NickDP with karma: 186 on 2014-11-19
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by NickDP on 2014-11-19:
P.S.: The documentation says setupClient() starts a Gazebo client. However, I still have to do gazebo my.world in a terminal to actually start Gazebo. Is this the intended behavior?
Comment by nkoenig on 2014-11-20:
You are running gazebo with a few plugins in one process, and in a separate process a set of controllers, correct? If all the controllers run in one process, then you are correct that you should only call gazebo::setupClient once.
Comment by nkoenig on 2014-11-20:
A gazebo client is just a process that connects to a gazebo server. A client can be anyting (GUI, command line program, etc). A client relies on gzserver or gazebo running.
Comment by NickDP on 2014-11-20:
Correct, that's what I've been doing. But with all the message passing, the simulation is very slow. That's why I'm looking into running Gazebo as a library in the hopes that simulation will be faster.

