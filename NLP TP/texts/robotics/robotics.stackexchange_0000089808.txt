Q:

ROS changed the Python Path

Hi, I've just installed ROS and I cannot use my Python 3.6 anymore. I did the following and saw:
os.getenv("PYTHONPATH")
'/home/user/ros_ws/devel/lib/python2.7/dist-packages:/opt/ros/melodic/lib/python2.7/dist-packages'

which shouldn't be the case. I don't know why ROS even screwed up my system paths like this, but this needs to change back to what it was since I don't use Python 2.7, not sure why ROS does either.
Does anyone know how I can get back my Python 3.6?

Originally posted by Jägermeister on ROS Answers with karma: 81 on 2018-12-11
Post score: 0

A:

I don't know why ROS even screwed up my system paths like this, but this needs to change back

ROS did not "screwed up" your PYTHONPATH.
Python modules distributed as ROS packages are not installed in system locations, exactly to avoid "screw[ing] up" your Python setup. They are installed in /opt/ros/.
In order for Python to still be able to find those modules, the interpreter must somehow be made aware of them. So whenever you source /opt/ros/$ROS_DISTRO/setup.bash or your Catkin workspace's setup.bash (typically in the devel space), the PYTHONPATH variable gets updated to include the locations where ROS Python modules reside.
Without that change, nothing would work.

this needs to change back to what it was since I don't use Python 2.7, not sure why ROS does either.

The only Python version currently supported by ROS is 2.7, so it's expected to see python2.7 paths in PYTHONPATH. Please refer to REP-3: Target Platform: Melodic Morenia for the version of Python that is specced for Melodic.
As to why this is the case: please refer to earlier Q&As about ROS and Python 3.

Does anyone know how I can get back my Python 3.6?

It (most likely) never went anywhere: just make sure to not automatically source /home/user/ros_ws/devel/setup.bash if you do not need it and nothing should have changed.
If you want to make sure scripts and other programs use Python 3, spec python3 as the interpreter.

Originally posted by gvdhoorn with karma: 86574 on 2018-12-11
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by gvdhoorn on 2018-12-11:
Finally: please refrain from using language such as "screwed up my X or Y". That implies someone deliberately tried to mess with your system for nefarious purposes almost. That is certainly not the case and using such language does not encourage people to try and help you.
Comment by Jägermeister on 2018-12-11:
Hmm well that's unfortunate, I guess I can't use ROS then, since I do everything in Python 3 and nothing in 2. How can I possibly revert this action now though? Should I modify my Pythonpath on my own? Like export PYTHONPATH=/usr/bin/python3 ?
Comment by Jägermeister on 2018-12-11:
I see two lines in my bashrc, source /opt/ros/melodic/setup.bash and source ~/ros_ws/devel/setup.bash, I should remove these in order to make Python3 work again, right?
Comment by gvdhoorn on 2018-12-11:\

Hmm well that's unfortunate, I guess I can't use ROS then, since I do everything in Python 3 and nothing in 2

As I wrote earlier: search for posts regarding ROS and Python 3 compatibility. There have been many, and it's certainly possible.
It's just not the default for now.
Comment by gvdhoorn on 2018-12-11:\

I see two lines in my bashrc, source /opt/ros/melodic/setup.bash and source ~/ros_ws/devel/setup.bash, I should remove these in order to make Python3 work again, right?

Removing / commenting those two lines will avoid updating PYTHONPATH, yes.
Comment by Jägermeister on 2018-12-11:
I did look up and saw comments like Anyway if you go that route you should expect problems and will find things which simply don't work with Python 3. so I am not willing to attempt this. But thanks.
Comment by gvdhoorn on 2018-12-11:
The situation changes almost daily, so I would not necessarily be directly discouraged.
Comment by iangregor on 2018-12-17:
PYTHONPATH is used by the python interpreter to determine which modules to load.
PATH is used by the shell to determine which executables to run.
Comment by gvdhoorn on 2018-12-17:
@iangregor: yes, I assumed that was clear. Are you responding to the comment by @Jägermeister where he asks whether he should do something like: export PYTHONPATH=/usr/bin/python3?

