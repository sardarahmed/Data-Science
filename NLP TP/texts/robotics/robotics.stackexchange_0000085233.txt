Q:

ROS, class with callback methods

Hi,
I wanted to create a class which initializes a node and has some callback that would be called when I do ros::spin.
The one implemented bellow doesn't compile (why?). It tells me :
invalid use of non-static member function ‘void EKF_node::chatterCallback(const ConstPtr&)’ 
ros::Subscriber sub_camera = n.subscribe("chatter", 1000, chatterCallback);

Also, it seems that if I do ros::spin in the main, it won't call the callback methods. How should I fix this stuff?
#include "ros/ros.h"                                                                                                                                                 
#include <message_filters/subscriber.h>                                                                                                                              
#include <message_filters/synchronizer.h>                                                                                                                            
#include <message_filters/sync_policies/approximate_time.h>                                                                                                          
#include <std_msgs/String.h>                                                                                                                                         
                                                                                                                                                                     
using namespace message_filters;                                                                                                                                     
using namespace std_msgs;                                                                                                                                            
using namespace std;                                                                                                                                                 
                                                                                                                                                                     
class EKF_node                                                                                                                                                       
{                                                                                                                                                                    
        public:                                                                                                                                                      
                // constructor                                                                                                                                       
                EKF_node(int argc,char** argv)                                                                                                                       
                {                                                                                                                                                    
                        ros::init(argc, argv, "listenerMultipleTopics");                                                                                             
                        ros::NodeHandle n;                                                                                                                           
                                                                                                                                                                     
                        ros::Subscriber sub_camera = n.subscribe("chatter", 1000, chatterCallback);                                                                  
                        ros::Subscriber sub_imu = n.subscribe("chatter2", 1000, chatterCallback2);                                                                   
                }                                                                                                                                                    
                                                                                                                                                                     
                                                                                                                                                                     
                // callback1                                                                                                                                         
                void chatterCallback(const std_msgs::String::ConstPtr& msg)                                                                                          
                {                                                                                                                                                    
                        ROS_INFO("I heard: [%s]", msg->data.c_str());                                                                                                
                }                                                                                                                                                    
                // callback2                                                                                                                                         
                void chatterCallback2(const std_msgs::String::ConstPtr& msg)                                                                                         
                {                                                                                                                                                    
                        ROS_INFO("I heard from the second chatter: [%s]", msg->data.c_str());                                                                        
                }                                                                                                                                                    
        private:                                                                                                                                                     
                // vector containing the outputs                                                                                                                     
                vector<string> y;                                                                                                                                    
};                                                                                                                                          
                                                                                                                                                                     
int main(int argc, char **argv)                                                                                                                                      
{                                                                                                                                                                                  
        ros::spin();                                                                                                                                                 
        return 0;           
}                             

edit :
So I followed the nice suggestions from Thomas and Airuno and I try to do a small code that puts the received string in a string vector and than in the main loop I wan't to display this string components.
The first problem is when I execute this listener node, I cannot use ctrl+c to stop the node.
The second thing is that between two displays of the vectors there are a lot of white lines that are displayed.
Note that the talker I use are simply the talkers from the tutorial https://wiki.ros.org/ROS/Tutorials/WritingPublisherSubscriber%28c%2B%2B%29
#include "ros/ros.h"                                                                                                                                                 
#include <message_filters/subscriber.h>                                                                                                                              
#include <message_filters/synchronizer.h>                                                                                                                            
#include <message_filters/sync_policies/approximate_time.h>                                                                                                          
#include <std_msgs/String.h>                                                                                                                                         
                                                                                                                                                                     
using namespace message_filters;                                                                                                                                     
using namespace std_msgs;                                                                                                                                            
using namespace std;                                                                                                                                                 
                                                                                                                                                                     
class EKF_node                                                                                                                                                       
{                                                                                                                                                                    
        public:                                                                                                                                                      
                // constructor                                                                                                                                       
                EKF_node()                                                                                                                                           
                        : y(2)                                                                                                                                       
                {                                                                                                                                                    
                        ros::NodeHandle n;                                                                                                                           
                                                                                                                                                                     
                        sub_camera = n.subscribe("chatter", 1000, &EKF_node::chatterCallback, this);                                                                 
                        sub_imu = n.subscribe("chatter2", 1000, &EKF_node::chatterCallback2, this);                                                                  
                }                                                                                                                                                    
                                                                                                                                                                     
                                                                                                                                                                     
                // callback1                                                                                                                                         
                void chatterCallback(const std_msgs::String::ConstPtr& msg)                                                                                          
                {                                                                                                                                                    
                        //ROS_INFO("I heard: [%s]", msg->data.c_str());                                                                                              
                        y[0] = msg->data.c_str();                                                                                                                    
                }                                                                                                                                                    
                // callback2                                                                                                                                         
                void chatterCallback2(const std_msgs::String::ConstPtr& msg)                                                                                         
                {                                                                                                                                                    
                        //ROS_INFO("I heard from the second chatter: [%s]", msg->data.c_str());                                                                      
                        y[1] = msg->data.c_str();                                                                                                                    
                }                                                                                                                                                    
                //private:                                                                                                                                           
                // vector containing the outputs                                                                                                                     
                vector<string> y;
                ros::Subscriber sub_camera;                                                                                                                          
                ros::Subscriber sub_imu;                                                                                                                             
};                                                                                                                                                                   
                                                                                                                                                                     
int main(int argc, char **argv)                                                                                                                                      
{                                                                                                                                                                    
                                                                                                                                                                     
        ros::init(argc, argv, "listenerMultipleTopics");                                                                                                             
        EKF_node myNode;                                                                                                                                             
        ros::Rate r(10);                                                                                                                                             
                                                                                                                                                                     
        while(ros::ok)                                                                                                                                               
        {                                                                                                                                                            
                ros::spinOnce;                                                                                                                                       
                cout << myNode.y[0] << endl << myNode.y[1] << endl;                                                                                                  
                r.sleep();                                                                                                                                           
        }                                                                                                                                                            
        return 0;                                                                                                                                                    
}

Originally posted by edamondo on ROS Answers with karma: 75 on 2018-02-09
Post score: 6

Original comments
Comment by Thomas D on 2018-02-09:
Your update seems like a new question. But you might be able to change to ros::spinOnce();.
Comment by edamondo on 2018-02-09:
Yes, but the ctrl+c still doesn't work. Actually I am suprised it even compiled without the parenthesis for spinOnce.
Comment by ahendrix on 2018-02-10:
ctrl-C doesn't work because you're checking that the ros::ok function exists instead of calling it. Try while(ros::ok())
Comment by edamondo on 2018-02-11:
damned!
Thanks a lot ahendrix, this is absolutely correct!

A:

The build error is likely because you need to specify that your callbacks are member functions: n.subscribe("chatter", 1000, &EKF_node::chatterCallback, this);. I did not test that your code compiles with that type of change.
You don't get to your callbacks if ros::spin() is in main() because your subscribers are not member variables. They go out of scope as soon as you leave your constructor. When you put ros::spin() (which blocks) in your constructor you do not leave the constructor and the subscribers do not go out of scope. You should make your subscribers member variables and spin from main.
I normally see ros::init() in main also.
And you need to create an instance of your class in main, as answered by @Airuno2L.

Originally posted by Thomas D with karma: 4347 on 2018-02-09
This answer was ACCEPTED on the original site
Post score: 8

Original comments
Comment by edamondo on 2018-02-09:
Thanks Thomas, if I specify that the callbacks are member function, it compiles just fine. But could you explain why I actually have to do this. I would be interested in understanding it.
Comment by Thomas D on 2018-02-09:
The subscribers are using boost::bind, per the node handle API.
Comment by edamondo on 2018-02-09:
Oh, okay. I also just found this : https://wiki.ros.org/roscpp_tutorials/Tutorials/UsingClassMethodsAsCallbacks.

