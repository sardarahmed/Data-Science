Q:

Is ROS hard real time safe?

I know that is a question that has been asked too many times, but still its not clear to me. I read online that it isn't but some people say that they control their robots under ROS in applications with hard real time constraints. So, because I need some technical arguments (rather than a plain "ros is not real time") I will be more specific (suppose we have ROS under a RTOS):

I read that ROS uses a TCP/IP-based communication for ROS topics and I know that TCP/IP is not reliable. That means I cannot use topics in a real time loop? For instance send a control signal to my system publishing it to a topic, and the system sending me some feedback via a topic?
If I have a RTOS (eg Linux+Xenomai) can I build a real time control loop for a robot using ROS, or ROS will be a bottleneck?

Maybe the above are naive or I lack some knowledge, so please enlighten me!
Note: I define as a hard real time system (eg in 1KHz), the system that can guarantee that we will not miss a thing (if the control loop fails to run every 1ms the system fails).

A:

ROS is not a real-time operating system.  The purpose of ROS was not to be like VXWorx (which is what the Mars Curiosity rover uses).  ROS was developed to be a simple, generic, reusable platform for everyone to contribute to and use.  Developers would be able to add their own abstracted modules, building a rich community of reusable code.  The key here is that ROS is meant to save development time, not to ensure real-time operations.  This addresses your point #6.
Simplest reason ROS is not real-time: the version of Linux it sits on is not real-time.
To point 1, the unreliability of TCP/IP is a good point, but in itself, that doesn't mean that a system with TCP/IP cannot be a real-time system.  "Real-time" simply means that 2 guarantees are always made:
1) a task is guaranteed to have a completion time - an absolute deadline,
and
2) if that deadline cannot be achieved, a warning about this failure will be made.
That should also explain points 2 & 3.
Not sure about point 4.
For point 5: Yes, there is a benefit, but for some architectures to be able to accomplish this, we would need a real-time OS slice (also called a base operating layer), and this may be too burdensome for some projects.
I hope that helps,
Ryan

