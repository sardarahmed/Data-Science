Q:

Error adding controller script in simple urdf model to be simulated on GAZEBO

I have URDF model of the single leg of a robot. My goal is to be able to give the joints a effort command and make it stand eventually. My URDF file is as follows.
<?xml version="1.0" ?>
<robot name="huboleg" xmlns:xacro="http://www.ros.org/wiki/xacro">
  <link name="Body_LHP">
    <inertial>
      <mass value="2.8201"/>
      <inertia ixx="0.0295102" ixy="0.000184399" ixz="-0.000370291" iyy="0.0273771" iyz="0.00065658" izz="0.00838035"/>
      <origin xyz="0.0195049 -0.0595775 -0.175202"/>
    </inertial>
    <visual>
      <geometry>
        <mesh filename="package://hubo_leg/meshes/Body_LHP_vis.dae"/>
      </geometry>
      <material name="random">
        <color rgba="0.800000 0.800000 0.500000 1"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <mesh filename="package://hubo_leg/meshes/Body_LHP_col.dae"/>
      </geometry>
    </collision>
  </link>
  <link name="Body_LKP">
    <inertial>
      <mass value="1.80912"/>
      <inertia ixx="0.0232156" ixy="0.000251648" ixz="-0.00129343" iyy="0.0208342" iyz="0.00278068" izz="0.0059204"/>
      <origin xyz="0.0128254 -0.00727567 -0.171431"/>
    </inertial>
    <visual>
      <geometry>
        <mesh filename="package://hubo_leg/meshes/Body_LKP_vis.dae"/>
      </geometry>
      <material name="random">
        <color rgba="0.800000 0.800000 0.500000 1"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <mesh filename="package://hubo_leg/meshes/Body_LKP_col.dae"/>
      </geometry>
    </collision>
  </link>
  <link name="Body_LAP">
    <inertial>
      <mass value="1.63501"/>
      <inertia ixx="0.00231659" ixy="1.87402e-05" ixz="0.000369899" iyy="0.00330411" iyz="6.38153e-05" izz="0.00279495"/>
      <origin xyz="0.0198702 -0.0459693 0.0115069"/>
    </inertial>
    <visual>
      <geometry>
        <mesh filename="package://hubo_leg/meshes/Body_LAP_vis.dae"/>
      </geometry>
      <material name="random">
        <color rgba="0.800000 0.800000 0.500000 1"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <mesh filename="package://hubo_leg/meshes/Body_LAP_col.dae"/>
      </geometry>
    </collision>
  </link>
  <link name="Body_LAR">
    <inertial>
      <mass value="1.20318"/>
      <inertia ixx="0.00295183" ixy="3.23211e-05" ixz="0.000141769" iyy="0.00524792" iyz="5.95404e-05" izz="0.00516817"/>
      <origin xyz="-0.0515094 0.00216398 -0.0693881"/>
    </inertial>
    <visual>
      <geometry>
        <mesh filename="package://hubo_leg/meshes/Body_LAR_vis.dae"/>
      </geometry>
      <material name="random">
        <color rgba="0.800000 0.800000 0.500000 1"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <mesh filename="package://hubo_leg/meshes/Body_LAR_col.dae"/>
      </geometry>
    </collision>
  </link>
  <joint name="LKP" type="revolute">
    <origin rpy="0 -0 0" xyz="0.000766364 -0.0445011 -0.280007"/>
    <parent link="Body_LHP"/>
    <child link="Body_LKP"/>
    <axis xyz="0 1 0"/>
    <limit effort="10.0" lower="-0.0698132" upper="2.60054" velocity="1.0"/>
  </joint>
  <joint name="LAP" type="revolute">
    <origin rpy="0 -0 0" xyz="7.20248e-06 0.0247555 -0.279942"/>
    <parent link="Body_LKP"/>
    <child link="Body_LAP"/>
    <axis xyz="0 1 0"/>
    <limit effort="10.0" lower="-1.29154" upper="1.69297" velocity="1.0"/>
  </joint>
  <joint name="LAR" type="revolute">
    <origin rpy="0 -0 0" xyz="0.0711787 -0.0466006 -1.04e-10"/>
    <parent link="Body_LAP"/>
    <child link="Body_LAR"/>
    <axis xyz="1 0 0"/>
    <limit effort="10.0" lower="-0.191986" upper="0.191986" velocity="1.0"/>
  </joint>
  <gazebo>
    <!-- robot model offset -->
    <pose>0 0 .66 0 0 0</pose>
  </gazebo>
  <transmission name="LKP_trans" type="pr2_mechanism_model/SimpleTransmission">
    <actuator name="LKP_motor" />
    <joint name="LKP" />
    <mechanicalReduction>1</mechanicalReduction>
    <motorTorqueConstant>1</motorTorqueConstant>
  </transmission>
  <transmission name="LAP_trans" type="pr2_mechanism_model/SimpleTransmission">
    <actuator name="LAP_motor" />
    <joint name="LAP" />
    <mechanicalReduction>1</mechanicalReduction>
    <motorTorqueConstant>1</motorTorqueConstant>
  </transmission>
  <transmission name="LAR_trans" type="pr2_mechanism_model/SimpleTransmission">
    <actuator name="LAR_motor" />
    <joint name="LAR" />
    <mechanicalReduction>1</mechanicalReduction>
    <motorTorqueConstant>1</motorTorqueConstant>
  </transmission>
 <gazebo>
      <!-- PR2_ACTARRAY -->
      <controller:gazebo_ros_controller_manager name="gazebo_ros_controller_manager" plugin="libgazebo_ros_controller_manager.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>1000.0</updateRate>
      </controller:gazebo_ros_controller_manager>

  </gazebo>
</robot>

This file is present in the /usr/share/drcsim-1.3/models/hubo_leg/ directory and the name of the file is model.urdf
I have a hubo_leg_pkg. which has 3 launch files :
The 1st launch file is hubo_leg.launch (present is the package hubo_leg/launch/)
<launch>

  <arg name="gzname" default="gazebo"/>

  <!-- start gazebo with the hubo_leg -->
  <include file="$(find hubo_leg_utils)/launch/hubo_no_controllers.launch">
    <arg name="gzname" value="$(arg gzname)"/>
  </include>

  <include file="$(find hubo_leg_utils)/launch/hubo_leg_bringup.launch"/>
</launch>

The 2nd launch file is :
hubo_no_controllers.launch (present in the same directory as the previous launch file )
<launch>

  <arg name="gzname" default="gazebo"/>
  <arg name="gzworld" default="hubo_leg.world"/>
  <param name="/use_sim_time" type="bool" value="true"/>

  <!-- start gazebo with the hubo -->
  <node name="gazebo" pkg="hubo_leg_utils" type="run_$(arg gzname)" args="$(arg gzworld)" output="screen" />

  <!-- Robot Description -->
  <param name="robot_description" textfile="$(find hubo_leg)/model.urdf"/>
  
</launch>

My 3rd launch file is : hubo_leg_bringup.launch (again present in the same directory)
<launch>
  <!-- Use sim time -->
  <param name="/use_sim_time" type="bool" value="true"/>

  <!-- Robot Description -->
  <param name="robot_description" textfile="$(find hubo_leg)/model.urdf"/>

  <!-- Controller Manager -->
  <include file="$(find pr2_controller_manager)/controller_manager.launch" />

  <!-- Fake Calibration -->
  <node pkg="rostopic" type="rostopic" name="fake_joint_calibration"
        args="pub /calibrated std_msgs/Bool true" />

  <!-- TF Buffer Server -->
  <node pkg="tf2_ros" type="buffer_server" name="tf2_buffer_server" output="screen">
    <param name="buffer_size" value="1200.0"/>
  </node>

  <!-- Arms -->
  <rosparam command="load" file="$(find hubo_leg)/ros/Hubo_leg_controllers.yaml" />

  <!-- Controllers that come up started -->
  <node name="my_controller_spawner"
        pkg="pr2_controller_manager" type="spawner" output="screen"
        args="my_controller_name" />

</launch>

I created 3 launch files because I was just following the way the atlas robot launch files were created and I just recreated them, I dont know how to create a simple launch file with which I can load the robot. If u know a like that does it please share it with me .
The yaml file that the launch files look up is as follows :
(THe name of the yaml file is Hubo_leg_controllers.yaml (present in a directory hubo_leg/ros/  ))
my_controller_name:
  type: "my_controller_pkg/MyControllerPlugin"
  joint_name: LKP

I creatated a controller using the pr2 controller and following the writing the real time controller, I had some problems initially with the controller but It works now But I am not see any control happening on the joint I want it to control.
I get the following error when I load the model :
Warning [parser.cc:378] SDF has no <sdf> element in file[/usr/share/drcsim-1.3/models/hubo_leg/model.urdf]
Dbg [Body_LHP] has no parent joint
Error [parser.cc:696] XML Element[controller:gazebo_ros_controller_manager], child of element[model] not defined in SDF. Ignoring.[model]
Error [parser.cc:687] Error reading element <model>
Error [parser.cc:370] Unable to read element <sdf>
Error [parser.cc:292] parse as old deprecated model file failed.
Error [parser.cc:620] Unable to read file[/usr/share/drcsim-1.3/models/hubo_leg/model.urdf]
Error [parser.cc:687] Error reading element <world>
Error [parser.cc:370] Unable to read element <sdf>
Error:   Could not find the 'robot' element in the xml file
         at line 61 in /tmp/buildd/ros-fuerte-urdfdom-0.2.3-1precise-20121011-0155/urdf_parser/src/model.cpp
Error [parser_urdf.cc:1529] Unable to call parseURDF on robot model
Warning [parser.cc:378] SDF has no <sdf> element in file[urdf file]
Error [parser.cc:292] parse as old deprecated model file failed.
Error [Server.cc:220] Unable to read sdf file[hubo_leg.world]
Exception AttributeError: AttributeError("'_DummyThread' object has no attribute '_Thread__block'",) in <module 'threading' from '/usr/lib/python2.7/threading.pyc'> ignored

When I remove the following portion script the model loads fine. I do not understand Why is this happening ?
<gazebo>
      <!-- PR2_ACTARRAY -->
      <controller:gazebo_ros_controller_manager name="gazebo_ros_controller_manager" plugin="libgazebo_ros_controller_manager.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>1000.0</updateRate>
      </controller:gazebo_ros_controller_manager>

  </gazebo>

I am trying to load a robot urdf model on the gazebo simuator, and control is by giving the joints a initial effort command to make it stand.

Originally posted by Bharadwaj on ROS Answers with karma: 41 on 2013-02-12
Post score: 1

Original comments
Comment by Jeremy Corbett on 2013-05-17:
I have the same problem with Gazebo 1.5: http://answers.gazebosim.org/question/2389/plugins-via-urdf-not-parsing/ I believe it is because Gazebo > V1.3 doesn't parse urdf plugins like it use to so it fails parsing the file as a urdf and then attempts to parse as a sdf instead (and fails).

A:

Maybe I'm late, but I have had the same problem and I find this page googling, the quick solution is:
Change from this
<controller:gazebo_ros_controller_manager name="gazebo_ros_controller_manager" plugin="libgazebo_ros_controller_manager.so">
    <alwaysOn>true</alwaysOn>
    <updateRate>1000.0</updateRate>
  </controller:gazebo_ros_controller_manager>

to this
   <plugin filename="libgazebo_ros_controller_manager.so" name="gazebo_ros_controller_manager">
  <alwaysOn>true</alwaysOn>
  <updateRate>1000.0</updateRate>
  <interface:audio name="gazebo_ros_controller_manager_dummy_iface" />
</plugin>

Originally posted by Alex2309 with karma: 163 on 2013-08-14
This answer was ACCEPTED on the original site
Post score: 2

