Q:

Undefined reference to functions in header class?

Hello, I'm currently attempting to convert a C++ driver demo program that came with a hardware system my boss purchased into a C++ ROS node that will do pretty much the same thing (except within ROS), which is to connect to a smart motor and laser scanner via USB and ethernet connections respectively, and then publish the scans continually while rotating the scanner back and forth (the original program saves the scans to a log file, and I will eventually change this to publishing ROS scan_msgs but have not gotten around to this yet).  Right now I am running into some strange compiler errors that basically say "undefined reference to ".  Here is the code/compiler errors:
CMakeLists: http://pastebin.com/Umi97hN5 (there are a couple other files in this project; I kept them in case their CMake stuff is screwing up this particular node.  sweepLaserInterface is the one I'm talking about here)
Node: http://pastebin.com/0AuteZeM (not yet modified from original except for the include statements because I moved the header and other cpp files into the include folder)
Errors: http://pastebin.com/5zTxwGSm
Any ideas as to what could be going wrong?  This program was working perfectly until I tried to repackage it as a ROS node.

Originally posted by mysteriousmonkey29 on ROS Answers with karma: 170 on 2014-07-24
Post score: 0

A:

You must link against the library that contains the code for those functions.
target_link_libraries(sweepLaserInterface_node ${catkin_LIBRARIES} some_library)

OR
Include the code for those functions in the executable.
add_executable(sweepLaserInterface_node src/sweepLaserInterface.cpp src/motorInterface.cpp)

Originally posted by kmhallen with karma: 1416 on 2014-07-24
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by mysteriousmonkey29 on 2014-07-24:
This totally sounds right, so maybe I am misimplimenting this solution, but this didn't solve the problem.  I tried the first way (with target_link_libraries), but couldn't get the path right (not sure where it starts looking), so moved on to the second method (add_executable).  My CMakeLists.txt now reads:
#sweepLaserInterface node
add_executable(sweepLaserInterface_node src/sweepLaserInterface.cpp include/sweepLaserInterface/sickLMS115Interface.cpp include/sweepLaserInterface/motorInterface.cpp)

target_link_libraries(sweepLaserInterface_node ${catkin_LIBRARIES})
, but I am getting similar (but I don't think exactly the same) errors:
http://pastebin.com/KW4shySV
Comment by mysteriousmonkey29 on 2014-07-24:
#sweepLaserInterface node
add_executable(sweepLaserInterface_node src/sweepLaserInterface.cpp include/sweepLaserInterface/sickLMS115Interface.cpp include/sweepLaserInterface/motorInterface.cpp)
target_link_libraries(sweepLaserInterface_node ${catkin_LIBRARIES})
Comment by mysteriousmonkey29 on 2014-07-24:
Sorry, I guess you can't do the indenting thing in comments, so I recommented the CMakeLists contents for readability.
Comment by McMurdo on 2014-07-24:
please ask c++ questions on programming forums.
Comment by mysteriousmonkey29 on 2014-07-24:
Ok, I will next time.  When I try to add the libraries to the target_link_libaries line, however, I get the error:
/usr/bin/ld: cannot find -linclude/sweepLaserInterface/sickLMS115Interface.cpp
/usr/bin/ld: cannot find -linclude/sweepLaserInterface/motorInterface.cpp,
or just -l.
Do you know what I could be doing wrong here?  What directory does the target link libraries command start its search in?
Comment by McMurdo on 2014-07-24:
you should link it against a shared object. Not the cpp source.
Comment by McMurdo on 2014-07-24:
If you do not yet have the shared object/static object, then use method 2 from the answer.
Comment by mysteriousmonkey29 on 2014-07-25:
I'm not sure what you mean by linking it against a shared object (what exactly that would look like), but, as I mentioned, I already tried method 2, and it did not solve the problem.  In fact, I believe you originally responded to that with "you have to do both," which you have now deleted and thus thoroughly confused me.
Comment by McMurdo on 2014-07-25:
I didn't understand your comment properly. For every executable, you should have the two lines, add_executable and target_link_libraries. That is what I meant. Your source file (with the implementation of the functions/classes should appear as a source file in add_executable.
Comment by McMurdo on 2014-07-25:
If instead that source file with the implementations had already been compiled into a shared object, you can simply link it with target_link_libraries. Please google for linking and shared/static libraries.
Comment by mysteriousmonkey29 on 2014-07-25:
Ok, when I do what I think you are saying (CMakeLists looks like this):
#sweepLaserInterface node
add_executable(sweepLaserInterface_node src/sweepLaserInterface.cpp)
target_link_libraries(sweepLaserInterface_node ${catkin_LIBRARIES} /home/randy/catkin_ws/src/toro/include/sweepLaserInterface/sickLMS115Interface.o /home/randy/catkin_ws/src/toro/include/sweepLaserInterface/motorInterface.o)
I get pretty much the original errors:
http://pastebin.com/VsfStwjZ
Comment by mysteriousmonkey29 on 2014-07-25:
And when I try option 1 (just adding the extra files in the add executable line):
#sweepLaserInterface node
add_executable(sweepLaserInterface_node src/sweepLaserInterface.cpp include/sweepLaserInterface/sickLMS115Interface.cpp include/sweepLaserInterface/motorInterface.cpp)
target_link_libraries(sweepLaserInterface_node ${catkin_LIBRARIES})
I get again the same errors: http://pastebin.com/7wu4MezG
Comment by mysteriousmonkey29 on 2014-07-25:
Also, I've tried adding both at once, and target linking the cpp files instead of the .o ones (this is what I think you meant about the compiled object stuff; correct me if I'm wrong), but get the same errors from each.
Comment by McMurdo on 2014-07-25:
add_executable(sweepLaserInterface_node src/sweepLaserInterface.cpp include/sweepLaserInterface/sickLMS115Interface.cpp include/sweepLaserInterface/motorInterface.cpp) target_link_libraries(sweepLaserInterface_node ${catkin_LIBRARIES}) - correct
Comment by McMurdo on 2014-07-25:
If it gives the same errors (assuming they are 'undefined reference to' errors) then those source files do not have the implementations. Ur pastebin links don't work
Comment by mysteriousmonkey29 on 2014-07-25:
Ok, I tried that, and got the same 'undefined refernece to...' errors.  Sorry about the pastebin links; I'm not sure why they've been removed.  And what do you mean by "do not have the implimentations"?  If you mean they don't contain the function bodies, they do.  I'm not sure if this is what you meant though.  Thanks again.
Comment by McMurdo on 2014-07-25:
It has to be that way. That is what undefined reference means.
Comment by mysteriousmonkey29 on 2014-07-25:
Thank you; you were correct.  It turns out motorInterface and sickLMSInterface were not all that was necessary to include in thr add_executable line.  The undefined reference errors were concerning functions in the other cpp files I had not included.

