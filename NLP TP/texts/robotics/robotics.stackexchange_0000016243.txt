Q:

Controlling a dc servo with serial communication

I am going to buy this motor :-
https://robokits.co.in/motors/encoder-dc-servo/faulhaber-coreless-17w-encoder-motor-120rpm-pid-dc-servo-drive?zenid=im3bp6grppt2f2ofdo2r6pq5c2
The datasheet of its driver:-
http://robokits.download/documentation/Serial_DC_Encoder_Servo_Driver.pdf
I don't know how will I be able to control this motor with Arduino . 
I know about the values that control the position and speed of the motor by reading the datasheet but the part where Arduino will be used to send these values is still unclear.I know about serial communication but I have only used it for communication between PC and Arduino.
And can I control more than 1 of these motors with one Arduino ?

A:

You need to read and understand that datasheet.
This board does not have addressing, so without additional hardware you can only have one per serial port.
For a demonstration, use a USB-Serial cable connected between the motor controller and a computer. You can use any serial program you have to communicate with the motor controller.
Examples of serial programs include hyperterm and miniterm. You need to set the serial settings for this connection to 38400 baud, 8 bits, no parity, ad one stop-bit. The motor controller is preset for this connection.
Then you can send commands.
To use this board to control motors from the Arduino, you will need to use either the Serial class or the SoftSerial class. You should be able to use multiple SoftSerial instances to control these motors.
You would need to connect between the pins of the serial port of the Arduino and the motor controller. You would need to create the serial connection with the same parameters as above. Then you have to send a command to the board, always remembering to terminate the command with a carriage return. Since I don't have one of these boards, I don't know if it expects a "\n", "\r" or some combination.
This is an interesting board, but there are too many limitations to see it being any more than a toy, in my opinion. It wouldn't have been difficult to add a few features to make it a usable tool.

