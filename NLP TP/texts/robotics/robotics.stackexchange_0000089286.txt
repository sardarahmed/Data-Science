Q:

Visualization in RVIZ

Good day, I am new to ROS Answer and beginner of ROS.
Referred to the title above,  this Image A below illustrates the desired goal I would like to achieve. It is done in LabVIEW and right now, I would like to achieve the similar result by using RVIZ. It is doing Hector Mapping and Sensor value mapping simultaneously in real time.

Figure : Image A  (Source: Integrating SLAM And Gas Distribution Mapping SLAM GDM For Real Time Gas Source Localization (Kamarulzaman Kamarudin))
Currently, I have successfully implement Hector SLAM and Image B below shows the result of my Hector SLAM implementation.

Figure : Image B
My question is, which type of message should my data published as so it can be visualized as Image A in RVIZ? For example, should my data publish as:

visualization_msgs/Marker
visualization_msgs/MarkerArray
nav_msgs
sensor_msgs
Costmap2D
grid_map

I am new to this and I do not know which approach is the best method to be used so I can achieve result similar to Image A..
Advice and recommendation are very welcome.
Thank you for the assist !
Special thanks to @gvdhoorn for willingly providing me sufficient karma so that I can display those images.

Originally posted by KinWah on ROS Answers with karma: 91 on 2018-10-15
Post score: 0

Original comments
Comment by gvdhoorn on 2018-10-15:
Hi, could I please ask you to attach your images directly to your question? I've given you sufficient karma for that.
Thanks.
Comment by KinWah on 2018-10-15:
@gvdhoorn, thank you so much for providing me with sufficient karma.
May God bless your kindness.
Comment by gvdhoorn on 2018-10-15:
No need to thank me. They're just imaginary internet points.
Comment by KinWah on 2018-10-15:
It is still a great help for a newbie. Thanks again.
Hopefully, someone may lend me a hand on this topic ^_^
Comment by Humpelstilzchen on 2018-10-17:
You might want to check the 2018 roscon talk "Unleashing the GIS Toolbox on Real-Time Robotics"

A:

Hi. I have solved this problem with two possible methods. One is by using pointcloud2 and the second is by using visualizer msgs : marker. Images below show my desired goal and solutions obtained by using pointcloud2 and marker.

The left image is generated by using matplotlib while the center is by using PointCloud2 and right is by using marker. There is not obvious different between PointCloud2 and Marker from the aspect of display. I cant generate the exact similar image as matplotlib (the yellow region) due to my lack of knowledge. Recommendation and suggestion on how to achieve that is very welcome. Back to the topic. Although PC2 and marker version does not have the yellowish region as matplotlib, however it has slightly lighter region at the similar location is satisfy for me. I have attached part of my codes for PC2 and Marker at here as references for beginner like me.
For PointCloud2 :
# PointCloud2 is working
# PointCloud2 : The following part is to gdm_data X, Y and mean/var
gdm_X = X.flatten()
gdm_Y = Y.flatten()
gdm_Z = numpy.zeros_like(gdm_X)
gdm_Mean = mean_map.flatten()
gdm_data = numpy.column_stack((gdm_X,gdm_Y,gdm_Z,gdm_Mean))
# PointCloud2 : The following algo is for visualize pointcloud2
header = std_msgs.msg.Header()
header.stamp = rospy.Time.now()
header.frame_id = 'map'
field=[PointField(name='x', offset=0, datatype=PointField.FLOAT32, count=1),PointField(name='y', offset=4, datatype=PointField.FLOAT32, count=1),PointField(name='z', offset=8, datatype=PointField.FLOAT32, count=1),PointField(name='rgb', offset=12, datatype=PointField.UINT32, count=1)]
gdm_data = pcl2.create_cloud(header, field, gdm_data)
pc2_Testing.publish(gdm_data)

For Marker :
# MarkerArray is Working
gdm_X = X.flatten()
gdm_Y = Y.flatten()
gdm_Z = numpy.zeros_like(gdm_X)
gdm_Mean = mean_map.flatten()
gdm_Mean = numpy.interp(gdm_Mean,[min(gdm_Mean),max(gdm_Mean)],[0.0,1.0])
gdm_data = numpy.column_stack((gdm_X,gdm_Y,gdm_Z,gdm_Mean))
triplePoints = []
colorsGroup = []
markerArray = MarkerArray()
for (x,y,z,a) in gdm_data:
    p = Point() 
    p.x = x
    p.y = y
    p.z = 0
    marker = Marker()
    marker.header.frame_id = "/map"
    marker.type = marker.POINTS
    marker.action = marker.ADD
    marker.scale.x = 0.2
    marker.scale.y = 0.2
    marker.scale.z = 0.2
    colorsGroup.append(ColorRGBA(0,0,a,1))
    marker.pose.orientation.w = 1.0
    t = rospy.Duration()
    marker.lifetime = t
    triplePoints.append(p)
marker.points = triplePoints
marker.colors = colorsGroup
markerArray.markers.append(marker)
marker_pub.publish(markerArray)

Originally posted by KinWah with karma: 91 on 2018-10-17
This answer was ACCEPTED on the original site
Post score: 1

