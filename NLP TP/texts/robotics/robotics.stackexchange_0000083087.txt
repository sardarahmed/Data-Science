Q:

move_base cpu load

while navigating, move_base goes up to 110% cpu. I'm running turtlebot on the Nvidia Tegra TK1.
Other than reducing the map resolution what are some of the other ways to reduce cpu usage on this board ?
Tushar.
Costmap_common
max_obstacle_height: 0.60 # assume something like an arm is mounted on top of the robot

# Obstacle Cost Shaping (http://wiki.ros.org/costmap_2d/hydro/inflation)
robot_radius: 0.14  # org value 0.15, distance a circular robot should be clear of the obstacle (kobuki: 0.18)
# footprint: [[x0, y0], [x1, y1], ... [xn, yn]]  # if the robot is not circular

map_type: voxel

obstacle_layer:
  enabled:              true
  max_obstacle_height:  0.6
  origin_z:             0.0
  z_resolution:         0.2
  z_voxels:             2
  unknown_threshold:    15
  mark_threshold:       0
  combination_method:   1
  track_unknown_space:  true    #true needed for disabling global path planning through unknown space
  obstacle_range: 1.5 #org 2.5
  raytrace_range: 2.0 #org 3.0
  origin_z: 0.0
  z_resolution: 0.2
  z_voxels: 2
  publish_voxel_map: false

obstacle_layer:
  observation_sources: bump laser_scan
  bump: 
    data_type: PointCloud2
    topic: mobile_base/sensors/bumper_pointcloud
    marking: true
    clearing: false
    min_obstacle_height: 0.0
    max_obstacle_height: 0.15
  laser_scan:
    sensor_frame: neato_laser
    data_type: LaserScan
    topic: scan
    marking: true
    clearing: true
    min_obstacle_height: 0.0
    max_obstacle_height: 0.35

# for debugging only, let's you see the entire voxel grid

#cost_scaling_factor and inflation_radius were now moved to the inflation_layer ns
inflation_layer:
  enabled:              true
  cost_scaling_factor:  2.58  # exponential rate at which the obstacle cost drops off (default: 10)
  inflation_radius:     1.75  # org value 0.5 max. distance from an obstacle at which costs are incurred for planning paths.

static_layer:
  enabled:              true

dwa_local_planner
DWAPlannerROS:
# Robot Configuration Parameters - Kobuki
  max_vel_x: 0.14  # org 0.5
  min_vel_x: 0.0 

  max_vel_y: 0.0  # diff drive robot
  min_vel_y: 0.0  # diff drive robot

  max_trans_vel: 0.14 # org value 0.5, choose slightly less than the base's capability
  min_trans_vel: -0.14  # org value 0.1, this is the min trans velocity when there is negligible rotational velocity
  trans_stopped_vel: 0.1

  # Warning!
  #   do not set min_trans_vel to 0.0 otherwise dwa will always think translational velocities
  #   are non-negligible and small in place rotational velocities will be created.

  max_rot_vel: 1.0  # org value 5.0, choose slightly less than the base's capability
  min_rot_vel: -0.10  # org value 0.4, this is the min angular velocity when there is negligible translational velocity
  rot_stopped_vel: 0.4
  
  acc_lim_x: 1.0 # maximum is theoretically 2.0, but we 
  acc_lim_theta: 2.0
  acc_lim_y: 0.0      # diff drive robot

# Goal Tolerance Parameters
  yaw_goal_tolerance: 0.05  # org value 0.3, 0.05
  xy_goal_tolerance: 0.10  # org value 0.15, 0.10
  # latch_xy_goal_tolerance: false

# Forward Simulation Parameters
  sim_time: 4.0       # org value 1.0, 1.7
  vx_samples: 20       # org value 6,  3
  vy_samples: 1       # diff drive robot, there is only one sample
  vtheta_samples: 40  # org value 20, 20

# Trajectory Scoring Parameters
  path_distance_bias: 32.0      # org value 64.0,  32.0   - weighting for how much it should stick to the global path plan
  goal_distance_bias: 20.0      # org value 24.0, 24.0   - wighting for how much it should attempt to reach its goal
  occdist_scale: 0.02            # org vlaue 0.5, 0.01   - weighting for how much the controller should avoid obstacles
  forward_point_distance: 0.325 # 0.325  - how far along to place an additional scoring point
  stop_time_buffer: 0.2         # 0.2    - amount of time a robot must stop in before colliding for a valid traj.
  scaling_speed: 0.25           # 0.25   - absolute velocity at which to start scaling the robot's footprint
  max_scaling_factor: 0.2       # 0.2    - how much to scale the robot's footprint when at speed.
  pdist_scale: 0.8              #tkj added
  gdist_scale: 0.6              #tkj added

# Oscillation Prevention Parameters
  oscillation_reset_dist: 0.05  # 0.05   - how far to travel before resetting oscillation flags

# Debugging
  publish_traj_pc : true
  publish_cost_grid_pc: true
  global_frame_id: odom

# Differential-drive robot configuration - necessary?
  holonomic_robot: false

Global_Costmap
global_costmap:
   global_frame: /map
   robot_base_frame: /base_footprint
   update_frequency: 1.0
   publish_frequency: 0.5
   static_map: true
   transform_tolerance: 0.5
   plugins:
     - {name: static_layer,            type: "costmap_2d::StaticLayer"}
     - {name: obstacle_layer,          type: "costmap_2d::VoxelLayer"}
     - {name: inflation_layer,         type: "costmap_2d::InflationLayer"}

Global_planner
GlobalPlanner:                                  # Also see: http://wiki.ros.org/global_planner
  old_navfn_behavior: false                     # Exactly mirror behavior of navfn, use defaults for other boolean parameters, default false
  use_quadratic: true                           # Use the quadratic approximation of the potential. Otherwise, use a simpler calculation, default true
  use_dijkstra: true                            # Use dijkstra's algorithm. Otherwise, A*, default true
  use_grid_path: false                          # Create a path that follows the grid boundaries. Otherwise, use a gradient descent method, default false
  
  allow_unknown: true                           # Allow planner to plan through unknown space, default true
                                                #Needs to have track_unknown_space: true in the obstacle / voxel layer (in costmap_commons_param) to work
  planner_window_x: 0.0                         # default 0.0
  planner_window_y: 0.0                         # default 0.0
  default_tolerance: 0.0                        # If goal in obstacle, plan to the closest point in radius default_tolerance, default 0.0
  
  publish_scale: 100                            # Scale by which the published potential gets multiplied, default 100
  planner_costmap_publish_frequency: 0.0        # default 0.0
  
  lethal_cost: 253                              # default 253
  neutral_cost: 66                              # default 50
  cost_factor: 0.55                              # Factor to multiply each cost from costmap by, default 3.0
  publish_potential: true                       # Publish Potential Costmap (this is not like the navfn pointcloud2 potential), default true

Local_costmap
local_costmap:
   global_frame: /map  #org value odom
   robot_base_frame: /base_footprint
   update_frequency: 5.0 #org value 5.0
   publish_frequency: 2.0 #org value 2.0
   static_map: false
   rolling_window: true
   width: 4.0
   height: 4.0
   resolution: 0.05 #org value 0.05, match what is set in gmapping delta param
   transform_tolerance: 0.5
   plugins:
    - {name: obstacle_layer,      type: "costmap_2d::VoxelLayer"}
    - {name: inflation_layer,     type: "costmap_2d::InflationLayer"}

Move_base
shutdown_costmaps: false

controller_frequency: 4.0 #org value 5.0
controller_patience: 3.0

planner_frequency: 1.0
planner_patience: 5.0

oscillation_timeout: 10.0
oscillation_distance: 0.2

# local planner - default is trajectory rollout
base_local_planner: "dwa_local_planner/DWAPlannerROS"

base_global_planner: "navfn/NavfnROS" #alternatives: global_planner/GlobalPlanner, carrot_planner/CarrotPlanner

#We plan to integrate recovery behaviors for turtlebot but currently those belong to gopher and still have to be adapted.
## recovery behaviors; we avoid spinning, but we need a fall-back replanning
#recovery_behavior_enabled: true

#recovery_behaviors:
  #- name: 'super_conservative_reset1'
    #type: 'clear_costmap_recovery/ClearCostmapRecovery'
  #- name: 'conservative_reset1'
    #type: 'clear_costmap_recovery/ClearCostmapRecovery'
  #- name: 'aggressive_reset1'
    #type: 'clear_costmap_recovery/ClearCostmapRecovery'
  #- name: 'clearing_rotation1'
    #type: 'rotate_recovery/RotateRecovery'
  #- name: 'super_conservative_reset2'
    #type: 'clear_costmap_recovery/ClearCostmapRecovery'
  #- name: 'conservative_reset2'
    #type: 'clear_costmap_recovery/ClearCostmapRecovery'
  #- name: 'aggressive_reset2'
    #type: 'clear_costmap_recovery/ClearCostmapRecovery'
  #- name: 'clearing_rotation2'
    #type: 'rotate_recovery/RotateRecovery'

#super_conservative_reset1:
  #reset_distance: 3.0
#conservative_reset1:
  #reset_distance: 1.5
#aggressive_reset1:
  #reset_distance: 0.0
#super_conservative_reset2:
  #reset_distance: 3.0
#conservative_reset2:
  #reset_distance: 1.5
#aggressive_reset2:
  #reset_distance: 0.0

Originally posted by tjadhav on ROS Answers with karma: 68 on 2017-09-29
Post score: 0

Original comments
Comment by tjadhav on 2017-10-01:
anyone   ?
Comment by Procópio on 2017-10-02:
please, send your costmap configuration files and also your local and global planner config files.
Comment by tjadhav on 2017-10-02:
away from the Robot computer but will upload them this evening. Thanks Procopio.
Comment by tjadhav on 2017-10-02:
i reduced the map resolution and that lowered the cpu usage to about 80 to 85 % when navigating.

A:

Sorry for the long delay.
The first thing I'd try is to reduce the # Forward Simulation Parameters. Try reverting to their original values.

Originally posted by Procópio with karma: 4402 on 2017-10-17
This answer was ACCEPTED on the original site
Post score: 0

