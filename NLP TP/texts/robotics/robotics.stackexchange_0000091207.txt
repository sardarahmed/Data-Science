Q:

How to know when a ROS Package can be installed (on Ubuntu)

Hello,
Could you please help me to figure out how can I install a ros related modules on Ubuntu? For example, I want to get this module, how can I do that?
Thanks

Originally posted by Yehor on ROS Answers with karma: 166 on 2019-04-01
Post score: 1

Original comments
Comment by gvdhoorn on 2019-04-01:
@Yehor: I've updated the title of your question, as "module" is terminology that is used in Python development. Your question appears to be about ROS packages (which, when they are written in Python, could also contain modules).

A:

For example, I want to get this module (message_filters), how can I do that?

Released packages
In general, if possible, you should always prefer to use apt or apt-get on Ubuntu (and Debian).
Installing packages using the binaries provided through the ROS buildfarm is the most efficient way, as it automatically takes care of things like resolving dependencies (ie: it installs everything needed to be able to use a package).
For your specific package, you would run something like this in a command shell:
# this should be run every now and then
sudo apt update

# this actually installs the package
sudo apt install ros-kinetic-message-filters

After following the on-screen prompts, apt should install the package and you can immediately start using it.
There are a number of ways to see whether a package has been released:

use the ROS wiki: a released package for which a wiki page exists has a number of buttons at the top of the page. For message_filters we see:

Notice the indigo, kinetic, lunar and melodic buttons. Clicking on those will switch the wiki page to the version specific to that particular ROS release. Upon clicking on those buttons, a number of badges will appear/disappear just below the Package Summary heading:

Notice the Released, Continuous Integration and Documented badges here again for message_filters.
The important one here is Released. This badge being shown tells us that message_filters has been released into ROS Melodic and should be available for installation using apt.

use the ROS Index. Similar to the ROS wiki, this will list packages which have been registered with the ros/rosdistro repository. Search the available packages using the search box in the top right of the page.

use the status pages: these pages can be found here: repositories.ros.org/status_page and are periodically updated by the ROS buildfarm. Even if a package does not have a wiki page (they have to be created by a human), a released package will show up on these pages.

For ROS Kinetic, we would open the ros_kinetic_default.html page (refer to #q301220 for why there are multiple Kinetic pages) and search for message_filters by typing it in the textfield at the top-left of the page.
If a package has been released through the ROS buildfarm, the page should show you one or more rows after having filtered everything based on your query. Released packages will show up. If the page is empty, a package is not released. Refer to the legend (coloured squares, top of the page) for an explanation of the meaning of the coloured squares in the rightmost columns.
No release available
If a package is not available, the next option is to try and build the package "from sources". This essentially means that you'll try to compile it on your own machine in a Catkin workspace.
<personal_opinion_based_on_years_of_experience>
Do not do this, unless absolutely necessary.
</personal_opinion_based_on_years_of_experience>
There are only a few reasons to attempt a build from source:

there are no binaries available for your platform (ie: CPU architecture, OS version or a combination of those). This includes the situation where a package has never been released through the ROS buildfarm
you need a feature (or fix) that is not yet part of a binary release (ie: version 1.2 has the feature you need, but the developer has only released 1.1)
you require specific versions of libraries to be used (fi: a specific versions of PCL or OpenCV that the ROS buildfarm does not support/use)
you require the use of specific optimisations (ie: compiler flags)
the package has become unmaintained and is no longer being released (even though there are old releases available)
you want to work on the package yourself (ie: develop it)

In those cases, building a package from sources would be OK, but simply cloning the source repository in your workspace and running catkin_make (or catkin build) is in most cases not enough. See the accepted answer to #q252478 for an example workflow that should result in a successful build (should, as it depends on whether the author/maintainer of the package(s) provided correct metadata).
Avoiding from-source builds
Edit: my rationale for discouraging users to build packages from source are:

it's wasteful (of both time and effort): the ROS buildfarm already compiles and packages everything. Why wait 45 minutes for your workspace to compile if you just want to use a package and apt installs it in 5 minutes?
managing build dependencies is non-trivial: even with tools like rosdep and rosinstall_generator, setting up a sane build environment is non-trivial. This seems to be confirmed by the many, many questions on ROS Answers citing CMake / Catkin errors where packages cannot be found. Why make dependency resolution your problem when apt installs all required run and build dependencies for you?
if care is not taken, it will result in reduced performance: CMake by default will use the None build type. This will invoke the compiler without any specific optimisations enabled. Especially for packages that implement computationally intensive processes (such as pointcloud or lidar processing, heavy matrix & vector math, etc) this can result in poor performance. Users would have to manually select the Release or RelWithDebInfo build types to get proper performance out of packages they built themselves. While doable, this is easily forgotten, leading to the many questions on ROS Answers about code "running slow when compiled with ROS" or the navstack not maintaining its update rate. The ROS buildfarm provides binaries with the default optimisation type enabled that your platform uses, and removes the need for users to take care of this themselves.

Originally posted by gvdhoorn with karma: 86574 on 2019-04-01
This answer was ACCEPTED on the original site
Post score: 16

Original comments
Comment by gvdhoorn on 2019-04-01:
And after typing all of that, I realised this is a duplicate of (at least) #q257780.
Comment by mgruhler on 2019-04-01:
Even though this is a dupe, this is, IMO, the most comprehensive answer about this topic, especially with all the side details and links to relevant questions!
So a very big +1 and thanks for this write-up!
Comment by votecoffee on 2020-08-26:
The most common thing I ran into was a mismatch between the actual package name and the name of the package on the webpage.  Take canopen_master for Melodic.  It says it's supported.
http://wiki.ros.org/canopen_master
But running this command fails:
sudo apt install ros-$ROS_DISTRO-canopen_master

Running this command lists all packages for your ROS distro.
apt list ros-$ROS_DISTRO-*

Note that the actual package is canopen-master and not canopen_master.  The below command runs fine
sudo apt install ros-$ROS_DISTRO-canopen-master

Comment by gvdhoorn on 2020-08-27:
That's not a mismatch, but the way ROS package names are converted into Debian .deb package names.

