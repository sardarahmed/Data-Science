Q:

Implement obstacle avoidance methods and local navigation (move_base)

Hello,
I would like to implement obstacle avoidance methods in Turtlebot2 (Velocity obstacles, VFH+. APF,...).
And I do not know if I have to use pluginlib  and do as D. Lu did. That is, implement the interface named nav_core::BaseLocalPlanner and do planning in computeVelocityCommands method [1].
Or maybe, it requires to do something else such as modifying costmap_2d [2], add PoseStamped ?
So, does somebody may advise me on what should I do first, since I am a beginner using ROS ?
[1] https://github.com/DLu/simple_local_planner
[2] http://wiki.ros.org/costmap_2d

Originally posted by sustainable on ROS Answers with karma: 13 on 2018-03-29
Post score: 0

A:

There is an existing configuration here: http://wiki.ros.org/turtlebot_navigation

Originally posted by David Lu with karma: 10932 on 2018-03-29
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by sustainable on 2018-03-30:
Thanks for answering,  yet I did not get the idea : does it exist some obstacle avoidance procedures ?
I think dynamic window is not robust against moving obstacles, am I wrong ?
If I can reformulate my ask : where [in the code] should I put the local trajectory to do obstacle avoidance ?
Comment by sustainable on 2018-04-03:
Any other implementation apart from elastic band or dynamic window ?
Comment by sustainable on 2018-04-17:
Hello Mr. Lu, I have found one of your latest work dwb_local_planner
Do you think I can use it in order to make my own planner ? Precisely, I need to modify only the local trajectory, I do not want to build an other m
Comment by sustainable on 2018-04-17:
Precisely, I need to modify only the local trajectory, I do not want to build an other motion controller.
Concretely, I just want to give a list of PoseStamped that I have computed from a Costmap layer and current position.
Comment by David Lu on 2018-04-19:
As I advised in the other thread, it will be easiest if you get a working nav configuration first, and then start tinkering with adding additional methods. Dynamic window isn't ideal for moving obstacles, but it still does pretty well.

