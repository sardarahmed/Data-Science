Q:

difference between eband_local_planner and teb_local planner

What exactly is the difference between teb and eband local planner and how exactly do they work differently ?

Originally posted by rajnunes on ROS Answers with karma: 73 on 2016-08-19
Post score: 5

A:

eband_local_planner (classical Elastic Band approach by Quinlan et al.) and teb_local_planner (Timed Elastic Band (TEB) approach) are two completely different planning algorithms. However, the TEB principle is based on the classic elastic band idea.
eband_local_planner (Elastic Band)

Local path deformation (path: no timing law) based on internal and external forces
Internal forces contract the path (-> leading to the shortest path between start and goal)
External forces repel the path from obstacles
Implementation based on bubbles that represent discrete path points and free-space.
Adaption of the trajectory length w.r.t. bubbles/free-space (insertion and deletion of discrete points)
Extension to non-holonomic kinematics (supports differential-drive and omnidirectional robots)
Subject to local minima (e.g. left or right path around an obstacle, depends on initial path)

teb_local_planner (Timed Elastic Band)

Local trajectory deformation/optimization (trajectory: includes temporal information)
Instead of generating and applying forces, an objective/cost function is minimized
Temporal information is subject to optimization -> time-optimal trajectories (replacement for the internal forces)
Temporal information allows incorporation of (kino-)dynamic constraints during optimization (no need for a dedicated path-following controller, the teb_local_planner mimics a predictive controller)
Adaptation of the trajectory length based on the temporal discretization (insertion and deletion of discrete trajectory points)
Supports differential-drive, car-like and omnidirectional robots
Explores multiple distinctive topologies for parallel trajectory optimization in order to partially overcome the local minima problem (only in the scope of the local costmap due to limited CPU resources, a global planner is still required).
Path-following mode (minimize distance to global plan instead of minimizing transition time)
Bottleneck: very high computational burden (-> limited local costmap size/resolution resp. robot size).

Originally posted by croesmann with karma: 2531 on 2016-08-19
This answer was ACCEPTED on the original site
Post score: 12

Original comments
Comment by rajnunes on 2016-08-19:
thanks and what do you think i should use if i want to avoid dynamic obstacles from laser scan
Comment by Orhan on 2019-12-13:
@rajnunes He's the developer of the teb_local_planner so he probably thought that it isn't very appropriate to point out directly. But instead, the answer shows that teb_local_planner is newer and has more benefits. I thought about saying it because I feel like, time to time, visitors upvoted your comment so I awaken a dead question.

