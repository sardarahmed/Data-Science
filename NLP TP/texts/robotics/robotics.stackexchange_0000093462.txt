Q:

How do I specify a ROSDep dependency that is in PyPI but not rosdistro?

How do I specify a python package dependency for rosdep that is in PyPI but not in rosdistro? For instance merge_args which is available to pip install. It seems listing these dependencies setup.cfg/setup.py is not sufficient for the build tools to pick it up.

Originally posted by DanRose on ROS Answers with karma: 274 on 2019-10-03
Post score: 1

A:

To answer your top question you need to add it to either the global rosdep database or add your own rosdep.yaml files to your sources.list if it's not appropriate for global listing or you want to test it locally.
There's documentation about how to contribute a rosdep key 
However from the case that you point to your assumption is incorrect that pyyaml is not in the database, it is already available.
See the keys: https://index.ros.org/d/python-yaml/ and https://index.ros.org/d/python3-yaml/

Originally posted by tfoote with karma: 58457 on 2019-10-03
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by DanRose on 2019-10-03:
Thanks, Tully! The package I mentioned is not the one I'm interested in. I don't mean to imply that pyyaml isn't in the database; though it is kinda weird that, in that case, the name differs between the python package and PyPI.
Comment by DanRose on 2019-10-03:
I couldn't find any documentation for what platforms are necessary, so I added them all. Surely there's a better way to do this (wildcard for the OS name?):
https://github.com/ros/rosdistro/pull/22535/files
Comment by tfoote on 2019-10-03:
It's not good to flood to all platforms unless you've tested on them and verified that this is the right package on that platform. For a pip rule you should only add the one(s) that you're using.
Comment by DanRose on 2019-10-03:
Most pypi dependencies should be platform-independent. There's no way to specify that to rosdep? I was doing this for this issue https://github.com/ros2/launch_ros/issues/64, where this library is the perfect solution, but I want to support all platforms launch/launch_ros is capable of running on.
Comment by tfoote on 2019-10-03:
"Most platforms" is not all. For example OpenEmbedded does not support pip. The reason for explicitly calling out every OS is so that we know that someone has checked it. If you just put in a wildcard rosdep will tell you that it's resolved. Even if the package doesn't exist, where it should actually tell you, I'm sorry I can't resolve on the platform you asked for.
A pip dependency for a core package like launch_ros is a non-starter as we can't have core dependencies on pip for standard packaging.

