Q:

Which trajectory planning algorithm for minimizing jerk

In order to perform a cyclic task, I need a trajectory planning algorithm. This trajectory should minimize jerk and jounce.
When I search for trajectory planning algorithms, I get many different options, but I haven't found one which satisfies my requirements in terms of which values I can specify. An extra complicating factor is that the algorithm should be used online in a system without too much computing power, so mpc algorithms are not possible...
The trajectory I am planning is 2D, but this can be stripped down to 2 trajectories of 1 dimention each. There are no obstacles in the field, just bounds on the field itself (minimum and maximum values for x and y)
Values that I should be able to specify:

Total time needed (it should reach its destination at this specific
time) 
Starting and end position
Starting and end velocity
Starting and end acceleration
Maximum values for the position.

Ideally, I would also be able to specify the bounds for the velocity, acceleration, jerk and jounce, but I am comfortable with just generating the trajectory, and then checking if those values are exceeded.
Which algorithm can do that?
So far I have used fifth order polynomials, and checking for limits on velocity, acceleration, jerk and jounce afterwards, but I cannot set the maximum values for the position, and that is a problem...
Thank you in advance!

A:

This might not be the right answer for your problem, but it may give you some idea how you might solve this problem:  At the company, I'm working for, we have lot of issues concerning jerk and acceleration of rotary arms. Our approach is we use motion specified by a position-velocity diagram (User-Input). According to this profiles we calculate an acceleration (assuming infinite jerk). Next step is to calculate a jerk according to a so-called jerk-percentage. This is parameter we use to say how much time of the acceleration there is jerk. See this link where this concept is explained more in detail (only the first 3 paragraphs are related to this topic).  Anyway at the moment we have still infinite jounce (this has no influence on our application anymore). I suggest go a step further. Use the same concept, call it jounce percentage, and minize it this way.  At the end you have a simple path finding process, where you only need to identify position, time and velocity. The rest is simple calculation, which can be performed even on a 30year old 8-bit PIC

