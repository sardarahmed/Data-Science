Q:

Advanced actionserver usage

Hey there,
I try to use an Actionserver in a 'advanced' way. Advanced means, that

I want to be able to send several goals to an Actionserver by multiple clients,
Keep track of all the goals (partly solved)
Be able to cancel a single specific goal
Take a look at the goal on the server site during the execution (solved)

Therefore I first tried the SimpleActionServer, which doesn't seem to fulfill these requirements.
So I switched to the more advanced implementation using an "ActionServer" instead of the "SimpleActionServer". It seems, that there aren't any tutorials our there, but I found one implementation.
My answers up to now:

Although I like the style and the usage of this native ActionServer a lot more it seems that even this implementation is not able to manage multiple goals and I'm starting to believe, that it may not be possible to have multiple goals. (It's mentioned here that you can have multiple goals, but I'm still wondering how.)
So in the implementation mentioned above, they assign the goal to a single "goalhandle". So of course, if I would use an std::vector for that - I could accept store multiple goals. But I'm not sure, if this is the good way to deal with it. (E.g. How do I get the next goal chosen by the actionserver)

This is possible by subscribing to <actionserver_name>/status, but I would like it a lot more, if there would be a way to do this directly with the ActionClient, because I can never be sure, that e.g. the latest or newest goal appearing in the status array is really my goal.

As far as I've figure it out from the API, there's no way of cancelling a specific goal, nor a way to delete the last goal sent by that client. Is that right? Because the detailed description says it should be possible.

This can be done with the native ActionServer, but not the with the SimpleActionServer (except one value when accepting the goal(line 34), which seems pretty strange)

Please tell me, if I missed something. I know that the detailed description mentions some of the things, but I would like to have either an API reference or some running code.
Thanks a lot.

Originally posted by MatthiasMayr on ROS Answers with karma: 48 on 2014-02-18
Post score: 2

A:

Works out of the box. But the goalhandles received in the GoalCallback on the server side have to be stored somewhere to get access to older goals. In my implementation I just store them in a vector.

Store the callback goalhandles on the server side and store the client goalhandles on the client side. Client goalhandles are the returned object of actionclient.sendGoal(goal).

Use the client goalhandle received from the sendGoal-Function.

The server goalhandle has a function allowing to access the goal. It can be accessed with (*server_goalhandle.getGoal()).[goal-attribute1]

Originally posted by MatthiasMayr with karma: 48 on 2014-03-17
This answer was ACCEPTED on the original site
Post score: 0

