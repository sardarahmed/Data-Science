Q:

What algorithm should I implement to program a room cleaning robot?

For this question assume that the following things are unknown:

The size and shape of the room
The location of the robot
The presence of any obstacles

Also assume that the following things are constant:

The size and shape of the room
The number, shape and location of all (if any) obstacles

And assume that the robot has the following properties:

It can only move forward in increments of absolute units and turn in degrees. Also the operation that moves will return true if it succeeded or false if it failed to move due to an obstruction
A reasonably unlimited source of power (let's say it is a solar powered robot placed on a space station that faces the sun at all times with no ceiling)
Every movement and rotation is carried out with absolute precision every time (don't worry about unreliable data)

Finally please consider the following properties of the robot's environment:

Being on a ceiling-less space station the room is a safe but frustratingly close distance to passing comets, so the dust (and ice) are constantly littering the environment.

I was asked a much simpler version of this question (room is a rectangle and there are no obstacles, how would you move over it guaranteeing you could over every part at least once) and after I started wondering how you would approach this if you couldn't guarantee the shape or the presence of obstacles. I've started looking at this with Dijkstra's algorithm, but I'm fascinated to hear how others approach this (or if there is a well accepted answer to this? (How does Roomba do it?)

A:

As far as I know, this problem hasn't been "solved."
Formally, this is an online coverage problem. Coverage, because we must cover each point on the floor, and online because we do not have offline access to the map. If you are interested in the most recent results, I suggest you lookup "robotic online coverage algorithms," perhaps in google scholar (there are lots and lots of great results). In addition to @embedded.kyle's very colorful (re)post, I'll add some details (I'll also try to quickly find a few simple results):

Dijkstra's will get you a path, but not necessarily a coverage. For example, how do you specify to Dijkstra's that you must visit each point in the graph, instead of visiting one point as quickly as possible? You can run all-pairs shortest paths, but what are the points? You don't have a map.
Online algorithms like this are often called "bug" algorithms because they tend to look like a bug wandering across an area, bumping into something, then wandering around it a bit.
With no obstacles, and a rectangular room, and assuming you start on the boundary a boustrophedon (way of the ox) path is optimal. 

Funny that farmers have been doing this forever, right? http://en.wikipedia.org/wiki/Boustrophedon. This can be extended to rooms with obstacles by finding roughly-rectangular area which are free of obstacles. Howie Choset worked on this a bit. 

To cover an area with unknown perimeter, and assuming you don't start on the perimeter, what is the optimal strategy? Well, imagine you drop into the world, and can't see the perimeter. You can walk in a straight line until you reach the perimeter, then do a boustrophedon, right? Except now you "wasted" the time spent finding the perimeter, because you will cover that part twice.  This is why robots tend to spiral: By the time you reach a boundary, you have covered a lot of the area ($\pi*d^2$ where $d$ is the distance to the nearest boundary, right?). This is helpful: now you are guaranteed to find the nearest boundary, and can trace it out.
This is a huge, fascinating area. I'm sorry I can't provide a better summary! 

The biggest problem is you don't have a map. Without a map, you are limited to simple actions like perimeter following, and moving along a path (like the spiral mentioned).  So, there exist some robots that actually build the map while cleaning, decompose the mapped-out area into shapes, then cover each shape to ensure coverage. See: http://mintcleaner.com/ 

A:

Roomba starts in a spiral until it hits something, then does a perimeter sweep. Then it just bounces around. Roomba being the de facto standard in household robotic vaccum cleaners, I guess you could call it the "accepted solution". But from personal experience (I own two), there is definitely room for improvement.
From How Stuff Works:

From an interview with Nancy Dussault Smith, Vice President of Marketing Communications at iRobot:

When it starts you’ll notice a spiral pattern, it’ll spiral
  out over a larger and larger area until it hits an object. When it
  finds an object, it will follow along the edge of that object for a
  period of time, and then it will start cris-crossing, trying to figure
  out the largest distance it can go without hitting another object, and
  that’s helping it figure out how large the space is, but if it goes
  for too long a period of time without hitting a wall, it’s going to
  start spiraling again, because it figures it’s in a wide open space,
  and it’s constantly calculating and figuring that out. 
It’s similar
  with the dirt sensors underneath, when one of those sensors gets
  tripped it changes its behaviors to cover that area. It will then go
  off in search of another dirty area in a straight path. The way that
  these different patterns pile on to each other as they go, we know
  that that is the most effective way to cover a room. 
The patterns that
  we chose and how the algorithm was originally developed was based off
  of behavior-based algorithms born out of MIT studying animals and how
  they go about searching areas for food. When you look at how ants and
  bees go out and they search areas, these kinds of coverage and
  figuring all of that out comes from that research. It’s not exact,
  obviously, I’m not saying we’re honeybees, but it’s that understanding
  of how to search out an area in nature that is the basis behind how
  our adaptive technology is developed.

Some long exposure pics of Roombas with LEDs on them illustrate how it works in practice:

A:

Neato uses an organized approach. Using SLAM and bumpers, it maps the 'current' room, perimeter first, then applies some algorithm for cleaning as efficiently as possible.  I've never owned a Roomba, but given what I have read about it's algorithm, I would never switch from a neato.
The Laser Range Finder in the neato is often cannabilized for robotics, as it is a cost effective sensor for SLAM algorithms.
If I was given your task, First I would find a suitable SLAM implementation, based on the hardware I had.
Then I would use a CNC ISLAND Motion planning algorithm. My experience is they tend to be very efficient at covering an arbitrary area with the least amount of movement.

