Q:

pointcloud_to_laserscan height range

This might be a bug, or just a misinterpretation.  Within pointcloud_to_laserscan/cloud_to_scan.cpp the range of y values checked is negative, whereas I think it probably should be positive.  Changing those to positive values (above the ground plane) seems to work for me, whereas otherwise the fake laser scan looks wrong.
Should the height range values normally be negative, because if so this might be yet another case of needing to invert the sensor orientation within the URDF model.

Originally posted by JediHamster on ROS Answers with karma: 995 on 2011-03-14
Post score: 1

A:

The height should be specified in the Z coordinate for a non camera sensor. See REP 103 for specifics on coordinate frame conventions used throughout ROS.
It's not clear to me exactly which pointcloud from the Kinect the pointcloud_to_laserscan is supposed to subscribe to, but it seems unlikely we'd want to subscribe and publish data in the  z-forward camera frame as opposed to the z-up frame used everywhere else.
If pointcloud_to_laserscan is doing silly things by assuming it's in a camera coordinate frame (i.e. y-axis is down), then that might be worth filing a bug (at least to document this convention on the pointcloud_to_laserscan wiki page.

Originally posted by Eric Perko with karma: 8406 on 2011-03-14
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by tfoote on 2011-03-26:
The pointcloud_to_laserscan package is a quick thing I threw together to get things working with the Kinect.  It doesn't do any transformations or anything.  It hasn't been reviewed or released into a stable stack.
Comment by JediHamster on 2011-03-15:
I guess it's in the camera frame because the input cloud is typically /camera/depth/points
Comment by Eric Perko on 2011-03-14:
Hmm... looked at the code... it does look like that... That seems a bit odd to me. The only time that would make sense is a pointcloud in the camera frame, not in a standard frame. Perhaps @tfoote (the package's author) can elaborate on why it assumes a camera frame.
Comment by JediHamster on 2011-03-14:
Within cloud_to_scan.cpp it looks as if the XZ plane in the laser scan plane, with Y being the vertical axis (assuming a horizontal scan).

