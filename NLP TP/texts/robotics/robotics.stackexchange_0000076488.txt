Q:

Current role nodelets in the ROS ecosystem

I also posted a more technical code-related question about nodelets, but I felt this was a separate question.
As somebody who is used to designing image processing pipelines, nodelets make a lot of sense to me.  I have made efforts to minimize the number of data copies across a PCI bus (CPU <--> GPU), so the overhead of copying data between processes through the IP stack seems like a much larger concern.
However, I'm confused as to why the image_transport package does not seem to include any tutorials for using nodelets.  Also, the uvc_camera doesn't come with a nodelet version of the driver (althought the 1394 camera does).
So are nodelets not well supported at this time?  Or am I looking in all of the wrong places for documentation/examples?

Originally posted by rexroni on ROS Answers with karma: 18 on 2016-09-26
Post score: 0

Original comments
Comment by gvdhoorn on 2016-09-27:
Additional comment: comms through localhost are very efficient under Linux, so even though it will be more of a performance hit than using nodelets+zero-copy, it's nowhere near as bad as you might think.

A:

Nodelets are not mentioned in the image_transport docs because they don't depend on one another. zero-copy in nodelets is automatic, and image_transport is based on standard publishes and subscribers, so if you use image_transport within a nodelet, ROS will use the zero-copy transport; otherwise it will use the standard TCP-based transport.
Most of the camera drivers are maintained by different people or research groups, so they're not all the same. You may want to look for a different USB camera driver that does provide nodelets.

Originally posted by ahendrix with karma: 47576 on 2016-09-26
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by rexroni on 2016-09-26:
I had previously tried a simple implementation with image_transport--the sort described in the image subscriber/publisher tutorials--but it refused to work.  I tried again, and it worked.  Thanks for the explanation.

