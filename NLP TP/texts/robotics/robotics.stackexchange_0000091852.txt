Q:

URDF not moving and not publishing tf on RViz using Robot_localization

Hello, I am using robot_localization to visualize in RViz my urdf moving according to the rosbag output files I prepared using robot_localization.  robot_localization works, my rosbag works well and all the messages are being published/subscribed properly. It seems that everything works but when it comes to visualize my urdf moving on RViz that is not happening.
I extensively studied robot_localization from the official website but I don't understand what the problem could be.
robot_localization is basically not publishing the transform and I think that because of that, I am able to see the model and the two reference frames, but I am not able to see it moving. So the usbl is the problem.
I spent some days now trying to figure out the possible problem but have arrived to a dead end. If anyone can shed some light on this matter it would be great.
See below a print screen of what is happening in RVizbefore I apply the urdf model:

And after I add the model:

Below I am showing my urdf file:
<?xml version="1.0"?>
<robot name="floatModel">

    <!-- Material & Color  -->
    <material name="blue">
        <color rgba="0 0 0.8 1"/>
    </material>
    <material name="white">
        <color rgba="1 1 1 1"/>
    </material>
    <material name="black">
        <color rgba="0 0 0 1"/>
    </material>

<!-- Base Link Declaration  -->
    <link name="base_link">
        <visual>
            <geometry>
<!-- This is the main body of the float  -->
                <cylinder length="0.865" radius="0.09"/>
            </geometry>
            <material name="blue"/>
        </visual>
    </link>
<!-- usbl  -->
    <link name="usbl">
        <visual>
            <origin rpy="0 0 0" xyz="0 0.127 0.0508"/>
        </visual>
    </link>
    <joint name="base_to_usbl" type="fixed">
        <parent link="base_link"/>
        <child link="usbl"/>
        <origin xyz="0 0.22 0.25"/>
    </joint>
</robot>

float_localization.launch
<?xml version="1.0"?>
<launch>
<param name="use_sim_time" value="true" />

 <node pkg="tf" type="static_transform_publisher" name="link1_broadcaster"
 args="0 0 0 0 0 0 imu base_link 100" />

 <node pkg="robot_localization" type="ekf_localization_node"
     name="ekf_localization" clear_params="false">
    <param name="use_sim_time" value="true" />
    <param name="sensor_timeout" value="2.0"/>
    <param name="two_d_mode" value="true"/>
    <param name="map_frame" value="map"/>
    <param name="odom_frame" value="odom"/>
    <param name="base_link_frame" value="base_link"/>
    <param name="world_frame" value="map"/>
    <param name="publish_tf" value="true"/>
    <param name="frequency" value="100"/>

    <param name="odom0" value="/usbl/pose_projected"/>
    <rosparam param="odom0_config">[true,  true,  false,
                                   false, false, false,
                                   false, false, false,
                                   false, false, false,
                                   false, false, false]</rosparam>
    <param name="odom0_differential" value="false"/>

    <param name="imu0" value="/imu/data_w_orientation"/>
    <rosparam param="imu0_config">[false, false, false,
                                   true, true, true,
                                   false, false, false,
                                   true, true, true,
                                   true, true, true]</rosparam>
    <param name="imu0_differential" value="false"/>

    <param name="smooth_lagged_data" value="true"/>
  </node>
</launch>

floatModel_urdf.launch
<launch>

  <arg name="floatModel" default="$(find ros_float)/urdf/floatModel.urdf"/>
  <arg name="gui" default="true" />
  <arg name="rvizconfig" default="$(find ros_float)/rviz/urdf.rviz" />

  <param name="robot_description" command="$(find xacro)/xacro.py $(arg floatModel)" />
  <param name="use_gui" value="$(arg gui)"/>

  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(arg rvizconfig)" required="true" />

</launch>

Also I am adding below a python script that calculates the transform_pose as Robot_localization is basically not publishing the transform and I think that because of that, I am able to see the model, but I am not able to see it moving.
See below the file:
import pyproj as proj
import rospy
import tf
import datetime
from geometry_msgs.msg import PoseWithCovarianceStamped
from nav_msgs.msg import Odometry
from sensor_msgs.msg import Joy

class TransformPose:
    def __init__(self):
        self.pub = rospy.Publisher('/usbl/pose_projected', Odometry, queue_size=10)
        #self.br = tf.TransformBroadcaster()
        self.pressed = False

        rospy.Subscriber("/usbl/pose_with_covariance", PoseWithCovarianceStamped, self.callback)

    def paramsReady(self):
        return rospy.has_param('/utm_zone') and\
               rospy.has_param('/origin_lon') and\
               rospy.has_param('/origin_lat') and\
               rospy.has_param('/origin_z')

    def callback(self,data):
        if(self.paramsReady()):
            rospy.loginfo_once("Valid survey params found:  transform_pose starting")
            crs_wgs = proj.Proj(init='epsg:4326') # assuming you're using WGS84 geographic
            utm_zone = rospy.get_param("/utm_zone")
            crs_bng = proj.Proj(init=utm_zone) # use a locally appropriate projected CRS

            originLon = rospy.get_param("/origin_lon")
            originLat = rospy.get_param("/origin_lat")
            # then cast your geographic coordinate pair to the projected system
            xoff, yoff = proj.transform(crs_wgs, crs_bng, originLon, originLat)
            zoff = rospy.get_param("/origin_z",0)

            transformed_msg = Odometry()
            transformed_msg.pose = data.pose;
            transformed_msg.child_frame_id = "base_link"
            lon=transformed_msg.pose.pose.position.x * 180/3.14159
            lat=transformed_msg.pose.pose.position.y * 180/3.14159
            transformed_msg.pose.pose.orientation.x
            # setup your projections

            x, y = proj.transform(crs_wgs, crs_bng, lon, lat)
            x = x-xoff
            y = y-yoff
            z = transformed_msg.pose.pose.position.z
            z = z-zoff

            if x== float('Inf') or y==float('Inf'):
                pass
            else:
                transformed_msg.pose.pose.position.x=x
                transformed_msg.pose.pose.position.y=y
                transformed_msg.pose.pose.position.z=z
                transformed_msg.header.frame_id="map"
#                rospy.loginfo(transformed_msg.pose.covariance)
                transformed_msg.pose.covariance = [5., 0., 0., 0., 0., 0.,
                                                   0., 5., 0., 0., 0., 0.,
                                                   0., 0., 5., 0., 0., 0.,
                                                   0., 0., 0., 0., 0., 0.,
                                                   0., 0., 0., 0., 0., 0.,
                                                   0., 0., 0., 0., 0., 0.]
                self.pub.publish(transformed_msg)
                if self.pressed:
                    self.button_pub.publish(transformed_msg)
                    self.pressed = False
        else:
            rospy.loginfo_once("Receiving odom message but urvey params not ready.  waiting...")

    def joyCallback(self,joyMsg):
        if(joyMsg.buttons[0]==1):
            self.pressed = True
            print("saving current location")
        return

def main():

    rospy.init_node('nav_projection_node')
    transformer = TransformPose()
    rospy.loginfo("starting")
    rospy.spin()

main()

Originally posted by RayROS on ROS Answers with karma: 108 on 2019-05-30
Post score: 0

A:

<link name="usbl">

    <visual>
        <origin rpy="0 0 0" xyz="0 0.127 0.0508"/>
    </visual>
</link>

There is no geometry child of the visual element. This would seem to be a malformed urdf. That is most likely why you are getting that error Could not parse visual element for Link [usbl].
The geometry element is a required child of visual. Refer to wiki/urdf/XML/link - Elements.

Originally posted by gvdhoorn with karma: 86574 on 2019-05-31
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by RayROS on 2019-05-31:
Thanks gvdhoorn, that was exactly what happened. In case anyone needs, I fixed the error adding the following lines to my urdf model which solved the problem:
<link name="usbl">
    <visual>
        <geometry>
            <cylinder length="0.10" radius="0.015"/>
        </geometry>
        <origin rpy="0 0 0" xyz="0 0.127 0.0508"/>
        <material name="cyan"/>
    </visual>
</link>

