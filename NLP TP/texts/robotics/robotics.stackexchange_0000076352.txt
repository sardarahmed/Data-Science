Q:

Is there a way to use the navigation stack without stopping at goals?

This question was asked by someone else in 2013, but never answered. So giving it another shot as I'm sure there are other people besides me with similar question.
Using ROS Indigo, we have an indoor robot that is to follow a pre-planned trajectory at a constant speed. There are no obstacles. Can move_base, base_local_planner be used to generate the required velocity commands such that the robot passes through the goal (waypoint) at a predetermined pose and speed and continues towards the next goal at the same linear speed  and without stopping until it reaches the last (end) goal? If move_base won't work is there a package that could?
The yocs_waypoints_navi package seems to use move_base and internally creates a new goal before the old one is reached for "waypoint navigation", but there is very little documentation on how to use.

Originally posted by ras_cal on ROS Answers with karma: 40 on 2016-09-17
Post score: 2

A:

I think you will need to modify the global planner to take in a vector of goal pose and this global planner should create a path going through all of the intermediate poses and only stop at the last pose.
If you want to "the robot passes through each goal at a predetermined pose", then it might become abit tricky. You will need to write some sort of Bezier curves (or something similar) going through all the poses.

Originally posted by DavidN with karma: 544 on 2016-09-18
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by ras_cal on 2016-09-19:
Thanks. How would the local_planner know to not stop when it reaches each intermediate goal?
Comment by DavidN on 2016-09-19:
Local planner only concerns about the "path" generated by global planner. So local planner will just follow the path until the end of the "path" without knowing that it has pass some intermediate goal poses.
Comment by ncharron on 2017-08-21:
Were you able to figure this out? I'm looking to do the same thing.
Comment by ras_cal on 2017-08-22:
we used a path tracking algorithm. In our case Pure Pursuit worked, although we had to develop from scratch.
Comment by ncharron on 2017-08-22:
Thank you!

