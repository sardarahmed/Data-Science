Q:

read yaml parameter in C++

Hi all,
I'm experiencing an issue in using the parameter server:

I start a roscore so that I get only one master on this machine.

I set a global param manually, say:
rosparam set /test/m '{"id0": 0, "id1": 1}'

I start one of my launchfile whose short version is:

I get:
roslaunch mypckg mylaunch.launch
... logging to /home/flowers/.ros/log/08d803da-74d2-11e4-9a51-a01d480daef0/roslaunch-zbook-4127.log
Checking log directory for disk usage. This may take awhile.
Press Ctrl-C to interrupt
Done checking log file disk usage. Usage is <1GB.

started roslaunch server http://zbook:55760/

SUMMARY
========

PARAMETERS
 * /rosdistro
 * /rosversion

In the code of "mynode" I read this param:
             string m;
             if(!nh.getParam("/test/map", m))
                 ROS_ERROR("Failed to read 'map' on param server");

The above error is triggered, while rosparam get /thr/before still returns an existing value. It looks like I'm not reading params in the same namespace but I'm reading global parameters so I don't understand...

What are the PARAMETERS listed in the SUMMARY? Only parameters defined in the launch file or all available parameters on the server?
What am I missing? Thanks

Originally posted by courrier on ROS Answers with karma: 454 on 2014-11-25
Post score: 2

Original comments
Comment by kramer on 2014-11-25:
What is the output of rosparam list? You can try that at various points to see what the parameters are or how they're changing (using rosparam get)...

A:

I've modified my question to match the real problem and answer to it. Reading a yamlis quite heavy in C++, here's a way to read a map of arrays for instance:
                XmlRpc::XmlRpcValue symbols;

                if(!ros::param::get("/thr/symbols", symbols))
                    ROS_ERROR("Failed to read symbols on param server");

                ROS_ASSERT(symbols.getType()==XmlRpc::XmlRpcValue::TypeStruct);
                for (XmlRpc::XmlRpcValue::iterator i=symbols.begin(); i!=symbols.end(); ++i) {
                    ROS_ASSERT(i->second.getType()==XmlRpc::XmlRpcValue::TypeArray);
                    for(int j=0; j<i->second.size(); ++j) {
                        ROS_ASSERT(i->second[j].getType()==XmlRpc::XmlRpcValue::TypeDouble);
                    }
                }

With YAML being:
object0: [0.1280805148444952, -0.2574350304851667]
table: [-0.019239830108468144]
object1: [-0.12373553201812965, -0.2581443366277866, 0.12297468008504482, 0.0405834453536516, 0.9474896873206372, -0.026972527372781926]
arm: [0.9303491449393159]
eye: [0.12397546355498722 -0.37202872219628474]

Sorry for editing 1000 times :)

Originally posted by courrier with karma: 454 on 2014-11-26
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by Lorenzo Riano on 2014-11-26:
Mmm, yaml-cpp makes yaml in C++ soooo much easier and less ugly!
Comment by courrier on 2014-11-26:
Would it be really easier? This is not longer than the minimal code to iterate on two nested datastructures... the assert are for safety but obviously optional
Comment by Tommi on 2015-09-07:
That code looks terrible.
Comment by peci1 on 2017-05-26:
yaml-cpp is nice, but they've made horrible things with their versioning, so now we have ROS packages depending on 0.3, while other packages depend on 0.5, which can't be easily installed alongside... this is hell... guys from ETH tried to make it easier: https://github.com/ethz-asl/yaml_cpp_catkin

