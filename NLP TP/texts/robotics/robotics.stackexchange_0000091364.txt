Q:

Retrieve interpolated desired positions from JointTrajectoryController without execution?

Is it possible to get the result of the interpolation that the JTC does without executing it?
I have checked most of the source of the JointTrajectoryController but so far I haven't found anything related to the interpolation.
When sending the following trajectory:
header:
  seq: 0
  stamp:
    secs: 0
    nsecs: 0
  frame_id: ''
joint_names:
- 'joint1'
points:
- positions: [0.6]
  velocities: [-0.1]
  time_from_start: {secs: 0, nsecs: 800000000}
- positions: [0.4]
  velocities: [0]
  time_from_start: {secs: 1, nsecs: 200000000}

If I send these commands I can monitor the state/desired topic to see the result, however I'd like to get the result of the interpolation and check what the calculated desired positions will be before actually executing them on my robot.
Is this possible or am I misunderstanding something about the JointTrajectoryController?

Originally posted by Isha Dijcks on ROS Answers with karma: 85 on 2019-04-14
Post score: 0

A:

As in #q320899, I'm not entirely sure why you are doing this, but sampling of the trajectory is done here, as part of JointTrajectoryController<..>::update(..).
This makes use of QuinticSplineSegment::sample(..) to do the actual sampling.
You could instantiate your own JointTrajectoryController::Trajectory and populate it with a trajectory_msgs/JointTrajectory (using joint_trajectory_controller::internal::initJointTrajectory(..)) and then perform the iteration and sampling directly.
Note: most of this is in the internal namespace of joint_trajectory_controller, so not part of the public API, meaning it could change at any time and without prior notice or bw-compatibility.

Originally posted by gvdhoorn with karma: 86574 on 2019-04-15
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by Isha Dijcks on 2019-04-15:\

I'm not entirely sure why you are doing this

The goal is to create a human-like walking pattern. I want to show the visualization to experts to give feedback on the walking pattern.
Comment by gvdhoorn on 2019-04-15:
Going the way I described in my answer would embed knowledge about this being "for a visualisation" into this/these component(s). It would perhaps be better to create a visualisation/simulation configuration/variant of your application and use that (next to a configuration that runs your application with the real robot) instead of creating new components.
That should/would allow you to reuse much more of your software than creating custom components for these things at this level (or at least: that is my experience).
Comment by Isha Dijcks on 2019-04-15:
I have a simulation which can be interacted the exact same way as the physical hardware, so I could definitely use that instead. The main component of my question is to get the planned trajectory as fast as possible. I assume that running the trajectory through a simulation will only slow that down, and should have no effect on the desired trajectory, but I might be wrong on that one.

