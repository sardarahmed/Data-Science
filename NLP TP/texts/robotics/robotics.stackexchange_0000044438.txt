Q:

How to broadcast a transform between /map and /odom

Could you tell me how to broadcast a transform between map and odom?
I'm trying to use a navigation stack.
I know I need to setup some tf publishers.
First, I made a node to publish a static transform between base_link and base_laser.
Second, a node to publish a transform between odom and base_link was made
with odometry sensor(encoder) data.
Third, I need to publish a transform between map and odom ...
But how? 
The transform will be published with ... what?
If possible, could you tell me how to broadcast the transform
when making a map and using the navigation stack respectively.
Thanks in advance.

Originally posted by moyashi on ROS Answers with karma: 721 on 2012-09-26
Post score: 3

A:

The transform odom -> base_link represents the pose of the robot calculated from the robot's wheel encoders. Odometry generally will drift, i.e. the longer the robot drives around, the further away will the odometry transform be from the actual pose of the robot. To fix this, you normally run some sensor based self-localization node (normally using laser sensors). In ROS, the most commonly used nodes for localization are gmapping if you want to build a map and amcl if you want to use an existing map. Both publish the map -> odom transform and by requesting the tranform map -> base_link, you can get the position of the robot in the map. This tutorial might be helpful.

Originally posted by Lorenz with karma: 22731 on 2012-09-26
This answer was ACCEPTED on the original site
Post score: 13

Original comments
Comment by Gazer on 2013-06-19:
very nice answer!!! could you please explain a bit more why the odometry will drift?
Comment by bvbdort on 2014-02-25:
@Gazer Many reasons for drift in odometer. ex: if floor is not flat ,slipping of wheels or quantization error from wheel encoder, mismatches in diameters of wheels.
Comment by burf2000 on 2017-02-02:
Could you just use the Laser? instead of using the wheel encoders
Comment by nico_b on 2017-04-25:
@burf2000 Sorry, a bit late, but you could use i.e. the laser_scan_matcher.
Comment by NAGALLA DEEPAK on 2018-01-25:
I am using hector_slam. I read that hector_slam does not need any odometry data. Could you help me with this https://answers.ros.org/question/279764/problem-getting-map-using-hector_slam/

