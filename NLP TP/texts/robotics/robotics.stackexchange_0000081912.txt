Q:

Difference between wstool and rosdep

This is probably a dumb question and searching the wiki and googling hasn't given me a clear idea. From doing the install procedure (multiple times) it appears to me that both wstool and rosdep install modules.
It seemed like wstool is used to make the initial catkin workspace, whereas rosdep analyzes that to install additional modules that are needed due to dependencies.
Any additional clarification or correction would be greatly appreciated!

Thanks, that is very informative!
So is it fair to say that wstool is installing essentially ROS source code, while rosdep then looks at the state of things and then locates libraries (not necessarily written for ROS) and installs those: on mac using brew?
A related question: When I install pos, one of the early steps is to make the ros_catkin_ws directory.
Does all the ROS specific code get installed there?
And then if I write ROS code myself, my modules are also kept there?
And if I created a new ros_catkin_ws2 it would be fully independent of the first one and possibly / likely contain duplicates of lots of ROS code?
Thanks!

Originally posted by pitosalas on ROS Answers with karma: 628 on 2017-07-21
Post score: 0

A:

In a nutshell:

wstool: from the wiki page:

Command-line tools for maintaining a workspace of projects from multiple version-control systems

so it manages source checkouts (ie: clones in git parlor) in a workspace.

rosdep: from the wiki page:

rosdep is a command-line tool for installing system dependencies

where system dependencies typically means binary pkgs (ie: debs on Ubuntu/Debian)

It seemed like wstool is used to make the initial catkin workspace, whereas rosdep analyzes that to install additional modules that are needed due to dependencies.

wstool is used to get the sources of the packages that you wish to work on (or need to compile, if there are no binaries for your platform). rosdep is then used to make sure you have all the necessary dependencies installed on your system.

Originally posted by gvdhoorn with karma: 86574 on 2017-07-21
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by pitosalas on 2017-07-21:
Thanks, that is very informative!
So is it fair to say that wstool is installing essentially ROS source code, while rosdep then looks at the state of things and then locates libraries (not necessarily written for ROS) and installs those: on mac using brew?
Comment by allenh1 on 2017-07-21:
For your first question, yes. That's what they do.
For your second question, no. I usually create a separate ~/catkin_ws for my code.
mkdir -p ~/catkin_ws/src && cd ~/catkin_ws && catkin_make is the usual approach.
Comment by allenh1 on 2017-07-21:
After that, you'll just source ~/catkin_ws/devel/setup.bash to use your packages/those that weren't downloaded by wstool.
Comment by pitosalas on 2017-07-21:
Thanks... By the way I didn't post another one on purpose, I thought I was posting a follow up question. But you're right, I could have edited the main question, and I will do that next time. By the way if I run out of characters in the comment, is it cool to add a second comment?
Comment by pitosalas on 2017-07-21:
So, if I create a new catkin_ws (which is definitely cleaner) how will the all the ROS code that was built in the original pos_catkin_ws be found? Or are all the build code in a global area (e.g./usr/local/opt/python/libexec/bin etc.)
Comment by allenh1 on 2017-07-21:
Catkin magic, is the best answer. Catkin will take the existing workspace, then include it in the one you create. So, your environment includes the main environment.

