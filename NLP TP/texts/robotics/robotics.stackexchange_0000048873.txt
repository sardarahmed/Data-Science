Q:

OpenCV setMouseCallback

Hi,
i am trying to set a mouseCallback function using openCV within an ros application.
So i defined a function prototype within my class defintion object_tracker looking like this:
class object_tracker
{    
public:
    ...
private:
    void onMouse( int event, int x, int y, int flags, void* param );

Function itself looks like this:
void object_tracker::onMouse( int event, int x, int y, int flags, void* param )
{
...
}

When i now set the mouseCallback
setMouseCallback( "CamShift Demo", object_tracker::onMouse, 0 );

it says:

/home/namco/ros/ object_tracker/src/object_tracker.cpp:323: Fehler:argument of type ‘void ( object_tracker::)(int, int, int, int, void*)’ does not match ‘cv::MouseCallback {aka void ( )(int, int, int, int, void)}’

But when i use this with normal cpp, everything works fine. What's wrong?

Originally posted by boFFeL on ROS Answers with karma: 31 on 2013-03-01
Post score: 1

Original comments
Comment by Kanzhi Wu on 2014-04-06:
Hi boFFeL,
did you solve this problem?
I met the same issue as you...
Best regards
K

A:

OpenCV's setMouseCallback does not support calling into non-static class member functions (http://docs.opencv.org/modules/highgui/doc/user_interface.html?highlight=setmousecallback#cv.SetMouseCallback).
A work around for this could be declaring a static method that calls into the non-static method:
Declaration:
class object_tracker
{    
public:
    ...
private:
    static void onMouseStatic( int event, int x, int y, int flags, void* that );
    void onMouse( int event, int x, int y, int flags );

Definition:
void object_tracker::onMouseStatic( int event, int x, int y, int flags, void* that )
{
    that->onMouse( event,  x, y, flags );
}

void object_tracker::onMouse( int event, int x, int y, int flags )
{
...
}

And add this rather than 0 if you want to the callback:
setMouseCallback( "CamShift Demo", object_tracker::onMouseStatic, this );

Originally posted by Wolf with karma: 7555 on 2014-11-24
This answer was ACCEPTED on the original site
Post score: -1

Original comments
Comment by Markus on 2018-05-23:
I now got: ‘void*’ is not a pointer-to-object type
that->onMouse( event,  x, y, flags );
Comment by Metalzero2 on 2019-06-27:
In theory, this should not work. When using a void pointer, you can't just dereference. You first need to type-cast it. At least, that is how I know it works. The other answer is actually type-casting it, that is why it is correct.

