Q:

Improve gmapping results

Hey everyone
I am working with the ROS Navigation stack using a simulated environment in Stage. Initially I would have created a topic criticizing the precision of the AMCL localization stack, but after deeper research I found the error to occur from the map I have created with the GMapping. 
The following image shows the comparison between the ideal image (blue) and the resulting map from GMapping (red). Interesting enough the data fed into the GMapping process are all ideal, no error in either the odometry or the laser scans. 
Besides setting the number of particles to 150 I use the standard settings when executing the GMapping process. Actually I have tried to reduce the update frequency in the translation and angular rotation, but it did not change alot.
Comparision http://s8.postimage.org/eeg3w3qtx/autolab_compare.png
I have also tried to visualize quite primitively how I have traveled through the area. The black dot is the start and the numbers shows the order in which the different areas have been explored.
Comparision http://s11.postimage.org/t5eihk9zn/autolab_compare_path.png
Does anyone have any idea to how to improve the result of the GMapping process? So far it does not seem that impressive.

Regards 
Sebastian Aslund 
P.s my laser scanner is modeled to a SICK LMS200 with a range at 8m. 
P.p.s Maybe it was an idea to show the results between a higher update frequency. The red figure shows the map with the standard update intervals. In the blue map the linear update is set to 0.2 and the angular update is set to 0.1.
Comparision http://s7.postimage.org/lyx68iaaz/map_cpm10vs02.png

Originally posted by Aslund on ROS Answers with karma: 289 on 2012-07-18
Post score: 4

Original comments
Comment by joq on 2012-07-18:
Does it help to add more particles?
Comment by allenh1 on 2012-07-18:
Depends. At 100 particles, I get improved results; however, at 150 I loose those results. I usually use this to start gmapping: rosrun gmapping _particles:=100 _linearUpdate:=0.1 _angularUpdate:=0.1.
Comment by Aslund on 2012-07-18:
I have already increased the number of particles from 30 (the default value) to 150. But I can try raising it to 500 or so and see what happens.
Comment by allenh1 on 2012-07-18:
You might want to create an entropy publisher to set it to 0. This can also help.
Comment by Aslund on 2012-07-18:
What do you exactly mean by "create an entropy publisher to set it to 0"?
Comment by allenh1 on 2012-07-18:
Entropy is a new topic in slam. It is a float64. The higher the entropy, the worse the odometry. If your odometry is perfect, then 0 will notify gmapping of this.
Comment by tsdk00 on 2019-04-12:
@allenh1 While doing Hector_mapping, the odometry data gets totally ignored. So, how were you able to achieve the map with hector mapping using odometry?

A:

-- Second update to the responces -- 
Since it seemed that there were a consensus that higher particle count is not the way to go, then I went back to the beginning. I tried off with a particle count at 30, the default value. Instead the updates were lowered to 0.01. This results in the command _particles:=30 _linearUpdate:=0.1 _angularUpdate:=0.1 and the returned map is displayed below.
Comparision http://s11.postimage.org/lk32yireb/autolab_compare_path_30_01_01_no_Error.png
I began to wonder. Now all my tests have been based on the ideal values, so I tried the same parameters on the noisy data. This gives the following map:
Comparision http://s16.postimage.org/h4hhuxy3p/autolab_compare_path_30_01_01.png
The result in very surprising, especially because my noise is mostly focused on error in the rotation. It might be due to optimizations in the GMapping code towards noisy data, which might cause ideal data to be regarded as even more erroneous than actual erroneous data. 
Below is the development in error. The seconds are reported 100 times to high, minor visualization error.
Comparision http://s15.postimage.org/56wu2rmmj/Odometry_error_development.png
Secondly I have tried off the Hector SLAM mapping using the launch file supplied by allenh1. Somehow it did not work at all when i set the parameter "rosparam set use_sim_time true", so I had to run it without. With this I can only use the ideal values, I need simulation time to test with the noisy data. 
Nevertheless I got the same results as allenh1 and here is the comparison with the ground truth:
Comparision http://s17.postimage.org/9645ftnxb/autolab_compare_path_hector.png
Since the tutorial launch file in Hector_SLAM sets use_sim_time to true I guessed this could the same, but apparently not, any obvious reasons why? The initial tests shows a good result using this SLAM method. 
Edit: Thanks to the tip from Stefan I got Hector SLAM up and running with my erroneous data. Time to time I get a strange error: 
Transform failed during publishing of map_odom transform: Unable to lookup transform, cache is empty, when looking up transform from frame [/base_laser_link] to frame [/odom_error] 
Apparently it does not affect the mapping, but there is no visualization of the path. The result map is:
Comparision http://s16.postimage.org/pqrxf828l/autolab_compare_path_hector_error.png
It seems the long narrow path between waypoint 4 and 5 (see my original post) causes the SLAM process to become lost quite easily. 
I tried to omit the odometry from the Hector mapping, while it removed some problems it brought new ones.
Comparision http://s8.postimage.org/npass98at/autolab_compare_path_hector_error_no_Odom.png
Regards and thanks
Sebastian Aslund

Originally posted by Aslund with karma: 289 on 2012-07-18
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by Stefan Kohlbrecher on 2012-07-18:
Do you play back your bagfile with the --clock option appended? If not, sim time will not be published by rosbag and this can lead to all sorts of problems.
Comment by Aslund on 2012-07-18:
Thanks Stefan it solved the problem, I have updated my post with the noisy data.
Comment by Stefan Kohlbrecher on 2012-07-18:
Hector_Slam does not use odometry for state estimation, so it should not matter if odometry is available or not. How did you generate your noisy data?
Comment by Aslund on 2012-07-18:
My noisy data is generated quite simply. I read the laser data, add a noise based on a normal distribution to each range and finally publish to a seperate topic, here "base_scan_error". For the odometry I create a new frame "odom_error" with reference to "odom".
Comment by Aslund on 2012-07-18:
The  "odom_error" frame is updated at each new speed command. Using the translational and rotational speed the error in each is calculated using a set of weights and sampled through a normal distribution. The pose in "odom_frame" is then updated with the calculated speed error and the time step.

