Q:

SPARC arch: rosout node loads CPU on 100%

We experienced strange behaviour on our embedded SPARC-like system. Just after start, the rosout process loads CPU on 100%. We would be very appreciated if you guys help us to reveal the reason of such behaviour.
Also, how many processes should roscore run?

Originally posted by twdragon on ROS Answers with karma: 28 on 2019-03-12
Post score: 0

Original comments
Comment by stevemacenski on 2019-03-13:
I've seen that happen when you abuse the parameter server, its meant for static parameters at bringup not to set throughout use (if you do that)
Comment by knxa on 2019-03-14:
Probably won't solve your problem, but you can reduce the work done by rosout node in a few ways: disable topics in log lines, disable file logging.
NB: ROSOUT_DISABLE_FILE_LOGGING is not yet in official melodic release, but there are other ways of disabling rosout file logging.
Comment by 942951641@qq.com on 2019-05-21:
I also meet this problem, rosout loads one full cpu kernel

A:

After some attempts to reveal the source of problem I found a solution. There are no correct realizations of SteadyTimer system entity on some VLIW and SPARC-like platforms. This leads any function using SteadyTimer to return immediately after calling. In threaded implementation such fun—Åtions consume all CPU time just for continuous function calls. This issue can be solved with replacement of all SteadyTimer-related calls to equivalents which use WallTimer.
There is brilliant solution on GitHub made by Christopher Wecht: https://github.com/cwecht/ros_comm/tree/fix_subscription_busy_wait-melodic His solution makes ROS core true platform-independent on the described case.
To integrate Christopher's solution into the existing ROS sources it is only needed to replace src/ros_comm/roscpp directory with variant from here. After that compiled ROS works properly on VLIW platforms.

Originally posted by twdragon with karma: 28 on 2019-05-16
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by gvdhoorn on 2019-05-16:\

To integrate Christopher's solution into the existing ROS sources it is only needed to replace src/ros_comm/roscpp directory with variant from here.

please be aware that you are now responsible for keeping ros_comm (and all pkgs in it) up-to-date. The fork you link to is (at the time of writing) 8 commits behind melodic-devel.
Comment by ahendrix on 2019-05-16:
It looks like there is a pull request to merge those changes into ros_comm: https://github.com/ros/ros_comm/pull/1684 . At this time, it looks like there are still some open discussions that need to be resolved before it can merge.

