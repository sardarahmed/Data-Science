Q:

string argument roslaunch

Hi,
I am trying to pass arguments to my launch file, but I can never get the values that I sent: for instance, I declared my variables this way:
<?xml version="1.0"?>
<launch>

    <arg name="my_KP" />
    <arg name="my_KI" />
    <arg name="my_KD" />
    <arg name="my_EL" />
    <arg name="my_ADT" />

    <node name="en_pub" pkg="driver" type="en_repub.py" />

    <node name="left_motor" pkg="driver" type="left" output="screen">
        <!--
        <param name="KP" type="string" value="$(arg my_KP)" />
        <param name="KI" type="string" value="$(arg my_KI)"/>
        <param name="KD" type="string" value="$(arg my_KD)"/>
        <param name="EL" type="string" value="$(arg my_EL)"/>
        <param name="ADT" type="string" value="$(arg my_ADT)"/>
        -->
    </node>

    <node name="right_motor" pkg="driver" type="right" output="screen">
        <!--
        <param name="KP" type="string" value="$(arg my_KP)" />
        <param name="KI" type="string" value="$(arg my_KI)"/>
        <param name="KD" type="string" value="$(arg my_KD)"/>
        <param name="EL" type="string" value="$(arg my_EL)"/>
        <param name="ADT" type="string" value="$(arg my_ADT)"/>
        -->
    </node>

And on my node I did this:
    ros::NodeHandle p_nh;
    
    string KP = "1000";
    string KI = "240";
    string KD = "12000";
    string EL = "30000";
    string ADT = "1";

    //This allows for setting params instead of recompile to change
    p_nh.param<string>("KP", KP, "1000");
    p_nh.param<string>("KI", KI, "240");
    p_nh.param<string>("KD", KD, "12000");
    p_nh.param<string>("EL", EL, "30000");
    p_nh.param<string>("ADT", ADT, "1");

But my program does not seem to catch them. I only get the assigned default values.
What am I doing wrong?

Originally posted by Pototo on ROS Answers with karma: 803 on 2014-06-19
Post score: 1

A:

I believe that the problem is that in your launch file, the params are all private params (as they are in the node tag). Therefore you can either declare a private nodehandle i.e. your first line of C++ would read
ros::NodeHandle p_nh("~"); 

or you could use the "bare" versions from the API i.e. your parameter calls would read something like
ros::param::param<string>("~KI", KI, "240");

Here's a complete C++ file that does it both ways:
#include <ros/ros.h>
#include <string>

using namespace std;

int main(int argc, char *argv[])
{
    ros::init(argc, argv, "test");
    ros::NodeHandle nh("~");

    string KP = "1000";
    string KI = "240";

    nh.param<string>("KP", KP, "1000");
    ros::param::param<string>("~KI", KI, "240");

    ROS_INFO("KP = %s", KP.c_str());
    ROS_INFO("KI = %s", KI.c_str());
    
    return 0;
}

Originally posted by jarvisschultz with karma: 9031 on 2014-06-19
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by jarvisschultz on 2014-06-19:
In your attached launch file, your params are commented out. I'm assuming you didn't mean to post it this way.
Comment by Pototo on 2014-06-20:
Great! This works, thanks!
Comment by Robocop87 on 2015-02-16:
Why isn't this in the tutorials? I went crazy looking for this 0.o
Comment by jarvisschultz on 2015-02-16:
roscpp tutorial: http://wiki.ros.org/roscpp_tutorials/Tutorials/AccessingPrivateNamesWithNodeHandle
Comment by jarvisschultz on 2015-02-16:
Here's a description of private params in general: http://wiki.ros.org/Parameter%20Server#Private_Parameters And here's the roslaunch XML documentation on <param> describing its behavior inside of the <node> tag http://wiki.ros.org/roslaunch/XML/param
Comment by jarvisschultz on 2015-02-16:
Hopefully those links clear up any remaining confusion!

