Q:

Speeding up OpenCV on ARM?

Hi all,
I'm working with OpenCV on a Gumstix, and it is incredibly slow.  For instance, running the "GoodFeaturesToTrack" function in a node runs at 1.5Hz, and requires 85% processor utilization on a Gumstix Overo Tide.  I used a standard download and compile of the ROS vision_opencv package to get these results.  Any ideas on how to optimize?  It seems that even a lowly 700MHz processor should be a bit faster than what I'm getting.
Thanks!

Update
I'm looking into Ash Charles' suggestion to add a flag to use the neon coprocessor.  I'm not quite sure how to do this.  I'm assuming that I make a change to my opencv2 makefile, but would appreciate some direction on that.

Update #2
I'm working on implementing RahulP's suggestion.  So, in the vision_opencv package, I added a flag to CMakeLists.txt, which now looks like this:
cmake_minimum_required(VERSION 2.4.6)
include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)

set(ROSPACK_MAKEDIST true)
set(EXTRA_C_FLAGS_RELEASE "${EXTRA_C_FLAGS_RELEASE} -O2 -mfpu=neon")
   
rosbuild_make_distribution(1.4.3)

Then, I ran rosmake vision_opencv which was successful.  However, running the code showed no improvement whatsoever in execution speed (as measured by running rostopic hz /output).
Did I skip a step here?  Or do I need to be looking into profiling?  I tried using oprofile, but didn't really get anywhere productive.  If you have any suggestions, they would be much appreciated.

Potential Update/Question
If I were to go to my OpenCV directory, and type in:
./configure -mfpu=neon

followed by running rosmake, would that have the desired effect?

Update
I've uploaded all of my code to Github.  The main program that I'd like to optimize is in nodes/find_laser_filtered.py.  Obviously, one easy thing to do is to get rid of filtering lines by angle, that was mostly for debugging purposes on the desktop.
If you get an opportunity to take a look, please suggest any ideas for improvement you may have.  I'd really like to get this running at 15+ Hz, and I'm currently at about 2 Hz...
Thanks!

Originally posted by Bradley Powers on ROS Answers with karma: 422 on 2011-06-15
Post score: 6

Original comments
Comment by Asomerville on 2011-10-25:
@Bradley, @Ash, the last "update" and Ash's comment should be put in an answer so that others trying to solve the same problem will know where to look without reading the entire comment history. I'd suggest cleaning up the question as well.
Comment by Ash Charles on 2011-10-25:
I looked at the recommended gcc flags for VFP and Neon support.  I believe "-march=armv7-a -mtune=cortex-a8 -mfpu=neon -O3" would be best.  '-O3' should do some auto-vectorizing. Unfortunately, this will still be soft float (-mfloat-abi-softfp) as hard float is an ongoing challenge.
Comment by Bradley Powers on 2011-10-24:
I had trouble with oprofile itself.  I'll take a look at sysprof tomorrow and post results.
Comment by Asomerville on 2011-10-24:
What is meant by "didn't really get anywhere productive"? Do you mean that you couldn't find a bottle neck, or that you had trouble with oprofile itself? If it's the latter I'd suggest sysprof which is much easier to use.

A:

I agree this seems slow so two thoughts crossed my mind.

Check what is actually using all the processor time with something like oprofile. The processor shouldn't be doing tons of math or swapping of buffers but knowing what this is a first step.
Hard-float capabilities are provided by the Neon and vfp extensions.  IIRC, CMake should pick up flags from the environment so try adding '-mfpu=neon' to CXXFLAGS prior to recompiling.

The DSP onboard provides powerful capabilities when used with gstreamer---this may also give some benefit.

Originally posted by Ash Charles with karma: 81 on 2011-06-17
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by Eric Perko on 2011-06-17:
See http://elinux.org/BeagleBoard/GSoC/2010_Projects/OpenCV for a GSoC project on using the DSP and OpenCV together.
Comment by Bradley Powers on 2011-06-17:
Interesting, I'll look into this.  Thank you!

