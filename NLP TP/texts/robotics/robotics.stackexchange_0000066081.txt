Q:

Sleeping thread after publishing a message into a topic

Hi,
I've been using rosbridge and jroslib as an API to it. Testing the jroslib with the turtlesim, to publish messages I'm finding some errors. I have to use Thread.sleep(500) to the thread sleep so the message can somehow be published into the topic, otherwise the message would not be published nor the turtle would move.,
public static void main(String[] args) throws InterruptedException {
    Ros ros = new Ros("localhost");
    final int[] answer = {0};
    ros.connect();

    Topic turtlePub = new Topic(ros,"/turtle1/cmd_vel", "geometry_msgs/Twist", 3);
    turtlePub.advertise();
    turtlePub.subscribe(new TopicCallback() {
        @Override
        public void handleMessage(Message message) {
            System.out.println(message);
        }
    });
    Message toSend = new Twist(new Vector3(2.0,0,0), new Vector3(0,0,1.8));

    turtlePub.publish(toSend);

    Thread.sleep(500);

    ros.disconnect();
    System.out.println("finished");
}

Originally posted by pnakibar on ROS Answers with karma: 1 on 2015-02-26
Post score: 0

A:

I'm not completely familiar with jroslib, but in general ROS communications are asyncronous and run in multiple threads. If you publish a message then immediately terminate the process, the message may have enough time in the other thread which actually does the transmission, with acknowledgement and retry logic.

Originally posted by tfoote with karma: 58457 on 2015-02-26
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by tfoote on 2015-02-26:
PS can you link to documentation for jroslib?
Comment by pnakibar on 2015-02-26:
It probably is exactly this!
The documentation is pretty lacking, although the API is very straightforward.
Their git: https://github.com/WPI-RAIL/jrosbridge

