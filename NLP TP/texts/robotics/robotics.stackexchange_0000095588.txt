Q:

Minimizing ROS 2 Docker container size?

Can colcon be used in a multi-stage Docker build to minimize the container size of ROS 2 images? Can colcon-bundle or something like it figure out the bare minimum dependencies so everything else can be excluded from the container image?
Perhaps it is just as good to just start with ros-core or ros-base and only add the necessary packages on top of them since most robots will already have those base images.
Is it possible to create even smaller container sizes, though, than ros-core or ros-base, for the cases when someone just wants to use Docker to quickly run examples like talker/listener without having to download the big base images first? Or is ros-core already the bare minimum of what is needed? Thanks.

Originally posted by peterpolidoro on ROS Answers with karma: 49 on 2020-04-24
Post score: 1

A:

Can colcon be used in a multi-stage Docker build to minimize the container size of ROS 2 images?

Yes colcon can be used in multi-stage builds and it is expected (though I dont have numbers to compare) to yield you smaller images.
Here you can find an example of a multi-stage build with colcon.
An interesting work in progress is the ability to tell rosdep to install only specific dependency types (e.g. only runtime dependencies for your final image)

Is it possible to create even smaller container sizes, though, than ros-core or ros-base

This is something that would be great as when installing "metapackages" you always end up with some things you don't need. There has been a dicussion to provide a C++ only set of packages to be able to run a simple talker listener. This should yield much smaller images.

Or is ros-core already the bare minimum of what is needed?

Some work has been done recently to trim a bit the size of the ros_core images (ROS 1 or ROS2)  https://github.com/osrf/docker_images/pull/357 and https://discourse.ros.org/t/generating-dev-and-runtime-artefacts-from-ros-packages/12448.
That last discourse post emphasize the need for packages to declare as runtime dependencies only what they really need at runtime.
As far as ROS 2 images are concerned I believe there is still much size to be gained. One reason is that message packages debs are big in ROS 2 because they come with headers and libraries for each DDS implementation. By building these packages yourself with support for only 1 implementation you can reduce size significantly.

Originally posted by marguedas with karma: 3606 on 2020-04-24
This answer was ACCEPTED on the original site
Post score: 3

