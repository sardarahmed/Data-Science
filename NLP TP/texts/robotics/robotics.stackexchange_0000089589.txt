Q:

find_package catkin several times

Hi all,
let's say I have a catkin package which builds several executables.
Each one of these executables depends on a different set of catkin packages  (i.e. catkin CMake components).
How can I link properly these executables? Is it ok to call find_package(catkin REQUIRED COMPONENTS ...) several times?
E.g.,
cmake_minimum_required(VERSION 2.8.3)
project(myproject)
find_package(catkin REQUIRED COMPONENTS roscpp sensor_msgs)
add_executable(myexec1 myexec1.cpp)
target_link_libraries(myexec1 ${catkin_LIBRARIES})
find_package(catkin REQUIRED COMPONENTS roscpp std_msgs)
add_executable(myexec2 myexec2.cpp)
target_link_libraries(myexec2 ${catkin_LIBRARIES})

how about the include_directories statements?

Originally posted by mcamurri on ROS Answers with karma: 102 on 2018-11-14
Post score: 0

A:

How can I link properly these executables? Is it ok to call find_package(catkin REQUIRED COMPONENTS ...) several times?

No, that won't work (due to caching, CMake may not actually even call find_package() again).
A work-around could be to not use find_package(catkin .. COMPONENTS ..), but to find_package(..) each of your dependencies separately (so find_package(sensor_msgs REQUIRED) and find_package(std_msgs REQUIRED)) and then manually add the results of those calls to the include and link paths of the respective binaries.

how about the include_directories statements?

CMake supports per target properties, such as include and link paths (with either set_target_properties(..) or target_include_directories(..)). You could use those.

But an observation: if the executables are really so different that they don't have (m)any shared dependencies, I would ask myself whether these executables should be hosted by the same package.
Perhaps they should be in a package of their own.

Originally posted by gvdhoorn with karma: 86574 on 2018-11-14
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by gvdhoorn on 2018-11-14:
Note: your question is more a CMake question than a ROS/Catkin one. Even without any ROS involved you would/could run into the same issues (and your question about per-executable include_directories(..) reinforces this).
Comment by mcamurri on 2018-11-14:
Yes, but since of the unique feature of catkin seeing the other packages as components of itself (to avoid per-package find_package statements) I ran into this question. In a plain CMake project I would find all the libraries I need and then add only the generated variables I need per executable
Comment by mcamurri on 2018-11-14:
To reply to the original observation about splitting the code in multiple packages, I didn't mention that 1) this is no my code 2) I oversimplified the problem to the bare minimum. There are multiple nested CMake subprojects into this package. It is a complex cmake project converted to catkin.
Comment by gvdhoorn on 2018-11-14:\

Yes, but since of the unique feature of catkin seeing the other packages as components of itself

as you already comment: this is just convenience. You don't need to use that. A simple find_package(catkin REQUIRED) with the rest in their own find_package(..) is also fine and will work ok.
Comment by mcamurri on 2018-11-14:
Ok then I will use the catkin components only for the shared resources among all binaries and individual ones for the others. Thanks.

