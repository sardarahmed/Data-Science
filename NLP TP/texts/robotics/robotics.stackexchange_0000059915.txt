Q:

Topic not being created properly

Hello, I am using ROS groovy and I have created a .cpp file that is suppose to use the command_velocity topic in conjunction with ros turtlesim to move the simulated turtlebot in a direction, When I compiled my code everything went fine with catkin_make. Now that I run my code though it seems like the command_velocity topic is not being created or anything is being published at all.
#include <ros/ros.h>
#include <geometry_msgs/Twist.h>
int main(int argc, char **argv){
ros::init(argc, argv, "move");
ros::NodeHandle n;
ros::Publisher move_bot = n.advertise<geometry_msgs::Twist>("cmd_vel_mux/input/teleop",1);
geometry_msgs::Twist vel;
vel.angular.z = 1.5;
vel.linear.x = 1.5;
move_bot.publish(vel);

ros::spin();
return 0;
 }

I am not sure what the problem is and I am fairly new to ROS programming any insight would be appreciated, thank you.

Originally posted by choog on ROS Answers with karma: 101 on 2014-06-06
Post score: 0

A:

turtlesim_node subscribe from /turtle1/command_velocity in ros groovy change:
ros::Publisher move_bot = n.advertise<geometry_msgs::Twist>("cmd_vel_mux/input/teleop",1);

to
ros::Publisher move_bot = n.advertise<geometry_msgs::Twist>("/turtle1/command_velocity",1);

and also in ros groovy use turtlesim/Velocity not geometry_msgs/Twist. geometry_msgs/Twist use in hydro.
this a simple code that  send randomly-generated velocity commands to a turtlesim turtle
#include <ros/ros.h>
#include <turtlesim/Velocity.h>  // For turtlesim::Velocity
#include <stdlib.h> // For rand() and RAND_MAX

int main(int argc, char **argv) {
  // Initialize the ROS system and become a node.
  ros::init(argc, argv, "publish_velocity");
  ros::NodeHandle nh;

  // Create a publisher object.
  ros::Publisher pub = nh.advertise<turtlesim::Velocity>(
    "turtle1/command_velocity", 1000);

  // Seed the random number generator.
  srand(time(0));

  // Loop at 2Hz until the node is shut down.
  ros::Rate rate(2);
  while(ros::ok()) {
    // Create and fill in the message.
    turtlesim::Velocity msg;
    msg.linear = float(rand())/float(RAND_MAX);
    msg.angular = 2*float(rand())/float(RAND_MAX) - 1;

    // Publish the message.
    pub.publish(msg);

    // Send a message to rosout with the details.
    ROS_INFO_STREAM("Sending random velocity command:"
      << " linear=" << msg.linear
      << " angular=" << msg.angular);

    // Wait until it's time for another iteration.
    rate.sleep();
  }
}

also yo can use this command if you want publish one msg in one topic:
$rostopic pub /turtle1/command_velocity turtlesim/Velocity -r 1 -- 2.0  0.0

Originally posted by Hamid Didari with karma: 1769 on 2014-06-06
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by choog on 2014-06-06:
What if I wanted to publish to the topic that the actualy turtlebot uses? I wouldn't use
ros::Publisher move_bot = n.advertise<geometry_msgs::Twist>("/turtle1/command_velocity",1);
right?
Comment by Hamid Didari on 2014-06-06:
in ros groovy the turtlebot uses  turtlesim::Velocity msg you can use this
move_bot = n.advertiseturtlesim::Velocity("/turtle1/command_velocity",1);
Comment by choog on 2014-06-06:
It works fine in the simulator. Now I was trying to get the actual turtlebot to follow the path. But its not working. I also changed the time from 2 heartz to .5 heartz to see if the robot would recognize the command. But I'm not understanding if turtlebot actually uses the same topic for messages?
Comment by Hamid Didari on 2014-06-07:
please type this "$roslaunch turtlebot_teleop keyboard_teleop.launch" in your terminal . could you move your robot with key presses?
Comment by choog on 2014-06-07:
Yes it does. I was able to open up the code for the keyboard_teleop.cpp file and it seems like its publishing the messages on cmd_vel topic. I just have to figure out how to tie it all in together. Thank you for your help

