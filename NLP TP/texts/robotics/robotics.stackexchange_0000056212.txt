Q:

Passing msg data from Python to C++

Hey,
I have a topic written in Python, inside that workspace I have two message files:
Msg1
Header header
geometry_msgs/Vector3 direction
geometry_msgs/Vector3 normal
geometry_msgs/Point palmpos
geometry_msgs/Vector3 ypr

Msg2
Header header
float64[3] hand_direction
float64[3] hand_normal
float64[3] hand_palm_pos
float64 hand_pitch
float64 hand_roll
float64 hand_yaw

If I therefore do: std_msgs/Header header I get the information. The problem being is that now I'm using C++ to write another topic to subscribe to this. I don't know what to put inside of the callback function, for example:
void callback(const [here]& msg)
{

}

Since when I'm using the Point2Cloud I can use the following:
void callback(const sensor_msgs::PointCloud2Ptr& msg)
{
    // Blah
}

COuld anyone please tell me what I should therefore use?

Originally posted by Phorce on ROS Answers with karma: 97 on 2013-12-19
Post score: 0

Original comments
Comment by demmeln on 2013-12-19:
Have you tried your_package::Msg1Ptr?
Comment by dornhege on 2013-12-20:
Why do you have two different messages that seem to contain the same data?

A:

If messages are defined in the package my_package, then you would use
void callback(const my_package::Msg1ConstPtr& msg)

and ensure that you have a
#include <my_package/Msg1.h>

at the beginning.
Those look like the leap_motion messages; to use those include "leap_motion/leap.h" and "leap_motion/leapros.h" and the use leap_motion::leapConstPtr or leap_motion::leaprosConstPtr.

Originally posted by demmeln with karma: 4306 on 2013-12-21
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by ubuntuslave on 2016-10-28:
I know that using a Nodelet would be more memory efficient, but it's not supported for nodes written in Python. Do you believe to that writing the point cloud data to disk (as a binary file) and just passing a simple message flag for the receiver node to read such a file is any better (speed/mem)?
Comment by demmeln on 2016-10-31:
Is this related to the above question or my answer? I guess you should open a new question. My answer to you: You will probably have to measure it to find out which is more efficient. But I would first make sure that this is actually a bottleneck for you...

