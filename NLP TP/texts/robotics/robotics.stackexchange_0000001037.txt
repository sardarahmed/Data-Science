Q:

Building a balancing robot with differential drive

I've already built a two wheeled balancing robot using some continuous rotation servos and an accelerometer/gyroscope.  I upgraded the servos to some geared DC motors with 8-bit encoders with the goal having the robot drive around while balancing.   
I'm kind of stuck on how to program it to drive around while still balancing.  I think one way would be to just have the control input to the motors act sort of like pushing it.  So the robot would be momentarily unbalanced in the direction I want it to travel.  That seems kind of clumsy to me though.  There must be a better way of doing?  I think I need to combine the dynamic model for the balancer with the differential drive but this is a bit beyond the control theory that I know.  
Update 
From Anorton's answer I have a good looking state matrix now. 
Now about pole placement:  The A matrix will will have to be 4x4 based on the new state vector.  And B will then have to be a 4x2 matrix since I can only control the left/right wheel torque (u = 2x1 vector).  
I may need to read more about this but is there a systematic way to determine the A matrix by pole placement?  It seems to me for this example and even more complicated examples, determining A by guess and check would be very difficult.  
Update #2
After a bit of reading I think I understand it now.  I still need the dynamics of the robot to determine the A matrix.  Once I have that I can do the pole placement using matlab or octave.   

A:

Disclaimer: I have never done this myself, but only have seen a description of it being done through Georgia Tech's "Control of Mobile Robotics" on Coursera.  My knowledge of controls is spotty, too.  Thus... take this with a grain of salt. :)
To keep the robot upright (and still), you're trying to stabilize (send to $0$) the state $x$, where:
$$x=\left[\begin{array}{c}\text{leftVelocity} \\ \text{rightVelocity} \\ \text{angle from vertical}\end{array}\right]$$
However, when this system is stable, the left and right wheel velocities will be $0$.  So, we want an offset for the target speed:
$$x_{new}=\left[\begin{array}{c}\text{leftVelocity}-\delta_L \\ \text{rightVelocity}-\delta_R \\ \text{angle from vertical}\end{array}\right]$$
Where $\delta$ is the target speed for either side.
When this system is stabilized, the robot will be upright, and will have each wheel rotating at a desired speed.
This is the basic approach/outline.  I'll edit this with some more details tomorrow (and actual math, etc.), but I wanted to at least post the general idea now.  (It's late in my time zone, and I have an early class to get to.)
EDITED:
Oh goodness.  So, I just looked back at the slides relating to this in the Coursera course (Section 4, slide 29).  You may want to go and enroll in that class just to download that slide set... :)
The hard part is computing the $A$ and $B$ matrices (it's a big linearization mess).  Anyway, you want to make your state matrix as follows (not as above--my memory wasn't exactly right):
$$x=\left[\begin{array}{c}v \\ \omega \\ \phi \\ \dot \phi\end{array}\right]$$
Where $v$ is the velocity of the segway, $\omega$ is the rotational velocity (how fast the robot is pivoting) and $\phi$ is the angle from vertical.
We want to have a desired velocity, so let's define a new state vector:
$$\begin{align}\tilde x &= x - \left[\begin{array}{c}v_d \\ \omega_d \\ 0 \\ 0 \end{array}\right]\\
&= x - \delta
\end{align}$$
Where $\delta$ is the desired velocity and rotational quantity (as seen above).
Differentiating:
$$\dot{\tilde x} = \dot x - \dot \delta \underset{\text{$\delta$ is constant}}{=} \dot x$$
Thus, we have
$$\dot{\tilde x} = Ax + Bu$$
Where $A$ is the standard coeff matrix $B$ is the input matrix, and $u$ is the control vector.  We can then say:
$$\dot{\tilde x} = A(x - \delta) + Bu + A\delta$$
But, based on the solution for $A$ (from Coursera), $A\delta = 0$.  Thus:
$$\dot{\tilde x} = A\tilde x+ Bu$$
Now you can use pole placement to determine the correct eigenvalues, etc.

