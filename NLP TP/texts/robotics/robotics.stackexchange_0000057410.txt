Q:

ROS navigation stack VS OMPL

I am starting to look at navigation options to use for my humanoid robot (nao) and I would like some inputs from the community on using ROS navigation VS OMPL. Both of them seem to be a good solution at the moment, but I can't find any comparison of advantages/disavantages that would help guide me to make the best choice. Suggestion on other navigation methods are also welcome.

Originally posted by TopSecret on ROS Answers with karma: 37 on 2014-02-21
Post score: 0

A:

OMPL is a planning library that includes only planning algorithms. There is no collision checking, nothing that maintains a map or that interacts with controllers. The ROS navigation stack includes planning, map representation, collision checking, and components for executing the computed plans.
I guess it depends on what problem you are trying to solve. If you have a map representation and a means to implement collision checking, OMPL can be your solution. If you want to use more components from ROS, the navigation stack would be better suited.
Another detail to consider is that the navigation stack is geared for 2d planning and uses search-based algorithms (sbpl library) to compute optimized solutions. OMPL includes sampling based algorithms which will produce different solutions for every execution, but the space in which the motion plan is computed is easily changed. (see http://ompl.kavrakilab.org/planners.html for the different algorithms included in OMPL)

Originally posted by isucan with karma: 1055 on 2014-02-22
This answer was ACCEPTED on the original site
Post score: 3

