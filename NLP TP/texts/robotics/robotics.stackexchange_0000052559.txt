Q:

spin with threads

Hi. I'm having problems with spin and multiples subscriptions. I want to subscribe to two topic and going on with my program.
Something like:
X_callback(){something};
Y_callback(){something};

int main(){
thread(subscribe to topic X with callback X_callback)
thread(subscribe to topic Y_callback)
more things to do...
}

I don't know what to do with spin() if I've threads. I've used Multithread spin but doesn't work. Doing something like:
MultiThreadSping s(4);

X_callback(){s.spin()};
Y_callback(){s.spin()};

int main(){
some code
}

EDIT. This was my first idea:
void alivesCallback(const std_msgs::String::ConstPtr &msg){
    //control new connection
}

void temperatureCallback(const std_msgs::String::ConstPtr &msg){
    temperature = msg->data;
}

void subscriptionAliveTopic(){
    ros::NodeHandle n;
    ros::Subscriber sub = n.subscribe("alive", 1000, alivesCallback);
    ros::spin();
}

void subscriptionTemperatureTopic(){
    ros::NodeHandle n;
    ros::Subscriber sub = n.subscribe("temperature", 1000, temperatureCallback);
    ros::spin();
}

int main(){
    
    boos::thread t1(boost::bind(subscriptionAliveTopic));
    boos::thread t2(boost::bind(subscriptionTemperatureTopic));

    //more things to do
}

Originally posted by Verane on ROS Answers with karma: 25 on 2013-07-05
Post score: 0

Original comments
Comment by Bill Smart on 2013-07-05:
Can you clarify your question a bit?  Do you just want to subscribe to two topics? Is there a reason that you need threads, other than for the subscriptions?
Comment by Verane on 2013-07-05:
Each thread is the subscription and the spin. I'm using threads beacuse I'm trying not to block the main program.

A:

The easiest way to do what you're looking for is to call spinOnce in a loop.  This is non-blocking, and allows you to do other operations in "parallel" with the callback processing.  Note that this is not truly parallel, since this is a single-threaded model, but many applications are fine without truly multi-threaded operations.
See here for more discussion of various spinning methods.
Try something like this:
my_callback(){something};

int main(){
  sub = node.subscribe("topic", &my_callback);

  ros::Rate r(10); // 10 hz
  while (ros::ok())
  {
    do_callback_independent_processing();

    if (new_callback_data)
      do_callback_dependent_processing();

    ros::spinOnce();
    r.sleep();
  }
}

Edit:
If you don't like the idea of calling spinOnce in a loop, then probably the next-best choice is to use ASyncSpinner.  Trying to use multiple threads and multiple calls to ros::spin() is messy, and probably won't work.  ros::spin explicitly states that it is designed for single-threaded nodes only.

Originally posted by Jeremy Zoss with karma: 4976 on 2013-07-05
This answer was ACCEPTED on the original site
Post score: 2

