Q:

use moveit! computeCartesianPath to plan a circular path

Hi all,
Currently I need to plan a circular path for the robot arm so that it can turn a door handle.
I learned that we can use many points as waypoints to approximate the arc and use computeCartesianPath function to achieve that.
But if I changed the orientation of these waypoints along the arc, the fraction of computeCartesianPath is rather low. On the contrary, if I keep the orientation of these waypoints the same as the initial state, the fraction is relatively higher.
Does computeCartesianPath support the change of orientation?
a simple graphic of the scene:  let the robot hand (black block) turn the door handle (dash line). The robot hand (eef joint)  is free to rotate along its z axis (perpendicular to the plane). For each waypoint that has an ik solution in the left figure, the right one should also have an ik solution by adjusting this eef joint.

Thanks for any help!

Originally posted by xibeisiber on ROS Answers with karma: 137 on 2020-10-22
Post score: 2

A:

found the problem...the failure has nothing to do with the computeCartesianPath.
it is because the eef joint values of the initial state is about 3.14, when the eef moves down, the joint value becomes -3.14, leading to a large jump...
I adjust the joint limit to [-6.28, 6.28], it can plan and execute arc path now..

Originally posted by xibeisiber with karma: 137 on 2020-10-22
This answer was ACCEPTED on the original site
Post score: 2

