Q:

RGBDSLAM Installation Problems

I've been trying to install RGBDSLAM on Ubuntu 12 with ROS Fuerte. I know this is not currently supported, but the only error  I have is that g2o seems to depend on eigen which is in the release (as eigen3) and is on my system, but I can't seem to get it to overcome this dependency.
Has anyone had any success with this install. Now trying with Ubuntu 11.10 and ROS electric. Still going on that one!

For starters,
rosmake --rosdep-install rgbdslam

doesn't work. However if you run
rosmake rgbdslam

I get:
[ rosmake ] rosmake starting...                                                 
[ rosmake ] Packages requested are: ['rgbdslam']                                
[ rosmake ] Logging to directory /home/ben/.ros/rosmake/rosmake_output-20120521-184019
[ rosmake ] Expanded args ['rgbdslam'] to:
['rgbdslam']                         
[rosmake-0] Starting >>> bullet [ make ]                                        
[rosmake-1] Starting >>> geometry_msgs [ make ]                                 
[rosmake-2] Starting >>> roslang [ make ]                                       
[rosmake-3] Starting >>> rosconsole [ make ]                                    
[rosmake-0] Finished <<< bullet ROS_NOBUILD in package bullet                   
[rosmake-2] Finished <<< roslang ROS_NOBUILD in package roslang
 No Makefile in package roslang
[rosmake-0] Starting >>> angles [ make ]                                        
[rosmake-2] Starting >>> roscpp [ make ]                                        
[rosmake-1] Finished <<< geometry_msgs ROS_NOBUILD in package geometry_msgs
 No Makefile in package geometry_msgs
[rosmake-1] Starting >>> sensor_msgs [ make ]                                   
[rosmake-3] Finished <<< rosconsole ROS_NOBUILD in package rosconsole
 No Makefile in package rosconsole
[rosmake-0] Finished <<< angles ROS_NOBUILD in package angles                   
[rosmake-2] Finished <<< roscpp ROS_NOBUILD in package roscpp
 No Makefile in package roscpp
[rosmake-0] Starting >>> rospy [ make ]                                         
[rosmake-2] Starting >>> roswtf [ make ]                                        
[rosmake-3] Starting >>> rostest [ make ]                                       
[rosmake-1] Finished <<< sensor_msgs ROS_NOBUILD in package sensor_msgs
 No Makefile in package sensor_msgs
[rosmake-0] Finished <<< rospy ROS_NOBUILD in package rospy
 No Makefile in package rospy
[rosmake-1] Starting >>> message_filters [ make ]                               
[rosmake-0] Starting >>> g2o [ make ]                                           
[rosmake-3] Finished <<< rostest ROS_NOBUILD in package rostest
 No Makefile in package rostest
[rosmake-2] Finished <<< roswtf ROS_NOBUILD in package roswtf
 No Makefile in package roswtf
[rosmake-2] Starting >>> std_msgs [ make ]                                      
[rosmake-1] Finished <<< message_filters ROS_NOBUILD in package message_filters
 No Makefile in package message_filters
[rosmake-3] Starting >>> rosbag [ make ]                                        
[rosmake-1] Starting >>> tf [ make ]                                            
[rosmake-3] Finished <<< rosbag ROS_NOBUILD in package rosbag
 No Makefile in package rosbag
[rosmake-2] Finished <<< std_msgs ROS_NOBUILD in package std_msgs
 No Makefile in package std_msgs
[rosmake-2] Starting >>> pcl [ make ]                                           
[rosmake-3] Starting >>> rosbuild [ make ]                                      
[rosmake-3] Finished <<< rosbuild ROS_NOBUILD in package rosbuild
 No Makefile in package rosbuild
[rosmake-3] Starting >>> roslib [ make ]                                        
[rosmake-3] Finished <<< roslib ROS_NOBUILD in package roslib
 No Makefile in package roslib
[rosmake-3] Starting >>> pluginlib [ make ]                                     
[rosmake-3] Finished <<< pluginlib ROS_NOBUILD in package pluginlib             
[rosmake-3] Starting >>> bond [ make ]                                          
[rosmake-1] Finished <<< tf ROS_NOBUILD in package tf                           
[rosmake-2] Finished <<< pcl ROS_NOBUILD in package pcl
 No Makefile in package pcl
[rosmake-1] Starting >>> smclib [ make ]                                        
[rosmake-3] Finished <<< bond ROS_NOBUILD in package bond                       
[rosmake-2] Starting >>> rosservice [ make ]                                    
[rosmake-3] Starting >>> common_rosdeps [ make ]                                
[rosmake-2] Finished <<< rosservice ROS_NOBUILD in package rosservice
 No Makefile in package rosservice
[rosmake-1] Finished <<< smclib ROS_NOBUILD in package smclib                   
[rosmake-1] Starting >>> bondcpp [ make ]                                       
[rosmake-3] Finished <<< common_rosdeps ROS_NOBUILD in package common_rosdeps   
[rosmake-2] Starting >>> dynamic_reconfigure [ make ]                           
[rosmake-3] Starting >>> opencv2 [ make ]                                       
[rosmake-2] Finished <<< dynamic_reconfigure ROS_NOBUILD in package dynamic_reconfigure
[rosmake-2] Starting >>> visualization_msgs [ make ]                            
[rosmake-2] Finished <<< visualization_msgs ROS_NOBUILD in package visualization_msgs
 No Makefile in package visualization_msgs
[rosmake-3] Finished <<< opencv2 ROS_NOBUILD in package opencv2                 
[rosmake-2] Starting >>> rgbdslam [ make ]                                      
[rosmake-1] Finished <<< bondcpp ROS_NOBUILD in package bondcpp                 
[rosmake-3] Starting >>> cv_bridge [ make ]                                     
[rosmake-1] Starting >>> nodelet [ make ]                                       
[rosmake-1] Finished <<< nodelet ROS_NOBUILD in package nodelet                 
[rosmake-3] Finished <<< cv_bridge ROS_NOBUILD in package cv_bridge             
[rosmake-1] Starting >>> nodelet_topic_tools [ make ]                           
[rosmake-1] Finished <<< nodelet_topic_tools ROS_NOBUILD in package nodelet_topic_tools
[rosmake-1] Starting >>> pcl_ros [ make ]                                       
[rosmake-1] Finished <<< pcl_ros ROS_NOBUILD in package pcl_ros                 
[rosmake-0] Finished <<< g2o [PASS] [ 0.09 seconds ]                            
[ rosmake ] All 21 linesgbdslam: 0.3 sec ]           [ 1 Active 31/32 Complete ]
{-------------------------------------------------------------------------------
  mkdir -p bin
  cd build && cmake -Wdev -DCMAKE_TOOLCHAIN_FILE=`rospack find rosbuild`/rostoolchain.cmake  ..
  [rosbuild] Building package rgbdslam
  Failed to invoke /opt/ros/fuerte/bin/rospack deps-manifests rgbdslam
  [rospack] Error: package/stack g2o depends on non-existent package eigen
  
  
  CMake Error at /opt/ros/fuerte/share/ros/core/rosbuild/public.cmake:129 (message):
    
  
    Failed to invoke rospack to get compile flags for package 'rgbdslam'.  Look
    above for errors from rospack itself.  Aborting.  Please fix the broken
    dependency!
  
  Call Stack (most recent call first):
    /opt/ros/fuerte/share/ros/core/rosbuild/public.cmake:203 (rosbuild_invoke_rospack)
    CMakeLists.txt:35 (rosbuild_init)
  
  
  -- Configuring incomplete, errors occurred!
-------------------------------------------------------------------------------}
[ rosmake ] Output from build of package rgbdslam written to:
[ rosmake ]    /home/ben/.ros/rosmake/rosmake_output-20120521-184019/rgbdslam/build_output.log
[rosmake-2] Finished <<< rgbdslam [FAIL] [ 0.37 seconds ]                       
[ rosmake ] Halting due to failure in package rgbdslam. 
[ rosmake ] Waiting for other threads to complete.
[ rosmake ] Results:                                                            
[ rosmake ] Built 32 packages with 1 failures.                                  
[ rosmake ] Summary output to directory                                         
[ rosmake ] /home/ben/.ros/rosmake/rosmake_output-20120521-184019 

The main error seems to be that g2o can't find eigen
 [rospack] Error: package/stack g2o depends on non-existent package eigen

My Cmake file for rgbdslam is
#########################################################
### CONFIG ##############################################
#########################################################
# 1, if SiftGPU should be used. For additional information
# see README
set(USE_SIFT_GPU        1)
set(ENV{SIFT_GPU_MODE}      2) #CUDA = 1, GLSL = 2
set(ENV{SIFT_GPU_CUDA_PATH} /usr/local/cuda)    
    
set(USE_GICP_BIN        0)
set(USE_GICP_CODE       1)
#########################################################
#########################################################
#########################################################

cmake_minimum_required(VERSION 2.4.6)
include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)

# Set the build type.  Options are:
#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage
#  Debug          : w/ debug symbols, w/o optimization
#  Release        : w/o debug symbols, w/ optimization
#  RelWithDebInfo : w/ debug symbols, w/ optimization
#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries
set(ROS_BUILD_TYPE Release)
set(CMAKE_CXX_FLAGS "-O3")
add_definitions(-DROSCONSOLE_SEVERITY_INFO)
#is used for compiling the libraries 
set(USE_GICP 0)
IF (${USE_GICP_BIN} OR ${USE_GICP_CODE})
    set(USE_GICP 1)
ENDIF (${USE_GICP_BIN} OR ${USE_GICP_CODE})

rosbuild_init()

#set the default path for built executables to the "bin" directory
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
#set the default path for built libraries to the "lib" directory
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

#uncomment if you have defined messages
#rosbuild_genmsg()
#uncomment if you have defined services
rosbuild_gensrv()
#common commands for building c++ executables and libraries
#rosbuild_add_library(${PROJECT_NAME} src/example.cpp)
#target_link_libraries(${PROJECT_NAME} another_library) 
#rosbuild_add_boost_directories()
#rosbuild_link_boost(${PROJECT_NAME} thread)
#rosbuild_add_executable(example examples/example.cpp)

##############################################################################
# Required 3rd party
##############################################################################

#############################
# Qt ########################
#############################
# http://qtnode.net/wiki/Qt4_with_cmake
find_package(Qt4 REQUIRED)
SET(QT_USE_QTXML TRUE)
SET(QT_USE_QTOPENGL TRUE)
ADD_DEFINITIONS(-DQT_NO_KEYWORDS)
include(${QT_USE_FILE})

# This is necessary as all ui files etc will get dumped in the bottom of then binary directory. 
include_directories(${CMAKE_CURRENT_BINARY_DIR} ${QT_QTOPENGL_INCLUDE_DIR} external/gicp/ann_1.1.2/include/ANN)

#get_directory_property(clean ADDITIONAL_MAKE_CLEAN_FILES)
#SET(clean external/siftgpu/linux/bin/libsiftgpu.so)
#set_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES "${clean}")
    
LINK_DIRECTORIES(${LIBRARY_OUTPUT_PATH})
SET(${CMAKE_LIBRARY_PATH} ${LIBRARY_OUTPUT_PATH})
#SET(CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE TRUE)

#############################
# SiftGPU ###################
#############################
IF (${USE_SIFT_GPU})
    SET(sift_gpu_build_path ${CMAKE_SOURCE_DIR}/external/siftgpu/linux)

    include_directories(${CMAKE_CURRENT_BINARY_DIR} external/siftgpu/src)
    
    MESSAGE("\n------------------------------------------------------------------\n")
    MESSAGE("Compiling SiftGPU...")
    EXECUTE_PROCESS(
        COMMAND make siftgpu
        WORKING_DIRECTORY ${sift_gpu_build_path}
        RESULT_VARIABLE sift_gpu_return
    )
    MESSAGE("\n------------------------------------------------------------------\n")
    
    #on error
    IF (NOT ${sift_gpu_return} EQUAL 0)
        MESSAGE(FATAL_ERROR "SiftGPU cannot be compiled. Returned: ${sift_gpu_return}")
    ENDIF (NOT ${sift_gpu_return} EQUAL 0)
    
    FILE(COPY external/siftgpu/linux/bin/libsiftgpu.so DESTINATION ../lib/)
    
    add_definitions(-DUSE_SIFT_GPU)
    add_definitions(-DSIFT_GPU_MODE=$ENV{SIFT_GPU_MODE})
ENDIF (${USE_SIFT_GPU})

#############################
# GICP ######################
#############################
IF (${USE_GICP})
    SET(gicp_build_path ${CMAKE_SOURCE_DIR}/external/gicp/ann_1.1.2)
  FILE(MAKE_DIRECTORY ${gicp_build_path}/lib/)
  MESSAGE("\n------------------------------------------------------------------\n")
    MESSAGE("Compiling GICP...")
    EXECUTE_PROCESS(
        COMMAND make linux-g++
        WORKING_DIRECTORY ${gicp_build_path}
        RESULT_VARIABLE gicp_return
    )
    MESSAGE("\n------------------------------------------------------------------\n")
    
    #on error
    IF (NOT ${gicp_return} EQUAL 0)
        MESSAGE(FATAL_ERROR "GICP cannot be compiled. Returned: ${gicp_return}")
    ENDIF (NOT ${gicp_return} EQUAL 0)
    
    FILE(COPY ${gicp_build_path}/lib/libANN.a DESTINATION ${CMAKE_SOURCE_DIR}/lib/)
ENDIF (${USE_GICP})

IF (${USE_GICP_BIN})
    add_definitions(-DUSE_ICP_BIN)
ENDIF (${USE_GICP_BIN})

IF (${USE_GICP_CODE})
    add_definitions(-DUSE_ICP_CODE) 
ENDIF (${USE_GICP_CODE})

#############################
# OpenCV ####################
#############################
find_package(OpenCV)
include_directories(${OpenCV_INCLUDE_DIRS} external/)

##############################################################################
# Sections
##############################################################################

file(GLOB QT_FORMS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ui/*.ui)
file(GLOB QT_RESOURCES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} resources/*.qrc)
file(GLOB_RECURSE QT_MOC RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} FOLLOW_SYMLINKS include/local/*.hpp src/qtros.h src/openni_listener.h src/qt_gui.h src/graph_manager.h src/glviewer.h src/ros_service_ui.h)

QT4_ADD_RESOURCES(QT_RESOURCES_CPP ${QT_RESOURCES})
QT4_WRAP_UI(QT_FORMS_HPP ${QT_FORMS})
QT4_WRAP_CPP(QT_MOC_HPP ${QT_MOC})  

##############################################################################
# Sources
##############################################################################
SET(ADDITIONAL_SOURCES src/gicp-fallback.cpp src/main.cpp src/qtros.cpp  src/openni_listener.cpp src/qt_gui.cpp src/flow.cpp src/node.cpp src/graph_manager.cpp src/glviewer.cpp src/parameter_server.cpp src/ros_service_ui.cpp src/misc.cpp)

IF (${USE_SIFT_GPU})
    SET(ADDITIONAL_SOURCES ${ADDITIONAL_SOURCES} src/sift_gpu_wrapper.cpp)
ENDIF (${USE_SIFT_GPU})

file(GLOB_RECURSE QT_SOURCES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} FOLLOW_SYMLINKS ${ADDITIONAL_SOURCES})

##############################################################################
# Binaries
##############################################################################
rosbuild_add_executable(rgbdslam ${QT_SOURCES} ${QT_RESOURCES_CPP} ${QT_FORMS_HPP} ${QT_MOC_HPP})

#set libs
SET(G2O_LIBS cholmod g2o_core g2o_stuff g2o_types_slam3d g2o_solver_cholmod g2o_solver_pcg g2o_solver_csparse cxsparse g2o_incremental)
SET(LIBS_LINK rgbdslam GL GLU cholmod g2o_cli g2o_core g2o_incremental g2o_interactive g2o_interface g2o_math_groups g2o_parser g2o_solver_cholmod g2o_solver_csparse g2o_solver_dense g2o_solver_pcg g2o_stuff g2o_types_icp g2o_types_sba g2o_types_sim3 g2o_types_slam2d g2o_types_slam3d ${QT_LIBRARIES} ${QT_QTOPENGL_LIBRARY} ${GLUT_LIBRARY} ${OPENGL_LIBRARY} ${OpenCV_LIBS})

IF (${USE_SIFT_GPU})
    SET(LIBS_LINK ${LIBS_LINK} siftgpu)
ENDIF (${USE_SIFT_GPU})

IF (${USE_GICP})
    SET(LIBS_LINK ${LIBS_LINK} gicp ANN gsl gslcblas)
ENDIF (${USE_GICP})
#link libraries
target_link_libraries(rgbdslam ${LIBS_LINK})

 
IF (${USE_GICP})
  set(ROS_COMPILE_FLAGS ${ROS_COMPILE_FLAGS} -fpermissive)
  rosbuild_add_library(gicp external/gicp/bfgs_funcs.cpp external/gicp/gicp.cpp external/gicp/optimize.cpp external/gicp/scan.cpp external/gicp/transform.cpp)
ENDIF (${USE_GICP})

I've also tried fixing eigen references according to this link. But then I could be doing this wrong.
Would appreciate some help!

Originally posted by balunjones on ROS Answers with karma: 1 on 2012-05-21
Post score: 0

Original comments
Comment by dornhege on 2012-05-21:
Please post exact details of when you get a problem, e.g. errors. I would suspect that you only need to include the proper cmake macros to find eigen.
Comment by dornhege on 2012-05-21:
Although it's still no guarantee that there won't be more problems. Have you tried 2.1.1 and 2.1.2 in the g2o package?
Comment by balunjones on 2012-05-21:
How do you find those packages?

A:

Try this.
CMakeLists.txt should have the following lines in this place just above the rosbuild_genmsg().
#Eigen required    
find_package(Eigen REQUIRED)
include_directories(${EIGEN_INCLUDE_DIRS})

If Eigen is installed in the system this should work.
Hope it helps, Karthik

Originally posted by karthik with karma: 2831 on 2012-05-21
This answer was ACCEPTED on the original site
Post score: 0

