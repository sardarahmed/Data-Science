Q:

change sbpl_lattice_planner preference to reverse motion?

Sbpl_lattice_planner's default for navigation seems to be to move forward with minimal reverse movements. It seems to choose inefficient routes in order to move forward rather than in reverse. For example, sometimes it will turn around prior to running a forward route rather than taking a simpler reverse route. 
1-Is this true?
2-Is there any functionality in sbpl_lattice_planner to make the default to be to prefer moving in reverse with minimal forward motion?  
The robot has Ackermann-like steering and it needs to move predominately in the reverse direction. We could switch the forward direction to reverse however there are times where    forward motion is needed.

Originally posted by bk on ROS Answers with karma: 25 on 2014-01-21
Post score: 2

Original comments
Comment by ahendrix on 2014-01-21:
Out of curiosity, which local planner are you using for your robot?
Comment by bk on 2014-01-21:
We created a custom local planner
Comment by ahendrix on 2014-01-21:
Is the source available somewhere? There's a distinct lack of good local planners for ackermann-style vehicles.
Comment by orion on 2014-01-21:
I will second this.  I will confirm the solution below works, as I have made primitives for ackermann for SBPL.  I am working on making my own local planner, but would be up for working with some people on it.  Have even been looking at converting "carlike planner" or seeing how hector is doing it.
Comment by bk on 2014-01-22:
The local planner is in a very preliminary stage. It does not adhere to the nav_core::BaseLocalPlanner interface, does not use cmd_vel nor the ackermann steering message types, and will unfortunately not be universally helpful in other ways. I will let you know if something changes

A:

Yes. Most of the default primitives prefer forward motion.
Absolutely. You'll need to write your own motion primitives that don't have a penalty on reverse motion. The stock motion primitives are generated by matlab code in the sbpl/matlab/mprim directory. The primitive generation is fairly well documented, so it shouldn't be too hard to modify.

@ben points out that there is a tutorial on editing SBPL motion primitives: http://sbpl.net/node/52

Originally posted by ahendrix with karma: 47576 on 2014-01-21
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by bk on 2014-01-21:
That makes sense. I will validate this tomorrow. Thanks!
Comment by ben on 2014-01-21:
Within the last 6 months, we posted more tutorials on the sbpl website that you might find useful. Here's a really good one written by Victor Hwang - with really good pictures. It describes how to generate motion prims: http://sbpl.net/node/52
Comment by bk on 2014-01-22:
Thanks for the tutorials. They have been very helpful!
Comment by bk on 2014-01-22:
Thanks ahendrix for the solution!

