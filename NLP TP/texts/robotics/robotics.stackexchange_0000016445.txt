Q:

Path Planning code

I posted a question regarding robot path planning here now the question is mainly about the code and logic but still I shortly explain the initial situation.
So I tried to change the code so that the program is gonna work for my problem. My goal is to get my robot which is an Arlo robot to reach predefined points with the help of a beacon(A) and the plt 300 which is following the beacon with a laser. So that the beacon is right above the predefined point.

I decided to use the mathematical convention. So in the picture the coordinates of the point A would be:
A_x = M_x + cos(θ + 24)*r
A_y = M_y + sin(θ + 24)*r
Now I just want to know if the code would theoratically work or not.
Edit
I declared missing variables, fixed the float to binary operator error. Changed the code like Chuck suggested, changed destinationHeading not sure if it right.
//Here is the code
  #include <ArloRobot.h>
  #include <NewPing.h>
  #include <Servo.h>

 // Arlo and serial objects required
 ArloRobot Arlo;                               // Arlo object
 SoftwareSerial ArloSerial(12, 13);            // Serial in I/O 12, out I/O 13

 int countsLeft, countsRight;                  // Encoder counting variables

 //current points
 float xc = -300;
 float yc = 300;

 //target points

 float xt = -300;
 float yt = -300;

 //turning  angle
 float turnAngle;

 float startingHeading = 0;
 float beaconHeading = 24;
 float destinationHeading = 0;
 float effectiveHeading = startingHeading + beaconHeading;
 float currentHeading = startingHeading;
 float r = 12;

 float xm = 0;
 float ym = 0; 

 float xn = 0;
 float yn = 0;

 float turnRight = 1;
 float turnLeft = -1;
 float wheelBase = 39.5;
 float tireRadius = 7;
 float speedModifier = 0;
 float vRightMotor = 0;
 float vLeftMotor = 0;
 float vMotor = 0;
 float theta = 0;
 float thetaDot = 0;
 float dT = 0.00104;
 float distance = 0;

 void setup() {
 // pin setup
 Serial.begin(9600);
 ArloSerial.begin(19200);                    // Start DHB-10 serial com
 Arlo.begin(ArloSerial);                     // Pass to Arlo object
 Arlo.clearCounts();                         // Clear encoder counts
 }

 void loop() {
 xm = xc - (cos(startingHeading + beaconHeading) * r);
 ym = yc - (sin(startingHeading + beaconHeading) * r); 

 xn = xt - (cos(startingHeading + beaconHeading) * r);
 yn = yt - (sin(startingHeading + beaconHeading) * r);
 destinationHeading = atan2((yn - ym), (xn - xm))- startingHeading; 
 //calculate turning angle
 destinationHeading = destinationHeading * 180 / 3.1415; //convert to degrees
 turnAngle = destinationHeading - currentHeading;

 if (turnAngle > 180)
 {
 turnAngle = turnAngle - 360;
 }

 if (turnAngle < -180)
 {
 turnAngle = turnAngle + 360;
 }

 if (turnAngle < 0)
 {
 speedModifier = turnRight;
 }

 if (turnAngle > 0)
 {
 speedModifier = turnLeft;
 }

 theta = 0;
 while(abs(abs(theta) - abs(turnAngle)) > 0)
 {

 vRightMotor = speedModifier * 50;
 vLeftMotor = -speedModifier * 50;
 vMotor = vRightMotor;
 thetaDot = (tireRadius * vMotor) / (wheelBase / 2); 
 theta = theta + thetaDot * dT;
 }

 currentHeading = destinationHeading;
 distance = sqrt(((xn - xm)* (xn - xm)) + ((yn - ym) * ( yn-ym)));
 if (distance > 0)
 {
 Arlo.writeSpeeds(72, 72);                 // Go forward 72 counts/sec
 }
 xm = xn;
 ym = yn;

 }    

The main code is from the answer of this question here 

A:

I think your problem revolves around the line:
float currentHeading = startingHeading + beaconHeading;

The beacon heading has nothing to do with the current heading of the robot. Instead, your current heading should just be initialized to the starting heading:
float currentHeading = startingHeading;

The only time that the beacon heading comes into play is when you update your robot's position by taking a measurement of the beacon. 
I don't see a beacon/position update section anywhere in your code, so right now it looks like the whole thing is running open loop. If that's the case, then you don't need the beacon angle offset anywhere. 
If you do decide to incorporate a beacon position measurement somewhere in your code, then you would update your heading with the code I provided at the end of the other question:
$$
M_x = A_x - \sin{(\theta_{\mbox{heading}} + \theta_{\mbox{beacon offset}})}*r \\
M_y = A_y - \cos{(\theta_{\mbox{heading}} + \theta_{\mbox{beacon offset}})}*r \\
$$
But again, this requires you to measure $<A_x, A_y>$. If you don't measure the beacon, you can omit the beacon offset angle altogether.
:EDIT:
If you want to put the beacon on the target, consider the following graphic:

The robot faces in some direction and there's a target. In order to get the beacon on the target, you would want to end up like this:

That is, you want the robot to drive not quite the direct heading to the target. You want to modify the "target" heading by some amount in order to be able to end with the beacon on the target. 

So, how much do you need to adjust your robot center $M$ to target heading in order to achieve the beacon $A$ to target heading? That depends on how far away the robot center is right now ($r$, the red line) and how far away the beacon is from the robot center ($dy$, in blue, and $dx$, in light orange.)

So now, if your heading is described as an angle that increases positive CCW from the +x-axis, you can calculate the naive heading (red) as $atan2(\mbox{target}_y - M_y, \mbox{target}_x - M_x)$, and then you can see that the heading offset to get the beacon at the target is $asin(dy/r)$. 
Finally, the new distance you need to travel, $dS$, then length of the orange line, is $cos(\theta_{\mbox{heading offset}})*|r| - dx$. The length of $r$, $|r|$, is found with the Pythagorean Theorem $\sqrt{\left(\mbox{target}_x - M_x \right)^2 + \left(\mbox{target}_y - M_y \right)^2}$.

