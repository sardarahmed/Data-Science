Q:

Unable to subscribe to pcl::PointCloud

I am trying to subscribe to point cloud data consists of 3D position and color values (XYZRGB). However, I need to get the point cloud data as Eigen matrix, so I am trying to use the following formulation of point cloud pcl::PointCloudEigen::MatrixXf
Below is the sample code-
#include <ros/ros.h>
#include <pcl/point_types.h>
#include <pcl_ros/point_cloud.h>

typedef pcl::PointCloud<Eigen::MatrixXf> PointCloud;

void callback(const PointCloud::ConstPtr& msg)
{
  printf ("Cloud: width = %d, height = %d\n", msg->width, msg->height);
}

int main(int argc, char** argv)
{
  ros::init(argc, argv, "sub_pcl");
  ros::NodeHandle nh;
  ros::Subscriber sub = nh.subscribe<PointCloud>("points2", 1, callback);
  ros::spin();
}

The above code throws many errors at compile time. Please see below-
In file included from /usr/include/pcl-1.7/pcl/register_point_struct.h:55:0,
                 from /usr/include/pcl-1.7/pcl/point_types.h:44,
                 from /home/ravi/ros_ws/src/my_project/src/test.cpp:2:
/usr/include/pcl-1.7/pcl/point_traits.h: In instantiation of ‘struct pcl::traits::fieldList<Eigen::Matrix<float, -1, -1> >’:
/usr/include/pcl-1.7/pcl/conversions.h:127:70:   required from ‘void pcl::createMapping(const std::vector<pcl::PCLPointField>&, pcl::MsgFieldMap&) [with PointT = Eigen::Matrix<float, -1, -1>; pcl::MsgFieldMap = std::vector<pcl::detail::FieldMapping>]’
/opt/ros/indigo/include/pcl_conversions/pcl_conversions.h:569:59:   required from ‘void pcl::createMapping(const std::vector<sensor_msgs::PointField_<std::allocator<void> > >&, pcl::MsgFieldMap&) [with PointT = Eigen::Matrix<float, -1, -1>; pcl::MsgFieldMap = std::vector<pcl::detail::FieldMapping>]’
/opt/ros/indigo/include/pcl_ros/point_cloud.h:234:49:   required from ‘static void ros::serialization::Serializer<pcl::PointCloud<PointT> >::read(Stream&, pcl::PointCloud<PointT>&) [with Stream = ros::serialization::IStream; T = Eigen::Matrix<float, -1, -1>]’
/opt/ros/indigo/include/ros/serialization.h:163:32:   required from ‘void ros::serialization::deserialize(Stream&, T&) [with T = pcl::PointCloud<Eigen::Matrix<float, -1, -1> >; Stream = ros::serialization::IStream]’
/opt/ros/indigo/include/ros/subscription_callback_helper.h:136:34:   required from ‘ros::VoidConstPtr ros::SubscriptionCallbackHelperT<P, Enabled>::deserialize(const ros::SubscriptionCallbackHelperDeserializeParams&) [with P = const boost::shared_ptr<const pcl::PointCloud<Eigen::Matrix<float, -1, -1> > >&; Enabled = void; ros::VoidConstPtr = boost::shared_ptr<const void>]’
/home/ravi/ros_ws/src/my_project/src/test.cpp:18:1:   required from here
/usr/include/pcl-1.7/pcl/point_traits.h:152:12: error: invalid use of incomplete type ‘struct pcl::traits::fieldList<Eigen::Matrix<float, -1, -1> >’
     struct fieldList : fieldList<typename POD<PointT>::type>
            ^
/usr/include/pcl-1.7/pcl/point_traits.h:152:12: error: declaration of ‘struct pcl::traits::fieldList<Eigen::Matrix<float, -1, -1> >’
In file included from /usr/include/boost/mpl/aux_/na_assert.hpp:23:0,
                 from /usr/include/boost/mpl/arg.hpp:25,
                 from /usr/include/boost/mpl/placeholders.hpp:24,
                 from /usr/include/boost/mpl/apply.hpp:24,
                 from /usr/include/boost/mpl/aux_/iter_apply.hpp:17,
                 from /usr/include/boost/mpl/aux_/find_if_pred.hpp:14,
                 from /usr/include/boost/mpl/find_if.hpp:17,
                 from /usr/include/boost/mpl/find.hpp:17,
                 from /usr/include/boost/mpl/aux_/contains_impl.hpp:20,
                 from /usr/include/boost/mpl/contains.hpp:20,
                 from /usr/include/boost/math/policies/policy.hpp:10,
                 from /usr/include/boost/math/policies/error_handling.hpp:19,
                 from /usr/include/boost/math/special_functions/round.hpp:14,
                 from /opt/ros/indigo/include/ros/time.h:58,
                 from /opt/ros/indigo/include/ros/ros.h:38,
                 from /home/ravi/ros_ws/src/my_project/src/test.cpp:1:
/usr/include/pcl-1.7/pcl/point_traits.h:158:7: error: no matching function for call to ‘assertion_failed(mpl_::failed************ (pcl::traits::fieldList<Eigen::Matrix<float, -1, -1> >::POINT_TYPE_NOT_PROPERLY_REGISTERED::************)(Eigen::Matrix<float, -1, -1>&))’
       BOOST_MPL_ASSERT_MSG((!boost::is_same<PointT, typename POD<PointT>::type>::value),
       ^
/usr/include/pcl-1.7/pcl/point_traits.h:158:7: note: candidate is:
/usr/include/boost/mpl/assert.hpp:82:5: note: template<bool C> int mpl_::assertion_failed(typename mpl_::assert<C>::type)
 int assertion_failed( typename assert<C>::type );
     ^
/usr/include/boost/mpl/assert.hpp:82:5: note:   template argument deduction/substitution failed:
/usr/include/pcl-1.7/pcl/point_traits.h:158:7: note:   cannot convert ‘pcl::traits::fieldList<PointT>::POINT_TYPE_NOT_PROPERLY_REGISTERED159::assert_arg<Eigen::Matrix<float, -1, -1> >()’ (type ‘mpl_::failed************ (pcl::traits::fieldList<Eigen::Matrix<float, -1, -1> >::POINT_TYPE_NOT_PROPERLY_REGISTERED::************)(Eigen::Matrix<float, -1, -1>&)’) to type ‘mpl_::assert<false>::type {aka mpl_::assert<false>}’
       BOOST_MPL_ASSERT_MSG((!boost::is_same<PointT, typename POD<PointT>::type>::value),
       ^
In file included from /opt/ros/indigo/include/pcl_ros/point_cloud.h:8:0,
                 from /home/ravi/ros_ws/src/my_project/src/test.cpp:3:
/usr/include/pcl-1.7/pcl/conversions.h: In instantiation of ‘void pcl::createMapping(const std::vector<pcl::PCLPointField>&, pcl::MsgFieldMap&) [with PointT = Eigen::Matrix<float, -1, -1>; pcl::MsgFieldMap = std::vector<pcl::detail::FieldMapping>]’:
/opt/ros/indigo/include/pcl_conversions/pcl_conversions.h:569:59:   required from ‘void pcl::createMapping(const std::vector<sensor_msgs::PointField_<std::allocator<void> > >&, pcl::MsgFieldMap&) [with PointT = Eigen::Matrix<float, -1, -1>; pcl::MsgFieldMap = std::vector<pcl::detail::FieldMapping>]’
/opt/ros/indigo/include/pcl_ros/point_cloud.h:234:49:   required from ‘static void ros::serialization::Serializer<pcl::PointCloud<PointT> >::read(Stream&, pcl::PointCloud<PointT>&) [with Stream = ros::serialization::IStream; T = Eigen::Matrix<float, -1, -1>]’
/opt/ros/indigo/include/ros/serialization.h:163:32:   required from ‘void ros::serialization::deserialize(Stream&, T&) [with T = pcl::PointCloud<Eigen::Matrix<float, -1, -1> >; Stream = ros::serialization::IStream]’
/opt/ros/indigo/include/ros/subscription_callback_helper.h:136:34:   required from ‘ros::VoidConstPtr ros::SubscriptionCallbackHelperT<P, Enabled>::deserialize(const ros::SubscriptionCallbackHelperDeserializeParams&) [with P = const boost::shared_ptr<const pcl::PointCloud<Eigen::Matrix<float, -1, -1> > >&; Enabled = void; ros::VoidConstPtr = boost::shared_ptr<const void>]’
/home/ravi/ros_ws/src/my_project/src/test.cpp:18:1:   required from here
/usr/include/pcl-1.7/pcl/conversions.h:127:70: error: no type named ‘type’ in ‘struct pcl::traits::fieldList<Eigen::Matrix<float, -1, -1> >’
     for_each_type< typename traits::fieldList<PointT>::type > (mapper);
                                                                      ^
make[2]: *** [my_project/CMakeFiles/testt.dir/src/test.cpp.o] Error 1
make[1]: *** [my_project/CMakeFiles/testt.dir/all] Error 2
make: *** [all] Error 2
Invoking "make -j8 -l8" failed

I am using ROS Indigo on Ubuntu 14.04 LTS PC. Any workaround, please?

Originally posted by ravijoshi on ROS Answers with karma: 1744 on 2018-05-12
Post score: 0

A:

You somehow expect the subscriber to magically guess how to transform a pcl::PointXYZRGB to an Eigen::MatrixXf. There is no obvious conversion from a colored point to a Matrix. (And even it there was some, publishers and subscribers and not meant for data conversion).
You have to subscribe with the correct datatype (namely what was published) and then afterwards you can run your custom conversion.

Originally posted by NEngelhard with karma: 3519 on 2018-05-12
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by ravijoshi on 2018-05-12:
Thanks a lot. I was just wondering if I have missed some portion of the documentation!

