Q:

Using Publishers and Subscribers in Python for ROS with TurtleBot

I've been exploring ROS with Python and TurtleBot recently, and I'm currently working on a project that involves utilizing both publishers and subscribers within the same Python file. I've managed to independently use publishers and subscribers in separate files, but I'm facing challenges integrating them into a single script...what I'm attempting to achieve:
Sending out the Goods: Got this publisher shooting out sensor data from my trusty TurtleBot.
Receiving the Goods: Simultaneously, I've got this subscriber eagerly waiting for control commands for my TurtleBot's fancy moves.
The issue arises when I try to combine these functionalities into one Python script. I'd greatly appreciate any insights, code examples, or suggestions on how to effectively structure and manage publishers and subscribers within the same Python script for ROS with TurtleBot. Are there specific ROS functionalities or Python libraries that might streamline this integration process?
Any advice, guidance, or examples that demonstrate the integration of publishers and subscribers within the same Python script in a ROS environment using TurtleBot would be incredibly helpful. Thank you in advance for your support!

A:

it is possible to use a single Python file as both a subscriber and a publisher, lets your sensor return feedback to you in radians and if you would like to convert that data to degrees, then you would use both a publisher and a subscriber. Here is an example code:
import rclpy
import math
from rclpy.node import Node
from std_msgs.msg import Float32

class MyNode(Node):
    def __init__(self):
        super().__init__('my_node')
        self.subscription = self.create_subscription(Float32, 'input_topic', self.listener_callback, 10)
        self.publisher = self.create_publisher(Float32, 'output_topic', 10)

    def listener_callback(self, msg):
        radians = msg.data
        degrees = radians * 180 / math.pi
        self.publisher.publish(Float32(data=degrees))

def main(args=None):
    rclpy.init(args=args)
    node = MyNode()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()

Remember to add changes to the setup.py file. I wish you all the best.

