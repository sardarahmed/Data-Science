Q:

How to cut throttle signal to ESC properly?

I have a 16 Channel Servo Driver board from Adafruit (see here), and I communicate to it via I2C using a Raspberry Pi. The servo board is controlling a Qbrain by sending a PWM pulse between 1ms to 2ms and it works great.
Problem is, I'm trying to create a kill switch such that the signal from the servo board would cease, and the ESC would stop because it detects no PWM signal. I have placed a toggle switch that cuts the VCC to the servo board, so technically it should no longer produce any PWM signal, however when the power is cut, the ESC jumps to 100% throttle, I can only assume this is because the ESC believes the signal is 100% duty cycle, but how do I solve this?

A:

The problem you have is that you're not sending any PWM signal, so the ESC is behaving erratically. You could try to do code to correct for this, but you could have any number of issues. 
What I do any time I need to implement a kill switch like this is to use a power relay. You can drive the relay coil from the microcontroller with a transistor as depicted in my crude schematic below. 
In this circuit, you have a power switch to turn on the microcontroller board, but then you have to also send HIGH to whatever pin you assign "ESC Enable" in order to close the contacts in the load relay. 
Now, with this setup, you can setup a heartbeat. The transmitter sends a packet that sets a heartbeat bit HIGH in the receiver. The receiver uses an interrupt to poll the heartbeat bit and, if it's HIGH, clears the bit. If it is LOW, then you have the option to either kill power on the spot (set ESC Enable to LOW) or you could wait for N heartbeats to be LOW.
As a final note, be sure that you enable, add, configure, etc. a pulldown resistor to the ESC Enable pin to ensure that the pin is LOW any time it would otherwise be floating. 

