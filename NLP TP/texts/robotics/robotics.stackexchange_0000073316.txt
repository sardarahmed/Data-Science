Q:

Pause execution of program from callback function

In my main, I have defined a callback function with the following code:
// initialize a Subscribing for reading the current pose
CallbackHandler cb_handler(slam, &node_list, &node_tstamps);
ros::Subscriber sub = nh.subscribe("/pose2D", 1000, &CallbackHandler::checkOdometricConstraint, &cb_handler);

After that I call ros::spin() to wait for callbacks
ros::spin();

Is it possible to pause the system execution from within the callback function?
I tried using cpp approaches like system("pause") or std::cin.get() but that didn't work.

Originally posted by bergercookie on ROS Answers with karma: 257 on 2016-04-12
Post score: 0

Original comments
Comment by gvdhoorn on 2016-04-12:
can you tell us why you want to do that (just trying to avoid an xy-problem)?
Comment by bergercookie on 2016-04-12:
I incrementally add elements to an std::vector when the callback function is called, and each time this happens I need some time to investigate the added element. I could use ros::Duration(x).sleep() for this purpose but it would be handier if I could pause execution as long as I needed..
Comment by gvdhoorn on 2016-04-12:
With "I need some time to investigate" are you really talking about you, the person, or the rest of your program?
Comment by bergercookie on 2016-04-12:
I am talking about me watching the program output. My goal is to see what is the output of the program, for debugging reasons.

A:

You could pause outside of a callback, if you really need to; store the value you will add to the vector in the callback.
By using simulation time you can make your clock server pause, just like you pause a ROS bag from being played.

For debugging reasons (this one is a clear case of this, from your comments) you should really use a debugger, not print the contents of a vector. You will be glad you did it if you put some time into it. Super easy if you have an IDE (for gdb see this).
First of all start here. If you find yourself really needing to use a launch file, such that you can't run your node from the IDE, maybe your IDE provides a way to attach the debugger to the already running node.

Originally posted by dotcom with karma: 120 on 2018-04-07
This answer was ACCEPTED on the original site
Post score: 0

