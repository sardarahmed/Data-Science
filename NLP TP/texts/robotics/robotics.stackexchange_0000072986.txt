Q:

Is there a max number of edges allowed between two frames in a TF tree?

I have a pose graph of about 2000 nodes published as static transforms with tf2_ros::StaticTransformBroadcaster.
Currently, the poses are chained together as a path, meaning I publish transforms from:
node_0 to node_1,
node_1 to node_2,
...,
node_n-1 to node_n.
I then want to lookup transforms from between various nodes, but tf::TransformListener fails when nodes are more than 1000 edges apart in the TF tree:
The tf tree is invalid because it contains a loop.
Followed by a list of all transforms that exist between frames.
I'm almost certain there are no loops as the listed transforms after the error appear sane and include all 2000 nodes. Also, the same code works fine when there are less than 1000 nodes.
With the tool tf_echo I can successfully get the transform between any two nodes that are within 1000 edges.
For example:
node_0 to node_1000 (success)
node_0 to node_1 (success)
node_1 to node_1001 (success)
node_0 to node_1001 (failure The tf tree is invalid because it contains a loop.)
Could this be something to do with the subscriber's queue size in TransfromListener?
Thanks for the help :)

Originally posted by jacobperron on ROS Answers with karma: 1870 on 2016-03-22
Post score: 0

A:

The maximum depth for a search is 1000UL
It assumes if you're more that 1000 deep into the tree that it's encountered a loop.
It sounds like you're using tf in an unusual manner. You could open a ticket to discuss extending the search depth or improve loop detection. However it's a performance critical code path so it might be better to allow overriding the search depth but not change the default.

Originally posted by tfoote with karma: 58457 on 2016-03-23
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by jacobperron on 2016-03-23:
Thanks for the prompt reply! I will consider alternate solutions before overriding the search depth.
Comment by tfoote on 2016-03-23:
Note I don't know of a limit on the width of the graph.
Comment by jacobperron on 2016-03-24:
I think the best solution to my problem is to publish transforms from node_0 to all other nodes, rather than the current 'list' structure. This way there will only ever be two edges between any two nodes making lookups a lot cheaper in large trees. I will let you know if I run into width issues.

