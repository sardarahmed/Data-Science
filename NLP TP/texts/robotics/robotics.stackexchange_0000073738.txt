Q:

usb_cam node "permission denied" when launched by robot_upstart

When I launch usb_cam from a launch file with robot_upstart on boot, the node fails saying:
[usb_cam-4] process has died [pid 3136, exit code 1, cmd /opt/ros/indigo/lib/usb_cam/usb_cam_node __name:=usb_cam __log:=/home/ubuntu/.ros/log/68608950-115a-11e6-805a-544a16bf53a7/usb_cam-4.log].
log file: /home/ubuntu/.ros/log/68608950-115a-11e6-805a-544a16bf53a7/usb_cam-4*.log

When I look at that log it says:
[ WARN] [1462299217.838001270]: Shutdown request received.
[ WARN] [1462299217.874595145]: Reason given for shutdown: [new node registered with same name]
[ WARN] [1462299240.126186614]: Shutdown request received.
[ WARN] [1462299240.141871614]: Reason given for shutdown: [new node registered with same name]
[ WARN] [1462299353.880653169]: Shutdown request received.
[ WARN] [1462299353.909079127]: Reason given for shutdown: [new node registered with same name]

When I launch the node using rosrun, it works perfectly. What could be causing this issue? I am running ROS Indigo on a Beaglebone Black and Ubuntu 14.04.

Originally posted by luketheduke on ROS Answers with karma: 285 on 2016-05-03
Post score: 1

A:

When I launch the node using rosrun, it works perfectly. What could be causing this issue?

Have you read the note about permissions in the installation documentation? From the robot_upstart 0.2.0 documentation » The install script - permissions:

It’s important to understand how permissions work robot_upstart:

The upstart job invokes its jobname-start bash script as root.

The script sets up environment variables, and then uses setuidgid to execute roslaunch as an unprivileged user. This is by default the user who ran the install script, but it can also be specified explicitly via a flag.

The roslaunch which executes does not have its user’s group memberships. This means that it will not have access to serial ports with the dialout group, or locations in /var/log owned by root, etc. Any filesystem resources needed by your ROS nodes should be chowned to the same unprivileged user which will run ROS, or should set to world readable/writeable, for example using udev.

So jobname-start starts out as user root, but then quickly drops all privileges and continues as a regular user (that is not a member of the dialout or any other group). There may be some more configuration required.

Originally posted by gvdhoorn with karma: 86574 on 2016-05-03
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by luketheduke on 2016-05-03:
Thanks for your help!
Comment by luketheduke on 2016-05-03:
Though, how would I make the serial and video available on the robot then?
Comment by gvdhoorn on 2016-05-04:
Wouldn't this come down to figuring out which user is actually used by robot_upstart, and then making that user a member of the dialout or video group? That is essentially what bullet point nr 3 states, right?
Comment by luketheduke on 2016-05-04:
From the way I read it, no. At least to me, it seems to say that if user X is a member of dialout and robot_upstart uses that user, it will not have access to the dialout group, even though the user is part of it. Am I wrong, or is there a way to get around this?
Comment by gvdhoorn on 2016-05-04:
You're right:

[..] should be chowned to the same unprivileged user which will run ROS, or should set to world readable/writeable, for example using udev. [..]

I guess that is one approach, use udev to chown the device files (or make them world readable/writable).

