Q:

Compiling with Cmake and PCL

Hellow everyone,
I have a problem with compiling my code and I can't seem to find the solution anywhere.
I'm using PCL. My main is in a one file named main.cpp. The code inside is irrelevant. The thing is in order to use the fromROSMsg() pcl_ros function I need to declare it somewhere in the main file. Like for example I have a function callback() for now that is used absolutely nowhere in the code later on like this :
void callback(){
  const sensor_msgs::PointCloud2ConstPtr& cloudy;
  pcl::PointCloud<pcl::PointXYZRGBA> cloud;
  pcl::fromROSMsg(*cloudy, cloud);  
}

And this function is absolutely of no use later on since my callback function is actually a class function somewhere else using fromROSMsg by herself. but if I don't include this function somewhere in the main file here is the result of CMake :
/home/ros/catkin_ws/devel/lib/lib3Dmain.so: undefined reference to 'pcl::console::print(pcl::console::VERBOSITY_LEVEL, char const*, ...)'
collect2: ld a retourné 1 code d'état d'exécution
make[2]: *** [/home/ros/catkin_ws/devel/lib/open_tld_3d/opentld_3D] Erreur 1
make[1]: *** [open_tld_3d/CMakeFiles/opentld_3D.dir/all] Erreur 2

I tried linking manually PCL in themakefile as explain Here but it didn't help.
Thanks a lot for any help.
Here is the CMakeLists.txt :
cmake_minimum_required(VERSION 2.8.3)
project(this_project)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
cv_bridge
geometry_msgs
pcl
pcl_ros
roscpp
rospy
sensor_msgs
std_msgs
)

find_package(PCL REQUIRED)

find_package(OpenCV REQUIRED)

include_directories(${PCL_INCLUDE_DIRS})

link_directories(${PCL_LIBRARY_DIRS})

include_directories(${OpenCV_INCLUDE_DIRS}
include/this_project)

include_directories(
src/opentld
src/opentld/main
src/libopentld/imacq
src/libopentld/mftracker
src/libopentld/tld
src/libopentld/tld/detector
src/libopentld/tld/detector/cuda
src/3rdparty/cvblobs
src/3rdparty/libconfig)

include_directories(src/libopentld/imacq
src/libopentld/mftracker
src/libopentld/tld
src/libopentld/tld/detector
src/libopentld/tld/detector/cuda
src/libopentld/tld/detector/cuda/npp
${CUDA_INCLUDE_DIRS})

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)

## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

 ###################################
## catkin specific configuration ##
 ###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
 INCLUDE_DIRS include
 LIBRARIES open_tld_3d
 CATKIN_DEPENDS geometry_msgs roscpp rospy std_msgs pcl_ros pcl
 DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
# include_directories(include)
include_directories(
   ${catkin_INCLUDE_DIRS}
)

## Declare a cpp library
add_library(3dlib
include/open_tld_3d/handler3D.cpp
include/open_tld_3d/handler3D.hpp)

add_library(3Dcvblobs
src/3rdparty/cvblobs/blob.cpp
src/3rdparty/cvblobs/BlobContour.cpp
src/3rdparty/cvblobs/BlobOperators.cpp
src/3rdparty/cvblobs/BlobProperties.cpp
src/3rdparty/cvblobs/BlobResult.cpp
src/3rdparty/cvblobs/ComponentLabeling.cpp
src/3rdparty/cvblobs/blob.h
src/3rdparty/cvblobs/BlobContour.h
src/3rdparty/cvblobs/BlobLibraryConfiguration.h
src/3rdparty/cvblobs/BlobOperators.h
src/3rdparty/cvblobs/BlobProperties.h
src/3rdparty/cvblobs/BlobResult.h
src/3rdparty/cvblobs/ComponentLabeling.h)

add_library(3Dconfig++
src/3rdparty/libconfig/grammar.c
src/3rdparty/libconfig/libconfig.c
src/3rdparty/libconfig/libconfigcpp.cc
src/3rdparty/libconfig/scanctx.c
src/3rdparty/libconfig/scanner.c
src/3rdparty/libconfig/strbuf.c
src/3rdparty/libconfig/grammar.h
src/3rdparty/libconfig/libconfig.h
src/3rdparty/libconfig/libconfig.hh
src/3rdparty/libconfig/parsectx.h
src/3rdparty/libconfig/scanctx.h
src/3rdparty/libconfig/scanner.h
src/3rdparty/libconfig/strbuf.h
src/3rdparty/libconfig/wincompat.h)

add_library(3Dlibopentld
src/libopentld/imacq/ImAcq.cpp
src/libopentld/mftracker/BB.cpp
src/libopentld/mftracker/BBPredict.cpp
src/libopentld/mftracker/FBTrack.cpp
src/libopentld/mftracker/Lk.cpp
src/libopentld/mftracker/Median.cpp
src/libopentld/tld/Clustering.cpp
src/libopentld/tld/DetectionResult.cpp
src/libopentld/tld/MedianFlowTracker.cpp
src/libopentld/tld/TLD.cpp
src/libopentld/tld/TLDUtil.cpp
src/libopentld/tld/detector/DetectorCascade.cpp
src/libopentld/tld/detector/EnsembleClassifier.cpp
src/libopentld/tld/detector/ForegroundDetector.cpp
src/libopentld/tld/detector/NNClassifier.cpp
src/libopentld/tld/detector/VarianceFilter.cpp)

target_link_libraries(3Dlibopentld ${OpenCV_LIBS})

add_library(3Dmain
src/opentld/main/Config.cpp
src/opentld/main/Config.h
src/opentld/main/Gui.cpp
src/opentld/main/Gui.h
src/opentld/main/Main.cpp
src/opentld/main/Settings.cpp
src/opentld/main/Trajectory.cpp
src/opentld/main/Config.h
src/opentld/main/Gui.h
src/opentld/main/Main.h
src/opentld/main/Settings.h
src/opentld/main/Trajectory.h
include/open_tld_3d/handler3D.hpp)

target_link_libraries(3Dmain 3Dlibopentld 3Dcvblobs 3Dconfig++ 3dlib ${OpenCV_LIBS})

add_executable(projet src/opentld/TheProject.cpp)

target_link_libraries(projet 3Dmain 3Dcvblobs 3Dlibopentld 3Dconfig++ 3dlib ${OpenCV_LIBS} ${catkin_LIBRARIES} ${PCL_LIBRARIES})

Originally posted by Maya on ROS Answers with karma: 1172 on 2014-03-30
Post score: 2

Original comments
Comment by ahendrix on 2014-03-30:
This looks like a linking problem. Can you include your CMakeLists.txt in your post?
Comment by Maya on 2014-03-30:
Sure thing.

A:

It looks like you should add ${PCL_LIBRARIES} when you link 3Dmain.

Originally posted by ahendrix with karma: 47576 on 2014-03-30
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by Maya on 2014-03-30:
That worked. But why was CMake able to find it if I put the function in the project file ? I just can't understand why...
Comment by ahendrix on 2014-03-30:
The add_library controls which C++ files are compiled into your object file, and target_link_libraries controls which libraries are linked with your object file to produce your library.
Comment by ahendrix on 2014-03-30:
find_package(PCL) sets a number of environment variables, including PCL_INCLUDE_DIRS and PCL_LIBRARIES.
Comment by Maya on 2014-03-30:
Ha ok ! thanks a lot !

