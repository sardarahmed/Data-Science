Q:

pr2: writing a realtime joint controller

I'm currently attempting this tutorial
http://www.ros.org/wiki/pr2_mechanism/Tutorials/Running%20a%20realtime%20joint%20controller
Everything is okay until I reach this step:

Loading and Starting the Controller
Finally, we need to check if our
controller got registered to the
controller manager. To get the list of
registered controllers, type:
$ rosrun pr2_controller_manager
pr2_controller_manager list-types
Look in the output for our controller
MyControllerPlugin. If it's there
you're ready to load and start it.

I don't see MyControllerPlugin anywhere.
I just tried to continue anyway by typing
rosrun pr2_controller_manager pr2_controller_manager load MyControllerPlugin

rosrun pr2_controller_manager pr2_controller_manager start MyControllerPlugin

The controller successfully loads in and starts in Terminal but nothing is happening in Gazebo. I did exactly as the tutorial said except I changed my_controller_name to MyControllerPlugin. Did I do something wrong?
The warning reflected after trying to run MyControllerPlugin is

[ WARN] [1349677273.168201399, 243.496000000]: The deprecated controller type MyControllerPlugin was not found.  Using the namespaced version my_controller_pkg/MyControllerPlugin instead.  Please update your configuration to use the namespaced version.

I'm running ubuntu 12.04 and Fuerte.
Thanks.
EDIT:
I managed to get rid of the warnings by
rosparam set my_controller_pkg/MyControllerPlugin/type my_controller_pkg/MyControllerPlugin

&
rosparam set my_controller_pkg/MyControllerPlugin/joint_type r_shoulder_pan_joint

However, when I load and start the plugin, nothing happens on gazebo. PR2 just stands there doing nothing. Does anyone else have the same problem?
EDIT2(to Arthur):
What I typed
rosrun pr2_controller_manager pr2_controller_manager load my_controller_pkg/MyControllerPlugin
rosrun pr2_controller_manager pr2_controller_manager start my_controller_pkg/MyControllerPlugin
rosrun pr2_controller_manager pr2_controller_manager list
The results showed that the plugin was running[my_controller_pkg/MyControllerPlugin (running)] but nothing was happening in the simulator. :(
EDIT3:
Thanks Arthur.
I see "my_controller_pkg/MyControllerPlugin" when I run "$ rosrun pr2_controller_manager pr2_controller_manager list-types"
I changed
"rosparam set my_controller_pkg/MyControllerPlugin/type my_controller_pkg/MyControllerPlugin" to "rosparam set my_controller_name/type my_controller_pkg/MyControllerPlugin".
I also changed this respectively
"rosparam set my_controller_pkg/MyControllerPlugin/joint_type r_shoulder_pan_joint" to " rosparam set my_controller_name/joint_type r_shoulder_pan_joint"
Is that what you mean by not using the same name for Plugin and controller?
After loading and starting the controller I ran this command
$ rosrun pr2_controller_manager pr2_controller_manager list
and found this:
my_controller_name ( running )
Pr2 is still not doing anything  in the simulator. :s

EDIT4:
I think I gave information very messily before so here is it again. I followed the tutorial (http://www.ros.org/wiki/pr2_mechanism/Tutorials/Writing%20a%20realtime%20joint%20controller) quite closely and managed to get it to load successfully with the help of Arthur. However, despite loading successfully, pr2 does not do anything in the simulator.
This is the code at the end of my_controller_file.cpp(exactly the same from tutorial)
PLUGINLIB_DECLARE_CLASS(my_controller_pkg,MyControllerPlugin,
my_controller_ns::MyControllerClass,
pr2_controller_interface::Controller)
This is my contoller_plugins.xml file
<library path="lib/libmy_controller_lib">
  <class name="my_controller_pkg/MyControllerPlugin" 
         type="my_controller_ns::MyControllerClass"           
         base_class_type="pr2_controller_interface::Controller" />
</library>

Step1
rosparam set my_controller_name/type my_controller_pkg/MyControllerPlugin

Step2
rosparam set my_controller_name/joint_name r_shoulder_pan_joint

Step3
rosparam get -p my_controller_name

I get
joint_name: r_shoulder_pan_joint
type: my_controller_pkg/MyControllerPlugin

Step4
rosrun pr2_controller_manager pr2_controller_manager list-types

I get(yes, my_controller_pkg/MyControllerPlugin is there)
JointGravityController
JointPendulumController
ethercat_trigger_controllers/MultiTriggerController
ethercat_trigger_controllers/ProjectorController
ethercat_trigger_controllers/TriggerController
my_controller_pkg/MyControllerPlugin
pr2_calibration_controllers/CasterCalibrationController
pr2_calibration_controllers/FakeCalibrationController
pr2_calibration_controllers/GripperCalibrationController
pr2_calibration_controllers/JointCalibrationController
pr2_calibration_controllers/WristCalibrationController
pr2_controller_manager/TestController
pr2_gripper_sensor_controller/PR2GripperSensorController
pr2_manipulation_controllers/CartesianTrajectoryController
pr2_manipulation_controllers/JTTaskController
pr2_manipulation_controllers/JinvTeleopController7
pr2_mechanism_controllers/CasterController
pr2_mechanism_controllers/CasterControllerNode
pr2_mechanism_controllers/LaserScannerTrajController
pr2_mechanism_controllers/Pr2BaseController
pr2_mechanism_controllers/Pr2BaseController2
pr2_mechanism_controllers/Pr2GripperController
pr2_mechanism_controllers/Pr2Odometry
robot_mechanism_controllers/CartesianPoseController
robot_mechanism_controllers/CartesianTwistController
robot_mechanism_controllers/CartesianWrenchController
robot_mechanism_controllers/JTCartesianController
robot_mechanism_controllers/JointEffortController
robot_mechanism_controllers/JointPositionController
robot_mechanism_controllers/JointSplineTrajectoryController
robot_mechanism_controllers/JointTrajectoryActionController
robot_mechanism_controllers/JointVelocityController

Step5
rosrun pr2_controller_manager pr2_controller_manager load my_controller_name

Step6
rosrun pr2_controller_manager pr2_controller_manager start my_controller_name

Step7
rosrun pr2_controller_manager pr2_controller_manager list

I get(yup my_controller_name is running)
pr2_controller_manager list
base_controller ( running )
base_odometry ( running )
head_traj_controller ( running )
l_arm_controller ( running )
l_gripper_controller ( running )
laser_tilt_controller ( running )
my_controller_name ( running )
r_arm_controller ( running )
r_gripper_controller ( running )
torso_controller ( running )

But nothing happens in the simulator. I'm a little confuse with the plugin name and controller name. Am I correct to say that the controller name can be anything?(and is "my_controller_name" from the example I did above)
Is the plugin name "MyControllerPlugin", the second element in PLUGINLIB_DECLARE_CLASS(my_controller_pkg,MyControllerPlugin,
my_controller_ns::MyControllerClass,
pr2_controller_interface::Controller)
Should I change the second element to a different name and try again. And if I do, do I have to do anything to the controller_plugins.xml?
Thank you very much. Hopefully I'm clear enough now. >.<

Originally posted by ccm on ROS Answers with karma: 226 on 2012-10-07
Post score: 2

Original comments
Comment by arzhed on 2012-10-29:
Are you sure your controller is running?
Comment by ccm on 2012-10-31:
yes, what I did is in written in  "EDIT2"
Comment by arzhed on 2012-11-02:
Do you see your controller plugin when you type '$ rosrun pr2_controller_manager pr2_controller_manager list-types' now? Again, be careful not to use the same name for your controller and your plugin
Comment by ccm on 2012-11-05:
Yes, I do see it. updates in more detail in Edit3. Thanks a lot! :)
Comment by joseescobar60 on 2012-11-05:
i want to tell you about my problem in this same tutorial, i ran everything like the tutorial, but when a run  "$ rosrun pr2_controller_manager pr2_controller_manager list-types" the controller dosen't appear, i'm thinking that the problem is the controller name, you can tell me de name of the contr
Comment by ccm on 2012-11-06:
Just do exactly as Arthur said. Use "my_controller_pkg/MyControllerPlugin" instead of MyControllerPlugin. The controller should appear as "my_controller_pkg/MyControllerPlugin" when you run that command.
Comment by arzhed on 2012-11-07:
I see nothing wrong in EDIT 4 after quick overview, although I wonder why there are so many other controllers running... Did you print out the effort applied on the joint? It might be useful to see what is going on in the code itself.

A:

Hi
The warning tells you to declare "my_controller_pkg/MyControllerPlugin" instead of "MyControllerPlugin" when you set your parameters to the parameter server. So the good command is :
rosparam set my_controller_name/type my_controller_pkg/MyControllerPlugin

I don't know what the problem is in Gazebo, but there might be a conflict due to your controller name. As it is said in the tutorial, if you use a yaml file, it should look like this :
my_controller_name:
    type: my_controller_pkg/MyControllerPlugin
    joint_name: r_shoulder_pan_joint

You may try another controller name.
Hope that helps.

Originally posted by arzhed with karma: 143 on 2012-10-11
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by joseescobar60 on 2012-11-05:
what supposed is the controller name arthur???
Comment by Lorenz on 2012-11-06:
You can chose whatever name you want. It is the name you have to use when starting the controller using the pr2_controller_manager script. Also, I guess the indentation of the above yaml snipped is wrong. I take the liberty to edit @Arthur S. post (he can always revoke it if I'm wrong).
Comment by joseescobar60 on 2012-11-06:
i'm using a lot of names but anyone works, when i run "rosrun pr2_controller_manager pr2_controller_manager list-type" my controller doesn't appaer and if i follow the tutorial i obtain a error with "rosrun pr2_controller_manager pr2_controller_manager load my_controller_name"
Comment by Lorenz on 2012-11-06:
Your problem probably has noting to do with the controller name. Is your package in the ROS_PACKAGE_PATH and is the plugin registered correctly (in a plugin xml file and in manifest.xml). I think it might be best if you open a separate question for that issue, provide all relevant information there.
Comment by arzhed on 2012-11-07:
Thx Lorenz. I updated it again since both code lines where not coherent. My advice to ccm was to use a different name for the controller and the plugin to declare it right, especially in that line from the tutorial : PLUGINLIB_DECLARE_CLASS(my_controller_pkg, ..., ...). Check files Lorenz told u to

