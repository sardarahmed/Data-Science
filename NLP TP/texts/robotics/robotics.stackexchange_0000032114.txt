Q:

Kinect Depth calculation

Sorry guys, i am desperate for answer. That is why i didn't follow the rules of this website. I sincerly apologise. For this code, i have come up with a better one.
float cx = 320.0;
float cy = 240.0;
float minDistance = -10;
float scaleFactor = 0.0021;
for (int v=0, n=0 ; v<480 ; v++) 
    {
        for (int u=0 ; u<640 ; u++, n++)
        {
                Vec3f result;
                result.x = float(((u - cx) * t_gamma[depth[n]]+ minDistance)   * scaleFactor * (cx/cy));
                result.y = float(((v - cy) * t_gamma[depth[n]]+ minDistance)   * scaleFactor);
                result.z = float(t_gamma[depth[n]]);
        
    
        }
        
    }   
 

// OS X requires GLUT to run on the main thread
gl_threadfunc(NULL);

return 0;

}
is this code better? i have tried to save the depth data but all the data is zero. I don't know where is the problem?

Originally posted by lakshmen on ROS Answers with karma: 101 on 2011-06-07
Post score: -2

Original comments
Comment by dornhege on 2011-06-09:
If your depth data is zero, the code above is probably not the problem. Does OpenKinect provide samples? Then use those, otherwise you can still use the ROS node, remove the ROS stuff and use it for yourself (respecting the license of course).
Comment by lakshmen on 2011-06-09:
I would  really appreciate any help provided...
Comment by lakshmen on 2011-06-09:
I am an intern in a company and i was asked to do this... Using the OpenKinect.
Comment by dornhege on 2011-06-08:
Why do you want to do this yourself? Is it an exercise or are you interested in the results. For the latter I would highly recommend using the openni_camera node as it already gives your 3D data.

A:

This message is double posted see original one HERE

Originally posted by KoenBuys with karma: 2314 on 2011-06-08
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by dornhege on 2011-06-08:
It's not really the original. That link was another question before (and should probably be returned to its original question).

