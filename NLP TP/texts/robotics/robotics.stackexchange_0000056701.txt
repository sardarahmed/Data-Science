Q:

Sending goal to Navigation stack using simple_navigation_goals

I have gone through the tutorial where goals has been sent to navigation stack through simple_navigation_goals.
My question is using simple_navigation_goals, we can move a robot 1 meter forward, is there any provision in the package to move to a particular goal location (x,y)?

Originally posted by Mercy on ROS Answers with karma: 31 on 2014-01-21
Post score: 1

A:

Okay, I am really new to ROS but here we go.
I wrote a simple function which sends a new goal every time the previously send goal was reached:
-->cpp file
bool Costmap_Movement_Class::SetNewGoal(const float &x, const float &y, const float &angle)
{
while(!this->m_ac.waitForServer(ros::Duration(5.0)))
{
    ROS_INFO("Costmap movement controller:...Waiting for the move_base action server");
}
move_base_msgs::MoveBaseGoal goal;
goal.target_pose.header.frame_id = "map"; //instead of base_link //map
goal.target_pose.header.stamp = ros::Time::now();

goal.target_pose.pose.position.x = x;
goal.target_pose.pose.position.y = y;
goal.target_pose.pose.orientation.w = angle;
ROS_INFO("Costmap movement controller:...Sending goal");
this->m_ac.sendGoal(goal);

return true;
}

-->header file
Costmap_Movement_Class():m_ac("move_base", true){};//constructor

Before the constructor I declare "m_ac" like this
m_MoveBaseClient m_ac;

And further you will need to include the necessary libraries
#include <ros/ros.h>
#include <move_base_msgs/MoveBaseAction.h>
#include <actionlib/client/simple_action_client.h>

Make sure to give these packages to the package.xml file and the cmakelist.txt otherwise the necessary header cannot be included.
The example might be a bit confusing at first, but if you read through it a second time I am sure you ll see how it works.
Furthermore I found that with
if(this->m_ac.getState() == actionlib::SimpleClientGoalState::SUCCEEDED)

You can get confirmation if your goal was reached.
Best of luck
Marcus

Originally posted by Marcus with karma: 164 on 2014-01-22
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by Mercy on 2014-01-22:
@Marcus, thanks for the code. I observe that you have changed three things with respect to conventional simple_navigation_goals.cpp apart from adding the constructor. 1. map, have you faced any problem base_link? 2. Instead of meters, you used x and y co-ordinate. 3. If I choose 0 for angle does it move straight? How angle property will behave?
Comment by Marcus on 2014-01-22:
Like I said, I am merely an amateur with this stuff.
1.) I changed to map instead of base_link because the robot stop moving after reaching my first goal position. Through try and error (and because map is my "absolute" frame) I found that the robot will behave correctly.
2.) x,y, angle are basically the pose of my goal with respect to my "absolute" frame. Furthermore, since I spawn the robot in the origin of the absolute frame you could still put a 1 like in the example and you would receive a 1 meter forward movement of the robot.
3.) As far as I understand the angle does not have much to do with the overall movement. It just presents the angle the robot is suppose to have when he reaches the goal (always in relation to your absolute frame)
I hope that helped
Marcus
Comment by Mercy on 2014-01-23:
Thanks @Marcus
Comment by Mercy on 2014-01-28:
[ERROR] [1390980336.654648784]: Quaternion has length close to zero... discarding as navigation goal
[ WARN] [1390980854.732553329]: Could not get robot pose, cancelling reconfiguration
[ WARN] [1390980855.533396832]: Costmap2DROS transform timeout. Current time: 1390980855.5334, global_pose stamp: 1390980832.2348, tolerance: 0.3000
[ERROR] [1390980855.642393966]: Extrapolation Error looking up robot pose: Unable to lookup transform, cache is empty, when looking up transform from frame [/base_footprint] to frame [/map]
Comment by Mercy on 2014-01-28:
@Marcus I get some warnings and errors as above. When we set 2D Nav goal through rviz, then 3 things appear in the terminal position (3 tuple),orientation (4 tuple) and angle. Does orientation in the code and this has anything common in between them. I try to achieve same goal through code as we do in rviz. Thank you..
Comment by Marcus on 2014-01-29:
Hmmm..In fact I never had this problem. The first Error( Quaternion has length close to zero... discarding as navigation goal) I only get, if the position I chose as a goal is already the position where the robot is currently located. Did you try sending the goal without rviz (in your cpp file)? Does that work?

