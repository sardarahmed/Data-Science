Q:

How does SLAM handle a changing environment?

Through SLAM, the map can be built for navigation.
But the environment usually changes.
When the environment, how does SLAM handle it?
For exmaple,
a) something is added into the environment
b) something is removed from the environment

Originally posted by wyfeng2013 on ROS Answers with karma: 19 on 2021-11-20
Post score: 0

A:

There are many ways to address this challenge for dynamic changes to the environment, for example multi session graph based SLAM. It also depends on what is changing in the environment, is it pedestrians walking by? Or is it furniture moving around?
Take a look at the following paper
Summary of the approach used:

the underlying structure of the map is
a graph with nodes and links. The
nodes save odometry poses for each
location in the map. The nodes also
contain visualization information like
laser scans, RGB images, depth images
and visual words [17] used for loop
closure detection. The links store
rigid geometrical transformations
between nodes. There are two types of
links: neighbor and loop closure.
Neighbor links are added between the
current and the previous nodes with
their odometry transformation. Loop
closure links are added when a loop
closure detection is found between the
current node and one from the same or
previous maps. Our contribution in
this paper involves combining two
algorithms, loop closure detection
[16] and graph optimization [14],
through a memory management process
[16] that limits the number of nodes
available from the graph for loop
closure detection and graph
optimization, so that they always
satisfy online requirements.

But there are other examples of using machine learning for object detection and remove those objects while updating SLAM, take a look at this paper

Originally posted by osilva with karma: 1650 on 2021-11-22
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by wyfeng2013 on 2021-11-23:
The information from you give me so much help!
Thanks for you very much !

