Q:

How to export a debug and release library?

I have package A in workspace1, and i build the package using:
catkin_make -DCMAKE_BUILD_TYPE=Debug

When I try to compile package B in workspace2 using:
catkin_make -DCMAKE_BUILD_TYPE=Debug

Build fails with message:
CMake Error at /path/AConfig.cmake:141 (message):
  Project 'B' tried to find library 'target_inside_A''.  The library is
  neither a target nor built/installed properly.  Did you compile project
  'A'? Did you find_package() it before the subdirectory containing
  its code is included?

same issue when building with catkin_make_isolated a workspace with both packages inside (catkin_make compilation runs clean).
I don't know if this behaviour is by catkin design or if it's a bug, or if it's all my fault.
I'm using ROS indigo on debian, compiled by source.
I've also tested in ROS groovy on ubuntu 12.10.

Originally posted by Boris_il_forte on ROS Answers with karma: 96 on 2014-11-18
Post score: 1

Original comments
Comment by William on 2014-11-18:
I don't suppose it would be possible for you to post your code even, if it is anonymized, or a minimal example which reproduces this? Unfortunately, I can't imagine what the issue is or what to recommend without the contents of your CMakeLists.txt for each.
Comment by Boris_il_forte on 2014-11-19:
I'm so sorry, I missed to tell that you should set a debug postfix to see the issue.
i was missing the point because the library is huge, and I've only worked on the catkinization.
here is a minimal example of the setup:
https://www.dropbox.com/sh/igs20bc3v0r24t8/AABaTmc_d5yqLG6BGtFZGsn1a?dl=0
Comment by Boris_il_forte on 2014-11-19:
ps: i don't know how to upload files, so i've used dropbox... if there is a better way to share the workspace tell me...
Comment by Dirk Thomas on 2014-11-19:
I can compile your example with ROS Indigo perfectly fine - also when setting the build type to "Debug". Since groovy has been EOLed I don't maintain a VM to test with it anymore.
Comment by Boris_il_forte on 2014-11-19:
Have you tried catkin_make_isolated -DCMAKE_BUILD_TYPE=Debug? Please consider to run it on a clean workspace to avoid side effects (it seemes that if the release libraries exists, the linker uses them instead of Debug version). With catkin_make it works perfectly, the problem is the isolation...

A:

The problem is that your package A exports the library aaa:
catkin_package(LIBRARIES aaa)

But when package B tries to find it it obviously does not exist.
Since catkin is unaware of the renaming (you could even install the library under a totally different name, e.g. libabc_d.so) it can't make any assumptions.
Therefore you need to change the exported library name to how it is actually called:
catkin_package(LIBRARIES aaa_d)

Update:
If you extend your question to "how to export a debug and release library" the answer changes to:
You have to export both library names and in order to differentiate them use the CMake build configuration keywords (http://www.cmake.org/cmake/help/v2.8.12/cmake.html#command:target_link_libraries) before them:
catkin_package(LIBRARIES debug aaa_d optimized aaa)

Again, it wouldn't help if catkin would "be aware of the CMAKE__POSTFIX variables". Simply because the name you give your library does not need to be the same after you installed it. And catkin must be able to resolve the installed library as well. That's why you must specify the name of the (potentially renamed installed) library explicitly.

Originally posted by Dirk Thomas with karma: 16276 on 2014-11-19
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by Boris_il_forte on 2014-11-20:
This doesn't work... Obviously fixes the debug build, but now you have an issue with the release build. The problem is that catkin should be aware of the CMAKE__POSTFIX variables when generating the Find cmake module. using debug suffix is widely used in libraries like g2o and qt.
Comment by Boris_il_forte on 2014-11-20:
Changed title. Ok, now the system works, still the build fails the first time, because both library are needed to build.
However, the library links properly...
Comment by William on 2014-11-20:
You could put the libraries into a variable conditional (on them getting built) and pass that to catkin_package(LIBRARIES ...).
Comment by Dirk Thomas on 2014-11-20:
Which build fails the first time?
Comment by William on 2014-11-20:
I would guess the first one (no matter which is first). I think it is because he cannot do build type as Release and Debug at the same time. He is relying on that mechanism to choose which library to build, he isn't building both always, so one is always non existent on the first build.
Comment by Boris_il_forte on 2014-11-20:
@Wiliam: you mean if(debug) ... else() ... ?
@Dirk: any build (relase/debug). an this time also with catkin make. Why this happens is obvious (specifing the library in such a way means that BOTH should be present always).
@Wiliam: exactly. just using CMAKE_DEBUG_POSTFIX...
Comment by Dirk Thomas on 2014-11-20:
You can either build both libraries and export both using the build configuration keywords OR you build only one library and (however you call it) export that specific library name only.

