Q:

Speeding Up Gazebo Physics Simulation (Considering ROS Plugin usage)

Dear All,
I was not sure whether to post this question here or on ROS answers page. But I think it is closer to gazebo than ROS.
My Objectives is to Speed up Physical simulation to the max speed (I use max_step_size=0.005 and real_time_update_rate=0.0). I have around 25x speed up with a Pioneer 2 robot with a single camera, 4x bumper and an IMU sensor (NVIDIA Geforce GTX980 with i7-4790@3.60 GHz x8). I use Gazebo 2.2.3 which comes with ROS indigo.
I need MORE! The reason is that I do Reinforcement learning experiments with robots, and well, faster experiments mean easier life.
What I Need to have for My robot

Diff drive ( I use libgazebo_ros_diff_drive )
Camera ( liggazebo_ros_camera)
4x Bumpers (I use 4 different link connected to chassis with libgazebo_ros_bumper)
IMU ( I use libgazebo_ros_imu or libhector_gazebo_ros_imu)

My Questions:

Why the speed of simulation drops so much when a robot is added? I have around 100x speed when an environment is loaded without a robot. Is this because of ROS plugins?
Does anyone know of any faster ROS plugins if they are the bottleneck?
Is there any other way for me to update the speed further without increasing more max_step_size?
Is there perhaps a faster physics engine that I can use? I tried bullet, but nothing really changed.

Notes

I already use very simple collision meshes both for my environment and my robot.
My environment texture does not use lighting reflection/effects.

Originally posted by shantia on Gazebo Answers with karma: 23 on 2016-02-01
Post score: 1

A:

Simulation slows down when a robot is added because the collision detection and dynamics engines now have work to do.

The bottleneck is most likely not ROS plugins. You can always profile the code using valgrind, or some other tool.

There is not an easy way to speed up simulation without changing the max_step_size. You can try a newer version of Gazebo (version 2 is over two years old).

As an alternative, you could run multiple simulations in parallel.

Originally posted by nkoenig with karma: 7676 on 2016-02-01
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by shantia on 2016-02-02:
I see. Does gazebo use CPU to calculate the collision and dynamic engines or GPU? Because my GPU utilization is at 8%, while gazebo is using 4 of my 8 CPU cores (4 processes with usage 2.5+1.0+0.55+0.18 CPUs based on htop results).
I will try installing the latest version. I am already using 10 machines to run separate simulations. Is it possible to run multiple gazebo's on the same machine?
Comment by shantia on 2016-02-02:
I did increase the max_step_size to 0.01 (it means 100Hz update rate, right?), and I have the following problem: After some time, the gazebo SensorManager.cc gives an assertion failure. It says "Took over 1.0 seconds to update a sensor". I have to see whether this happens on gazebo7 as well or not.
Comment by nkoenig on 2016-02-02:
Yes, the CPU is used by the collision and dynamic engines. the GPU is used by image-based sensors. The assertion you mention is an error that we are working on fixing.
Comment by nkoenig on 2016-02-02:
Pull request that fixes the assert problem: https://bitbucket.org/osrf/gazebo/pull-requests/2115
Comment by shantia on 2016-02-03:
Oh, great thanks. I guess then this is it. I got my answer. Thank you for you efforts.
Comment by shantia on 2016-02-04:
I can confirm that with Gazebo 7.0 (compiled from source), I have no sensor assert problems, and I could speed up a very simple Pioneer 2 DX up to 430 times the real time speed with max_step_size of 0.05.
Comment by Deastan on 2019-07-09:
@shantia,
Did you try to increase more the speed of a simulation ? I would like to be more faster.
This link is broken..:https://bitbucket.org/osrf/gazebo/pull-requests/2115 What was on it ? Did you tried to have multiple simulation on one computer ?

