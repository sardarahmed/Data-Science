Q:

undefined reference to everything

Hi,
I have a package in my workspace that uses openCV and cv_bridge. I needed the cuda module of openCV, but it doesn't exist in the default openCV of ROS. I installed another version of openCV that included the cuda modules, I tried to link my workspace and my package to the new openCV and I had lots of errors like "undefined reference to 'cv_bridge::...' ", "undefined reference to 'ros::init::...' ", "undefined reference to 'rosbag::...' ". I tried to solve the problems but I wasn't able, so I tried to return to the default openCV (it worked fine with my package before I tried to use cuda, etc.), but it gives the same errors now. I have uninstalled and reinstalled ROS, deleted my workspace and the package and I have created them again, but I have the same errors. I have all the dependencies in the CMakeLists.txt.
________
EDIT
For more information, I have created now a new node with a loop that does nothing but ros::spinOnce(); loop_rate.sleep(); in a different package, and I have the same undefined reference to errors about ros::init(...) and ros::NodeHandle::NodeHandle(...).
________
EDIT 2
I have exported my package to another computer with ros and it does work, so I think it is a problem in my ros installation or something wrong in the configuration of the computer or ubuntu (maybe CMake, g++ or gcc?). Please does anyone know which could be the problem? Please I really need help!
________
These are some of the errors:
undefined reference to 'cv_bridge::toCvCopy(boost::shared_ptr<sensor_msgs::Image_<std::allocator<void> > const> const&, std::string const&)'
undefined reference to 'ros::console::initializeLogLocation(ros::console::LogLocation*, std::string const&, ros::console::levels::Level)'
undefined reference to 'ros::init(int&, char**, std::string const&, unsigned int)'
undefined reference to 'ros::NodeHandle::NodeHandle(std::string const&, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > > const&)'
undefined reference to 'rosbag::Bag::open(std::string const&, unsigned int)'
undefined reference to 'rosbag::TypeQuery::TypeQuery(std::string const&)'
undefined reference to 'rosbag::MessageInstance::getTopic() const'
undefined reference to 'pcl_ros::transformPointCloud(std::string const&, sensor_msgs::PointCloud2_<std::allocator<void> > const&, sensor_msgs::PointCloud2_<std::allocator<void> >&, tf::TransformListener const&)'
undefined reference to 'pcl::PCDWriter::writeBinary(std::string const&, pcl::PCLPointCloud2 const&, Eigen::Matrix<float, 4, 1, 0, 4, 1> const&, Eigen::Quaternion<float, 0> const&)'
undefined reference to 'pcl::PCDWriter::writeASCII(std::string const&, pcl::PCLPointCloud2 const&, Eigen::Matrix<float, 4, 1, 0, 4, 1> const&, Eigen::Quaternion<float, 0> const&, int)'
undefined reference to 'rosbag::MessageInstance::getMD5Sum() const'
undefined reference to 'rosbag::Bag::readField(std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > > const&, std::string const&, bool, std::string&) const'
undefined reference to 'rosbag::Bag::readField(std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > > const&, std::string const&, bool, std::string&) const'

...

collect2: error: ld returned 1 exit status
b_c_f/CMakeFiles/bag_to_pcd.dir/build.make:990: recipe for target '/home/portico/catkin_ws/devel/lib/b_c_f/bag_to_pcd' failed
make[2]: *** [/home/portico/catkin_ws/devel/lib/b_c_f/bag_to_pcd] Error 1
CMakeFiles/Makefile2:1642: recipe for target 'b_c_f/CMakeFiles/bag_to_pcd.dir/all' failed
make[1]: *** [b_c_f/CMakeFiles/bag_to_pcd.dir/all] Error 2
Makefile:138: recipe for target 'all' failed
make: *** [all] Error 2
Invoking "make -j8 -l8" failed

I don't know if trying to use the new openCV I have changed something in my CMakeLists.txt or package.xml, so I add them here.
CMakeLists.txt:
cmake_minimum_required(VERSION 2.8.3)
project(b_c_f)

## Compile as C++11, supported in ROS Kinetic and newer
# add_compile_options(-std=c++11)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(PCL REQUIRED)
find_package(OpenCV REQUIRED)

find_package(catkin REQUIRED COMPONENTS
  cv_bridge
  pcl_conversions
  pcl_msgs
  pcl_ros
  rosbag
  roscpp
  sensor_msgs
  tf
)

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if your package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES b_c_f
#  CATKIN_DEPENDS cv_bridge pcl_conversions pcl_msgs pcl_ros rosbag roscpp sensor_msgs tf
#  DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(
  include
  include/b_c_f
  src/log
  ${catkin_INCLUDE_DIRS}
  ${PCL_INCLUDE_DIRS}
  ${OpenCV_INCLUDE_DIRS}
)

## Declare a C++ executable
## With catkin_make all packages are built within a single CMake context
## The recommended prefix ensures that target names across packages don't collide
add_executable(bag_to_pcd 
  src/BagCameraFiltering.cpp
  src/Blob.cpp
  src/timing-helper.cpp
  src/Tracker.cpp
  src/Vehicle.cpp
  src/log/Logger.cpp
  src/log/LogItem.cpp
  src/log/Log.cpp
  src/log/Thread.cpp
  #include/bag_camera_filtering/Vehicle.h
)

## Specify libraries to link a library or executable target against
target_link_libraries(bag_to_pcd
  ${catkin_LIBRARIES}
  ${OpenCV_LIBS}
  ${PCL_LIBRARIES}
)

package.xml:
<?xml version="1.0"?>
<package format="2">
  <name>b_c_f</name>
  <version>0.0.0</version>
  <description>The b_c_f package</description>

  <!-- One maintainer tag required, multiple allowed, one person per tag -->
  <!-- Example:  -->
  <!-- <maintainer email="jane.doe@example.com">Jane Doe</maintainer> -->
  <maintainer email="portico@todo.todo">portico</maintainer>

  <!-- One license tag required, multiple allowed, one license per tag -->
  <!-- Commonly used license strings: -->
  <!--   BSD, MIT, Boost Software License, GPLv2, GPLv3, LGPLv2.1, LGPLv3 -->
  <license>TODO</license>

  <buildtool_depend>catkin</buildtool_depend>
  <build_depend>cv_bridge</build_depend>
  <build_depend>pcl_conversions</build_depend>
  <build_depend>pcl_msgs</build_depend>
  <build_depend>pcl_ros</build_depend>
  <build_depend>rosbag</build_depend>
  <build_depend>roscpp</build_depend>
  <build_depend>sensor_msgs</build_depend>
  <build_depend>tf</build_depend>
  <build_export_depend>cv_bridge</build_export_depend>
  <build_export_depend>pcl_conversions</build_export_depend>
  <build_export_depend>pcl_msgs</build_export_depend>
  <build_export_depend>pcl_ros</build_export_depend>
  <build_export_depend>rosbag</build_export_depend>
  <build_export_depend>roscpp</build_export_depend>
  <build_export_depend>sensor_msgs</build_export_depend>
  <build_export_depend>tf</build_export_depend>
  <exec_depend>cv_bridge</exec_depend>
  <exec_depend>pcl_conversions</exec_depend>
  <exec_depend>pcl_msgs</exec_depend>
  <exec_depend>pcl_ros</exec_depend>
  <exec_depend>rosbag</exec_depend>
  <exec_depend>roscpp</exec_depend>
  <exec_depend>sensor_msgs</exec_depend>
  <exec_depend>tf</exec_depend>

  <!-- The export tag contains other, unspecified, tags -->
  <export>
    <!-- Other tools can request additional information be placed here -->

  </export>
</package>

I don't know anything about how the bash or bashrc should be so the problem could be there too.
Pd: I cloned the cv_bridge from github as another package in my catkin_ws but that didn't solve anything.
Please, I need help!

Originally posted by ipgvl on ROS Answers with karma: 45 on 2019-01-28
Post score: 1

Original comments
Comment by VictorLamoine on 2019-01-28:
Which OpenCV version is found when you compile? You can check the version in CMakeCache.txt, grep "OpenCV_DIR" build/CMakeCache.txt. Make sure you require a specific version so that you find the one with your CUDA modules enabled.
Comment by ipgvl on 2019-01-28:
Thank you for your reply. This is what I found there:
//The directory containing a CMake configuration file for OpenCV.
OpenCV_DIR:PATH=/opt/ros/kinetic/share/OpenCV-3.3.1-dev
It is the default openCV. I'm not even sure if I need a specific version, but the default doesn't have anything about cuda.
Comment by VictorLamoine on 2019-01-28:
If you need CUDA then you need to compile/install your own version of OpenCV. Then you need to specify to CMake which version of OpenCV you want to use. Either by setting the find_package to a specific version.
Comment by VictorLamoine on 2019-01-28:
or by specifying the OpenCV path when calling catkin_make; eg: catkin_make -DOpenCV_DIR=/usr/local/opencv_install_path. You should also tweak your CMake file to make sure that the version you have found does have CUDA: https://tinyurl.com/ya4drp8a
Comment by ipgvl on 2019-01-29:
I know, and that's why I installed another version of OpenCV that had CUDA, and I called catkin_make -DOpenCV_DIR=... , but since I did it I have those undefined reference to errors, and I don't know why. I did a catkin_make clean and now I use the default OpenCV again, but the errors persist.
Comment by ipgvl on 2019-01-29:
So I don't know if I have changed something important and now my package doesn't find the ros::init for example, and that's my main problem now.
Comment by ipgvl on 2019-01-29:
For more information, I have created now a new node with a loop that does nothing but ros::spinOnce(); loop_rate.sleep(); in a different package, and I have the same undefined reference to errors about ros::init(...) and ros::NodeHandle::NodeHandle(...)

A:

I did lots of things to fix these errors so I'm not sure which of them did, but I think it was one of these:

(I think it was what solved the problem) Uninstalling and reinstalling gcc and g++ to a specific version (in my case I had 4.8, 4.9 and 5.4 installed, so I uninstalled all and reinstalled 5.4.0 for both).
Doing this: export CC=/usr/local/bin/gcc export CXX=/usr/local/bin/g++  or run catkin_make like: CXX=g++5 CC=gcc5 catkin_make. Like @gvdhoorn said, this should not be necessary, so 1. solved my problem

It was important to delete the build and devel folders, and then the catkin_make worked.
EDIT
For more information, in this answer https://answers.ros.org/question/291910/linking-problem-with-catkin_libraries/ someone gave me the clue: "it looks like all of the unresolved symbols involve std::string, which changed between gcc 4.9 and gcc 5". I think that I had a problem because I had g++ and gcc of some versions at the same time and I wasn't using the right version, like I said below. I uninstalled the "bad" version but probably there is another way to fix it.

Originally posted by ipgvl with karma: 45 on 2019-02-04
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by gvdhoorn on 2019-02-04:
As I wrote in #q314609: export CC=.. and export CXX=.. should not be necessary. It's also strange to export those and then still prefix CC and CXX in a call to catkin_make.
Also: compilers in /usr/local is not a standard system setup (apt does not install compilers there).
Comment by ipgvl on 2019-02-04:
I followed this answer: https://stackoverflow.com/questions/17275348/how-to-specify-new-gcc-path-for-cmake, that's why I used the export CC=..., but like you said probably it wasn't necessary.
Comment by gvdhoorn on 2019-02-04:
Even the export should not be necessary. If it is, then something is still not right.
Comment by ipgvl on 2019-02-04:
Otherwise, I went to /usr/local when I did the export... because I wanted to know if the compiler was there and it was, but I don't know why. It was already there when I searched for it.
Comment by ipgvl on 2019-02-04:
Yes, that's why I put that I think the problem was solved because of the reinstallation. I suppose that I had a problem because I had g++ and gcc of some versions at the same time and I wasn't using the right version. I uninstalled the "bad" version but probably there is another way to fix it.
Comment by ipgvl on 2019-02-04:
Should I do something with the export ... now to return to the original state? Or should I not to touch anything more? Sorry for all, I am new in these things and I have been a week trying to solve it, and no one answered me until you, so I tried all I found on the internet.
Comment by gvdhoorn on 2019-02-04:
I'm happy to continue this, but please do so in #q314609. This is not the place, as it deals with a related problem / effect.
Comment by ipgvl on 2019-02-04:
Ok, thank you.

