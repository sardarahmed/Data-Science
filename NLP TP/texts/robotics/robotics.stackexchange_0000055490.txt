Q:

Can catkin/cmake detect the version of a dependency?

The idea would be to pass dependency version information through as a flag and conditionally compile different code paths.
The specific scenario is having packages which depend on a package which I'm in the process of pushing several upstream changes to. In my local workspace, I'd like to build the package against my version of the dependency, but still have it build correctly on the buildfarm against the dependency's upstream (and then ideally switch over to the new code path when upstream merges my changes).
A perhaps better alternative would be using SFINAE tricks to detect if the specific methods I want to take advantage of are present in the class.
Is there an official recommendation for this type of situation?

Originally posted by mikepurvis on ROS Answers with karma: 1153 on 2013-11-14
Post score: 3

A:

CMake itself does support specifying versions of packages (see cmake.html#find_package), but only if the FindX.cmake script implements it. AFAIK many of the find scripts provided with the binary CMake distribution do.
I may be wrong, but Catkin does not seem to (currently) expose this in its catkin_package(..) macro AFAICT (see groovy-devel/cmake/catkin_package.cmake). There is some version checking going on in groovy-devel/cmake/catkin_package.cmake around line 188, but I can't tell from the source how that should work. See edit.
As for detecting support for features vs relying on version numbers: that approach would seem superiour, and is the one that's been advocated by the javascript / browser-based application developer community for a long time now. Plain CMake may be able to help you with this, see cmake.html#CheckFunctionExists.

Edit: according to REP-127, it is possible to specificy versioned dependencies (from the example in that REP):
<build_depend version_gte="1.1" version_lt="2.0">genmsg</build_depend>

I assume this information is then passed to the version checking in groovy-devel/cmake/catkin_package.cmake.

Originally posted by gvdhoorn with karma: 86574 on 2013-11-14
This answer was ACCEPTED on the original site
Post score: 4

Original comments
Comment by mikepurvis on 2013-11-15:
Yes, have used build_depend version specification, but it's not a great fit if you're trying to target multiple versions of a dependency with slightly different code.
Comment by mikepurvis on 2013-11-15:
Looks like CheckFunctionExists would be great, but it only works with bare C functions, not class methods or things in namespaces. However, it is possible to roll ones own using the similar check_cxx_source_compiles macro.
Comment by mikepurvis on 2013-11-15:
There's more info on this here: http://www.cmake.org/Wiki/CMake:How_To_Write_Platform_Checks
Comment by gvdhoorn on 2013-11-15:
@mikepurvis: right, I didn't take into account that CheckFunctionExists only works for plain C. As you say, it shouldn't be too hard to create something like a CheckFunctionExistsCXX() or similar. re: versioned depends: yes, that does seem to be a usecase not covered by REP-127.

