Q:

Difference between arm_controller and joint_group_position_controller

Hi
Can anyone explain to me what arm_controller and joint_group_position_controller in universal robots work? And what is their difference? I get that they are both used for controlling the joints (by position, velocity or effort) but why are both of them needed?

Originally posted by dimitri on ROS Answers with karma: 54 on 2020-07-03
Post score: 3

Original comments
Comment by DangTran on 2020-07-03:
What is arm_controller?
Comment by dimitri on 2020-07-03:
In universal_robot/ur_gazebo/arm_controller_ur3.yaml there are two different controllers defined: arm_controller and joint_group_position_controller
Comment by DangTran on 2020-07-03:
arm_controller used for trajectory position_controllers/JointTrajectoryController, while joint_group_position_controller is for group of joint controllers (position_controllers/JointGroupPositionController). Basically, arm_controller control the robot by trajectory calculated from planning, while joint_group_position_controller can control the robot follow manually user's input.
Comment by DangTran on 2020-07-03:
If you want to control robot's joint, such as shoulder_pan_joint=0.1, you can do that by sending command to topic, then joint_group_position_controller is the one you want to focus on. If you want to automatically compute trajectory given goal target pose, then arm_controller is the one you will work with.
Comment by dimitri on 2020-07-03:
Ok thank you very much. That cleared up things.
If you post it as an answer than I can mark it as the correct answer.
Comment by gvdhoorn on 2020-07-03:\

If you want to automatically compute trajectory given goal target pose, then arm_controller is the one you will work with.

this is actually only partially correct.
The main use-case for the JointTrajectoryController is to execute pre-calculated trajectory_msgs/JointTrajectory. The command topic does indeed accept individual JointTrajectoryPoints, but I would consider that secondary functionality.
Comment by DangTran on 2020-07-03:
@gvdhoorn  I totally agree with you. My answer emphasizes more on the difference in application scenarios rather than functionalities. Quite like a personal trick to remember things :)
Comment by gvdhoorn on 2020-07-03:\

My answer emphasizes more on the difference in application scenarios rather than functionalities

well if that's the case then wouldn't the biggest difference be that a JointTrajectoryController can execute trajectories while a JointGroupPositionController cannot and is only used for forwarding single position setpoints to a group of joints?
Comment by DangTran on 2020-07-03:
Yes, I updated the answer

A:

To sum thing up, the controller file arm_controller_ur3.yaml is follows:
arm_controller:
  type: position_controllers/JointTrajectoryController
  joints:
     - shoulder_pan_joint
     - shoulder_lift_joint
     - elbow_joint
     - wrist_1_joint
     - wrist_2_joint
     - wrist_3_joint
  constraints:
      goal_time: 0.6
      stopped_velocity_tolerance: 0.05
      shoulder_pan_joint: {trajectory: 0.1, goal: 0.1}
      shoulder_lift_joint: {trajectory: 0.1, goal: 0.1}
      elbow_joint: {trajectory: 0.1, goal: 0.1}
      wrist_1_joint: {trajectory: 0.1, goal: 0.1}
      wrist_2_joint: {trajectory: 0.1, goal: 0.1}
      wrist_3_joint: {trajectory: 0.1, goal: 0.1}
  stop_trajectory_duration: 0.5
  state_publish_rate:  25
  action_monitor_rate: 10
joint_group_position_controller:
  type: position_controllers/JointGroupPositionController
  joints:
     - shoulder_pan_joint
     - shoulder_lift_joint
     - elbow_joint
     - wrist_1_joint
     - wrist_2_joint
     - wrist_3_joint

where arm_controller and joint_group_position_controller is just controller names, which can be whatever you like. The main difference here is arm_controller use JointTrajectoryController, so you can control the robot with trajectory messages computed from trajectory planners etc. While joint_group_position_controller uses JointGroupPositionController to control the robot's joint by directly sending values to controller manager.
To work with arm_controller, you have to understand message type trajectory_msgs/JointTrajectoryPoint, to define a movement of robot through time. While in joint_group_position_controller, you can simply specify each joint a value (no time involve)

Originally posted by DangTran with karma: 66 on 2020-07-03
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by StewartHemm74 on 2020-09-01:
Two Questions: Can you provide an example of publishing commands using the /arm_controller/command topic in the terminal? How can I use the Joint Group Velocity Controller instead of the Joint Group Position Controller?
Here's an example of me trying to publish trajectory_msgs/JointTrajectory:
rostopic pub -r 1 /arm_controller/command trajectory_msgs/JointTrajectory "header:
seq: 0
stamp:
secs: 0
nsecs: 0
frame_id: ''
joint_names:

'shoulder_pan_joint, shoulder_lift_joint, elbow_joint, wrist_1_joint, wrist_2_joint, wrist_3_joint'
points:
positions: [1]
velocities: [1]
accelerations: [0]
effort: [0]
time_from_start: {secs: 1, nsecs: 0}"

The error that I receive is: Cannot create trajectory from message. It does not contain the expected joints.
Comment by DangTran on 2020-09-01:
Usually, trajectory is the results from the planner, of course you can design a trajectory manually, it is quite tedious. Have a look at this link, it provides good example for publishing trajectory messages. For the JointGroupVelocityController, you probably have to change the <hardwareInterface> tags
Comment by StewartHemm74 on 2020-09-01:
thanks I'll check try that
Comment by bener suay on 2021-04-15:
I realize it's been almost a year since this answer, but for others who might be interested, I'd like to add an alternative expression to use the joint trajectory controller's the topic interface here.
Obvi, do be careful about how you pick the joint angles here bc if you're using the real robot you may actually hurt something or someone, so, with that in mind, this following command should move the robot from all zeros (initial configuration in Gazebo for example) to 90 degrees for the shoulder pan joint in 2 secs.
rostopic pub /arm_controller/command trajectory_msgs/JointTrajectory '{header: {stamp: {secs: 0,nsecs: 0}}, joint_names: ['shoulder_pan_joint','shoulder_lift_joint','elbow_joint','wrist_1_joint'
,'wrist_2_joint','wrist_3_joint'], points: [{positions: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], time_from_start: {secs: 0.0, nsecs: 0.0}},{positions: [1.57, 0.0, 0.0, 0.0, 0.0, 0.0], time_from_start: {secs: 2.0, nsecs: 0.0}}]}' --once

