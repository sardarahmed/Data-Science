Q:

Stack of two models unstable bouncing

Greetings.  When I stack two one-link models (each is just a hollow cylinder, like a roll of paper towels) they keep colliding and bouncing until the top one finally gets thrown off.  The STL is available here.  The sdf and world files are pasted below.  The animated gif shows the behavior.  At the end of the gif, Gazebo show the collision and inertial elements.  The inertial element is a bit off-center; I don't see why that would cause this but thought I should mention it.  Can you help me get a stable stack of these models?
This is in Gazebo 9.  In model.sdf I changed the restitution_coefficient tag from 0 to 0.5 in a failed attempt to resolve the issue (even though 0 should be the less bouncy value).

Model sdf:
<sdf version='1.6'>
  <model name='Neleski_Cone_full'>
<link name='Neleski_Cone_full'>
  <pose>0 0 0 0 0 0</pose>
  <inertial>
        <pose>0.15 -0.15 0.14605 0 0 0</pose>
        <mass>130.96</mass>
        <inertia>
          <ixx>1.61005</ixx>
          <ixy>5.1652e-33</ixy>
          <ixz>5.85205e-33</ixz>
          <iyy>1.61005</iyy>
          <iyz>5.04266e-17</iyz>
          <izz>1.35779</izz>
        </inertia>
  </inertial>
  <collision name='Neleski_Cone_full_collision'>
    <surface>
      <bounce>
    <restitution_coefficient>0.5</restitution_coefficient>
      </bounce>
    </surface>
        <pose>0 0 0 1.5708 0 0</pose>
        <geometry>
          <mesh>
    <scale>.001 .001 .001</scale>
    <uri>model://Full_Cone/meshes/Neleski_Cone_full.STL</uri>
          </mesh>
        </geometry>
  </collision>
  <visual name='Neleski_Cone_full_visual'>
        <pose>0 0 0 1.5708 0 0</pose>
        <geometry>
          <mesh>
    <scale>.001 .001 .001</scale>
    <uri>model://Full_Cone/meshes/Neleski_Cone_full.STL</uri>
          </mesh>
        </geometry>
  </visual>
</link>
  </model>
</sdf>

World:
<sdf version='1.5'>
  <world name='default'>
<!-- A global light source -->
<include>
  <uri>model://sun</uri>
</include>
<!-- A ground plane -->
<include>
  <uri>model://ground_plane</uri>
</include>

<model name='Neleski_Cone_full_1'>
  <include>
    <static>0</static>
    <uri>model://Full_Cone</uri>
    <pose>-1 0 0.1 0 0 0</pose>
  </include>
</model>

<model name='Neleski_Cone_full_2'>
  <include>
    <static>0</static>
    <uri>model://Full_Cone</uri>
    <pose>-1 0 0.5 0 0 0</pose>
  </include>
</model>
  </world>
</sdf>

Originally posted by raequin on Gazebo Answers with karma: 165 on 2018-04-17
Post score: 0

Original comments
Comment by chapulina on 2018-04-17:
It would be helpful to have the STLs too. Well actually, is it important that the holes are empty? You could always use a filled cylinder as the collision.
Comment by raequin on 2018-04-18:
Thanks.  I added a link to the STL file.  Regarding the use of a cylinder primitive, I'd already considered that and decided that yes the center hole is necessary since it gets hung on a peg :-/

A:

Based on personal experience, there are a couple things you can try:

Set maximum velocity impulse (max_vel) to 0 to enforce pure position correction with no added momentum from interpenetration correction. [Source]
Alternatively, set to max_vel to some small, non-zero value (e.g 1-10 m/s) to limit the added momementum from position correction

Set a finite minimum allowable interpenetration depth (min_depth) of 0.001 [m] (more generally a small value relative to the scale of the colliding objects. [Source]

If that doesn't make a difference, you may also try decreasing the physics simulation step size to get a better solution as explained here. This will reduce numerical instability but also slow down your simulation.

Originally posted by josephcoombe with karma: 609 on 2018-04-18
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by raequin on 2018-04-19:
Setting max_vel to 0 made no change but using 0.001 as the min_depth distance fixed the problem :)

