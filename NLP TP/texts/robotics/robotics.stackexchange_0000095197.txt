Q:

rosdep: installing dependency from non-apt-source

Hello,
a ROS package we maintain depends on a third-party-library which we build and host on our own server; we maintain .deb-packages for several architectures as well as a Windows installer.
After reading some rosdep tutorials and questions as well as looking at the base.yaml, I have written a .rdmanifest-file to get the package from our server and install it. I wanted to create a pull request today and checked the CONTRIBUTING.md before doing so; there, I read that only apt sources are accepted into rosdep. As it would be a lot of effort with not much gain to add our package to the official apt sources, we do not consider this a viable alternative.
Therefore, I have two questions:

Is it correct that my rosdep rule will not be accepted into the rosdistro repository?
Is there any way to use the .rdmanifest without adding it to the official rosdistro, e.g. using it as an argument for rosdep install?

Thanks in advance!

Originally posted by w-haag on ROS Answers with karma: 3 on 2020-03-26
Post score: 0

Original comments
Comment by gvdhoorn on 2020-03-26:
Related: #q255238. I don't believe anything has changed wrt the status of .rdmanifests. Also: #q322777.
You could look at how pylon_camera handles this. That package is not released through the ROS buildfarm, so users have to build it from source in their workspace. See the Installation section for how they handle the Basler SDK dependency and their use of .rdmanifest.
Comment by gvdhoorn on 2020-03-26:
Is your intent to be able to release your ROS package through the ROS buildfarm? If not: there would not seem to be an actual need to use rosdep here, nor .rdmanifest. As you already have .debs, just ask users to install those before trying to build your ROS package. With suitable find_library(..) or find_package(..) (or similar) statements in your CMakeLists.txt, missing dependencies are easily reported to users.
If you do intent to release through the ROS buildfarm, I don't believe this will be possible with packages depending on .rdmanifests.
Comment by w-haag on 2020-03-26:
Thank you very much!
Yes, the original intent was to release the ROS package through the buildfarm. Using bloom for the third party release seems to be the correct way of handling it.

A:

The links from @gvdhoorn are good.
If you have your own deb packages for your local purposes you can add your own custom rosdep rules to resolve them on your systems. rosdep can take extra items in the sources.list.d folder just like apt can. And if you add it on your systems rosdep will resolve it on your systems. (This does not need to be even a rdmanifest, it can be a standard debian rule. The only thing for it to work is that you also need to make sure to add your private apt repository
We will not accept rdmanifests to the main repository, but like above you can add your own rosdep sources to use them.
However as discussed in the comments releasing the package onto the ros buildfarm using bloom might make sense too. As long as it's open source and we can build and redistribute it.

Originally posted by tfoote with karma: 58457 on 2020-03-26
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by w-haag on 2020-03-26:
Thank you for the answer!

