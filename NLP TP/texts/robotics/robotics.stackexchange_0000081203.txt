Q:

Moveit planning inaccurate?

Hello there,
I'm trying to save robot positions to xml files, load them into an interface and make plans through the stored states.
However, i just loaded a pose into my program, planned and executed a Trajectory, but it is incredibly inaccurate!
I have this information in my Code:
position: 
  x: 0.25001175875
  y: 0.00521729120018
  z: 1.4402651584
orientation: 
  x: -2.02521411299e-05
  y: 1.32614594766e-06
  z: -0.999999995194
  w: 9.59202891974e-05

store it in arrays xyz and q
then i use :
robot_commander = moveit_commander.MoveGroupCommander('arm') //arm is the 6DOF Group of my Robot
robot_commander.set_position_target(xyz)
robot_commander.set_orientation_target(q)
plan = robot_commander.plan()
robot_commander.execute(plan) // besides: what is the difference to 'go()'  here?

and the resulting position is:
position:   
  x: 0.685057598278   
  y: -0.21755076457   
  z: 1.57268680334   
orientation:   
  x: -0.000313327718826  
  y: 0.000491862755421     
  z: 0.999999828845     
  w: 4.69705978272e-05

Which is ok when you only look at the orientation, but the position is off by more than 40cm..
I guess i could just save the joint states and let the robot move to them, but i want to know whats going on here? What am i missing?

Originally posted by David_111 on ROS Answers with karma: 32 on 2017-06-08
Post score: 0

Original comments
Comment by gvdhoorn on 2017-06-08:
One thing to check is to make sure that the pose you loaded is expressed in whatever frame you are currently planning in. If the saved pose and the planned one don't have the same origin, you can get these kind of translational offsets.
Comment by David_111 on 2017-06-08:
could you point me to a resource to learn more about that? I don't really know what you mean by "frame"

A:

use set_pose_target instead. In your code the planner is asked to get only the orientation right!
For your "besides" question: https://github.com/ros-planning/moveit_tutorials/pull/78

Originally posted by v4hn with karma: 2950 on 2017-06-08
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by David_111 on 2017-06-08:
if it would only get the orientation right, what does the robot_commander.set_position_target(xyz)  do?
Comment by v4hn on 2017-06-08:
It only gets the position right.
The MoveGroupInterface class that is used by the commander has different target modes:
JOINT, POSITION, ORIENTATION, and POSE. When you call a set_*_target method, the active target mode becomes the one you called and the previous mode is overwritten.
Comment by David_111 on 2017-06-11:
Thanks! That should be mentioned in the tutorial...
Comment by v4hn on 2017-06-12:
Could you point out a specific tutorial (we have a lot of them) and in the best case even provide a patch against the github repository? :)
Comment by David_111 on 2017-06-15:
i was referring to  this tutorial... What tutorials are you talking about? :)

