Q:

robot_localization EKF internal motion model

As I was not able to find this information in the documentation of the robot_localization package nor its source code, does anybody know what the "internal motion model" is that is used in theekf_robot_localization node?
Edit: In the corresponding paper, the authors state that they use a "standard 3D kinematic model derived from Newtonian mechanics", but I guess this model is derived from the kinematics of the test platform they used for the experiments.

Originally posted by takahashi on ROS Answers with karma: 185 on 2015-12-01
Post score: 8

A:

It's a generic omnidirectional motion model which isn't all that complicated, but it's a bit much to write out here. In this paper, it corresponds to the robot type (3,0), but the model in robot_localization is in 3D. Each variable has a nonlinear transition function, and we encode those transition functions as a matrix. So, for example, the transition function for x is x_new = x_old + vx * t + 0.5 * a * t^2, but v and a are given in the body frame of the robot, so we have to apply 3D rotations to them. The orientations have similar logic. Velocities (for x) are just vx_new = vx_old + at. Each row in the matrix is a transition function. We then derive the Jacobian analytically.
Naturally, this won't necessarily match ever robot perfectly, but in practice, it works pretty well for a broad range of robots. You an always increase the process_noise_covariance matrix values if the model doesn't match your robot well.
If you want to take a look, check out the predict function.

Originally posted by Tom Moore with karma: 13689 on 2015-12-03
This answer was ACCEPTED on the original site
Post score: 19

Original comments
Comment by takahashi on 2015-12-04:
thanks Tom and great work by the way! :-)
Comment by Tom Moore on 2015-12-04:
Thank you!
Comment by fastestindian on 2017-08-22:
Hi Tom,
We want to use robot_localization to localise a non-holonomic platform, aka ackermann. I was wondering if the 3D motion model in the EKF/UKF nodes would cover these motion constraints, and if so, is there a chance it could fail for an ackermann platform? Your advise is appreciated!
Comment by kgandhi24 on 2017-09-19:
Hey Tom,
If sensor data ( encoder and IMU ) has been used in prediction step and which data are you using in correction step?
Comment by Tom Moore on 2017-09-19:
The prediction step is handled entirely by the motion model. IMU and encoder data is used in correction.
Comment by Tom Moore on 2017-09-19:
@fastestindian The motion model isn't really conducive to Ackermann platforms (in 2D mode, it's really just a unicycle model), but it depends on the data you feed it. If you are feeding it pose data from some other Ackerman model, then the prediction step will be a bit off, but will get corrected.
Comment by plafer on 2020-10-15:
I looked everywhere for this information, and I feel like it really should be included in the documentation of the package!
Comment by Tom Moore on 2020-10-16:
Yeeaaaah, it probably should, I agree. Feel free to file a ticket, but I can't promise anything soon, sorry. :(
Comment by angelos.p on 2023-05-05:
Great explanation, Tom. Thank you for your great work!

