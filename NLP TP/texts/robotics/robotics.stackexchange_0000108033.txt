Q:

Calling ROS2 subscriber callback function from another function

I try to use x and y in timer_callback function but I get ‘x’ was not declared in this scope I don't know how can I do this
#include <chrono>
#include <functional>
#include <memory>
#include <string>

#include "rclcpp/rclcpp.hpp"
#include "geometry_msgs/msg/pose_stamped.hpp"

using std::placeholders::_1;
using namespace std::chrono_literals;

class MainA : public rclcpp::Node
{
  public:
  MainA(): Node("main"), count_(0)
  {
     gosub_ = this->create_subscription<geometry_msgs::msg::PoseStamped>(
      "sol",10,std::bind(&MainA::sub_callback, this,_1));
  publisher_ = this->create_publisher<geometry_msgs::msg::PoseStamped>(
    "/checkpoint", 10);
  timer_ = this->create_wall_timer(
  500ms, std::bind(&MainA::timer_callback, this));
 } 

 private: 
void sub_callback(const geometry_msgs::msg::PoseStamped & msg) const
{
  x = msg.pose.position.x;
  y = msg.pose.position.y;
}
void timer_callback(){
  auto message = geometry_msgs::msg::PoseStamped();
  message.header.frame_id = "map";
  message.header.stamp = this->now();
  message.pose.position.x = x;
  message.pose.position.y = y;
  message.pose.position.z = 0.0;
  
  publisher_->publish(message);
}
rclcpp::TimerBase::SharedPtr timer_;
rclcpp::Subscription<geometry_msgs::msg::PoseStamped>::SharedPtr gosub_;
rclcpp::Publisher<geometry_msgs::msg::PoseStamped>::SharedPtr publisher_;
size_t count_;
};

int main(int argc, char * argv[])
{
rclcpp::init(argc, argv);
rclcpp::spin(std::make_shared<MainA>());
rclcpp::shutdown();
return 0;
}

A:

From a quick look, it seems that you missed the declaration of the variable x and y in your code. In C++ you need to declare every variable you want to use.
You may solve by adding the declaration right after size_t count:
size_t count;
double x;
double y;

