Q:

Template errors creating Approximate Time Synchroniser

Compiler: gcc9.4.0 Arch: Ubuntu20.04/AMD64 ROS Galactic
I'm struggling still to compile a node using an approximate time sync from two topics. I've attempted to closely follow the method used by image_pipeline but even with a few changes to try to solve my issue I'm still stumped on how to get template matching to work correctly here.
Help understanding what's going on/wrong here would be appreciated :)
My class is defined as:
namespace pose_eval {
    using namespace geometry_msgs::msg;
    using namespace sensor_msgs::msg;
    using namespace vision_msgs::msg;
    using namespace std_msgs::msg;
    template <class T>
    using Sub = message_filters::Subscriber<T>;

    class PoseEval : public rclcpp::Node {
    private:
        using ApproxPolicy = message_filters::sync_policies::ApproximateTime<Detection2D, PointCloud2>;
        using ApproxSync = message_filters::Synchronizer<ApproxPolicy>;

        rclcpp::Publisher<PointStamped>::SharedPtr detect_loc_pub_;
        std::shared_ptr<ApproxSync> synch_subs_;
        message_filters::Subscriber<PointCloud2> pc2_sub_;
        message_filters::Subscriber<Detection2D> best_detect_sub_;

        void points_callback(const PointCloud2::ConstSharedPtr &points, const Detection2D &best_match);

    public:
        PoseEval(rclcpp::NodeOptions options);
        PoseEval();
        ~PoseEval();
    };
}

And instantiated as:
PoseEval::PoseEval(rclcpp::NodeOptions options) : Node("pose_eval_cpp", options) {
        rclcpp::QoS qos = rclcpp::SystemDefaultsQoS();
        std::string ns = std::string(this->get_namespace());
        this->detect_loc_pub_ = this->create_publisher<PointStamped>(ns + std::string("/"), qos);
        pc2_sub_.subscribe(this, ns + "", qos.get_rmw_qos_profile());
        best_detect_sub_.subscribe(this, ns + "", qos.get_rmw_qos_profile());

        synch_subs_ = std::make_shared<ApproxSync>(
            ApproxPolicy(5),
            pc2_sub_,
            best_detect_sub_);
        synch_subs_->registerCallback(std::bind(&PoseEval::points_callback, this, std::placeholders::_1, std::placeholders::_2));
    }

The (very verbose) error for that is:

This code block was moved to the following github gist:
https://gist.github.com/answers-se-migration-openrobotics/405b01eee5b166fb7d811748cb80fbc5

Originally posted by Nilaos on ROS Answers with karma: 13 on 2023-06-23
Post score: 0

A:

I've created a workaround for this, consisting of a new custom message definition containing all messages of interest and a simple python node that synchronises and republishes the messages as a 'bundled' message.
Not exactly a 'great' solution, but it works.

Originally posted by Nilaos with karma: 13 on 2023-07-02
This answer was ACCEPTED on the original site
Post score: 0

