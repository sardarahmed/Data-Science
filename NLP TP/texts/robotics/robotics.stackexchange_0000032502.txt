Q:

Looking for an existing ROS + Qt example

I'm currently building a remote cockpit/basestation for my robot, and I was considering using ROS and Qt to do it.  I have a lot of experience using ROS, but this is definitely one of my first times using Qt.  We're fairly committed to Qt, but we're still trying to decide on a backend for our app.  ROS is definitely one potential option, assuming it slots in nicely with Qt.
The closest thing I've found to a ROS/Qt quickstart guide was (http://www.ros.org/wiki/eros_python_tools/roscreate_qt_pkg), but I was really looking for was a an existing ROS Qt package or application that I could run.
Does someone have an existing [and fairly crisp] ROS Qt application that they could point me to?

Originally posted by vpradeep on ROS Answers with karma: 760 on 2011-06-23
Post score: 2

Original comments
Comment by vpradeep on 2011-06-23:
This question is somewhat related to: http://answers.ros.org/question/32/is-ros-still-looking-at-using-qt

A:

Eros also has a package with qt versions of some of the roscpp_tutorials eros_qt_tutorials. Note that although its in e(mbedded)ros, you don't have to be doing embedded to compile these - they compile just as well natively. They integrate ros/qt along with the .ui designer files so that its easy to build your layout.
You can install eros and build/run eros_qt_tutorials directly, or if you just want to check out the package code without all of eros and pull bits from that:
svn co https://code.ros.org/svn/eros/tags/diamondback/tests/eros_qt_tutorials

The only special thing it uses is the eros_prepare_qt4 cmake macro (in CMakeLists.txt) which doesn't do anything special - it just helps patch a few corner case issues for static qt builds until the next cmake release comes out with some fixes.
If doing a shared library build, you can effectively replace that eros_prepare_qt4 with
# Add other components as you need them
find_package(Qt4 COMPONENTS QtCore QtGui)
include(${QT_USE_FILE})
# Need to pick up autogen'd ui files in build dir, so add the following
include_directories(${CMAKE_CURRENT_BINARY_DIR}) 

Originally posted by Daniel Stonier with karma: 3170 on 2011-06-23
This answer was ACCEPTED on the original site
Post score: 4

