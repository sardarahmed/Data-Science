Q:

How do you use CallbackGroups as a replacement for CallbackQueues in ROS2?

I am looking at porting tf2_ros/include/message_filter.h from ROS1 to ROS2 (see issue: https://github.com/ros2/geometry2/issues/59 2).
The existing tf2 message_filter.h relies on using the CallbackQueueInterface in order to enqueue messages that it receives before they are sent on to subsequent filters/callbacks. It appears that ROS2 has changed the concept of a node have a single CallbackQueue to a node having multiple CallbackGroups that can have different thread locking mechanisms. This makes sense, but it is unclear to me how I can use a CallbackGroup instance to add a callback event to be processed. Are callback groups the proper way to handle this in ROS2 or is there a different mechanism that should be used to decouple two filters in a chain from being run in the same thread context? If CallbackGroups are the proper way to do this then how do you actually add a Callback to the group in order for it to be processed?
Thanks,
Nick

Originally posted by nburek on ROS Answers with karma: 1 on 2018-08-17
Post score: 0

A:

I believe you understand the way we intended for it to work.
Unfortunately at the moment the API is not completely there for how we'd like it to work. We've ticketed the upgrade needed to the API on rclcpp here: https://github.com/ros2/rclcpp/issues/519
There is potentially a hack to create another node and add things to it. But we'd want to get rid of that as soon as #519 above is resolved.

Originally posted by tfoote with karma: 58457 on 2018-08-21
This answer was ACCEPTED on the original site
Post score: 0

