Q:

Can mapping be done in real life applications without also solving the localization problem at the same time (i.e. SLAM)?

I know that Occupancy Grid Mapping requires the assumption that the robots' pose is always known when generating a map.  However, I also know that in reality, position and orientation usually treated as uncertain in practical applications.  Assuming that my target mapping environment is inside a home, is there a way I can overcome inherent robot pose uncertainty in a real world application of Occupancy Grid Mapping without resorting to implementing a SLAM?  That is, what is a low-cost way to increase the certainty about my pose?  
Or is Occupancy Grid Mapping only useful in theory and not in practice?  
Update:
It is clear to me, from the responses given, that occupancy grid mapping is just one possible way to represent a map, not a method in and of itself.  The heart of what I really want to know is:  Can mapping be done without also solving the localization problem at the same time (i.e. SLAM) in real life applications? 

A:

First off, occupancy grid mapping is just one possible representation of a map. I think your question really applies many map representations. Here are my thoughts.
Mapping without SLAM
Whether or not you can build a map from your sensor measurements without fully implementing SLAM depends on a couple things:

Do you have absolute sensors for localization? For example, you could drive all day, and if GPS is always available, your localization error will not grow. Or if you are indoors, external camera systems (i.e., not on your robot and in known positions) can serve the same purpose. If you do have absolute sensors, the accuracy of your map can only be as accurate as the uncertainty of your absolute localization sensor compounded by the uncertainty of your mapping sensor.
If you only have relative localization sensors (e.g., wheel encoders, IMU, camera mounted on the robot), you will have dead-reckoning error. The error in your pose estimate will grow over time. Then you have to ask yourself: is it growing at a small enough rate that I can produce a good enough map before the pose is too uncertain? Note that this approach is almost never used (you would implement SLAM instead).

In general, you need to answer these questions: What sensors do I have available? How accurate does my map need to be for its application? You asked about a low cost way to improve your pose estimate. Well the lowest cost of them all is to implement SLAM! In particular, if you "close the loop" (i.e., revisit earlier landmarks), you can drastically curtail the effects of dead-reckoning. But to answer your question with an actual sensor, take a look at setting up cheap stationary cameras that can triangulate the pose of the robot.

