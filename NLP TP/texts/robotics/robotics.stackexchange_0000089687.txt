Q:

Error with service server for Arduino

Hi folks, I am trying to build a service server on an Arduino UNO using ROS. I am running ROS Kinetic on Ubuntu 16.04. I am currently stuck with the following problem and I do not know how to solve it. I would appreciate if you can help me out.
First of all, the script I built to test if the workspace works correctly is posted below:
#include <ros.h>
#include <helloworld_msgs/ModeSelect.h>
#include <Arduino.h>
#include <std_srvs/Empty.h>

// Create roscpp's interface for creating subscribers, publishers, etc
ros::NodeHandle n;

void setup()
{
  // Initialize node
  n.initNode();
}

void loop()
{
  n.spinOnce();
  delay(1000);
}

After building this package using 'catkin build', I obtained the following message indicating it was built successfully:
Warnings   << helloworld:make /home/mirzam/cmaketut_ws/logs/helloworld/build.make.165.log
make[3]: warning: jobserver unavailable: using -j1.  Add '+' to parent make rule.
Firmware Size:  [Program: 8424 bytes (25.7%)]  [Data: 1277 bytes (62.4%)] on atmega328p
EEPROM   Size:  [Program: 0 bytes (0.0%)]  [Data: 0 bytes (0.0%)] on atmega328p

cd /home/mirzam/cmaketut_ws/build/helloworld; catkin build --get-env helloworld | catkin env -si  /usr/bin/make --jobserver-fds=6,7 -j; cd -

Therefore, I assume that the functions for creating a service server are available now for use. The scripts for the CMake list and package.xml for the helloworld package (the package that contains the servernode.cpp) can be found in the following two links respectively:
link text
and link text
The CMake file inside the directory where the script is located can be found here: link text
Programming the code onto the Arduino also seems to work.
Then I decided to create a simple service server which takes request from the std_srvs Empty type. I checked if this type is available with 'rossrv list'  (as well as the custom made srv type ModeSelect, which is eventually what I want to include into the service server). The std_srvs/Empty is indeed available:
std_srvs/Empty
helloworld_msgs/ModeSelect

I have adjusted the code to create a service server:
#include <ros.h>
#include <helloworld_msgs/ModeSelect.h>
#include <Arduino.h>
#include <std_srvs/Empty.h>

// Create roscpp's interface for creating subscribers, publishers, etc
ros::NodeHandle n;

// Create a service server that takes nothing and returns nothing
void callback(std_srvs::Empty::Request &req, std_srvs::Empty::Response &res)
{
  // Simulate function running for a non-deterministic amount of time
  delay(random(5,70));
}

void setup()
{
  // Initialize node
  n.initNode();
}

ros::ServiceServer service = n.advertiseService("get_nothing", &callback);

void loop()
{
  n.spinOnce();
  delay(1000);
}

However, if I try to build the package, I get the following error message:
Errors     << helloworld:make /home/mirzam/cmaketut_ws/logs/helloworld/build.make.170.log
make[3]: warning: jobserver unavailable: using -j1.  Add '+' to parent make rule.
/home/mirzam/cmaketut_ws/src/helloworld/firmware/servernode.cpp:22:1: error: invalid use of template-name ‘ros::ServiceServer’ without an argument list
 ros::ServiceServer service = n.advertiseService("get_nothing", &callback);
 ^
make[6]: *** [CMakeFiles/hello.dir/servernode.cpp.obj] Error 1
make[5]: *** [CMakeFiles/hello.dir/all] Error 2
make[4]: *** [CMakeFiles/hello.dir/rule] Error 2
make[3]: *** [hello] Error 2
make[2]: *** [CMakeFiles/helloworld_firmware_hello] Error 2
make[1]: *** [CMakeFiles/helloworld_firmware_hello.dir/all] Error 2
make: *** [all] Error 2
cd /home/mirzam/cmaketut_ws/build/helloworld; catkin build --get-env helloworld | catkin env -si  /usr/bin/make --jobserver-fds=6,7 -j; cd -

I have searched every corner of the web to see how to fix this problem. It seemed like I needed to tell explicitly which request and response message data type the service server gets, so I adjusted this particular line of code:
ros::ServiceServer service = n.advertiseService("get_nothing", &callback);

To:
ros::ServiceServer<std_srvs::Empty::Request, std_srvs::Empty::Response> service = n.advertiseService("get_nothing", &callback);

Unfortunately, this did not solve anything. The error message I get now is:
Errors     << helloworld:make /home/mirzam/cmaketut_ws/logs/helloworld/build.make.171.log
make[3]: warning: jobserver unavailable: using -j1.  Add '+' to parent make rule.
/home/mirzam/cmaketut_ws/src/helloworld/firmware/servernode.cpp:22:126: error: no matching function for call to ‘ros::NodeHandle_<ArduinoHardware, 25, 25, 280, 280>::advertiseService(const char [12], void (*)(std_srvs::Empty::Request&, std_srvs::Empty::Response&))’
 ros::ServiceServer<std_srvs::Empty::Request, std_srvs::Empty::Response> service = n.advertiseService("get_nothing", &callback);
                                                                                                                              ^
/home/mirzam/cmaketut_ws/src/helloworld/firmware/servernode.cpp:22:126: note: candidate is:
In file included from /home/mirzam/cmaketut_ws/build/helloworld/ros_lib/ros.h:38:0,
                 from /home/mirzam/cmaketut_ws/src/helloworld/firmware/servernode.cpp:1:
/home/mirzam/cmaketut_ws/build/helloworld/ros_lib/ros/node_handle.h:448:8: note: template<class MReq, class MRes, class ObjT> bool ros::NodeHandle_<Hardware, MAX_SUBSCRIBERS, MAX_PUBLISHERS, INPUT_SIZE, OUTPUT_SIZE>::advertiseService(ros::ServiceServer<MReq, MRes, ObjT>&) [with MReq = MReq; MRes = MRes; ObjT = ObjT; Hardware = ArduinoHardware; int MAX_SUBSCRIBERS = 25; int MAX_PUBLISHERS = 25; int INPUT_SIZE = 280; int OUTPUT_SIZE = 280]
   bool advertiseService(ServiceServer<MReq, MRes, ObjT>& srv)
        ^
/home/mirzam/cmaketut_ws/build/helloworld/ros_lib/ros/node_handle.h:448:8: note:   template argument deduction/substitution failed:
/home/mirzam/cmaketut_ws/src/helloworld/firmware/servernode.cpp:22:126: note:   mismatched types ‘ros::ServiceServer<MReq, MRes, ObjT>’ and ‘const char [12]’
 ros::ServiceServer<std_srvs::Empty::Request, std_srvs::Empty::Response> service = n.advertiseService("get_nothing", &callback);
                                                                                                                              ^
make[6]: *** [CMakeFiles/hello.dir/servernode.cpp.obj] Error 1
make[5]: *** [CMakeFiles/hello.dir/all] Error 2
make[4]: *** [CMakeFiles/hello.dir/rule] Error 2
make[3]: *** [hello] Error 2
make[2]: *** [CMakeFiles/helloworld_firmware_hello] Error 2
make[1]: *** [CMakeFiles/helloworld_firmware_hello.dir/all] Error 2
make: *** [all] Error 2
cd /home/mirzam/cmaketut_ws/build/helloworld; catkin build --get-env helloworld | catkin env -si  /usr/bin/make --jobserver-fds=6,7 -j; cd -

I think that I am implementing a service server the right way. Do you have any suggestions on what is wrong with the code/package? Or in general, do you have any tips on how to implement a service server on a microcontroller?
Thank you for helping me out!

Originally posted by Mirzam on ROS Answers with karma: 33 on 2018-11-24
Post score: 3

A:

I believe the issue here is that you're supplying the service name to advertiseService(..).
According to the code of that function, it only accepts a reference to a ServiceServer instance, similar to how you advertise(..) a Publisher or Subscriber in rosserial (see here).
The prototype of advertiseService(..) is actually:
template<class MReq, class MRes, class ObjT>
bool ros::NodeHandle_<Hardware, MAX_SUBSCRIBERS, MAX_PUBLISHERS, INPUT_SIZE, OUTPUT_SIZE>::advertiseService(ros::ServiceServer<MReq, MRes, ObjT>&)

Note there is no char[] or std::string in there anywhere.
To initialise the service server the code should probably be something like:
#include <ros.h>
#include <Arduino.h>
#include <std_srvs/Empty.h>

// Create roscpp's interface for creating subscribers, publishers, etc
ros::NodeHandle n;

// Create a service server that takes nothing and returns nothing
void callback(std_srvs::Empty::Request &req, std_srvs::Empty::Response &res)
{
  // Simulate function running for a non-deterministic amount of time
  delay(random(5,70));
}

ros::ServiceServer<std_srvs::Empty::Request, std_srvs::Empty::Response> service("get_nothing", &callback);

void setup()
{
  // Initialize node
  n.initNode();
  n.advertiseService(service);
}

void loop()
{
  n.spinOnce();
  delay(1000);
}

Note the use of advertiseService(..) in the setup() function, and the declaration of service with the service name and the callback.

Originally posted by gvdhoorn with karma: 86574 on 2018-12-06
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by gvdhoorn on 2018-12-06:
Note btw: I'm not sure it's a good idea to loop at 1 Hz. It could be that this leads to desyncs (buffer overflows due to the low rate of processing events).
Comment by Mirzam on 2018-12-06:
Thank you for the response! It now works on the Arduino.

