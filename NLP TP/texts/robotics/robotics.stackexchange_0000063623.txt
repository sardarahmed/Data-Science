Q:

How to rotate vector by quaternion in python

What is the python tf API to rotate a vector by a quaternion to get another vector?

Originally posted by robzz on ROS Answers with karma: 328 on 2014-10-28
Post score: 9

A:

Okay, based on @tfoote's response and this answer to a related question, I think this does the job:
# rotate vector v1 by quaternion q1 
def qv_mult(q1, v1):
    # comment this out if v1 doesn't need to be a unit vector
    v1 = tf.transformations.unit_vector(v1)
    q2 = list(v1)
    q2.append(0.0)
    return tf.transformations.quaternion_multiply(
        tf.transformations.quaternion_multiply(q1, q2), 
        tf.transformations.quaternion_conjugate(q1)
    )[:3]

Originally posted by robzz with karma: 328 on 2014-10-28
This answer was ACCEPTED on the original site
Post score: 11

Original comments
Comment by vik748 on 2018-07-12:
After a lot of searching, this is what I needed.  A comment, the unit_vector conversion might not make sense depending on the application.  If you are transforming velocities, you might not want to do the conversion.
Comment by JadTawil on 2018-10-21:
Can you please explain the math being done here? Also vik748 can you elaborate?
Comment by mojovski on 2018-11-02:
and there is no more complicated way?
Comment by Enmar on 2019-09-30:
This is what i needed!
I just multiplied this resulting vector by my vector length to get the transformation!
Comment by lucasw on 2021-11-11:
This answer is concise, matches the code above: https://gamedev.stackexchange.com/questions/28395/rotating-vector3-by-a-quaternion

Pre-multiply the vector with q and post-multiply it with the conjugate q*

Comment by AndyZe on 2021-11-11:
We're assuming this is a 3-long vector, right?

