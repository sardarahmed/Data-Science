Q:

Catkin_make skips new package

I am a beginner with ROS, working through chapter 2 of the Learning ROS for Robotics Programming book (2nd ed).  When I use catkin_create_pkg it appears to execute normally (my terminal output matches the output shown in the book).  I then change directory to my workspace and execute catkin_make.  This completes without any errors, but it fails to acknowledge my new package.  Using rospack find also fails to find the package.  What am I missing?  Thanks for your help in advance!
Edit: here's requested data to help diagnose my problem.
#Terminal input/output for catkin_make:
viki@c3po:~$ cd ~/dev/catkin_ws
viki@c3po:~/dev/catkin_ws$ catkin_make
Base path: /home/viki/dev/catkin_ws
Source space:
/home/viki/dev/catkin_ws/src Build
space: /home/viki/dev/catkin_ws/build
Devel space:
/home/viki/dev/catkin_ws/devel Install
space:
/home/viki/dev/catkin_ws/install
####
#### Running command: "make cmake_check_build_system" in
"/home/viki/dev/catkin_ws/build"
####
####
#### Running command: "make -j1 -l1" in "/home/viki/dev/catkin_ws/build"
#### viki@c3po:~/dev/catkin_ws$ rospack find chapter2_tutorials
[rospack] Error: stack/package
chapter2_tutorials not found

#CMakeLists.txt:
cmake_minimum_required(VERSION 2.8.3)
project(chapter2_tutorials)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  roscpp
  std_msgs
)

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)

## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependencies might have been
##     pulled in transitively but can be declared for certainty nonetheless:
##     * add a build_depend tag for "message_generation"
##     * add a run_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
# add_message_files(
#   FILES
#   Message1.msg
#   Message2.msg
# )

## Generate services in the 'srv' folder
# add_service_files(
#   FILES
#   Service1.srv
#   Service2.srv
# )

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
# generate_messages(
#   DEPENDENCIES
#   std_msgs
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES chapter2_tutorials
#  CATKIN_DEPENDS roscpp std_msgs
#  DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
# include_directories(include)
include_directories(
  ${catkin_INCLUDE_DIRS}
)

## Declare a cpp library
# add_library(chapter2_tutorials
#   src/${PROJECT_NAME}/chapter2_tutorials.cpp
# )

## Declare a cpp executable
# add_executable(chapter2_tutorials_node src/chapter2_tutorials_node.cpp)

## Add cmake target dependencies of the executable/library
## as an example, message headers may need to be generated before nodes
# add_dependencies(chapter2_tutorials_node chapter2_tutorials_generate_messages_cpp)

## Specify libraries to link a library or executable target against
# target_link_libraries(chapter2_tutorials_node
#   ${catkin_LIBRARIES}
# )

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS chapter2_tutorials chapter2_tutorials_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_chapter2_tutorials.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)

#package.xml:
<package>
  <name>chapter2_tutorials</name>
  <version>0.0.0</version>
  <description>The chapter2_tutorials package</description>

  <!-- One maintainer tag required, multiple allowed, one person per tag --> 
  <!-- Example:  -->
  <!-- <maintainer email="jane.doe@example.com">Jane Doe</maintainer> -->
  <maintainer email="viki@todo.todo">viki</maintainer>

  <!-- One license tag required, multiple allowed, one license per tag -->
  <!-- Commonly used license strings: -->
  <!--   BSD, MIT, Boost Software License, GPLv2, GPLv3, LGPLv2.1, LGPLv3 -->
  <license>TODO</license>

  <!-- Url tags are optional, but mutiple are allowed, one per tag -->
  <!-- Optional attribute type can be: website, bugtracker, or repository -->
  <!-- Example: -->
  <!-- <url type="website">http://wiki.ros.org/chapter2_tutorials</url> -->

  <!-- Author tags are optional, mutiple are allowed, one per tag -->
  <!-- Authors do not have to be maintianers, but could be -->
  <!-- Example: -->
  <!-- <author email="jane.doe@example.com">Jane Doe</author> -->

  <!-- The *_depend tags are used to specify dependencies -->
  <!-- Dependencies can be catkin packages or system dependencies -->
  <!-- Examples: -->
  <!-- Use build_depend for packages you need at compile time: -->
  <!--   <build_depend>message_generation</build_depend> -->
  <!-- Use buildtool_depend for build tool packages: -->
  <!--   <buildtool_depend>catkin</buildtool_depend> -->
  <!-- Use run_depend for packages you need at runtime: -->
  <!--   <run_depend>message_runtime</run_depend> -->
  <!-- Use test_depend for packages you need only for testing: -->
  <!--   <test_depend>gtest</test_depend> -->
  <buildtool_depend>catkin</buildtool_depend>
  <build_depend>roscpp</build_depend>
  <build_depend>std_msgs</build_depend>
  <run_depend>roscpp</run_depend>
  <run_depend>std_msgs</run_depend>

  <!-- The export tag contains other, unspecified, tags -->
  <export>
    <!-- You can specify that this package is a metapackage here: -->
    <!-- <metapackage/> -->

    <!-- Other tools can request additional information be placed here -->

  </export>
</package>

Originally posted by adiadidas15 on ROS Answers with karma: 1 on 2016-05-16
Post score: 0

Original comments
Comment by mgruhler on 2016-05-17:
Is this new package in a catkin workspace? (i.e. did you call catkin_init_workspace in the src folder?)
In which directory are you calling catkin_make?
Comment by adiadidas15 on 2016-05-17:
Yes, I can confirm that catkin_init_workspace was executed because when I tried it just now, it echoed: ~"/dev/catkin_ws/src/CMakeLists.txt" already exists.  I execute catkin_make in ~/dev/catkin_ws as instructed by the tutorial.
Comment by mgruhler on 2016-05-18:
did you then source ~/dev/catkin_ws/devel/setup.bash? If not, please edit your question with the output of catkin_make (copy-paste, please no screenshot),  as well as with the contents of package.xml and CMakelists.txt.
Comment by adiadidas15 on 2016-05-18:
Following my tutorial, I edited my ~/.bashrc file by echo "source /opt/ros/hydro/setup.bash" >> ~/.bashrc.  So this step should be taken care of when I restart the terminal.  In case it is helpful for you, I added the data you requested.  Sorry about the formatting.  It was better when previewed.
Comment by adiadidas15 on 2016-05-18:
And thanks for your continued support!
Comment by mgruhler on 2016-05-19:
@adiadidas15 please reupload this and format it properly ;-) It is so hard to read like this.
I.e. just copy-paste directly from the file, mark it, and then hit the button with the 101010 on it. This is code formatting.
Also, we need the CMakelists.txt of your package, not the top-level one.
Comment by mgruhler on 2016-05-19:
You need to source your workspace, i.e. not only source  /opt/ros/hydro/setup.bash (and I would actually go to a more recent version like indigo or soon kinetic), but source ~/dev/catkin_ws/devel/setup.bash. Otherwise, it will not find anything because echo $ROS_PACKAGE_PATH needs to contain
Comment by mgruhler on 2016-05-19:
the path to your workspace. Otherwise, it is clear why it does not find your package. It is just not on your path.
Comment by adiadidas15 on 2016-05-19:
mig, thanks so much for your help!  It turns out that sourcing ~/dev/catkin_ws/devel/setup.bash fixed my problem.  The tutorial book I purchased gave the misleading statement "this step is only to reload the the setup.bash file.  You will obtain the same result if you close and open a new shell."
Comment by adiadidas15 on 2016-05-19:
I am using Hydro so that I can follow along with the book I purchased.  I plan on using Indigo after working through the tutorials.
Comment by adiadidas15 on 2016-05-19:
Well, it seems I spoke too soon about resolving my problem.  rospack find is now able to find my new package.  However, catkin_make still does not build the package.  rosrun is not able to find the package.

A:

You should first run source ~/dev/catkin_ws/devel/setup.bash and if you use rosbuild(which is not your case) from the terminal  echo "export ROS_PACKAGE_PATH"~/dev/yourfoldername:${ROS_PACKAGE_PATH}" >> ~/.bashrc
or manually add this export ROS_PACKAGE_PATH"~/dev/yourfoldername:${ROS_PACKAGE_PATH} at the end of the ~/.bashrc file
You did forget to edit your CMakelists.txt as it is in the book in the paragraph Building the node
rosbuild_add_executable(example1_a src/example1_a.cpp) 
rosbuild_add_executable(example1_b src/example1_b.cpp)

And in the book there are using Rosbuild package, but if you want to use catkin, just edit your CMakelists.txt as follow
include_directories(include ${catkin_INCLUDE_DIRS})

add_executable(example1_a src/example1_a.cpp)
target_link_libraries(example1_a ${catkin_LIBRARIES})
add_dependencies(example1_a chapter2_tutorials_generate_messages_cpp)

add_executable(example1_b src/example1_b.cpp)
target_link_libraries(example1_b ${catkin_LIBRARIES})
add_dependencies(example1_b chapter2_tutorials_generate_messages_cpp)

Originally posted by ROSkinect with karma: 751 on 2016-05-20
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by adiadidas15 on 2016-05-20:
Thanks ROSkinect for your advice.  What I said above is based on pages 43 & 44 of the book, which indicate that the following commands will result in the built package:
cd ~/dev/catkin_ws/src
catkin_create_pkg chapter2_tutorials std_msgs roscpp
cd ~/dev/catkin_ws
catkin_make

Comment by adiadidas15 on 2016-05-20:
Do you agree, or am I misreading the book?  Thinking that the source devel/setup.bash was the reason for catkin_make failing to compile my project, I went forward in the chapter and added the code which you kindly provided from pages 56 through 60.
Comment by adiadidas15 on 2016-05-20:
Unfortunately, when I execute catkin_make chapter2_tutorials mentioned on page 60, the package still isn't built.  So I am still baffled about what I am getting wrong...
Comment by adiadidas15 on 2016-05-20:
I also just noticed that you mentioned the book using Rosbuild, however, in my book (Second Edition) I cannot find Rosbuild being mentioned anywhere in chapter 2.  Where do you see this at?
Comment by ROSkinect on 2016-05-21:
I edited my answer, check it out
Comment by adiadidas15 on 2016-05-22:
ROSkinect, thanks for all your help.  As I explained to mig, I decided to start the tutorial over in a new workspace and was able to complete it successfully.  I still don't know why my original package wouldn't build, but that is okay...

