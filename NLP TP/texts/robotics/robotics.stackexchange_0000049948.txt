Q:

Publishing to a topic via subscriber callback function

Hello,
I am wondering if anybody could help me with this problem. I have a listener that just publishes to a topic when another topic is published data, so basically the topic it is listening on gets data published. I have tried putting global variable in the code whose change can map into the main function but ros is not allowing global variables. I also tried to define the nodehandle as global but ros is not allowing this either. (I think before rosinit no ros components will be recognized). My code is in C++. Any help as to what could be done would be really appreciated. I am including a basic skeleton of the code I am trying:
void func_cb(std_msgs type param as defined in ros chatter example)
{
    //*need some code here to publish to a topic*
    //*problem:nodehandle out of scope,cannot define new nodehandle*
}

int main(... )
{
    //ros initilization
    //ros node handle initialization
    //ros subscription initialization
    //callback spinner
    return 0;
}

Originally posted by joy on ROS Answers with karma: 85 on 2013-04-01
Post score: 6

A:

You could define a class that handles everything and avoid using ugly global variables:
#include <ros/ros.h>

class SubscribeAndPublish
{
public:
  SubscribeAndPublish()
  {
    //Topic you want to publish
    pub_ = n_.advertise<PUBLISHED_MESSAGE_TYPE>("/published_topic", 1);

    //Topic you want to subscribe
    sub_ = n_.subscribe("/subscribed_topic", 1, &SubscribeAndPublish::callback, this);
  }

  void callback(const SUBSCRIBED_MESSAGE_TYPE& input)
  {
    PUBLISHED_MESSAGE_TYPE output;
    //.... do something with the input and generate the output...
    pub_.publish(output);
  }

private:
  ros::NodeHandle n_; 
  ros::Publisher pub_;
  ros::Subscriber sub_;

};//End of class SubscribeAndPublish

int main(int argc, char **argv)
{
  //Initiate ROS
  ros::init(argc, argv, "subscribe_and_publish");

  //Create an object of class SubscribeAndPublish that will take care of everything
  SubscribeAndPublish SAPObject;

  ros::spin();

  return 0;
}

Originally posted by Martin Peris with karma: 5625 on 2013-04-01
This answer was ACCEPTED on the original site
Post score: 46

Original comments
Comment by joy on 2013-04-02:
Thanx Martin...One question though: If I create multiple objects how will ROS handle multiple instances of class publishing in the same topic especially if it is some topic like geomtry_msgs::Twist type? Is it a sequential/interleaved type execution?
Comment by Martin Peris on 2013-04-02:
That is a good question. If I am not mistaken, when you create multiple instances of SubscribeAndPublish object, lets say n, then for each message received on the topic "/subscribed_topic" you will generate n messages on the topic "/published_topic". No guarantees about the order though.
Comment by joy on 2013-04-05:
So the message is tied with the object id. Thanx so much for clearing that up. :)
Comment by drewm1980 on 2015-10-20:
Yeah, I was also going to warn that none the published messages won't actually be sent until after the callback returns. I landed here looking for a workaround.
Comment by OMC on 2016-06-29:
I just wanted to warn you that I think there is a semicolon missing at the end of the class declaration. Thank you for your suggestion!
Comment by Martin Peris on 2016-07-06:
Thanks @Billie, fixed.
Comment by Milliau on 2016-12-06:
I used this example fpr oublishing velocity from my joystick to my motor. But there is a delay. Maybe I can solve the problem by changing the publsih rate. How can I cahanged the publish rate at this example?
Comment by Martin Peris on 2016-12-11:
You can substitute the call to ros::spin() with:
while(true)
{
ros::Rate(YOUR_DESIRED_RATE).sleep();
ros::spinOnce();
}
Comment by OMC on 2017-02-24:
Would it make sense to make n_, pub_, and sub_ static in case we expect several objects to be created?
I have tried but I am unable to initialize them inside the constructor in the .cpp (the class definition is in a header).
Comment by lhnguyen on 2017-06-12:
Hi, Milliau,
I'm working with AUV. I need to transfer angular velocity (received from joystick, mounted to Ground Station Computer) via RJ45 cable to control motors (connected to Pixhawk which connected to Odroid companion computer). I think it's almost the same as you said. Could you shareYourCode
Comment by Blupon on 2017-08-07:
no actual need to set Nodehandle, Publisher and Subscriber as private variables, isn't it ? and what's the (last) "this" argument for n_.subscribe ? Thanks for this nice example code !
Comment by Martin Peris on 2017-08-13:
Hi @Blupon, absolutely no need to make NodeHandle, Publisher and Subscriber private variables if you don't mind other objects having access to them. The last argument in n_.sibscribe is a pointer to the object instance that implements the SubscribeAndPublish::callback
Comment by aks on 2018-04-20:
in the above example, what is it exactly publishing and subscribing ? or is it just a sample ?
Lets say in the callback function, I do output.data = input.data + 5 and then publish the output using pub_.publish(output); and then use ROS_INFO to get the info on the console. Shouldnt it work?
Comment by Martin Peris on 2018-04-20:
It is a pretty much complete example, you only need to change PUBLISHED_MESSAGE_TYPE and SUBSCRIBED_MESSAGE_TYPE to the types that you need. In your case, if output.data and input.data are the same type (for example int), then your idea should work
Comment by aks on 2018-04-20:
It isnt working and i cannot understand why. Could it be that both the topics are different that is why  ?
Comment by dj95 on 2020-03-06:
Is there a particular nomenclature for having trailing underscores in variable name definition? (pub_,sub_,n_)
Comment by Martin Peris on 2020-03-10:
I am not aware of a particular nomenclature, I was following Google's C++ Style Guide: https://google.github.io/styleguide/cppguide.html#Variable_Names "The names of variables (including function parameters) and data members are all lowercase, with underscores between words. Data members of classes (but not structs) additionally have trailing underscores. For instance: a_local_variable, a_struct_data_member, a_class_data_member_."
Comment by dj95 on 2020-03-11:
Thanks Martin!
Comment by Thomasraynal on 2020-03-18:
4 hours of search to finally find you, i love you dude you are a life saver <3
Comment by Martin Peris on 2020-03-19:
Glad you found it useful :)

