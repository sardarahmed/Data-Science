Q:

Should a calibrated frame be in a URDF

I'm working on a robot cell that has many different pieces of equipment.  The equipment geometry/location is captured in a single URDF for the robot cell.  In operation, I would like to calibrate the transforms between pieces of equipment.  In some sense, these transforms are semi-fixed (i.e. they are fixed once calibrated).  Is there a best practice for achieving this?
One approach is to update the URDF during the calibration step.  However, there don't appear to be any urdf writers, so I would have to write my own (a clue that this is the wrong approach).  Once the URDF is updated, it would have to be "reloaded" in order for the updates to be reflected in the running system.  "Reloading" the URDF would also be custom functionality.
Does anybody know of an alternative approach?

Originally posted by sedwards on ROS Answers with karma: 1601 on 2014-08-27
Post score: 2

Original comments
Comment by ahendrix on 2014-08-27:
There was some work on a python library for reading, calibrating and writing URDFs. It should still be part of the calibration stack.
Comment by jbinney on 2014-08-27:
In the past I've usually manually done the "reloading" of the urdf by restarting the entire robot. Automatically reloading the URDF while running would be neat, but also could be tricky. You would need to make sure that every ROS node is designed to watch for and use a modified robot description.

A:

Any news on this issue?
We are working in a continuous calibration approach of a movable robot cell, so the calibration could change at any moment, but reloading the urdf model is not possible for us.
The best solution would be if the joint_state_publisher/robot_state_publisher fully support floating joints. Is somebody working on that? The main problem is that the sensor_msgs/JointState does not have a type field to specify which type of joint it is, so only supports joints with one degree of freedom. Maybe it could be possible to have joints more values in the array, and letting the joint_state_publisher/robot_state_publisher to match each joint according to the type associate to the name the joint. But this would break the current standard message.
Any ideas?

Originally posted by marbosjo with karma: 16 on 2015-02-23
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by ahendrix on 2015-02-23:
If you want to publish a floating transform directly, you should probably use a standard TF publisher instead of trying to use joint states.
Comment by marbosjo on 2015-02-24:
So... What is the point of having a floating type joint? You cannot have a full model of your robot in a URDF, because the robot_state_publisher is going to publish all the transformations, and if you publish your own, there will be conflicts due to some being published twice with different values
Comment by sedwards on 2015-03-13:
I started a PR to address this, but haven't gotten back to it.  See Issue.  It's mostly done, but I've been swamped lately.

