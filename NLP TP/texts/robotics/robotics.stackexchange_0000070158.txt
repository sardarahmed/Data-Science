Q:

How to use ROS without Catkin or rosbuild

My project currently uses our own build system. We just want some functionality from ROS such as urdf loading.
Can I do that without switching the whole project to the catkin/rosbuild building system.
Is there any guide on this topic?

Originally posted by DamnItROS on ROS Answers with karma: 47 on 2015-10-31
Post score: 3

Original comments
Comment by Gary Servin on 2015-11-01:
You can find a similar question (and answer) here

A:

A catkin package is basically a CMake project which can be built without the catkin specific tools. Simply invoke the same commands as for any CMake project:

mkdir build
cd build
cmake .. (you might want to pass flags to a) build tests, b) build in release/debug mode, c) choose a custom install prefix)
make
make install

Originally posted by Dirk Thomas with karma: 16276 on 2015-11-01
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by robarnes on 2018-08-30:
Not sure this fully answers the question. Yes, it is straightforward to replace the catkin command line tools. But what about the catkin macros in the CMakeLists.txt itself? E.g. catkin_package(), catkin_python_setup(), etc.
Comment by Dirk Thomas on 2018-08-30:
Almost every ROS package uses CMake functionality provided by catkin. Replacing those with plain CMake would be possible but a lot of effort. I don't see why you would want to do that. It would be similar to "how can we get rid of CMake in these packages and build everything using Makefiles".
Comment by robarnes on 2018-08-30:
Agreed. So let's say my codebase uses a different build system (bazel). I'd like to introduce a dependency on a catkin package Foo. Bazel can build cmake projects, but I'm not sure how catkin fits in. Could I just create a bazel target to build catkin from source, and then have Foo depend on that?
Comment by Dirk Thomas on 2018-08-30:
catkin is simply providing some CMake syntactic sugar. For building you can treat a catkin package just like any other CMake package.

