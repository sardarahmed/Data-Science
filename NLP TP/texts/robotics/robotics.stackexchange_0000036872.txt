Q:

Arduino Rosserial no/slow communication

Hi everyone.. forgive me if this has been asked/answered and also I am pretty new with ROS.. Anyway my robot is using Arduino mega 1280 to drive the motors, read encoders, calculate speed/velocity etc.. I was able to create a teleop application and subscribe to that with the arduino and read joy commands successfully to drive the robot..
Since my end goal is to implement the navigation stack I began to program that next.. I started with the tf tutorial and was able to get that running and delivering data to ROS, although I started to have problems with losing sync but it seemed if I timed starting the arduino and ros package it would work..Next I setup the odom stuff from the navigation tutorial.. Now whenever I run the package all I seem to get is lost sync messages.. I am calling ros::spinOnce() with a delay of 10millis and my rosserial is setup with a bandwidth of 115200..
I try running rostopic echo tf and I will see the tx light on the arduino blink once and I will see half of the echo on screen then in about(5 secs) it will blink again and then the rest of the message will show up, then if I wait again and I will see the information change but it seems like something is making it hang up.. I can post the code if that will help.. ?? Thanks in advance for any help..

Originally posted by dallaby on ROS Answers with karma: 13 on 2012-01-06
Post score: 1

A:

I have a very similar setup on my robot: an Arduino Mega 2560 running rosserial and doing odometry, motor control and a few other things.
Since the tf and Odometry messages contain mostly redundant data, I publish a simplified message without covariance data, and then reconstruct the tf and full Odometry messages on the computer.
My node for receiving simplified odometry messages and transforming them is here: https://github.com/trainman419/Senior-Project/tree/interrupts/ros/dagny_odom and my message package is here: https://github.com/trainman419/Senior-Project/tree/interrupts/ros/dagny_msgs

Originally posted by ahendrix with karma: 47576 on 2012-01-06
This answer was ACCEPTED on the original site
Post score: 4

Original comments
Comment by ahendrix on 2012-01-06:
If you wander around the rest of the repository, take the arduino code with a large bucket of salt. While I'm running on an arduino, I'm not using the arduino IDE, and I'm using a modified version of the rosserial client. Also note that all of my current work is happening on the interrupts branch.
Comment by dallaby on 2012-01-06:
I actually came across your setup before and thought it looked awesome.. I was reluctant to try as I wasn't sure if the serial port would keep up with the encoders but I guess it is MUCH less data.. And I presume that I could still do all my speed/distance calculations on the arduino for the PID con

