Q:

ROS using C++ 11 & How to Use With Catkin?

Is ROS compiled using c++ 11 with catkin? I suspect not since I am getting an error trying to use {} initializer for a vector, i.e. c++98...must be initialized...
For at least my builds where in the catkin files would I add the '-std=c++11' option?
I am using Eclipse but I think this is controlled via the cmake files, not a project property.

Originally posted by Rud on ROS Answers with karma: 133 on 2015-08-31
Post score: 12

Original comments
Comment by Rud on 2015-09-01:
I poked around and found that adding the "-std-c++11" in the file flags.make worked. But I suspect it will be overwritten the next time I add a file to the CMakeLists.txt. Just wanted to mention this with the warning. The file was overwritten with the changes to the C*.txt file.
Comment by Rud on 2015-09-01:
Both answers provided worked. I flagged the one by Julius as 'correct' since it was more succinct. I added the line to just below the ## Build ## box, just fyi. Appreciated also the link to ROS/C++11 points.

A:

All the current distributions of ROS are compiled using C++03.
You can compile your own packages using c++11 by adding the following line to the CMakeLists.txt of your project:
add_compile_options(-std=c++11)

Note that it is recomended to have checks for c++11 features at configure time and provide equivalent functionality with extra compiler features. This is only required if you are planning to release the ROS packages that you develop. If you are only planning to use your packages yourself then you can just c++11 functionality.
You can read more about ROS and C++11 here:
link text

Originally posted by JuliusGel with karma: 433 on 2015-09-01
This answer was ACCEPTED on the original site
Post score: 25

Original comments
Comment by Rud on 2015-09-01:
Thanks for the answer. I am at the moment only developing for myself. It will be awhile before I would attempt adding to ROS itself.
Comment by marcozorzi on 2016-06-02:
Worked like a charm for me too. Thanks!
Comment by vik748 on 2017-07-10:
Is there a way to add this flag for an individual file and not the entire project?
Comment by JuliusGel on 2017-07-11:
You could try SET_SOURCE_FILES_PROPERTIES( foo.cpp PROPERTIES COMPILE_FLAGS -std=c++11). I have, however, not tried this and I am not sure how this will affect ABI compatibility in your executable.
Comment by Ashkr on 2020-07-01:
@JuliusGel; thanks man, it works for me. :)

