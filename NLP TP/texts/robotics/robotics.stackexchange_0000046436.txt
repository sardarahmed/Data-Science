Q:

What is the recommended approach for creating Erlang language bindings?

I would like to communicate with ROS via Erlang, and there seems to be two possible approaches:
A) Erlang library that knows how to talk to ROS via TCPROS  (eg, pure Erlang approach)
or
B) Call ROS C library from Erlang  (eg, something akin to JNI)
I see for Java, it started out with a JNI approach and then it was switched to a pure Java approach, which tells me a pure Erlang approach might be the best approach.
Just curious, how often does the TCPROS protocol change?  Does it change every major release or is it relatively stable?

Originally posted by tleyden on ROS Answers with karma: 79 on 2012-12-10
Post score: 3

A:

The TCPROS protocol did not change for years. The only thing that had to be updated was the message generator because some old libraries and tools were deprecated and replaced by newer libraries.
I think although it might be more work and harder to implement, approach A will definitely be more robust and integrate better in Erlang. If you just want a quick solution, you can use a foreign function interface. But note that you first need to wrap the ROS C++ library into a C library to do that which can be quite cumbersome, too. Also, in that case you need to implement marshaling from Erlang data types to the corresponding C++ data types in order to transmit them with roscpp.

Originally posted by Lorenz with karma: 22731 on 2012-12-10
This answer was ACCEPTED on the original site
Post score: 1

