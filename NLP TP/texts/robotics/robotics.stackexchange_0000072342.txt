Q:

What's the right commands for starting Baxter's Gazebo and MoveIt?

This thread helped me to run the following commands for MoveIt! along with baxter_gazebo.
roslaunch baxter_gazebo baxter_world.launch
rosrun baxter_interface joint_trajectory_action_server.py -l both
roslaunch baxter_moveit_config demo_baxter.launch

And as usual with Baxter, the robot is "enabled" by rosrun baxter_tools enable_robot.py -e in advance.
Init pose of the robots on both RViz and Gazebo look coordinated, but MoveIt! never succeeds in planning. It says Start state appears to be in collision with respect to group both_arms when MoveIt! is initialized but I'm not sure how to resolve it.
All is well! Everyone is happy! You can start planning now!

[ INFO] [1456444700.284449635, 239.399000000]: Ready to take MoveGroup commands for group both_arms.
[ INFO] [1456444700.284619271, 239.399000000]: Looking around: no
[ INFO] [1456444700.284762549, 239.399000000]: Replanning: no
[ INFO] [1456444741.755292645, 280.084000000]: Planning request received for MoveGroup action. Forwarding to planning pipeline.
[ INFO] [1456444741.756526434, 280.084000000]: Found a contact between 'r_gripper_r_finger_tip' (type 'Robot link') and 'r_gripper_r_finger' (type 'Robot link'), which constitutes a collision. Contact information is not stored.
[ INFO] [1456444741.756576843, 280.084000000]: Collision checking is considered complete (collision was found and 0 contacts are stored)
[ INFO] [1456444741.756623440, 280.084000000]: Start state appears to be in collision with respect to group both_arms
[ WARN] [1456444742.559982065, 280.880000000]: Unable to find a valid state nearby the start state (using jiggle fraction of 0.050000 and 100 sampling attempts). Passing the original planning request to the planner.
[ INFO] [1456444742.561598014, 280.881000000]: Planner configuration 'both_arms[RRTConnectkConfigDefault]' will use planner 'geometric::RRTConnect'. Additional configuration parameters will be set when the planner is constructed.
[ WARN] [1456444742.562711130, 280.882000000]: both_arms[RRTConnectkConfigDefault]: Skipping invalid start state (invalid state)
[ERROR] [1456444742.562794759, 280.882000000]: both_arms[RRTConnectkConfigDefault]: Motion planning start tree could not be initialized!
[ WARN] [1456444742.562921643, 280.882000000]: both_arms[RRTConnectkConfigDefault]: Skipping invalid start state (invalid state)
[ WARN] [1456444742.563062573, 280.883000000]: both_arms[RRTConnectkConfigDefault]: Skipping invalid start state (invalid state)
[ERROR] [1456444742.563118444, 280.883000000]: both_arms[RRTConnectkConfigDefault]: Motion planning start tree could not be initialized!
[ERROR] [1456444742.563165882, 280.883000000]: both_arms[RRTConnectkConfigDefault]: Motion planning start tree could not be initialized!
[ WARN] [1456444742.563367340, 280.883000000]: both_arms[RRTConnectkConfigDefault]: Skipping invalid start state (invalid state)
[ERROR] [1456444742.563404655, 280.883000000]: both_arms[RRTConnectkConfigDefault]: Motion planning start tree could not be initialized!
[ WARN] [1456444742.563467942, 280.883000000]: ParallelPlan::solve(): Unable to find solution by any of the threads in 0.001411 seconds
[ WARN] [1456444742.563581499, 280.883000000]: both_arms[RRTConnectkConfigDefault]: Skipping invalid start state (invalid state)
[ WARN] [1456444742.563622325, 280.883000000]: both_arms[RRTConnectkConfigDefault]: Skipping invalid start state (invalid state)
[ERROR] [1456444742.563673372, 280.883000000]: both_arms[RRTConnectkConfigDefault]: Motion planning start tree could not be initialized!
[ WARN] [1456444742.563717336, 280.883000000]: both_arms[RRTConnectkConfigDefault]: Skipping invalid start state (invalid state)
[ERROR] [1456444742.563765615, 280.883000000]: both_arms[RRTConnectkConfigDefault]: Motion planning start tree could not be initialized!
[ERROR] [1456444742.563803511, 280.883000000]: both_arms[RRTConnectkConfigDefault]: Motion planning start tree could not be initialized!
[ WARN] [1456444742.563862642, 280.883000000]: both_arms[RRTConnectkConfigDefault]: Skipping invalid start state (invalid state)
[ERROR] [1456444742.563912097, 280.883000000]: both_arms[RRTConnectkConfigDefault]: Motion planning start tree could not be initialized!
[ WARN] [1456444742.564078209, 280.883000000]: ParallelPlan::solve(): Unable to find solution by any of the threads in 0.000511 seconds
[ WARN] [1456444742.564157505, 280.883000000]: both_arms[RRTConnectkConfigDefault]: Skipping invalid start state (invalid state)
[ WARN] [1456444742.564195078, 280.883000000]: both_arms[RRTConnectkConfigDefault]: Skipping invalid start state (invalid state)
[ERROR] [1456444742.564371569, 280.883000000]: both_arms[RRTConnectkConfigDefault]: Motion planning start tree could not be initialized!
[ERROR] [1456444742.564429897, 280.884000000]: both_arms[RRTConnectkConfigDefault]: Motion planning start tree could not be initialized!
[ WARN] [1456444742.564474110, 280.884000000]: ParallelPlan::solve(): Unable to find solution by any of the threads in 0.000328 seconds
[ WARN] [1456444742.571535317, 280.891000000]: Goal sampling thread never did any work.
[ INFO] [1456444742.571665828, 280.891000000]: Unable to solve the planning problem
[ WARN] [1456444742.576860238, 280.896000000]: Fail: ABORTED: No motion plan found. No execution attempted.
^C[rviz_tork_kudu1_27042_408594158418540515-2] killing on exit
[move_group-1] killing on exit
shutting down processing monitor...
... shutting down processing monitor complete

$ dpkg -p ros-indigo-baxter-moveit-config ros-indigo-baxter-gazebo ros-indigo-moveit-ros |grep Ver
Version: 1.0.5-0trusty-20160210-144300-0800
Version: 1.2.12-0trusty-20160215-044841-0800
Version: 0.7.0-0trusty-20160201-120956-0800

Originally posted by 130s on ROS Answers with karma: 10937 on 2016-02-25
Post score: 0

A:

The issue is for sure related to the fact that the Gazebo simulator starts with electric grippers in the /robot_description parameter. By default the launch file that you are running for MoveIt! doesn't assume that there are electric grippers attached. More precisely, the SRDF that gets loaded doesn't explicitly exclude collisions between the gripper fingers and the grippers themselves. If you update your MoveIt! command to be
roslaunch baxter_moveit_config demo_baxter.launch right_electric_gripper:=true left_electric_gripper:=true

the issue should disappear. Those gripper arguments (now true) get passed to planning_context.launch which, in-turn, feeds them to baxter.srdf.xacro to build the SRDF. Since the values are now true, the baxter.srdf.xacro file now includes the rethink_electric_grippers.srdf.xacro file for the left and right side. You can see that this file adds many tags that prevent collision checking for links that are part of the gripper.

Originally posted by jarvisschultz with karma: 9031 on 2016-03-14
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by nickzhi on 2020-09-13:
Is there a reason we should allow collision between electric gripper fingers?

