Q:

hector_slam with odometry?

Hi,
My data is from a big tunnel, about 700m long, and I want to do some mapping.
The problem is, that each scan looks nearly the same, with no big changes and the scanmatcher without odometry has some problems...
The robot thinks he is always standing at the same position instead of driving forwards.
Soon as I am in the tunnel, scanmatcher seems to overrule the odometry data and the robot is not moving any farther.
Is it possible to change that or somehow deactivate scanmatching?

 <node pkg="tf" type="static_transform_publisher" name="scanmatcher_odom_broadcaster" args="0 0 0 0 0 0 odom map
100"/> 
 <node pkg="tf" type="static_transform_publisher" name="scanmatcher_baselink_broadcaster" args="0 0 0 0 0 0 scanmatcher_frame base_link 100"/>

 <include file="$(find velodyne_mapping)/launch/assembler_to_2d_laser.launch"/>  

 <node pkg="hector_mapping" type="hector_mapping" name="hector_mapping" output="screen">

<param name="pub_map_odom_transform" value="false"/>
<param name="base_frame" value="base_link" />
<param name="odom_frame" value="odom"/>
<param name="output_timing" value="false"/>

<param name="scan_topic" value="scan"/>

# Map size / start point 
<param name="map_resolution" value="0.1"/>
<param name="map_size" value="4096"/>
<param name="map_start_x" value="0.5"/>
<param name="map_start_y" value="0.5" />

# Map update parameters 
<param name="update_factor_free" value="0.4"/>
<param name="update_factor_occupied" value="0.9" />    
<param name="map_update_distance_thresh" value="0.4"/>
<param name="map_update_angle_thresh" value="0.06" />

 </node>

 </launch>

Originally posted by madmax on ROS Answers with karma: 496 on 2013-06-03
Post score: 1

A:

Ok, I should probably update the documentation to state this more clearly: The odom frame is used in hector_mapping mainly to provide the same interface as gmapping does. Internally, odometry is completely ignored for mapping currently and just used to be able to publish the map->odom transform correctly. This is advantageous if you can't rely on odometry, but obviously a disadvantage in this tunnel scenario. Support for odometry could be added, but that will require some effort (if someone wants to look at it :) ).
That being said, I'm pretty sure I know which robot was used for this dataset and with the ton of sensors you strapped onto it there are a lot of other approaches you could try. The Velodyne data plus some registration approach (for example ethzasl_icp_mapping) would be my first try.

Originally posted by Stefan Kohlbrecher with karma: 24361 on 2013-06-05
This answer was ACCEPTED on the original site
Post score: 5

Original comments
Comment by madmax on 2013-06-05:
Thank you! That clears all up. Will have a look at it.

