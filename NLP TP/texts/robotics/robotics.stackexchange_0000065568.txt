Q:

Policy on run_depends for external optional binary packages

I have a catkin package that calls (via system) an additional program in a standard ubuntu package. Let's call that X. Although X is not needed to build or start my package's binary, there is no real use without this. So, I believe X should definitely be a run_depend.

However, via a command line switch, one can optionally use another system package Y for additional functionality. Should this also be a run_depend? In principle it isn't needed for functionality, but if someone wants to use the extras without Y it will fail. If all possible functionality is required, Y would need to be a run_depend also.

X could also be an actual dependency in the debian package and Y maybe appear under "recommended packages" in apt-get, although I don't think we have an option to declare that. I'm mainly concerned about the released deb package here and how that shows up in apt-get.

Originally posted by dornhege on ROS Answers with karma: 31395 on 2015-02-02
Post score: 0

A:

As you've pointed out, we don't have recommended or optional dependencies in the package.xml format. This was intentional for simplicity because modeling things like optional and recommended in the tools would be complicated. Plus not all package managers support this concept so we'd have to do something about that too.
I would recommend having all "optional" dependencies listed as run_depend dependencies. If you would like to change that to recommended in your generated Debian package, then you can patch the debian/control file in your package's release repository. The patch will carry over, release to release, automatically (as long as it applies cleanly). This is an example of which file and branch you would need to edit and commit to in order to affect this change:
https://github.com/ros-gbp/rviz-release/blob/debian/indigo/rviz/debian/control.em
You could just add a line for the recommended dependencies there. And you could modify the template line which places the Depends and add an exclusion for your optional dependency. That way it doesn't get listed in Depends but it is in your custom Recommends line.
If you want to do it the "catkin" way, I would recommend using another package to model the optional dependency. Let's assume your package is called foo, then I would make a foo_with_Y package which has a hard dependency on both foo and Y. Then users could install foo_with_Y if they wanted the additional functionality of Y. This scales better when Y provides not just a command line tool, but a library or interface code. This would allow you to split the Y specific part of your package into foo_with_Y, preventing foo from needing Y at build time. This is generally accomplished with conditional imports in Python or plugins in either C++ or Python.
If you really wanted to, then you could still modify the debian/control file for foo to Recommends ros-<version>-foo-with-Y afterwards as well.

Originally posted by William with karma: 17335 on 2015-02-02
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by dornhege on 2015-02-05:
I have decided to actually change the debian/control file as it is easier than I thought. At the program side I could automatically fall back to without_Y functionality.

