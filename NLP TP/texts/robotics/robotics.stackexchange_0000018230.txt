Q:

Are underactuated robots easier to program?

The first examples for passive dynamics were introduced by Ted McGeer in the early 1990s. The main principle of so called underactuated robotics is, that not all joints in the system can be controlled with motors directly, but some variables are free. A good example is a sailboat in the wind, or a one-leg robot who hangs on a rope. On the first look, the freely movable joint will increase the complexity, because the software is responsible for the robot itself and for the environment too. But if these systems are difficult to program, why isn't that case simply ignored by the engineers?
Let us take a look into a robotics laboratory and how new robotics are developed. The first thing what the engineers are doing is to build the frame. It is better known as a harness. On that chassis the robot is mounted. What is the intention of mounting a robot on a frame? Right, the intention is to build an underactuated robot. The robot doesn't have to balance by itself, but the frame around him stabilize the system. The additional freely movable joints doesn't increase the complexity but makes it lower.
So my question is: were underactued robots introduced to simply the programming, especially of biped robots which have a balance problem?

A:

The main reason why underactuated robots were introduced is to make robots more energy efficient. Robots that are not underactuated like Asimo require 20x more energy that humans to walk. In order to solve the energy issue, you need to design more efficient structures instead of brute forcing everything with motors. You need to closely tie the dynamics of walking into the structure of the robot to make it more energy efficient.
In the cases where underactuated robots have simplified the programming, that's more of a positive side-effect rather than the purpose the design team went with the dynamics approach.
MIT offers a great course on edx that is solely about underactuated robots.

