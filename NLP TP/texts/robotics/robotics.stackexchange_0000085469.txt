Q:

fusing IMU and GPS,make rosbag manually

I want to fusing IMU and GPS data to smooth the GPS data,and I followed the question https://answers.ros.org/question/200071/how-to-fuse-imu-gps-using-robot_localization/ .
I write my launch file and parameter.yaml .And I make my rosbag file,but I do not know
how to set the imu data frame id and gps data frame id.
And the rqt_graph is as follows :https://imgur.com/a/wNaLG
############################################
<launch>

  <rosparam command="load" file="$(find robot_localization)/params/ekf_imu_gps.yaml" />

  <node pkg="robot_localization" type="ekf_localization_node" name="ekf_se_map" clear_params="true">
    <remap from="odometry/filtered" to="odometry/filtered_map"/>
  </node>

  <node pkg="robot_localization" type="navsat_transform_node" name="navsat_transform" clear_params="true">
    <remap from="odometry/filtered" to="odometry/filtered_map"/>
  </node>

</launch>

##################################################
ekf_se_map:
  frequency: 30
  sensor_timeout: 0.1
  two_d_mode: false
  transform_time_offset: 0.0
  transform_timeout: 0.0
  print_diagnostics: true
  debug: false

  map_frame: map
  odom_frame: odom
  base_link_frame: base_link
  world_frame: map

  # odom0: odometry/gps
  odom0: odometry/gps
  odom0_config: [true, true, false,
                 false, false, false,
                 false, false, false,
                 false, false, false,
                 false, false, false]
  odom0_queue_size: 10
  odom0_nodelay: true
  odom0_differential: false
  odom0_relative: false

  imu0: imu/data
  imu0_config: [false, false, false,
                false, false, false,
                false, false, false,
                true,  true,  true,
                true,  true,  true]
  imu0_nodelay: false
  imu0_differential: false
  imu0_relative: false
  imu0_queue_size: 10
  imu0_remove_gravitational_acceleration: true

  use_control: false

  process_noise_covariance: 
                            [1e-3, 0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                             0,    1e-3, 0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                             0,    0,    1e-3, 0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                             0,    0,    0,    0.3,  0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                             0,    0,    0,    0,    0.3,  0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                             0,    0,    0,    0,    0,    0.01, 0,     0,     0,    0,    0,    0,    0,    0,    0,
                             0,    0,    0,    0,    0,    0,    0.5,   0,     0,    0,    0,    0,    0,    0,    0,
                             0,    0,    0,    0,    0,    0,    0,     0.5,   0,    0,    0,    0,    0,    0,    0,
                             0,    0,    0,    0,    0,    0,    0,     0,     0.1,  0,    0,    0,    0,    0,    0,
                             0,    0,    0,    0,    0,    0,    0,     0,     0,    0.3,  0,    0,    0,    0,    0,
                             0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0.3,  0,    0,    0,    0,
                             0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0.3,  0,    0,    0,
                             0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0.3,  0,    0,
                             0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0.3,  0,
                             0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0.3]

  initial_estimate_covariance: 
                               [1e-9, 0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                                0,    1e-9, 0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                                0,    0,    1e-9, 0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                                0,    0,    0,    1.0,  0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                                0,    0,    0,    0,    1.0,  0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                                0,    0,    0,    0,    0,    1e-9, 0,    0,    0,    0,     0,     0,     0,    0,    0,
                                0,    0,    0,    0,    0,    0,    1.0,  0,    0,    0,     0,     0,     0,    0,    0,
                                0,    0,    0,    0,    0,    0,    0,    1.0,  0,    0,     0,     0,     0,    0,    0,
                                0,    0,    0,    0,    0,    0,    0,    0,    1.0,  0,     0,     0,     0,    0,    0,
                                0,    0,    0,    0,    0,    0,    0,    0,    0,    1.0,   0,     0,     0,    0,    0,
                                0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     1.0,   0,     0,    0,    0,
                                0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     1.0,   0,    0,    0,
                                0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     1.0,  0,    0,
                                0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    1.0,  0,
                                0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    1.0]

navsat_transform:
  frequency: 30
  delay: 0
  magnetic_declination_radians: 0.05288347 # For lat/long 55.944831, -3.186998
  yaw_offset: 1.570796327  # IMU reads 0 facing magnetic north, not east
  zero_altitude: true
  broadcast_utm_transform: true
  publish_filtered_gps: true
  use_odometry_yaw: false
  wait_for_datum: false

The bag file script is as follows:
# -*- coding: utf-8 -*-
import rospy
import rosbag
import numpy as np
from sensor_msgs.msg import Imu
from sensor_msgs.msg import NavSatFix
def make_imu_data(a,b,t,n):
    a=np.array(a)
    b=np.array(b)
    message1=Imu()
    message1.header.seq=n
    message1.header.stamp.secs=float(t.split(".")[0])
    message1.header.stamp.nsecs=float(t.split(".")[1])*1e3
    **message1.header.frame_id='odom'**
    message1.orientation.x=0
    message1.orientation.y=0
    message1.orientation.z=0
    message1.orientation.w=0
    message1.orientation_covariance=np.array([-1,-1,-1,-1,-1,-1,-1,-1,-1])
    message1.linear_acceleration.x=float(a[0])
    message1.linear_acceleration.y=float(a[1])
    message1.linear_acceleration.z=float(a[2])
    message1.linear_acceleration_covariance=np.array([0,0,0,0,0,0,0,0,0])
    message1.angular_velocity.x=float(b[0])
    message1.angular_velocity.y=float(b[1])
    message1.angular_velocity.z=float(b[2])
    message1.angular_velocity_covariance=np.array([0,0,0,0,0,0,0,0,0])
    return message1

def make_gps_data(latitude,longitude,t,i):
    message2=NavSatFix()
    message2.header.seq=i
    message2.header.stamp.secs=float(t.split(".")[0])
    message2.header.stamp.nsecs=float(t.split(".")[1])*1e3
    message2.header.frame_id='/gps' 
    message2.status.status=1
    message2.status.service=1
    message2.longitude=float(longitude)
    message2.latitude=float(latitude)
    message2.altitude=np.NAN
    message2.position_covariance=np.array([0.64, 0.0, 0.0, 0.0, 0.64, 0.0, 0.0, 0.0, 2.56])
    message2.position_covariance_type=0
    return message2
#
#
# with rosbag.Bag('test.bag', 'w') as bag:
#     pass
imufile='/home/xiangchen2011/Desktop/imu.txt'
gpsfile='/home/xiangchen2011/Desktop/gps.txt'
with open(gpsfile) as dataset:
    row_numer=1
    with rosbag.Bag('test.bag', 'w') as bag:
        for line in dataset.readlines():
            gps_data=line.split()
            # print imu_data,row_numer
            row_numer=row_numer+1
            msg=make_gps_data(gps_data[2],gps_data[1],gps_data[0],row_numer)
            # print msg.header.stamp
            bag.write('/gps/fix',msg,msg.header.stamp)

with open(imufile) as dataset:
    row_numer=1
    with rosbag.Bag('test.bag', 'a') as bag:
        for line in dataset.readlines():
            imu_data=line.split()
            # print imu_data,row_numer
            row_numer=row_numer+1
            msg=make_imu_data(imu_data[1:4],imu_data[4:7],imu_data[0],row_numer)
            # print msg.angular_velocity
            bag.write('/imu/data',msg,msg.header.stamp)

Originally posted by omoyouo on ROS Answers with karma: 1 on 2018-02-22
Post score: 0

Original comments
Comment by Humpelstilzchen on 2018-02-23:
Please clarify, is the question on how to set the frame_id in the messages of the bag file?
Comment by omoyouo on 2018-02-24:
Yes,you can say that
Comment by Humpelstilzchen on 2018-02-25:
How about using the rosbag API to set the frame_id. Start with the 1.1 example and set msg.header.frame_id instead of msg.header.stamp
Comment by omoyouo on 2018-02-25:
Yes,you can see it from the  bag file script (at the last).I set the imu message frame id to 'odom' and the gps message to 'gps'
Comment by Humpelstilzchen on 2018-02-25:
Have missed the script, whats your problem with it?
Comment by omoyouo on 2018-02-25:
The problem is that it dose not work.I set up these two frame_id  casually,I wonder if this is the reason that  the project did not work.If so ,what should I set up?

A:

If you just want to fuse a GPS + IMU to a smooth tf maybe geodetic_utils is an alternative solution. The
https://github.com/ethz-asl/geodetic_utils/blob/master/src/gps_to_pose_conversion_node.cpp
listens to both for fusing them an broadcasting tf
See:
https://github.com/ethz-asl/geodetic_utils

Originally posted by Wolf with karma: 7555 on 2018-02-25
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by Femer on 2018-02-25:
I think "fusing" is rather a misleading word in this context. geodetic_utils can merge together an IMU message and a GPS message but for sure it does not "fuse" IMU measurements to smooth out GPS coordinates.
Comment by omoyouo on 2018-02-25:
I just want to use the IMU data (about 1Khz) to smooth the GPS data (1Hz),so I can use the filtered gps results (may be 1Hz) as the groundtruth  in a way.

