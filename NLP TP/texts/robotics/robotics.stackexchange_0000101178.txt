Q:

Float64MultiArray message type does not show up in published topic

I am trying to do a test where I publish an array to a topic
/chatter2s. Here is my publisher below:
#!/usr/bin/python3
import rospy
from std_msgs.msg import Float64MultiArray
#Float64MultiArray

def do_it():
    data_to_send = Float64MultiArray()
    rospy.init_node("array_publisher")
    pub=rospy.Publisher("chatters2", Float64MultiArray, queue_size=10)

    data_to_send.data = [1.2354567, 99.7890]
    #ata_to_send.data_offset = 0
    pub.publish(data_to_send)
    rospy.spin()

do_it() 

Here is my listener:
#!/usr/bin/python3
import rospy
from std_msgs.msg import Float64MultiArray

def callback(msg):
    rospy.loginfo(msg)

rospy.init_node("array_listener")
rospy.Subscriber("chatters2",Float64MultiArray, callback)
#rospy.sleep(3.0)
rospy.spin()

The problem is, when I run these two codes in their respective terminals, they seem to run but then nothing shows up for the listener, I do a rostopic echo /chatters2 and dont see anything coming out for that either.
I check the rqt_graph and I see  both nodes as well as the chatter topic, so these nodes seem to be active. whats going on?

Originally posted by distro on ROS Answers with karma: 167 on 2022-02-06
Post score: 0

A:

The rospy.spin() in your listener is waiting for a callback to be executed. By writing that line, you are essentially asking ROS to handle that for you. In your publisher, you don't want to wait for callbacks. So you need to omit the spin. You will also need a loop to continually publish your data. From the ROS simple publisher tutorial your example would look like this:
import rospy
from std_msgs.msg import Float64MultiArray
#Float64MultiArray

def do_it():
    data_to_send = Float64MultiArray()
    rospy.init_node("array_publisher")
    pub=rospy.Publisher("chatters2", Float64MultiArray, queue_size=10)
    
    data_to_send.data = [1.2354567, 99.7890]
    #ata_to_send.data_offset = 0

    r = rospy.Rate(10) # 10hz
    while not rospy.is_shutdown():
      pub.publish(data_to_send)
      # rospy.spin()
      r.sleep()

do_it()

Originally posted by Akhil Kurup with karma: 459 on 2022-02-06
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by Akhil Kurup on 2022-02-06:
Also, since you mention ROS-melodic, you may want to change the python3 to python2
Comment by distro on 2022-02-08:
@Akhil Kurup Thanks! Could you please look at a related question I asked here if possible.

