Q:

How to approach any advanced control problem in robotics

I have worked on a couple of projects like control of a quadrotor/ self balancing robot/ 6 dof robotic arm using nonlinear, optimal and adaptive control. So, in all these projects I have first basically tried to understand the dynamics of the system, then I modeled it. Next I applied different control strategies and compared their responses and chose the best one.
My question is when approaching problems in industry or in research, is the approach for these simple bots fine or are there other things that I should consider. 
EDIT:
Can someone who has worked/ has experience in this area, put a step by step approach that should be done to approach any control problem in any field. With the necessary concepts and skills needed.

A:

Models.
If you want to get good at control engineering, get good at modeling. If you want to impress a controls professor, get good at modeling. Models are how you're going to do 90 percent of your job, regardless of the controller style you choose to implement, so get good at modeling!
If you want to try building a PID controller, first build a model of the plant and then wrap the PID controller it. 
If you want a state feedback controller, first build a model of the plant and then move the poles wherever you want. 
Real machinery costs money, real process lines cost money to shutdown for testing and upgrades, real equipment has limited availability. 
For me professionally, I wind up working a lot of long hours in remote locations, away from my family, and in the middle of the night because that's where the equipment is and that's the only time it's available for testing. 
The best thing I can do for myself, for my employer, for the client, and for my family is to try to build a model of the system and design some model validation tests that can be used to determine if I have an accurate model or not. 
I do some work in the office, make a brief trip to site for a validation test, then return to the office to develop the controller, then return to site to implement and test the controller.
Having good models minimizes the need for site visits, which is expensive for my company and takes me away from my family, and it minimizes the amount of time that we need to ask the client to take their equipment out of service. Better models means the controller is more likely to work correctly "out of the box," which means it's more impressive for the client because I can show up and basically flip a switch and everything runs the way it's supposed to. I look more competent because I don't spend a lot of time making mistakes in front of the client (I do that back at the office, with a software model, while I'm trying to develop the controller).
Finally, it's a lot less expensive and/or scary to screw up a software model of a system than to screw up the actual system. Make your mistakes in software! Learn to model and the rest of control engineering is knowing which controller would probably work best and which book has the steps to implement it.
Unless you're doing some fundamental control research, modeling will definitely be the most challenging aspect of control engineering. 

