Q:

ros2 spinning problem[SOLVED]

i'm trying to transform ego-planner-swarm founded in:
https://github.com/ZJU-FAST-Lab/ego-planner-swarm
to ros2...
the problem was in one of the subscription's callbacks there was a function in which there was a "while loop" with only delay in it... and this loop's condition was dependent on other timers callbacks... and if the other timers callbacks wouldn't be called, the code would stuck in while loop. in ros1 to slove this kind of problem we can use
ros::spinOnce();

in the loop when the node is already spinning and that would prevent the code to stuck in the "while loop"
but in ros 2 if the the node is already spinning and you use
rclcpp::spin_some(node);

in the loop, you would get

terminate called after throwing an instance of 'std::runtime_error'

what():  Node has already been added to an executor.

that's because in ros2 when spin commands which get nodes as input argument are called, they automatically add node to an executor...
the second thing i tried was spinning the node using SingleThreadedExecutor and passed the Executor Instance to the while loop. then i used spin commands with using the Executor Instance in the "while loop"... things like:
Executor.spin();
Executor.spin_some();
Executor.sp_once();

this way i was not adding the node to an Executor... but i was trying to spin a node which is already spinning! and i got :

terminate called after throwing an instance of 'std::runtime_error'

what():  spin_once() called while already spinning

then how i can fix this problem?

A:

I guess that the functionality you are looking for, is the following:
A node that:

Runs a blocking while loop in one of its callbacks,
While at the same time also keeps responding to other events (such as receiving messages, changing paramters, etc).

You can do this by:

Running the node in a multithreaded executor,
Defining callback groups:

Either assign all callbacks to a Reentrant Callback group (if it's ok to run them concurrently), instead of the default (= MutuallyExclusive) callback group, or
Use (at least) two callback groups: one for the blocking callback and one (or multiple) for the other callbacks.

Callback groups work as follows:

Callbacks belonging to different callback groups can be called concurrently (as long as there are available threads in the multithreaded executor),
Callback groups belonging to the same MutuallyExclusive callback group are not called concurrently,
Callback groups belonging to the same Reentrant callback group can be called concurrently (as long as there are available threads in the multithreaded executor).

Note that if you run a node with concurrent callbacks, you need to take thread safety into account. E.g. you cannot just write and read the same variables concurrently from different threads.
If this solves your issue, please upvote and accept. If it does not: refer to my comment: you will need to clarify you question as to what functionality exactly you try to achieve, rather than asking "how do I call spin_some() in a node that is already being spun".

