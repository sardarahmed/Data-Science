Q:

Undefined reference in cvBridge.h

I just updated to Fuerte and Ubuntu 12.04 and I'm trying to build my ROS pacakges on it.
I'm getting errors in my OpenCV code which may be because the OpenCV code I'm building is a little old.
Here's the full build log for the package that's giving me errors:
http://paste.ubuntu.com/991395/
And here's the code for ImageRecording.cpp (which seems to be the source of all these 'undefined reference' errors):
http://paste.ubuntu.com/991411/
What I'm confused about is that I'm not getting a compiler error, but a linker error. I would have understood getting a compiler error since the code is outdated and maybe the API we were using back then is not supported anymore, but a linker error indicates that the same API is still there but somehow the setup of the whole thing is broken in some way.
Any insight into this would be greatly appreciated.
Kind regards, Stefan Freyr.

Originally posted by StFS on ROS Answers with karma: 182 on 2012-05-16
Post score: 0

Original comments
Comment by StFS on 2012-05-16:
Just for the record, I tried creating a brand new node following the tutorial I found here: http://www.ros.org/wiki/cv_bridge/Tutorials/UsingCvBridgeToConvertBetweenROSImagesAndOpenCVImages
I have the same problem there, getting a bunch of "undefined reference" linker errors when I try to build.

A:

What does your CMakeLists.txt look like? Are you finding and linking OpenCV to your program? Double check that.
Also try changing your include to:
#include <cv_bridge/cv_bridge.h>

Originally posted by Kevin with karma: 2962 on 2012-05-16
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by StFS on 2012-05-20:
I did try using the #include <cv_bridge/cv_bridge.h> in my test node (the one I mention in the comment above).
My CMakeLists.txt does not have a reference to OpenCV as there is no mention of that in the tutorial. I do have a dependency in my manifest file. Isn't that enough?
Comment by StFS on 2012-05-22:
I finally read properly through http://www.ros.org/wiki/opencv2 and noticed the following paragraph:
"Please transition away from using  to link against OpenCV in your packages. Standard CMake mechanisms (e.g. find_package()) are now the preferred way of linking against"
Comment by kameleon on 2012-10-27:
I have this exact problem. I tried adding target_link_libraries(path to libcv_bridge.so) in my CMakeLists, but it still reports the undefined reference. Or am I still such a newbie at C++ that I didn't link it properly?

