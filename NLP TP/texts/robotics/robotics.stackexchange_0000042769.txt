Q:

rosserial problems with digitalWrite(2,HIGH)

Hey all,
I'm trying to use rosserial_arduino on top of the arduimu code base (running on the ArduIMU+ v2). My problem is that part of the IMU's initialization is a call to
digitalWrite(2,HIGH);

but this somehow causes rosserial to lose sync with the IMU. When I run the code with that line commented out it successfully advertises the topic, but otherwise I only get
"Lost sync with device, restarting..." messages.
Here the setup() function:
void setup()
{ 
   //IMU setup
   Serial.begin(38400);
   pinMode(2,OUTPUT); //Serial Mux
   //digitalWrite(2,HIGH); //Serial Mux
   pinMode(5,OUTPUT); //Red LED
   pinMode(6,OUTPUT); // Blue LED
   pinMode(7,OUTPUT); // Yellow LED
   pinMode(GROUNDSTART_PIN,INPUT);  // Remove Before Fly flag (pin 6 on ArduPilot)
   digitalWrite(GROUNDSTART_PIN,HIGH);

   //ROS setup
   nh.initNode();
   nh.advertise(pub_imu);
   imu_msg.header.frame_id = "/imu_link";
 
   // ... some other imu initialization calls ... 
};

Thanks, 
Thomas

Originally posted by ThomasK on ROS Answers with karma: 360 on 2012-07-28
Post score: 1

Original comments
Comment by dougbot01 on 2012-07-28:
Hi Thomas, I don't have an ArduIMU, but the fact that line says "//Serial Mux" behind it leads me to believe the unit is sending "non-ROS" serial messages over the port, which might be confusing the ROS msg system. Try looking at what is coming over the port from the unit without ROS.
Comment by dougbot01 on 2012-07-28:
You might want to look at the serial stream with this program    https://help.ubuntu.com/community/Cutecom

A:

From my experience most crashes on the atmega are memory related. Most often you
simply run out of stack and start corrupting your heap (i.e. globally defined variables). This can be pretty devious and hard to debug, as the program running might not behave weird until some time later.
A simple and very effective debugging help is measuring the stack size. You should always keep a healthy amount of stack free for use (at least 1 byte ;). There is code on the Internets that can help you measure the stack size at runtime. In my last project I used this piece of code: (caveat: the site in German, however the code has English comments): http://www.rn-wissen.de/index.php/Speicherverbrauch_bestimmen_mit_avr-gcc
cheers
Dariush

Originally posted by Dariush with karma: 91 on 2012-07-31
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by ThomasK on 2012-08-01:
Thanks, I'll take a look at it! :)  (I'm Austrian, so German is not an issue ;) )

