Q:

Robot cant avoid obstacal

hi , i am trying to apply the navigation stack on my robot every thing work great ; from building the map to moving on the map. When i apply the path planning it find the gold without any problem if there is no additional obstacle ( this mean no new obstacle) it will move to the goal without any problem. But if i add any new obstacle dynamic or static it will not avoid it and no inflation layer occur on this obstacle. I don't know  why this happen ? so if there is no inflation layer on the obstacle it will not avoid it.But at the same time the inflation layer is worked good in the original obstacle, is there any way to make the inflation layer dynamic?
for the information, i am using ROS indigo and i will add all my parameter for u hopeful this will help to solve my problem:
edit : solved the problem was between the static transformation between base link and camera , it was 0 for z plane so the robot assume that the camera is in the same plane as the base link so no avoiding will occur in this case sorry for the stupide question.
first  cost map common parameter:
    robot_radius: 0.24
  
obstacle_range: 2.5
raytrace_range: 3.0
#max_obstacle_height: 0.6

observation_sources: scan
scan:
  data_type: LaserScan
  topic: scan
  marking: true
  clearing: true
  min_obstacle_height: 0.1
#  max_obstacle_height: 0.35

map_type: costmap
#obstacle_layer:
#  enabled: true
  #origin_z: 0.0
  #z_resolution: 0.2
  #z_voxels: 2
  #unknown_threshold: 15
  #mark_threshold: 0
  #combination_method: 1
#  track_unknown_space: true #true needed for disabling global path planning through unknown space

#cost_scaling_factor and inflation_radius were now moved to the inflation_layer ns
#inflation_layer:
#  enabled: true
#  cost_scaling_factor: 10.0 # exponential rate at which the obstacle cost drops off (default: 10)
inflation_radius: 0.5 # max. distance from an obstacle at which costs are incurred for planning paths.

#static_layer:
#enabled: true

base local planner:
TrajectoryPlannerROS:
  max_vel_x: 0.3
  min_vel_x: 0.1
  max_vel_y: 0.0
  min_vel_y: 0.0
  max_vel_theta: 0.5
  min_vel_theta: -0.5
  min_in_place_vel_theta: 0.4
  escape_vel: -0.1

  acc_lim_theta: 0.4
  acc_lim_x: 1.0
  acc_lim_y: 0.0

  yaw_goal_tolerance: 0.2
  xy_goal_tolerance: 0.2

  sim_time: 3.0
  vx_samples: 20
  vtheta_samples: 30

  holonomic_robot: false

  meter_scoring: false
  dwa: false
  pdist_scale: 1.0
  gdist_scale: 0.8
  occdist_scale: 0.01
  publish_cost_grid_pc: true

   

global cost map:
global_costmap:
  global_frame: /map
  robot_base_frame: /base_link
  update_frequency: 1.0
  publish_frequency: 0.5
  static_map: true

  transform_tolerance: 0.5

global planner param:
GlobalPlanner: # Also see: http://wiki.ros.org/global_planner
  old_navfn_behavior: false # Exactly mirror behavior of navfn, use defaults for other boolean parameters, default false
  use_quadratic: true # Use the quadratic approximation of the potential. Otherwise, use a simpler calculation, default true
  use_dijkstra: true # Use dijkstra's algorithm. Otherwise, A*, default true
  use_grid_path: false # Create a path that follows the grid boundaries. Otherwise, use a gradient descent method, default false
  allow_unknown: true # Allow planner to plan through unknown space, default true
  #Needs to have track_unknown_space: true in the obstacle / voxel layer (in costmap_commons_param) to work
  planner_window_x: 0.0 # default 0.0
  planner_window_y: 0.0 # default 0.0
  default_tolerance: 0.0 # If goal in obstacle, plan to the closest point in radius default_tolerance, default 0.0
  publish_scale: 100 # Scale by which the published potential gets multiplied, default 100
  planner_costmap_publish_frequency: 0.0 # default 0.0
  lethal_cost: 253 # default 253
  neutral_cost: 50 # default 50
  cost_factor: 3.0 # Factor to multiply each cost from costmap by, default 3.0
  publish_potential: true # Publish Potential Costmap (this is not like the navfn pointcloud2 potential), default true

Nvfn global planner:
NavfnROS:
  visualize_potential: false #Publish potential for rviz as pointcloud2, not really helpful, default false
  allow_unknown: false #Specifies whether or not to allow navfn to create plans that traverse unknown space, default true
  #Needs to have track_unknown_space: true in the obstacle / voxel layer (in costmap_commons_param) to work
  planner_window_x: 0.0 #Specifies the x size of an optional window to restrict the planner to, default 0.0
  planner_window_y: 0.0 #Specifies the y size of an optional window to restrict the planner to, default 0.0
  default_tolerance: 0.0 #If the goal is in an obstacle, the planer will plan to the nearest point in the radius of default_tolerance, default 0.0

  #The area is always searched, so could be slow for big values

move base param:
shutdown_costmaps: false
controller_frequency: 5.0
controller_patience: 3.0

planner_frequency: 1.0
planner_patience: 5.0

#oscillation_timeout: 10.0
#oscillation_distance: 0.2

# local planner - default is trajectory rollout
base_local_planner: "base_local_planner/TrajectoryPlannerROS"
base_global_planner: "navfn/NavfnROS" #alternatives: global_planner/GlobalPlanner, carrot_planner/CarrotPlanner

local cost map param:
local_costmap:
  global_frame: /odom
  robot_base_frame: /base_link
  update_frequency: 5.0
  publish_frequency: 5.0
  static_map: false
  rolling_window: true
  width: 4.0
  height: 4.0
  resolution: 0.05
  transform_tolerance: 0.5

finally the AMCL launch :
<node pkg="amcl" type="amcl" name="amcl" output="screen">
    <!-- Publish scans from best pose at a max of 10 Hz -->
    <param name="odom_model_type" value="diff"/>
    <param name="odom_alpha5" value="0.1"/>
    <param name="transform_tolerance" value="0.2" />
    <param name="gui_publish_rate" value="10.0"/> <!-- Maximum rate (Hz) at which scans and paths are published for visualization, -1.0 to disable. -->
    <param name="laser_max_beams" value="60"/>
    <param name="min_particles" value="500"/>
    <param name="max_particles" value="2000"/>
    <param name="kld_err" value="0.05"/>
    <param name="kld_z" value="0.99"/>
    <param name="odom_alpha1" value="0.1"/> <!-- Specifies the expected noise in odometry's rotation estimate from the rotational component of the robot's motion. -->
    <param name="odom_alpha2" value="0.1"/> <!-- Specifies the expected noise in odometry's rotation estimate from translational component of the robot's motion. -->
    <!-- translation std dev, m -->
    <param name="odom_alpha3" value="0.1"/> <!-- Specifies the expected noise in odometry's translation estimate from the translational component of the robot's motion. -->
    <param name="odom_alpha4" value="0.1"/> <!-- Specifies the expected noise in odometry's translation estimate from the rotational component of the robot's motion. -->
    <param name="laser_z_hit" value="0.5"/>
    <param name="laser_z_short" value="0.05"/>
    <param name="laser_z_max" value="0.05"/>
    <param name="laser_z_rand" value="0.5"/>
    <param name="laser_sigma_hit" value="0.2"/>
    <param name="laser_lambda_short" value="0.1"/>
    <param name="laser_model_type" value="likelihood_field"/>
    <!-- <param name="laser_model_type" value="beam"/> -->
    <param name="laser_likelihood_max_dist" value="2.0"/>
    <param name="update_min_d" value="0.2"/> <!-- Translational movement required before performing a filter update. -->
    <param name="update_min_a" value="0.2"/> <!-- Rotational movement required before performing a filter update. 0.1 represents 5.7 degrees  -->
    <param name="odom_frame_id" value="odom"/>
    <param name="resample_interval" value="1"/> <!-- Number of filter updates required before resampling. -->
    <!-- Increase tolerance because the computer can get quite busy -->
    <param name="transform_tolerance" value="1.0"/> <!-- Default 0.1; time with which to post-date the transform that is published, to indicate that this transform is valid into the future. -->
    <param name="recovery_alpha_slow" value="0.001"/> <!-- Exponential decay rate for the slow average weight filter, used in deciding when to recover by adding random poses. -->
    <param name="recovery_alpha_fast" value="0.1"/> <!-- Exponential decay rate for the fast average weight filter, used in deciding when to recover by adding random poses. -->
</node>

second i will show what apper after i launch the move base node :
 INFO] [1486678024.746190187]: Requesting the map...
[ WARN] [1486678024.749344259]: Request for map failed; trying again...
[ INFO] [1486678025.274366784]: Received a 1984 X 1984 map @ 0.050 m/pix

[ INFO] [1486678025.564978751]: Initializing likelihood field model; this can take some time on large maps...
[ INFO] [1486678025.823144816]: Done initializing likelihood field model.
[ INFO] [1486678026.752851025]: Using plugin "static_layer"
[ INFO] [1486678026.869925091]: Requesting the map...
[ INFO] [1486678027.087451158]: Resizing costmap to 1984 X 1984 at 0.050000 m/pix
[ INFO] [1486678027.209901850]: Received a 1984 X 1984 map at 0.050000 m/pix
[ INFO] [1486678027.223697851]: Using plugin "obstacle_layer"
[ INFO] [1486678027.237529973]:     Subscribed to Topics: scan
[ INFO] [1486678027.315548334]: Using plugin "inflation_layer"
[ERROR] [1486678027.364065404]: You must specify at least three points for the robot footprint, reverting to previous footprint.
[ INFO] [1486678027.576958917]: Using plugin "obstacle_layer"
[ INFO] [1486678027.667572881]:     Subscribed to Topics: scan
[ INFO] [1486678027.729326470]: Using plugin "inflation_layer"
[ERROR] [1486678027.767822953]: You must specify at least three points for the robot footprint, reverting to previous footprint.
[ INFO] [1486678027.935568813]: Created local_planner base_local_planner/TrajectoryPlannerROS
[ INFO] [1486678027.966734808]: Sim period is set to 0.20
[ WARN] [1486678027.993418700]: Trajectory Rollout planner initialized with param meter_scoring set to false. Set it to true to make your settins robust against changes of costmap resolution.
[ INFO] [1486678028.324251196]: Recovery behavior will clear layer obstacles
[ INFO] [1486678028.443145591]: Recovery behavior will clear layer obstacles
[ INFO] [1486678028.736481403]: odom received!

i hope this information can help to solve my problem. thanks

Originally posted by ghaith on ROS Answers with karma: 89 on 2017-02-09
Post score: 0

Original comments
Comment by gvdhoorn on 2017-02-12:
If you found the solution yourself, could you please answer your own question?
If this is a duplicate (and the answer is provided in some other question), then please provide a link to that other question.
Comment by ghaith on 2017-02-12:
i add an edit for the solution in the same question
so every one can see the solution I cant reopen the question again to answer my question sorry
Comment by gvdhoorn on 2017-02-12:
Just re-opened it for you.

A:

Hi I solve it  by my self the problem was between the static transformation between base link and camera , it was 0 for z plane so the robot assume that the camera is in the same plane as the base link so no avoiding will occur. After I adjusted it every thing work very good.

Originally posted by ghaith with karma: 89 on 2017-02-16
This answer was ACCEPTED on the original site
Post score: 0

