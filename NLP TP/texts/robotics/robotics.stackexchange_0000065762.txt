Q:

Publishing and Subscribing at the same time

I am trying to send constant velocity commands to turtlesim and at the same time want to recieve pose information. I am only recieving pose data in terminal when i runing both turtlesim and roscore.
My code is following:
#include <ros/ros.h>
#include <turtlesim/Pose.h>
#include <iomanip>
#include <geometry_msgs/Twist.h>
#include <stdlib.h>

void poseMessageRecieved(const turtlesim::Pose& msg) {

ROS_INFO_STREAM(std::setprecision(2) << std::fixed
<< "position=(" << msg.x << "," << msg.y << ")"
<< "direction=" << msg.theta); 

}

int main(int argc,char **argv) {
ros::init(argc, argv, "sub2");
ros::NodeHandle nh;
ros::Subscriber sub=nh.subscribe("turtle1/pose", 1000, &poseMessageRecieved);
ros::spin();

ros::init(argc, argv, "pub2");
ros::Publisher pub=nh.advertise<geometry_msgs::Twist>("turtle1/cmd_vel", 1000);
ros::Rate rate(2);

while(ros::ok()) {
geometry_msgs::Twist msg;

msg.linear.x=2.0;
msg.angular.z=1.0;

pub.publish(msg);
ROS_INFO_STREAM("Sending constant velocity command: "<< "linear=" <<msg.linear.x << "angular=" << 
msg.angular.z);

ros::spinOnce();
rate.sleep();
}

//ros::spin();
}

Originally posted by zuygar on ROS Answers with karma: 19 on 2015-02-11
Post score: 0

A:

Ok i fixed the problem. My code is following, but i have a confusion about "delete pub" command. If i wouldn'd use this, what happened ?
#include <ros/ros.h>
#include <turtlesim/Pose.h>
#include <iomanip>
#include <geometry_msgs/Twist.h>
#include <stdlib.h>

ros::Publisher *pub;

void poseMessageRecieved(const turtlesim::Pose& msgIn) {
geometry_msgs::Twist msg;
ROS_INFO_STREAM(std::setprecision(2) << std::fixed
<< "position=(" << msgIn.x << "," << msgIn.y << ")"
<< "direction=" << msgIn.theta); 
msg.linear.x=0.2;
msg.angular.z=0.1;
pub->publish(msg);
ROS_INFO_STREAM("Sending constant velocity command: "<< "linear=" <<msg.linear.x << "angular=" << msg.angular.z);
}

int main(int argc,char **argv) {
ros::init(argc, argv, "sub_and_pub");
ros::NodeHandle nh;

pub = new ros::Publisher(nh.advertise<geometry_msgs::Twist>("turtle1/cmd_vel", 1000));
ros::Subscriber sub = nh.subscribe("turtle1/pose", 1000, &poseMessageRecieved);

ros::spin();

delete pub;
}

Originally posted by zuygar with karma: 19 on 2015-02-11
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by tfoote on 2015-02-11:
pub will get cleaned up by the end of the scope anyway.

