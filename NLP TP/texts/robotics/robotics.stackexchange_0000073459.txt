Q:

gazebo camera frame is inconsistent with rviz + opencv convention

It looks like the gazebo camera frame convention is not the same as rviz and opencv, which the image below shows

In opencv, z is pointing into the image (the blue axis), x is right (the red axis), and y is down (green axis), while in the gazebo camera x is pointing into the image and z is up, y is right which is similar to the robot convention of x being forward and z up.
The image above is using an rviz/Camera to overlay the purple grid on the frame generated from the gazebo camera plugin, instead of the grid overlaying properly on the ground and going to toward the horizon rviz thinks the camera is pointed at the ground.
This example is running the gazebo_ros_demos rrbot_gazebo and rrbot_control launch files, and using standard Ubuntu 14.04 + Jade packages.
I cross posted https://github.com/ros-simulation/gazebo_ros_pkgs/issues/424 - or is it the fault of rviz/Camera and opencv, every node calling opencv camera projection functions should rotate first?  Or every node on either side should have options to support either frame?  (Or do options exist already and I've missed them?)
My short term solution is going to be to republish every frame out of gazebo with a rotated camera frame in the header (and the urdf/xacro can create the corrected frame, or it could be sent to tf from the same republishing node).

Originally posted by lucasw on ROS Answers with karma: 8729 on 2016-04-21
Post score: 3

A:

The xacro needs to create the optical frame like this, and the sensor uses it for frameName:
  <!-- generate an optical frame 
      http://www.ros.org/reps/rep-0103.html#suffix-frames
      so that ros and opencv can operate on the camera frame correctly 
      -->
  <joint name="camera_optical_joint" type="fixed">
    <!-- these values have to be these values otherwise the gazebo camera
        image won't be aligned properly with the frame it is supposedly
        originating from -->
    <origin xyz="0 0 0" rpy="${-pi/2} 0 ${-pi/2}"/>
    <parent link="camera_link"/>
    <child link="camera_link_optical"/>
  </joint>

  <link name="camera_link_optical">
  </link>

  <gazebo reference="camera_link">
    <sensor type="camera" name="camera1">
      ...
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        ...
        <frameName>camera_link_optical</frameName>
        ...

This shows the correctly generated optical frame- the Camera overlay RobotModel arm is seamless with the gazebo camera image:

There is a PR for gazebo_ros_demos to get this fix in, since that is where the basic gazebo + ros tutorial points it really should be working correctly.
https://github.com/ros-simulation/gazebo_ros_demos/pull/15
It's possible the other gazebo ros sensors need to be handled similarly (but maybe the depth sensors had this solved within the plugin?).

Originally posted by lucasw with karma: 8729 on 2016-04-21
This answer was ACCEPTED on the original site
Post score: 7

Original comments
Comment by athul on 2019-03-15:
Thanks a lot! This fix works very fine.
Comment by martinerk0 on 2021-04-14:
Can you do this purely with SDF model?
Comment by rezenders on 2021-05-13:
This worked for me with the camera link having rpy="0 0 0", but I rotated the camera_link -${pi/2} in the roll axis  ( rpy="-${pi/2} 0 0") and the image I get in rviz is rotated to the opposite side. Am I doing something wrong or is it supposed to be like this?

