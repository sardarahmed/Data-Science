Q:

Catkin and system dependencies: build- versus run-time?

Catkin packages have both build- and run-time dependency lists (and v2 of the package.xml format seems to have more). However, rosdep doesn't seem capable of telling the difference between the types of dependencies-- it just gives them all. If I wanted to query a package for only its run-time dependencies or build-time dependencies, how would I go about it? Is there a tool that would help me?
Note that I'm only referring to source here: given the source of a ROS package, I want to determine both its run- and build-time dependencies separately. For example, how does bloom extract them such that the binary Debian package only depends upon the run-time dependencies?

Originally posted by kyrofa on ROS Answers with karma: 347 on 2016-02-19
Post score: 4

A:

To the best of my knowledge,apt-cache depends is going to list out the run time dependencies, but you have to manually check the manifest file for the build dependencies.

Originally posted by sam26 with karma: 231 on 2017-03-06
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by kyrofa on 2017-03-06:
Indeed, though I'm really looking to obtain this information given the source of a ROS package. How does bloom extract the run-time dependencies from the package such that the Debian package depends upon them and not the build-time dependencies?
Comment by marguedas on 2020-02-21:
Fly-by a few years later: there is a PR to allow requesting rosdep a specific type of dependency https://github.com/ros-infrastructure/rosdep/pull/727, not sure if it supports format 2 and 3 though.
In ROS2 there's also ros2 pkg xml but it like the previous PR it just gives you the straight xml tags and doesnt do logic like "you asked for all runtime dependencies,  means build and runtime dependency so I'll print those too".
So no complete solution yet but some intermediary ones available
Comment by kyrofa on 2020-02-21:
Yeah really the best tool I've found for this these days is just using catkin_pkg directly (which is how bloom works). Sadly I learned that too late for the project for which I wanted this answer, but I'll go back and fix it at some point.

