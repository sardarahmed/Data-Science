Q:

How to cross-compile ROS for BeagleBoard-xM (ARM)

I'd like to cross-compile ROS stacks for a BeagleBoard-xM. How should I proceed? I haven't got any experience with cross-compilation. I've read there is a stack for this purpose called eros, is it still alive? Or is it better to go with OpenEmbedded or CodeSourcery, or is rostoolchain.cmake enough?
I've already managed to build all the stacks necessary by compiling them directly on the BB-xM once (Ubuntu 10.10), but this takes a lot of time and is prone to errors (see here or here). So I'd like to learn how to cross-compile to avoid such problems in the future.
Any hints appreciated.

Originally posted by tom on ROS Answers with karma: 1079 on 2011-02-28
Post score: 0

A:

In answer to your question, I think you need to understand the roles of each

OpenEmbedded : its a system builder, as you already have ubuntu installed, you dont need it. It can build you toolchains, but there are probably easier ways to get a toolchain if you already have ubuntu installed.
CodeSourcery : it's a toolchain (cross compiler + utilities). I haven't actually had any problems with these, and eros even has a package which helps you install a code sourcery g++/glibc toolchain on 32 bit systems.
Eros is not a system builder, nor a toolchain. It simply brings all the elements together so that you can cross-compile ros easily.

As for the situation you have described, you don't need to worry about a system builder. The next step is a toolchain, code sourcery should be ok, though I also see maverick now includes arm-linux toolchains. These latter toolchains will probably be a better fit (no chance of libc/libc++ mismatches) but I haven't tested them myself.
Once you have a toolchain, you can use eros to help you do a toolchain bridge (i.e. install the apache runtimes, log4cxx and boost into your toolchain) and globally configure the ros environment for cross compiling.
This will work well for simple systems, but if you're using large stacks of packages with alot of other rosdeps, then it probably isn't viable as you haven't got a good means of installing those rosdeps into your toolchain. Eros could add build scripts for some of these, though I'd like to see eros fill this need by using something like openembedded under the hood to do so. If you have an ubuntu already installed, a simple hack that might work is to copy libs and headers for rosdeps from your board across into your toolchain.

Originally posted by Daniel Stonier with karma: 3170 on 2011-02-28
This answer was ACCEPTED on the original site
Post score: 3

