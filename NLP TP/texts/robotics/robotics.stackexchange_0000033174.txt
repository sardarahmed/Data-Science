Q:

Robot Arm "Violating" Joint Constraints prevents future movement/planning

We have an arm that we're trying to control using the move_arm stack. We're having difficulties where the arm gets moved to the edge of our joint limits, but then gravity (or noise) pulls the arm slightly past the joint constraint. Once this happens, the arm can not move, because the start state violates the joint constraints. How do people normally deal with this problem?
Edit:
I've tried to write some simple code which pushes the arm just out of the joint limit, but a problem occurs is that the arm is trying to go back into a position where it thinks it is in a limit, and can not actually get there. (For example, the solution from the IK solver is right at the end of the joint limit). So my follow-on question is this: Is there a way to treat the IK/planner to have slightly tighter joint limits then what exists in real life? This way the planner can plan to put a joint at its limit, but when we actually get there there is a bit of play so move_arm will at least successfully go to it?
Edit2: See my answer below for how I have solved this problem for our robot.

Originally posted by John Hoare on ROS Answers with karma: 765 on 2011-07-21
Post score: 3

Original comments
Comment by John Hoare on 2011-11-17:
Not very well, however I haven't spent a lot of time dealing with it. I've implemented (like in the edit) something which "twitches" the arm out of a joint limit and then just tries to go to the next position. It works somewhat but its not an ideal solution.
Comment by seth_g on 2011-11-15:
Have you solved your problem yet? I have the same issue you do and found a workaround. I don't like the workaround, but until a solid fix comes out, I'll have to use it.
Comment by John Hoare on 2012-11-05:
FYI you can look at my answer to see how I solved this problem for our specific situation.

A:

Hi,
There are two approaches that might work for you.  The first is what we're doing in the move_arm_head_monitor package in the arm_navigation_experimental directory.  When used in concert with the move_arm_warehouse (the experimental version of move_arm) we call the monitor not only after planning but before planning.  During this pre-planning stage among other things we check if the joints are just outside the joint limits.  If so we generate a simple open loop trajectory that puts us back inside the limits and pass it to the controller - for the PR2 the required movement is pretty small.  This method seems to work well in practice.  You could probably do something similar in a script that you ran before calling the move arm request.
The other thing that occurs to me is something I haven't tried but should work in the unstable/electric version of arm_navigation.  The new version supports setting a robot state that is not the current state in the MotionPlanRequest.  You should be able to get the current state from the environment server, determine which joints are out of their limits using the functions in KinematicState, set values for those joints in the robot state in MotionPlanRequest, and pass that into MoveArm as part of the PlanningScene diff.  The end result will be planning/execution from a slightly different start state, but if your controllers are robust to this minor discrepancy this approach should work.  Definitely make sure that you aren't setting a diff that's wildly different than the current start state - the PR2 controllers at least will try very hard to achieve the first trajectory point from the current location and the planner will not have necessary ensured that the path to that point is collision-free.
If you go with the latter approach and something doesn't work let me know.  I'll be writing up some documentation for the arm_navigation release that will talk about some of this new functionality but I haven't done so yet.

Originally posted by egiljones with karma: 2031 on 2011-07-21
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by John Hoare on 2011-11-03:
I've tried implementing your first suggestion, however I've run into some issues, please see my edit.

