Q:

How should I express a percentage in a message definition?

I'm creating a new custom message type for one of my nodes and I need a field that expresses a percentage value (from 0% to 100%).
What is the standard way to express this?  Should I use a floating point variable from 0.0 to 100.0?  Or a floating point from 0.00 to 1.00?

Originally posted by Ricardo Angeli on ROS Answers with karma: 41 on 2018-06-14
Post score: 0

Original comments
Comment by Humpelstilzchen on 2018-06-20:
Do you need non-real values, e.g. 12.34%?
Comment by Ricardo Angeli on 2018-06-20:
Yes, I do.

A:

I believe I found an answer.  Gvdhoorn is right that there is no defined standard.  However, the sensor_msgs/RelativeHumidity message defines relative_humidity as a float64 value from 0.0 to 1.0.  So that's at least one standard message that uses that format for what's traditionally a percentage value.

Originally posted by Ricardo Angeli with karma: 41 on 2018-06-19
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by Humpelstilzchen on 2018-06-20:
So the recommendation is to use a 8 Byte variable to store a value that can fit into 1 Byte?
Comment by BrettHemes on 2018-06-20:
You are making assumptions in your assessment Humpelstilzchen.  One byte is in general not sufficient.  What about the representation of 37.7% or even 1/3%?  float64 provides very good precision between 0.0 and 1.0, thus covering the majority of use cases vs something like a uint8.
Comment by Humpelstilzchen on 2018-06-20:
You are now making the assumption that there are fractional. We don't know that since the questioner has not replied to my comment yet.
Comment by Ricardo Angeli on 2018-06-20:
In my particular implementation, it is indeed fractional.  But even if it wasn't, wouldn't we want the field type to be able to support a higher-precision value if we want a truly generalized and not implementation-specific message definition?
Comment by Humpelstilzchen on 2018-06-20:
Still you are wasting a lot of bandwidth since float was not made to cover a small area, but a real large one.  If you do not need human readable I would use an unsigned int and define 0% = 0 and 100% = max value.
Comment by BrettHemes on 2018-06-20:\

You are now making the assumption that there are fractional

I was not actually, thank you.  I was merely stating that, for the sake of generality, the choice of uint8 would be unwise and gave two examples.  You are now at 4 bytes with your choice of unsigned int (uint32)... is that too much? too
Comment by BrettHemes on 2018-06-20:
little?  If bandwidth is a concern then yes, go ahead and sacrifice readability, make assumptions, and make your own types (that is why such functionality exists) but I wouldn't expect any standard messages to follow suit unless it was in the nature of the underlying data.

