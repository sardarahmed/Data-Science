Q:

ROS Answers SE migration: Why use ROS?

My organization is not currently using ROS but I am intrigued. I've proposed the idea of us using ROS and the pragmatists inevitably ask, "what's the value of switching to ROS?"
I have some thoughts/ideas on this but am not yet skilled in ROS. So, I thought I'd throw the question out to you the experts,
Why is ROS so great?

Originally posted by joehays on ROS Answers with karma: 23 on 2013-05-01
Post score: 2

Original comments
Comment by Arkapravo on 2013-05-04:
'What is ROS' and 'Why use ROS' etc have been answered here and also at the ros wiki. Since ROS has been around for more than 4 years now, these questions should not be encouraged, rather one should be asked to look up the wiki etc.
Comment by SL Remy on 2013-05-06:
I actually don't remember a wiki page answering this question (why use ROS), could someone comment and provide the link so that it can be captured with the question so that the information could point to the wiki?
Comment by Arkapravo on 2013-05-06:
@trinighost Hello, (1) this is for 'What is ROS' ==> http://answers.ros.org/question/12230/what-is-ros-exactly-middleware-framework-operating-system/ and though the answer to (2) 'Why use ROS' is not so explicit, but you can find it here ==> http://www.ros.org/wiki/groovy (for Groovy)

A:

modular, nodes can be started separate from each other. This makes the development of a big robot system with multiple people much easier.
good hardware support, ROS supports lots of sensors, actuators and whole robot platforms
lots of algorithms already implemented and available as package
good integration with other robot middlewares
easy to use tools for development
big community
active development

But what the real value for your organisation is depends on the type of application.

Originally posted by davinci with karma: 2573 on 2013-05-01
This answer was ACCEPTED on the original site
Post score: 9

Original comments
Comment by autonomy on 2013-05-03:\

Communication setup is abstracted away.
Pre-defined message types make debugging and visualization easy.
Subscriber/publisher model is agnostic to where the data is coming from and how. You know there will be a specific type of data published on a specific topic, so you can easily listen in.

