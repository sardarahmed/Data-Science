Q:

robot_localization Behavior when fusing delayed odometry messages

Hi everyone,
I use the ukf_localization_node to fuse a  laserscan based odometry with a camera based odometry. Unfortunately the camera postprocessing delays the update by about 60-80 ms per localization update. So when the filter encounters these measurements, the time delta against the last measurement is negative as the other odometry source has higher frequency as well as lower latency.
Will the filter still behave correctly when dealing with negative deltas? Is there a better way I should set things up?
Thanks,
Marc
EDIT: Thanks for your suggestion! I indeed use two seperate odometry topics which are both registered with the ukf node as follows:
<node pkg="robot_localization" type="ukf_localization_node" name="MapFusion" >
<param name="two_d_mode" value="true"/>
<param name="frequency" value="100"/>
<param name="map_frame" value="map"/>
<param name="odom_frame" value="odom"/>
<param name="world_frame" value="map"/>

<!-- Inputs -->

<!--  **** IMU0 : Orientation roll, pitch yaw from IMU **** -->
<param name="imu0" value="sensor/imu"/>
<rosparam param="imu0_config">[false, false, false,   <!-- x,y,z -->
                               true, true, true,      <!-- roll, pitch, yaw -->
                               false, false, false,   <!-- x,y,z velocities -->
                               false, false, false,   <!-- roll, pitch , yaw velocity -->
                               false, false, false ]  <!-- x,y,z acceleration -->
</rosparam>
<param name="imu0_differential" value="false"/>

<!--  **** ODOM0 : odometry from Scanreg (highfreq) **** -->
<param name="odom0" value="sensor/scanreg/odometry"/>
<rosparam param="odom0_config">[true, true, true,       <!-- x,y,z -->
                               false, false, false,     <!-- roll, pitch, yaw -->
                               false, false, false,     <!-- x,y,z velocities -->
                               false, false,false,      <!-- roll, pitch , yaw velocity -->
                               false, false, false]     <!-- x,y,z acceleration -->
</rosparam>
<param name="odom0_queue_size" value="20"/>
<param name="odom0_differential" value="false"/>
<param name="odom0_pose_rejection_threshold" value="4"/>

<!--  **** ODOM1 : odometry from VisGlob **** -->
<param name="odom1" value="sensor/visglob/odometry"/>
<rosparam param="odom1_config">[true, true, true,     <!-- x,y,z -->
                               false, false, false,   <!-- roll, pitch, yaw -->
                               false, false, false,   <!-- x,y,z velocities -->
                               false, false,false,    <!-- roll, pitch , yaw velocity -->
                               false, false, false]   <!-- x,y,z acceleration -->
</rosparam>
<param name="odom1_queue_size" value="20"/>
<param name="odom1_differential" value="false"/>
<param name="odom0_pose_rejection_threshold" value="7"/>

</node

Originally posted by UnfortunateConflictOfEvidence on ROS Answers with karma: 23 on 2016-03-02
Post score: 2

A:

It sounds like you are feeding the odometry messages to the same topic. You ought to be using two separate topics and add 2 separate odometry inputs to the filter. Comparing the latest camera odometry measurement to the last laser-odom-pose is probably quite meaningless.
For more specific help, please update your question with your r_l configuration.
EDIT:
Ah, so initially I thought you were getting some sort of error message about negative time delays. So as far as I know r_l does the following: In every interation (determined by the filter frequency) it orders all new measurements by timestamp. It then starts from lowest timestamp to highest, and incorporates the measurement. If the latest incorporated measurement (== current filter time) is older than the current measurement, it first predicts the filter to the time of the measurement, then corrects the filter state with the measurement. Otherwise, if the current filter time is newer than the current measurement (which will be the case for your delayed vision measurements), it skips the predict, and simply corrects the current filter state with the measurement as if the measurement timestamp and the filter timestamp were equal. So depending on your dynamics, and on the amount of delay, this might introduce something from little to a lot of error due to the wrong timing.
@Tom Moore, does that sound correct?
In any case, looking at your configuration there might be different issues as well. Firstly, you seem to incorporate both odometry sensors as absolute x,y,z measurements. However, I would assume that they are not in the same reference frame and therefore they would result in conflicting updates, with the filter position jumping from one reference to the other. You might want to look at the differential option to convert poisition measurements into velocity measurements. However, with that, the lower frequency updates from vision might not have much influence, in particular if they are delayed and therefore in every iteration followed by (multiple) new measurements from laser odometry.
Moreover, is it intenional that you want to rely purely on your IMU for the orientation information? This can make sense I guess, I just wanted to point it out.

Originally posted by demmeln with karma: 4306 on 2016-03-02
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by Tom Moore on 2016-03-02:
Yes, your description of the current behavior is accurate. FYI, @UnfortunateConflictOfEvidence, @demmeln has added a ticket to address this on the r_l GitHub page.
Comment by UnfortunateConflictOfEvidence on 2016-03-03:
I will probably then try to implement a smoothing scheme as suggested in that tickets discussion. I'll keep that discussions url in case I'll have code to contribute. Thanks for your effort @demmeln
Comment by demmeln on 2016-03-03:
Sounds great. Feel free to discuss over at github if you want.

