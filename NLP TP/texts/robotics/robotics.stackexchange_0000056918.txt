Q:

Figuring out the power of a YAML file

I have no prior experience in writing a YAML file. I want to know something related to it's capability.

Suppose in move_base.launch file, I have written something which launch mux.yaml (http://wiki.ros.org/yocs_cmd_vel_mux). Which look like below:

START
subscribers:
- name:        "Teleoperation"
  topic:       "input/teleop"
  timeout:     1.0
  priority:    7 
- name:        "Autonomouse Navigation"
  topic:       "input/move_base"
  timeout:     2.0
  priority:    4

END
Scenario:1
Suppose,** I don't want explicit number in the priority field i.e 7/4** instead I need to load this value from a text file. So, I want priority to be a variable.
Scenario 2
Let's hope that above scenario is possible. Now suddenly the text file changes; which in turn changes the yaml file as well. Will ROS is able to catch the dynamic behavior of the yaml file and reflect the same?
Can you just tell me how to achieve above situations and any good reference for writing YAML files?
Thanks in advances for your valuable suggestions...

Originally posted by RB on ROS Answers with karma: 229 on 2014-01-29
Post score: 0

A:

Background: YAML is a generic file format, and can be used to specify many, many things. In this particular context it's used to specify the configuration of the yocs_cmd_vel_mux nodelet, but be aware that you will see the YAML format used elsewhere for completely different things.
I will confine my answer specifically to using YAML to configure the yocs_cmd_vel_mux nodelet.

As far as I'm aware, you can't reference outside data from a YAML file. That said, a YAML file is a text file, so it's easy to modify.

The yocs_cmd_vel_mux node will not automatically pick up changes to the yaml file. It does have an interface through dynamic_reconfigure that can be used to load a new configuration file.

Further things to consider:
The yocs_cmd_vel_mux nodelet is a nodelet; this means that it needs to be run within a nodelet manager. It's usually run as part of the core Kobuki/Turtlebot2 launch, but if you're trying to use it on another robot, you'll need to learn a little about nodelets and how to run a nodelet manager in order to use it.
If you're trying to change the priorities of the input topics dynamically at run time in order to force a particular input, you're probably designing your system wrong. The purpose of a multiplexer like this is to prioritize and choose the input topic automatically; if you set the priorities correctly on startup, the mux should automatically choose whichever active topic has the highest priority.
If you're looking for a more generic mux that doesn't automatically do topic prioritization and switching, have a look at the topic_tools mux node.

Originally posted by ahendrix with karma: 47576 on 2014-01-29
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by RB on 2014-01-31:
@ahendrix, thanks for your comment. I am wondering why nodlet (http://wiki.ros.org/nodelet) is required for   implementing mux.yaml? I have seen here (https://github.com/vicoslab/vicos_ros/blob/master/turtlebot_vicos/launch/includes/_mobile_base.launch); which use nodelet for mux.yaml. Since I am using P3AT robot with lms200 laser range finder; is it possible to achieve desired behavior of mux.yaml. As we all know that ROS autonomous module has limited chance of failure, then what is the point of setting timeout? How we know that mux.yaml has worked properly. Right now, after completing the goal set in RVIZ, I can opt for teleop without using mux.yaml. But problem arises when we try to go for teleop without completing the goal set in RVIZ
Comment by ahendrix on 2014-01-31:
YAML is a data description format and is not runnable; it merely defines the configuration for something else.

