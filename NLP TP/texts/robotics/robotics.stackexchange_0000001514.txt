Q:

Reducing motor speed without jamming up

So I built three little bots so far. 
One with a raspberry-pi, (6V motors), one with an arduino (12V motors), and another with an arduino but a hacked remote car (7ish, volt motors):

The problem I have with all these is that the motors spin so fast the car just bumps into something in a few seconds. (I have a small house)
I tried to use PWM to control the speed, but at a little less than full throttle (255) they jam up and they can't take the weight I put on them.
Should I buy one of these chassis that slow the motor down and give it torque with a gearbox, or is there anything else I can do?

A:

Gearboxes are probably your best bet if you never want to go fast.
You may be able to make it work better if you give it pulsed power (PWM in a way, but pulsed at a speed low enough that the motor actually gets going and then slows down each time.  See Controlling Motors in the Presence of Friction and Backlash for details on the technique.
You can almost certainly make it better if you put some sort of closed-loop speed control on the motors.  Encoders are best, but you can do amazing things using back-EMF speed sensing.  Either of these techniques require you to work with a closed-loop system which isn't trivial, and neither of them will overcome all the problems unless you use a gearbox (but, with closed-loop speed control you can have a much higher ratio of top to bottom speed while keeping things smooth).

A:

When you PWM the voltage to the motor you are effectively controlling the current to the motor which is related to torque (acceleration).  The "jamming up" that you notice is basically the inability of the motor to overcome friction.  
Think about the PWM as the gas pedal in your car, to get to a constant speed you may push all the way down, gradually back off as you reach your target speed and then modulate it to maintain that speed.
A DC motor driven at a fixed voltage loses torque as it goes faster and faster.  That's why it doesn't speed up to infinity.  Gearing it down effectively limits the top speed you'll see at the output.  It gives you more torque at the output but you're trading off speed.
As Tim notes what you need is a closed speed control loop running over that such that you set a speed set-point and the loop, very quickly, ramps the PWM up and down to maintain the speed.  To do that you need some way of measuring the speed.  Once you have that you may be able to get by with a relatively simple PI controller.

