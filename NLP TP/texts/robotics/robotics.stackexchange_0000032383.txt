Q:

Trajectory planner for a multi robot omniwheeled soccer system

Hi folks,
Sorry for such a general question but I'm kind of in a hurry for RoboCup'11. I was planning to write my own Dynamic Safety Search (J.R.Bruce ,2006) algorithm to control a multi robot omniwheeled soccer system, then I came across with the DWA of base_local_planner. In principle, DSS is very similar to DWA, so I am planning to go with TrajectoryPlannerROS class.
So, my questions are as follows:

I obtain the linear line segments by using ompl's RRT-based planners for each robot. These robots have an almost-elliptically shaped velocity profile in x-y coordinates(viz. v_x = [-3.5, 3.5], v_y = [-4, 4], but the applicable velocities forms a deltoid in v_x-v_y plane). So, I have different max and min velocities for different velocity directions. But we can set the velocity limits more like in a square shape in the parameters of TrajectoryPlannerROS. Is is possible to set the allowable speeds in a different way? For instance, with a polygon, convex-hull, etc.

This motion control program will run on an offboard computer, and odometry data will not be available, but the global velocity can be provided. However, the time limit for this motion control program is like a couple of miliseconds. Do you think it can perform sufficiently good?

What exactly is a strafing velocity?

Thank you for your assistance...
Cheers

Originally posted by Kadir Firat Uyanik on ROS Answers with karma: 288 on 2011-06-19
Post score: 0

A:

First off, you might want to take a look at the dwa_local_planner as it implements DWA with the added perk of having dynamic_reconfigure built in. This might make tuning the planner for your needs a lot easier than dealing with the trajectory planner.
Now to answer your questions:

The dwa_local_planner allows you to set min and max velocities in both the x and y dimensions independently. The TrajectoryPlannerROS only allows for setting a min and max x velocity. For y (or strafing) velocities, it takes a list of admissible velocities to simulate. This might be another reason for you to give the dwa_local_planner a shot.

A couple of milliseconds will probably be OK as far as performance is concerned.

Strafing just means moving sideways, meaning there's a non-zero y velocity.

Originally posted by eitan with karma: 2743 on 2011-06-22
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by Kadir Firat Uyanik on 2011-06-24:
I think representing circle shaped obstacles as 4 or 8 points and publishing this information to the sensor topic that costmap is subscribed to would do the trick. Considering the performance and inner workings of dwa_local_planner, should I create "n" many instances of the planner for "n" robots?
Comment by Kadir Firat Uyanik on 2011-06-24:
Eitan, in my application obstacles are all represented as circles and the environment is,though highly dynamic,fully observable via global vision. What costmap(sensor source) settings would you recommend?It might be better asking this as a new question, but anyway it is not totally off the topic.

