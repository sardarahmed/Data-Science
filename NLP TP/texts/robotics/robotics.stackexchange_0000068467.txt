Q:

remapper /scan to /scan2

I have one lidar. I need a /scan topic  for laser_scan_matcher package and need a /scan2 topic  for gmapping package.
gmapping launch :
    <node pkg="gmapping" type="slam_gmapping" name="slam_gmapping"
output="screen">
<param name="scan_topic" type="string" value="scan2" />

laser_scan_matcher launch:
<node pkg="laser_scan_matcher" type="laser_scan_matcher_node"
<param name="laser_topic" type="string" value="scan" />

覺 need a node like this :
<node pkg="laser_remapper" type="remapper2" name="hokuyo_remapper"/>

I know remap argument but how can I do that
thank you for advices...

Originally posted by osmancns on ROS Answers with karma: 153 on 2015-07-07
Post score: 0

Original comments
Comment by mgruhler on 2015-07-07:
so you want the same laser scan for the scan_matcher and gmapping? so why do you need the remapper node? you could just remap e.g. in the gmapping or set the topic to scan, right?
Otherwise, you could always use a relay
Comment by osmancns on 2015-07-07:
yes 覺 want different topics with same laser.
you say like that :
  <node pkg="gmapping" type="slam_gmapping" name="slam_gmapping" output="screen">
    <param name="scan_topic" type="string" value="scan2" />
    <remap from="scan" to="scan2" />

Comment by osmancns on 2015-07-07:
I need separately scan topics as /scan and /scan2. because this method better then my different nodes subscribe same topic
but 覺 cant see result with this : rostopic echo /scan2
no publish as /scan2
and 覺 use this tf tree:
http://i.imgur.com/AlhuTY6.png

A:

According to the documentation there is no parameter scan_topic in gmapping. So the parameter will not do anything.
The remapping seems to be correct.
I'm not sure why you need the scan information of the same lidar on a different topic. What you could easily do is to create a relay:
rosrun topic_tools relay scan scan2
However, in the end, this would still be, more or less, subscribing to the same topic. This has nothing to do with your tf tree.
Which looks strange, by the way. You have tree which is only connectet through the map topic. But I guess this comes from gmapping and the scan_matcher providing a /map->something transform, right?

Originally posted by mgruhler with karma: 12390 on 2015-07-10
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by miguel on 2015-07-10:
Sorry to be slightly of topic, but how generally should a TF tree general look, should it be map-> odom-> base_link-> sensors or is this dependent on the application?
Comment by osmancns on 2015-07-10:
okay you are right. But if gmapping and laser_scan_matcher subscribe to same topic ( /scan) , mapping performance is good  but I see drifting and jumping a little. I think, if gmapping and laser_scan_matcher subscribe to topic diffrent topics (/scan, /scan2) , mapping has no problem.
Comment by osmancns on 2015-07-10:
there is a argumnet like that and working :
<!-- gmapping launcher -->
 <node pkg="gmapping" type="slam_gmapping" name="slam_gmapping" args="scan:=scan2" output="screen">

Comment by mgruhler on 2015-07-10:
Well, with the args="scan:=scan2" you are basically doing a remapping over the command line as you would do with rosrun gmapping slam_gmapping scan:=scan2. The remap in the launch file has the slame effect, but is better readable.
Comment by mgruhler on 2015-07-10:
@miguel, in most applications the tf tree is /map->/odom->/base_link->rest_of_robot yes. maybe you have additional frames (e.g. /base_footprint) in between. However, in the end, it depends on your robot and the application
Comment by miguel on 2015-07-10:
I see, Thank you for the reply!

