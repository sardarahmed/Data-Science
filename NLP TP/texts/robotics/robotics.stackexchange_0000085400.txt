Q:

Better way of converting sensor_msgs::PointCloud2 to PointCloud

Hi,
I am receiving  sensor_msgs::PointCloud2 inside a callback function. I am converting it to PointCloud<PointXYZRGB> using following procedure-

First convert sensor_msgs::PointCloud2 to pcl::PCLPointCloud2
Later convert pcl::PCLPointCloud2 to pcl::PointCloud<pcl::PointXYZRGBA>
Finally convert pcl::PointCloud<pcl::PointXYZRGBA> to pcl::PointCloud<pcl::PointXYZRGB>

See below the code snippet-
inline void PointCloudXYZRGBAtoXYZRGB(pcl::PointCloud<pcl::PointXYZRGBA>& in, pcl::PointCloud<pcl::PointXYZRGB>& out)
{
  out.width   = in.width;
  out.height  = in.height;
  out.points.resize(in.points.size());
  for (size_t i = 0; i < in.points.size (); i++)
  {
    out.points[i].x = in.points[i].x;
    out.points[i].y = in.points[i].y;
    out.points[i].z = in.points[i].z;
    out.points[i].r = in.points[i].r;
    out.points[i].g = in.points[i].g;
    out.points[i].b = in.points[i].b;
  }
}

void pointCloudCallback(const sensor_msgs::PointCloud2ConstPtr& pc_msg)
{
  pcl::PCLPointCloud2 pcl_pc2;
  pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud(new pcl::PointCloud<pcl::PointXYZRGB>);
  pcl::PointCloud<pcl::PointXYZRGBA> temp_cloud;
  pcl_conversions::toPCL(*msg, pcl_pc2);
  pcl::fromPCLPointCloud2(pcl_pc2, temp_cloud);
  PointCloudXYZRGBAtoXYZRGB(temp_cloud, *cloud);
}

I am wondering if there exists better way which is efficient in terms of time taken. Kindly suggest.

Originally posted by ravijoshi on ROS Answers with karma: 1744 on 2018-02-19
Post score: 0

A:

I believe you want the example code from http://wiki.ros.org/pcl_ros#Subscribing_to_point_clouds but make the
typedef pcl::PointCloud<pcl::PointXYZ> PointCloud;

into:
typedef pcl::PointCloud<pcl::PointXYZRGB> PointCloud;

http://wiki.ros.org/pcl_ros#ROS_C.2B-.2B-_interface :

pcl_ros extends the ROS C++ client
library to support message passing
with PCL native data types. Simply add
the following include to your ROS node
source code:
#include <pcl_ros/point_cloud.h> 

This header allows you to publish and
subscribe pcl::PointCloud objects
as ROS messages. These appear to ROS
as sensor_msgs/PointCloud2 messages,
offering seamless interoperability
with non-PCL-using ROS nodes. For
example, you may publish a
pcl::PointCloud in one of your
nodes and visualize it in rviz using a
Point Cloud2 display. It works by
hooking into the roscpp serialization
infrastructure.
The old format sensor_msgs/PointCloud
is not supported in PCL.

Originally posted by lucasw with karma: 8729 on 2018-02-19
This answer was ACCEPTED on the original site
Post score: 2

