Q:

Topic reading inside a callback

[EDIT]
I have changed my question because I think what I am trying to do is bit different from what was explained here before.
I have a Callback and I need to read a different topic inside this callback. I don't know if it is possible, but I have to ensure that some part of the code is only executed if the other topic has a particular value.
Any case, I don't know if I can read a topic or execute a particular Callback while I am just executing one callback
Thank you.

Originally posted by arenillas on ROS Answers with karma: 223 on 2014-12-10
Post score: 0

Original comments
Comment by dornhege on 2014-12-10:
What is addCallback? Do you want to make another subscription or just "do the same thing as a callback would have" - in the latter case: It's just a function that you can call.
Comment by arenillas on 2014-12-10:
I have changed the question because It was totally confusing.

A:

I would suggest having 2 separate callbacks. And the code that requires certain variable to be set is executed only if respective flags are true. Also, I'd suggest using mutex on flags to avoid any race conditions. For eg.
class A 
{
    bool flag;
    std::mutex m;
    void callback1(...)
    {
         //Set the flag
         m.lock();
         flag = true;
         m.unlock();
         .
         .
         .
    }
    void callback2(...)
    {
        //Use flag to check if you wanna execute the code
       m.lock();
       bool isFlagTrue = flag;
       m.unlock();
       if (isFlagTrue)
       {
             //Put your code here ...
       }
};

I hope that's what you're looking for.
EDIT:
As Kramer suggested in his comment below, only one callback happens at a time. So you don't have to use mutex unless you have multi-threaded node process.

Originally posted by ajain with karma: 281 on 2014-12-10
This answer was ACCEPTED on the original site
Post score: 4

Original comments
Comment by kramer on 2014-12-10:
FYI: unless the node has multi-threaded spinning, there isn't a need for the mutex. When a node uses single-threaded spinning, only one callback executes at any time (see: Callbacks Overview).
Comment by ajain on 2014-12-11:
You are correct. I'll add that as an edit to the answer. Thanks for correcting me.

