Q:

How to create an orthographic camera sensor in gazebo fortress?

I'm trying to create an orthographic camera sensor for my robot model and have trouble specifying the sensor in a way that I know the px/mm dimensions of the resulting images.
E.g. I want a camera with an 100px wide and 1px high image where the 1px would map to 1mm on the image plane.
My goal is to use the resulting image to simulate a line sensor which can detect a robots offset from a line and the line thickness.
I'm looking through the camera parameters available here http://sdformat.org/spec?elem=sensor and have found the projection matrices, but to my understanding I also need to specify the pixel size in mm or something similar to know the actual image size, or am I wrong?

A:

Gazebo has only the pinhole camera model, so there is no way to make a true telecentric lens.
It can however be approximated by a using a small enough fov, since then the projection lines are more parallel. The question then is how many pixels, what fov, and what distance from the image plane the camera should have to achieve some px/mm resolution and also what projection distortion we would have in the worst case, i.e. on the sides of the image. I've thrown together a python script which calculates this things.
import math

w_image = 0.2
d_image = 0.3

# the field of view we need for the given d_image/w_image
fov = math.atan(w_image/(2*d_image))*2

# w1 is the worst case pixel distance on the image plane we allow
w1 = 0.0005
h1 = d_image
w = w_image/2

d1 = math.sin(math.atan(h1/w)) * w1
d2 = math.sqrt(h1**2+w**2)-math.sqrt(w1**2-d1**2)

px = fov/(math.atan(d1/d2))

print(f"fov: {fov:0.3f}")
print(f"w1: {w1*1e3:0.3f}mm")
print(f"px: {px:0.1f}")

here are the somewhat roundabout calculations I made for this code, so that you know what the variables stand for.

I've also plotted the actual pixel widths here:

The plot was generated with this function, you can simply append it to the code above as it relies on some variables from there.
def plot_w1():
    import numpy as np
    import matplotlib.pyplot as plt

    def dist(px_i):
        return math.tan(fov/px*px_i)*h1

    X = np.arange(0, px//2)
    Y = np.array([dist(px_i) for px_i in X])
    Y = Y[1:] - Y[:-1]
    X = X[1:]

    plt.plot(X, Y, label="w(px_i)")
    plt.plot(X, [w1]*len(X), label="w1")
    plt.xlabel("pixel from center")
    plt.ylabel("pixel distance in mm")
    plt.legend()
    plt.show()

With this one can easily calculate the actual distance in mm for a given pixel.

