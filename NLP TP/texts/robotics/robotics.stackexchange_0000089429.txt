Q:

ros2 include a launch file from a launch file

I see https://github.com/ros2/launch/blob/master/launch/doc/source/architecture.rst#id23

:class:launch.actions.IncludeLaunchDescription
This action will include another launch description as if it had been copy-pasted to the location of the include action.

Can this be used within a launch.py something like this:
def generate_launch_description():
    included_launch = launch_ros.actions.IncludeLaunchDescription(package='foo', launch='my_launch.py', arguments=[...])  
    regular_node = launch_ros.actions.Node( package='bar', node_executable='my_node', output='screen')

    return launch.LaunchDescription([
        included_launch,
        regular_node,
    ])

Originally posted by lucasw on ROS Answers with karma: 8729 on 2018-10-28
Post score: 3

Original comments
Comment by William on 2019-01-17:
Yes, that should work.

A:

UPDATE by @130s: 4+ years later, there's an official tutorial (docs.ros.org/en/rolling) made that lays out what this answer is explaining.

This works but I don't see a way to get arguments in:
from ament_index_python.packages import get_package_share_directory
...
foo_dir = get_package_share_directory('foo')
included_launch = launch.actions.IncludeLaunchDescription(
        launch.launch_description_sources.PythonLaunchDescriptionSource(
                foo_dir + '/launch/my_launch.py'))
...
return launch.LaunchDescription([
    included_launch,
    regular_node,
])

Crystal updates
launch file arguments
I found an example in https://github.com/ros2/launch of including a launch file and passing in arguments https://github.com/ros2/launch/tree/master/ros2launch/examples
Here is getting a launch file argument from https://github.com/lucasw/ros2_cpp_py which is adapted from the launch example:
print("{}".format(launch.substitutions.LaunchConfiguration('test')))

return LaunchDescription([
    launch.actions.DeclareLaunchArgument(
        'test',
        default_value='default_value',
        description='test'),
    launch_ros.actions.Node(
        package='ros2_cpp_py', node_executable='cpp_test', output='screen',
        node_name=launch.substitutions.LaunchConfiguration('test'),
        ),
])

Then this results in a node named 'default_value':
ros2 launch ros2_cpp_py example.launch.py

And this names the node 'foo':
ros2 launch ros2_cpp_py example.launch.py test:=foo

What I need to be able to do is get the value of the argument during the execution of the launch file, but it comes out as:
print("{}".format(launch.substitutions.LaunchConfiguration('test')))

Results in:
<launch.substitutions.launch_configuration.LaunchConfiguration object at 0x7f0db4b44a58>

Maybe it has a method that returns the value- the perform() method wants a LaunchContext but I'm not sure where to get it.
including another launch file
def generate_launch_description():
    """Launch the example.launch.py launch file."""
    return LaunchDescription([
        launch.actions.DeclareLaunchArgument(
            'test',
            default_value='different_default_value',
            description='test arg that overlaps arg in included file',
            ),
        LogInfo(msg=[
            'Including launch file located at: ', ThisLaunchFileDir(), '/example.launch.py'
        ]),
        IncludeLaunchDescription(
            PythonLaunchDescriptionSource([ThisLaunchFileDir(), '/example.launch.py']),
            launch_arguments={'node_name': 'bar'}.items(),
        ),
    ])

I've made a new launch argument with the same name as in the included launch file, it appears the top level one supersedes it.  It is also possible to set an arg in an included launch file regardless of whether the top level launch exposes it or not.  Large hierarchies of of includes have to be careful not to have same named but different meaning arguments, they'll get overwritten.
ros2 launch ros2_cpp_py includes_example.launch.py

Originally posted by lucasw with karma: 8729 on 2018-10-28
This answer was ACCEPTED on the original site
Post score: 4

Original comments
Comment by mkhansen on 2018-11-27:
@lucasw - did you get arguments to work? I can't seem to get them passed through to an included launch file either
Comment by lucasw on 2018-11-27:
I haven't tried it but sys.argv should still be valid in the included file, so argparse would work- so independent arguments could be passed in as long as the two launch files don't have same named args that need different values.
Comment by lucasw on 2018-11-27:
That method wouldn't allow the first launch script setting the args for the included files (except by modifying sys.argv, which is starting to get really hacky), which is something I did very frequently in ros1 launch files.
Comment by lucasw on 2019-01-17:
Updated answer with crystal specific launch file including and argument setting.
Comment by William on 2019-01-17:
Let me see if I can put together a simple example. It's possible there's a feature missing somewhere that prevent this, though my recollection is that it should be possible.
Comment by M@t on 2021-04-28:
I don't quite understand this example. What is ThisLaunchFileDir()?
Comment by morten on 2021-09-30:
Were you ever able to get the value of the argument during the execution of the launch file?
Comment by 130s on 2023-04-07:
Marked as answer. Years later I found a tutorial that essentially explains the same as this answer. To honor the answer I added a link to the body of the answer instead of adding a new answer.

