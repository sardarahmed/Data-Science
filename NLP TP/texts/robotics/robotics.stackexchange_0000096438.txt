Q:

Why does bloom `export LDFLAGS=`?

As of this writing, the bloom repository has at least one debian/rules template featuring the following comment:
# TODO: remove the LDFLAGS override.  It's here to avoid esoteric problems
# of this sort:
#  https://code.ros.org/trac/ros/ticket/2977
#  https://code.ros.org/trac/ros/ticket/3842
export LDFLAGS=

-- https://github.com/ros-infrastructure/bloom/blob/68ed0b1e2d9ed57f180b652afd420c62e1e639cd/bloom/generators/debian/templates/catkin/rules.em#L11
Those commented links are dead, and the internet archive wayback machine doesn't have them. The distant ancestor of that file already had those comments when it was added in 2012:
https://github.com/ros-infrastructure/bloom/commit/872ef2ae92d2f585094fe72c02f45951e3cc6aae#diff-2683f3f4e120cd6629ac50eec670eb53R12
Does anyone remember what ROS trac tickets 2977 and 3842 were about? What were those "esoteric problems" mentioned by the author?
Update:
My ROS friends have pointed me toward catkin issue #72 and a commit referencing the same:
https://github.com/ros/catkin/commit/88dcc4e0aef4e38ec341c974507f847f3a62d022
It's clear this LDFLAGS override has something to do with preventing the linker from seeing the -Bsymbolic-functions flag. More detail forthcoming as I dig into it.
Update The Second:
My further searching has led to several tickets reporting runtime segfaults caused by the use of -Bsymbolic-functions during the link phase:

grpc issue #11195: Segfault when library is linked using "-Bsymbolic-functions"
autofs bug #1470687: Not working properly with compile options "-symbolic-functions"
tango bug #1250534: Linker option -Wl,-Bsymbolic-functions

It is the dpkg-buildflags command (of Ubuntu's dpkg-dev package) that adds -Bsymbolic-functions to the LDFLAGS during a normal dpkg-buildpackage:
root@c7dc18648a0e:/# cat /etc/issue.net && dpkg-buildflags --get LDFLAGS
Ubuntu 20.04 LTS
-Wl,-Bsymbolic-functions -Wl,-z,relro

Note that the Debian dpkg-dev does not do this:
root@b134afb3a682:/# cat /etc/issue.net && dpkg-buildflags --get LDFLAGS
Debian GNU/Linux 10
-Wl,-z,relro

The "proper" way to remove options from the set of linker flags is explained in man 1 dpkg-buildflags "Environment" section:

DEB_flag_STRIP
DEB_flag_MAINT_STRIP
This variable can be used to provide a space separated list of options that will be stripped from the set of flags returned for the given flag.

Originally posted by rubicks on ROS Answers with karma: 193 on 2020-07-03
Post score: 2

A:

After a trip into the basement where they keep the Ark of the Covenant, I found an email that I sent to Jeremy Leibs and Ken Conley looking for advice on this topic in February 2012:

John and I spent quite some time yesterday tracking down a segfault
that was only happening when using a .deb built by our new
catkin-based debbuilder, and could not be reproduced by compiling the
crashing library from source.  Turns out that we could reproduce it by
building the library with -Wl,-Bsymbolic-functions on the link line.
And that's what pbuilder is doing in the new debbuilder.
That whole sequence rang a distant bell in my mind, and I then found
this gem of a ticket:
https://code.ros.org/trac/ros/ticket/2977
So we've simply re-encountered the problem.
The space of solutions is the same, with the "right" answer likely
being to force everybody to use -Wl,-Bsymbolic-functions in their own
development, and fixing underlying bugs.  But at this point, I don't
have time before the Fuerte release to work through the regressions
that would surely result.
So: do you recall how you "cleared out LDFLAGS in the current
deb-building system"?  I'd like to do the same in the new system.
We'll do our best to address this properly in the next release cycle,
starting early.

What followed in the email thread amounted to, "yeah, it's best to add LDFLAGS= somewhere in the pipeline". The description of the resulting catkin issue is simply a copy and paste of Ken's response along those lines.
I do not recall what the actual problem was. After reading through this ancient history, my guess is:

Somewhere in the normal deb-building pipeline (at least when using pbuilder), somebody adds -Wl,-Bsymbolic-functions to LDFLAGS.
That addition is probably done for some good reason and it's probably not supposed to cause harm.
Unfortunately it can sometimes cause harm, probably by exposing some underlying bug or flawed assumption in the code that is being built into a deb.
We papered over the bug/flaw by wiping out LDFLAGS.
We intended to address the underlying bug/flaw but probably never made it happen.

Unfortunately, from the description that I gave to Ken and Jeremy, it seems like whatever problem arises when using -Wl,-Bsymbolic-functions may present itself as a tricky segfault. So my guess is that it's not safe to remove the LDFLAGS override. Or at least it would be hard to prove that it's safe.

Originally posted by gerkey with karma: 1981 on 2020-07-06
This answer was ACCEPTED on the original site
Post score: 4

