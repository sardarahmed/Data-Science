Q:

RO2 simple action implementation

I need to create an action that shall be used by the navigation node.
That action will eventually control an h-bridge card through GPIO
I just cannot find the simplest working example to define an action. outside the one provided by the official ROS2 tutorials
(I dont care about fibonaci; I want to use my own implementation)
no robot on this planet is running around calculating fibonaci suites
class MotorsActionServerGoal:
    def __init__(self, target_pwm):
        self.target_pwm = target_pwm

class MotorsActionServerResult:
    def __init__(self, message=""):
        self.message = message

class MotorsActionServerFeedback:
    def __init__(self, current_pwm=0):
        self.current_pwm = current_pwm

class MotorsActionServer(Node):

    def __init__(self):
        super().__init__('phil_lego_robot_motors')
        self._action_server = ActionServer(self,MotorsActionServerGoal,'something',self.execute_callback)

here is the error I get
AttributeError: type object 'type' has no attribute '_TYPE_SUPPORT' This might be a ROS 1 message type but it should be a ROS 2 message type. Make sure to source your ROS 2 workspace after your ROS 1 workspace.

what is the proper way to init an ActionServer class ?
thanks for your help

A:

Welcome to Robotics Stack Exchange!
Quoting from the official documentation:

Actions are one of the communication types in ROS 2 and are intended for long running tasks.

With this in mind, computation of the Fibonacci series is one good way to demonstrate actions. Though the series can be computed quickly, please notice the intenti
onal deplay added in the code.

what is the proper way to init an ActionServer class ?

Basically, you do not need to implement the corresponding goal, result, and feedback class. Instead, you should create your own action file, such as Fibonacci.action. Make sure to compile this action file to generate the corresponding goal, result, and feedback class automatically.
Last but not least, it is worth spending some time going through the documentation.

