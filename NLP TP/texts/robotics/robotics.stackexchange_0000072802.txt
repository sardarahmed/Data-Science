Q:

robot_localization: adapt internal motion model

Hi folks,

I want to use the robot_localization package with my parrot AR.Drone 2. I previously did some testing within the matlab enviroment and created a simplified quadcopter model (in matlab I get reasonable results). Therefore my thoughts was to adapt the internal motion model of the predict code to my quadcopter model. Is the code designed to perform changes in the internal motion model?

My aim of using  the robot_localization package is to predict long time ahead (around 120ms) to compensate communication delays. Therefore I will also need to add control inputs to achieve a accurate prediction of the state of my drone. AFAIK there is no possibility to use control inputs, does anyone know a good workaround?

Originally posted by jbler on ROS Answers with karma: 1 on 2016-03-16
Post score: 0

A:

Wow, apologies for the delay in responding to this.
I've used r_l with the AR.Drone 2.0 before, and it worked fine. In fact, one of the test bag files that is in the r_l test set in the repo is from that drone.
Having said that, if you find the model isn't accurate enough, I want to move to a plugin-based architecture so that we can support other kinematic models.
Also, check out what's in the repo on the indigo-devel branch now. I've added a control term. I've also just merged a great PR that lets the filter handle lagged data.

Originally posted by Tom Moore with karma: 13689 on 2016-05-08
This answer was ACCEPTED on the original site
Post score: 0

