Q:

Custom ROS message with unit8[] in python!

I have a PacketMsg.msg as follows in my package:
uint8[] buf

I would like to decode /topic with this sample python script;
import rospy
from ouster_ros.msg import PacketMsg

def cb(msg):
    rospy.loginfo('len_msg: {}, type_msg: {}'.format(len(msg.buf), type(msg.buf)))
    rospy.loginfo('msg: {}'.format(msg.buf)) 

def main():
    rospy.init_node("my_sub")
    rospy.Subscriber('/topic', PacketMsg,cb)
    rospy.spin()

if __name__ == "__main__":
    main()

This is the output printed in terminal:
[INFO] [1579270050.540915]: len_msg: 49, type_msg: <type 'str'>
[INFO] [1579270050.541343]: msg: ��H?�~�a�B��`����g=��?M��

whereas, $ rostopic echo /topic returns:
buf: [47, 185, 250, 245, 155, 0, 0, 0, 54, 238, 166, ....................... , 23, 154, 0, 0]

Does anybody know how to change such  <type 'str'> to a list for further usages?
Cheers,

Originally posted by Farid on ROS Answers with karma: 165 on 2020-01-17
Post score: 0

A:

In Python a str can be iterated and indexed in the same way as a list: msg.buf[i]
Each 8-bit character can be converted into a number using ord().
To get the same result as you see on the console you can do a list comprehension: [ord(c) for c in msg.buf]

Originally posted by Dirk Thomas with karma: 16276 on 2020-01-18
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by v.leto on 2021-11-26:
Hi! I have the same problem, I get a series of letters instead of number but I am coding with c++. How can I solve the same issue? Many thanks

