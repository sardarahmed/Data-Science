Q:

Quadrotor cannot be moving and planning its way correctly, automap cannot be launched

We have add PointCloud2 and set the Topic as /rtabmap/cloud_map in our RVIZ. And our Fixed Frame of Global Options is setting as odom, while the Reference Frame of Grid is setting as Fixed Frame. But our quadrotor cannot planning its way correctly and it will just pass through the buildings which we build out by using the Asus Xtion Pro Live through RTAB-Map. Besides, the automap also cannot be launched.
Below there is our rtabmap.launch:
<launch>
  <!-- Convenience launch file to launch odometry, rtabmap and rtabmapviz nodes at once -->

  <!-- For rgbd:=true
        Your RGB-D sensor should be already started with "depth_registration:=true".
        Examples:
           $ roslaunch freenect_launch freenect.launch depth_registration:=true 
           $ roslaunch openni2_launch openni2.launch depth_registration:=true -->
           
  <!-- For stereo:=true
        Your camera should be calibrated and publishing rectified left and right 
        images + corresponding camera_info msgs. You can use stereo_image_proc for image rectification.
        Example:
           $ roslaunch rtabmap_ros bumblebee.launch -->
     
  <!-- Choose between RGB-D and stereo -->      
  <arg name="rgbd"            default="true"/>
  <arg name="stereo"          default="false"/>
 
  <!-- Choose visualization -->
  <arg name="rtabmapviz"              default="true" /> 
  <arg name="rviz"                    default="false" />
  
  <!-- Corresponding config files -->
  <arg name="cfg"                     default="" /> <!-- To change RTAB-Map's parameters, set the path of config file (*.ini) generated by the standalone app -->
  <arg name="gui_cfg"                 default="~/.ros/rtabmap_gui.ini" />
  <arg name="rviz_cfg"                default="-d $(find rtabmap_ros)/launch/config/rgbd.rviz" />
  
  <arg name="frame_id"                default="base_link"/>     <!-- Fixed frame id, you may set "base_link" or "base_footprint" if they are published -->
  <arg name="namespace"               default="rtabmap"/>
  <arg name="database_path"           default="~/.ros/rtabmap.db"/>
  <arg name="queue_size"              default="10"/>
  <arg name="wait_for_transform"      default="0.2"/>
  <arg name="rtabmap_args"            default=""/>              <!-- delete_db_on_start, udebug -->
  <arg name="launch_prefix"           default=""/>              <!-- for debugging purpose, it fills launch-prefix tag of the nodes -->
  
  <!-- RGB-D related topics -->
  <arg name="rgb_topic"               default="/camera/rgb/image_rect_color" />
  <arg name="depth_topic"             default="/camera/depth_registered/image_raw" />
  <arg name="camera_info_topic"       default="/camera/rgb/camera_info" />
  
  <!-- stereo related topics -->
  <arg name="stereo_namespace"        default="/stereo_camera"/>
  <arg name="left_image_topic"        default="$(arg stereo_namespace)/left/image_rect_color" />
  <arg name="right_image_topic"       default="$(arg stereo_namespace)/right/image_rect" />      <!-- using grayscale image for efficiency -->
  <arg name="left_camera_info_topic"  default="$(arg stereo_namespace)/left/camera_info" />
  <arg name="right_camera_info_topic" default="$(arg stereo_namespace)/right/camera_info" />
  <arg name="approx_sync"             default="false"/>         <!-- if timestamps of the stereo images are not synchronized -->
  
  <arg name="compressed"              default="false"/>         <!-- If you want to subscribe to compressed image topics -->
                                                                <!-- For depth_topic, "compressedDepth" image_transport is used. --> 
                                                                <!-- For rgb_topic, see "rgb_image_transport" argument. -->
  <arg name="rgb_image_transport"     default="compressed"/>    <!-- Common types: compressed, theora (see "rosrun image_transport list_transports") -->
   
  <arg name="subscribe_scan"          default="false"/>
  <arg name="scan_topic"              default="/scan"/>
  
  <arg name="subscribe_scan_cloud"    default="false"/>
  <arg name="scan_cloud_topic"        default="/scan_cloud"/>
   
  <arg name="visual_odometry"         default="true"/>          <!-- Launch rtabmap visual odometry node -->
  <arg name="odom_topic"              default="/odom_combined"/>         <!-- Odometry topic used if visual_odometry is false -->
  <arg name="odom_args"               default="$(arg rtabmap_args)"/>
  
  <!-- These arguments should not be modified directly, see referred topics without "_relay" suffix above -->
  <arg if="$(arg compressed)"     name="rgb_topic_relay"           default="$(arg rgb_topic)_relay"/>
  <arg unless="$(arg compressed)" name="rgb_topic_relay"           default="$(arg rgb_topic)"/>
  <arg if="$(arg compressed)"     name="depth_topic_relay"         default="$(arg depth_topic)_relay"/>
  <arg unless="$(arg compressed)" name="depth_topic_relay"         default="$(arg depth_topic)"/>
  <arg if="$(arg compressed)"     name="left_image_topic_relay"    default="$(arg left_image_topic)_relay"/>
  <arg unless="$(arg compressed)" name="left_image_topic_relay"    default="$(arg left_image_topic)"/>
  <arg if="$(arg compressed)"     name="right_image_topic_relay"   default="$(arg right_image_topic)_relay"/>
  <arg unless="$(arg compressed)" name="right_image_topic_relay"   default="$(arg right_image_topic)"/>

  <!-- Nodes -->
  <group ns="$(arg namespace)">
  
    <!-- RGB-D Odometry -->
    <group if="$(arg rgbd)">
      <node if="$(arg compressed)" name="republish_rgb" type="republish" pkg="image_transport" args="$(arg rgb_image_transport) in:=$(arg rgb_topic) raw out:=$(arg rgb_topic_relay)" />
      <node if="$(arg compressed)" name="republish_depth" type="republish" pkg="image_transport" args="compressedDepth in:=$(arg depth_topic) raw out:=$(arg depth_topic_relay)" />
  
      <node if="$(arg visual_odometry)" pkg="rtabmap_ros" type="rgbd_odometry" name="rgbd_odometry" output="screen" args="$(arg odom_args)" launch-prefix="$(arg launch_prefix)">
        <remap from="rgb/image"       to="$(arg rgb_topic_relay)"/>
        <remap from="depth/image"     to="$(arg depth_topic_relay)"/>
        <remap from="rgb/camera_info" to="$(arg camera_info_topic)"/>
      
        <param name="frame_id"                    type="string" value="$(arg frame_id)"/>
        <param name="wait_for_transform_duration" type="double" value="$(arg wait_for_transform)"/>
        <param name="config_path"                 type="string" value="$(arg cfg)"/>
        <param name="queue_size"                  type="int" value="$(arg queue_size)"/>
      </node>
    </group>
    
    <!-- Stereo Odometry -->
    <group if="$(arg stereo)">
      <node if="$(arg compressed)" name="republish_left"  type="republish" pkg="image_transport" args="compressed in:=$(arg left_image_topic) raw out:=$(arg left_image_topic_relay)" />
      <node if="$(arg compressed)" name="republish_right" type="republish" pkg="image_transport" args="compressed in:=$(arg right_image_topic) raw out:=$(arg right_image_topic_relay)" />
  
      <node if="$(arg visual_odometry)" pkg="rtabmap_ros" type="stereo_odometry" name="stereo_odometry" output="screen" args="$(arg rtabmap_args)" launch-prefix="$(arg launch_prefix)">
        <remap from="left/image_rect"        to="$(arg left_image_topic_relay)"/>
        <remap from="right/image_rect"       to="$(arg right_image_topic_relay)"/>
        <remap from="left/camera_info"       to="$(arg left_camera_info_topic)"/>
        <remap from="right/camera_info"      to="$(arg right_camera_info_topic)"/>
      
        <param name="frame_id"                    type="string" value="$(arg frame_id)"/>
        <param name="wait_for_transform_duration" type="double" value="$(arg wait_for_transform)"/>
        <param name="approx_sync"                 type="bool"   value="$(arg approx_sync)"/>
        <param name="config_path"                 type="string" value="$(arg cfg)"/>
        <param name="queue_size"                  type="int" value="$(arg queue_size)"/>
      </node>
    </group>
  
    <!-- Visual SLAM (robot side) -->
    <!-- args: "delete_db_on_start" and "udebug" -->
    <node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen" args="$(arg rtabmap_args)" launch-prefix="$(arg launch_prefix)">
      <param name="subscribe_depth"      type="bool"   value="$(arg rgbd)"/>
      <param name="subscribe_stereo"     type="bool"   value="$(arg stereo)"/>
      <param name="subscribe_scan"       type="bool"   value="$(arg subscribe_scan)"/>
      <param name="subscribe_scan_cloud" type="bool"   value="$(arg subscribe_scan_cloud)"/>
      <param name="frame_id"             type="string" value="$(arg frame_id)"/>
      <param name="wait_for_transform_duration"  type="double"   value="$(arg wait_for_transform)"/>
      <param name="database_path"        type="string" value="$(arg database_path)"/>
      <param name="stereo_approx_sync"   type="bool"   value="$(arg approx_sync)"/>
      <param name="config_path"          type="string" value="$(arg cfg)"/>
      <param name="queue_size"           type="int" value="$(arg queue_size)"/>
      
      <remap from="rgb/image"       to="$(arg rgb_topic_relay)"/>
      <remap from="depth/image"     to="$(arg depth_topic_relay)"/>
      <remap from="rgb/camera_info" to="$(arg camera_info_topic)"/>
    
      <remap from="left/image_rect"        to="$(arg left_image_topic_relay)"/>
      <remap from="right/image_rect"       to="$(arg right_image_topic_relay)"/>
      <remap from="left/camera_info"       to="$(arg left_camera_info_topic)"/>
      <remap from="right/camera_info"      to="$(arg right_camera_info_topic)"/>
      
      <remap from="scan"                   to="$(arg scan_topic)"/>
      <remap from="scan_cloud"             to="$(arg scan_cloud_topic)"/>
      <remap unless="$(arg visual_odometry)" from="odom"  to="$(arg odom_topic)"/>
    </node>
  
    <!-- Visualisation RTAB-Map -->
    <node if="$(arg rtabmapviz)" pkg="rtabmap_ros" type="rtabmapviz" name="rtabmapviz" args="-d $(arg gui_cfg)" output="screen" launch-prefix="$(arg launch_prefix)">
      <param name="subscribe_depth"      type="bool"   value="$(arg rgbd)"/>
      <param name="subscribe_stereo"     type="bool"   value="$(arg stereo)"/>
      <param name="subscribe_scan"       type="bool"   value="$(arg subscribe_scan)"/>
      <param name="subscribe_scan_cloud" type="bool"   value="$(arg subscribe_scan_cloud)"/>
      <param name="subscribe_odom_info"  type="bool"   value="$(arg visual_odometry)"/>
      <param name="frame_id"             type="string" value="$(arg frame_id)"/>
      <param name="wait_for_transform_duration" type="double"   value="$(arg wait_for_transform)"/>
      <param name="queue_size"           type="int" value="$(arg queue_size)"/>
    
      <remap from="rgb/image"       to="$(arg rgb_topic_relay)"/>
      <remap from="depth/image"     to="$(arg depth_topic_relay)"/>
      <remap from="rgb/camera_info" to="$(arg camera_info_topic)"/>
      
      <remap from="left/image_rect"        to="$(arg left_image_topic_relay)"/>
      <remap from="right/image_rect"       to="$(arg right_image_topic_relay)"/>
      <remap from="left/camera_info"       to="$(arg left_camera_info_topic)"/>
      <remap from="right/camera_info"      to="$(arg right_camera_info_topic)"/>
      
      <remap from="scan"                   to="$(arg scan_topic)"/>
      <remap from="scan_cloud"             to="$(arg scan_cloud_topic)"/>
      <remap unless="$(arg visual_odometry)" from="odom_combined"  to="$(arg odom_topic)"/>
    </node>
  
  </group>
  
  <!-- Visualization RVIZ -->
  <node if="$(arg rviz)" pkg="rviz" type="rviz" name="rviz" args="$(arg rviz_cfg)"/>
  <node if="$(arg rviz)" pkg="nodelet" type="nodelet" name="points_xyzrgb" args="standalone rtabmap_ros/point_cloud_xyzrgb">
    <remap from="left/image"        to="$(arg left_image_topic_relay)"/>
    <remap from="right/image"       to="$(arg right_image_topic_relay)"/>
    <remap from="left/camera_info"  to="$(arg left_camera_info_topic)"/>
    <remap from="right/camera_info" to="$(arg right_camera_info_topic)"/>
    <remap from="rgb/image"         to="$(arg rgb_topic_relay)"/>
    <remap from="depth/image"       to="$(arg depth_topic_relay)"/>
    <remap from="rgb/camera_info"   to="$(arg camera_info_topic)"/>
    <remap from="cloud"             to="voxel_cloud" />

    <param name="decimation"  type="double" value="2"/>
    <param name="voxel_size"  type="double" value="0.02"/>
    <param if="$(arg stereo)" name="approx_sync" type="bool"   value="$(arg approx_sync)"/>
  </node>

</launch>

Below here is our demo.launch:
<launch>
  <!-- By default, we do not start a database (it can be large) -->
  <arg name="db" default="false" />
  <!-- Allow user to specify database location -->
  <arg name="db_path" default="$(find quadrotor_moveit_config)/default_warehouse_mongo_db" />

  <!-- By default, we are not in debug mode -->
  <arg name="debug" default="false" />

  <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
  <include file="$(find quadrotor_moveit_config)/launch/planning_context.launch">
    <arg name="load_robot_description" value="true"/>
  </include>

  <!-- If needed, broadcast static tf for robot root -->
    <!--node pkg="tf" type="static_transform_publisher" name="virtual_joint_broadcaster_0" args="0 0 0 0 0 0 odom_combined base_link 100" /-->

  <!-- We do not have a robot connected, so publish fake joint states -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="/use_gui" value="false"/>
    <rosparam param="/source_list">[/move_group/fake_controller_joint_states]</rosparam>
  </node>

  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

  <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
  <include file="$(find quadrotor_moveit_config)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="fake_execution" value="true"/>
    <arg name="info" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

  <!-- Run Rviz and load the default config to see the state of the move_group node -->
  <include file="$(find quadrotor_moveit_config)/launch/moveit_rviz.launch">
    <arg name="config" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

  <!-- If database loading was enabled, start mongodb as well -->
  <!--include file="$(find quadrotor_moveit_config)/launch/default_warehouse_db.launch" if="$(arg db)">
    <arg name="moveit_warehouse_database_path" value="$(arg db_path)"/>
  </include-->

</launch>

Here is our result shown in terminal after we run RTAB-Map and RVIZ in time:
[ WARN] [1464792050.253989886]: No transform available between frame 'camera_depth_frame' and planning frame '/odom_combined' ()
[ WARN] [1464792050.254044587]: No transform available between frame 'camera_rgb_frame' and planning frame '/odom_combined' ()
[ WARN] [1464792050.254074152]: No transform available between frame 'camera_rgb_optical_frame' and planning frame '/odom_combined' ()
[ WARN] [1464792050.254100776]: No transform available between frame 'camera_depth_optical_frame' and planning frame '/odom_combined' ()
[ WARN] [1464792050.254125490]: No transform available between frame 'odom' and planning frame '/odom_combined' ()
[ WARN] [1464792050.254149647]: No transform available between frame 'map' and planning frame '/odom_combined' ()
[ INFO] [1464792050.254190150]: Combined planning and execution request received for MoveGroup action. Forwarding to planning and execution pipeline.
[ WARN] [1464792050.254313648]: Execution of motions should always start at the robot's current state. Ignoring the state supplied as start state in the motion planning request
[ INFO] [1464792050.254352475]: Planning attempt 1 of at most 1
[ INFO] [1464792050.254997146]: RRTConnect: Starting planning with 1 states already in datastructure
[ INFO] [1464792050.255034355]: RRTConnect: Starting planning with 1 states already in datastructure
[ INFO] [1464792050.255120292]: RRTConnect: Starting planning with 1 states already in datastructure
[ INFO] [1464792050.255151490]: RRTConnect: Starting planning with 1 states already in datastructure
[ INFO] [1464792050.266284017]: RRTConnect: Created 5 states (3 start + 2 goal)
[ INFO] [1464792050.267566969]: RRTConnect: Created 10 states (2 start + 8 goal)
[ INFO] [1464792050.267623107]: RRTConnect: Created 11 states (5 start + 6 goal)
[ INFO] [1464792050.267665251]: RRTConnect: Created 11 states (6 start + 5 goal)
[ INFO] [1464792050.267969261]: ParallelPlan::solve(): Solution found by one or more threads in 0.013091 seconds
[ INFO] [1464792050.268217041]: RRTConnect: Starting planning with 1 states already in datastructure
[ INFO] [1464792050.268272628]: RRTConnect: Starting planning with 1 states already in datastructure
[ INFO] [1464792050.268453437]: RRTConnect: Starting planning with 1 states already in datastructure
[ INFO] [1464792050.269033951]: RRTConnect: Created 6 states (2 start + 4 goal)
[ INFO] [1464792050.269120273]: RRTConnect: Starting planning with 1 states already in datastructure
[ INFO] [1464792050.269382743]: RRTConnect: Created 8 states (5 start + 3 goal)
[ INFO] [1464792050.270654319]: RRTConnect: Created 8 states (4 start + 4 goal)
[ INFO] [1464792050.272507626]: RRTConnect: Created 13 states (6 start + 7 goal)
[ INFO] [1464792050.272691207]: ParallelPlan::solve(): Solution found by one or more threads in 0.004620 seconds
[ INFO] [1464792050.272834216]: RRTConnect: Starting planning with 1 states already in datastructure
[ INFO] [1464792050.272875430]: RRTConnect: Starting planning with 1 states already in datastructure
[ INFO] [1464792050.273968955]: RRTConnect: Created 7 states (3 start + 4 goal)
[ INFO] [1464792050.275684540]: RRTConnect: Created 15 states (4 start + 11 goal)
[ INFO] [1464792050.276244456]: ParallelPlan::solve(): Solution found by one or more threads in 0.003438 seconds
[ INFO] [1464792050.280364084]: SimpleSetup: Path simplification took 0.003957 seconds and changed from 4 to 37 states
[ INFO] [1464792050.283408717]: Fake execution of trajectory

Is that we need 3D Perception to configure it? (But how it works?)
Hope somebody can tell us the correct way to settle this kind of problems, thank you so much.
Thank You.
Here is our TF tree:
http://imgur.com/c0mmQTf
Here is our rqt_graph:
http://imgur.com/ZS2Pbuu

Originally posted by Envo on ROS Answers with karma: 1 on 2016-06-01
Post score: 0

A:

Hi,
Your error says that TF between /odom_combined and camera topics doesn't exist. Which node is actually publishing /odom_combined? Please show your TF tree and rqt_graph:
$ rosrun tf view_frames
$ rqt_graph

EDIT: What is automap? do you mean octomap?
Note that you don't need to modify rtabmap.launch directly. It is difficult to see what you modified. From differences I've seen, the corresponding command is:
$ roslaunch rtabmap_ros rtabmap.launch frame_id:=base_link odom_topic:=/odom_combined

So starting from that, if you have your own input of odometry /odom_combined, disable visual odometry because it is ignored. Also rtabmap will publish a TF /odom -> /base_link that may interfere with another TF related to /odom_combined:
 $ roslaunch rtabmap_ros rtabmap.launch frame_id:=base_link odom_topic:=/odom_combined visual_odometry:=false

The fixed frame in RVIZ would be /map instead of /odom.
EDIT 2
Your TF looks okay. In rqt_graph, the octomap_server is not started. How do you start the octomap_server? Example (from this post):
$ roslaunch rtabmap_ros rtabmap.launch frame_id:=base_link
$ rosrun octomap_server octomap_server_node cloud_in:=rtabmap/cloud_map

Then make sure you can visualize the octomap in RVIZ using the octomap plugins. There is an issue when using octomap_server while doing mapping: the octomap didn't get automatically refreshed when a loop closure is detected (when the map is corrected). To avoid this problem, I recommend to do a mapping session (teleoperated), then restart rtabmap in localization-only mode with octomap and move_it stuff. For this example I use rgbd_mapping.launch instead of rtabmap.launch for convenience (as it has already the localization argument):
$ roslaunch rtabmap_ros rgbd_mapping.launch frame_id:=base_link rtabmap_args:="--delete_db_on_start"

// map for a while, then kill rgbd_mapping.launch and restart it in localization mode

$ roslaunch rtabmap_ros rgbd_mapping.launch frame_id:=base_link localization:=true
$ rosrun octomap_server octomap_server_node cloud_in:=rtabmap/cloud_map

cheers

Originally posted by matlabbe with karma: 6409 on 2016-06-01
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by Envo on 2016-06-02:
Thank for your reply, we will try it by today.
Here is one more question, we used the octomap server to convert RTAB-Map into octomap. But the quadrotor in RVIZ still remain the same, it will pass through the buildings again. So, how can we use the RTAB-Map to construct octomap correctly in MoveIt?
Comment by Envo on 2016-06-02:
i have updated the tf tree and rqt graph in my thread.

