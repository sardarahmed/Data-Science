Q:

How to retrieve XYZ co-ordinates from a raw depth image?

I am taking a depth image from /camera/depth_registered/image_raw and thresholding it to find objects within a certain range. I would like to find the xyz co-ordinates of these objects in order to calculates relevant velocities. I'm trying to avoid using PCL as this gave me a lot of noise when I tried to use it to detect the obstacles. I've been told that I could find the co-ordinates using tf but I have no idea what to do with it.

Originally posted by neb42 on ROS Answers with karma: 23 on 2014-08-13
Post score: 2

Original comments
Comment by ahendrix on 2014-08-13:
I've merged your questions; please don't ask duplicate questions.
Comment by neb42 on 2014-08-13:
Sorry opened a new account and thought my first one didn't post. Wasn't that clear.

A:

link 1 : https://github.com/ccny-ros-pkg/ccny_rgbd_tools/blob/0.1.1/ccny_rgbd/src/rgbd_util.cpp#L308
link 2 : https://github.com/ccny-ros-pkg/ccny_rgbd_tools/blob/0.1.1/ccny_rgbd/src/rgbd_util.cpp#L348
In the link1, the function takes in a depth image, camera intrinsic parameters of a depth camera (Kinect or Asus) and creates a point cloud from that. fx, fy, cx, cy are the camera parameters.
In the second link, it takes an additional RGB image too and gives a colored point cloud.
Good luck

Originally posted by sai with karma: 1935 on 2014-08-13
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by neb42 on 2014-08-20:
In the first link what would I have to subscribe to in order to get the const cv::Mat& intr_rect_ir? Is that the rectified ir image?
Comment by sai on 2014-08-20:
If you see closely, in the next few lines of code, cx,cy,fx and fy are calculated from intr_rect_ir. It basically is matrix representation of camera parameters. if you know the camera parameters, you can either directly give them or subscribe to the camera_info topic from Kinect and copy the parameters into a OpencvMat. It would be recommended to use calibrated parameters of "IR depth camera" of Kinect or else all the Kinects have same IR camera matrix.
Comment by neb42 on 2014-08-21:
In another part of my code I am using the rgb camera stream and can therefore not subscribe to both the rgb and ir stream. Would it still give me the same point cloud if I use the rgb camera info?
Comment by sai on 2014-08-21:
no, you cannot use like that. The RGB camera parameters are different from the depth camera parameters and both are always constant. So instead of subscribing to the camera parameters, you can simply hard code into the program.
Comment by neb42 on 2014-08-22:
When I checked the ir camera info it is exactly the same as the rgb info. Is this possible?
Comment by sai on 2014-08-22:
may be you are seeing something wrong.
Just to say that the camera parameters will be different , have a look at this link http://vision.in.tum.de/data/datasets/rgbd-dataset/file_formats#intrinsic_camera_calibration_of_the_kinect
in the sections, "calibration of the color camera" and "calibration of infrared camera", you can find that the camera parameters are different.
Comment by dinesh on 2016-06-24:
sir what does this line means in the link u've given:
PointT& pt = cloud.points[v*w + u];
I was also doing similar thing, so got here, but didn't understand above line, else is good.

