Q:

how to increase rosserial buffer size

I am trying to publish an odometry message with rosserial:
nav_msgs::Odometry myOdom;
ros::Publisher odom_pub("odom", &myOdom);
....
odom_pub.publish(&myOdom);
and it compiles fine, but I get an error that the message exceeds the buffer:
[ERROR] [WallTime: 1376891179.350615] Message from device dropped: message larger than buffer.
I saw in the documentation:
http://www.ros.org/wiki/rosserial/Overview/Limitations
that the way to increase the buffer was by changing BUFFER_SIZE in the arduino library file ros.h
However, there is no such parameter in ros.h.  I did find in nodehandle.h the parameters INPUT_SIZE and OUTPUT_SIZE, so I tried changing those from 512 to 1024, but the initial INFO message that comes up still says that the max buffer size is 512.
I searched for where the error message is being sent from and found it also in nodehandle.h and changed it to include in the error note the size of the message I am trying to send.  It's possible the odom message is > 512 bytes, but if I can find out how many bytes are trying to be sent, then, once I find BUFFER_SIZE, I will know what it needs to be set to.
That change did not show up in the error, so now I realize that when I am recompiling the arduino code, the changes I made to nodehandle.h are not being incorporated.  The file is located in the correct place (...sketchbook/libraries/ros_lib/ros) and I closed and reopened the arduino IDE, so it should pick up the change.
Thanks for the help!

Originally posted by dan on ROS Answers with karma: 875 on 2013-08-18
Post score: 1

A:

So the proper place to change this is in rosserial_arduino/src/ros.h. The numbers supplied there will overwrite the defaults in node_handle.h. I believe we split the template parameter BUFFER_SIZE into INPUT/OUTPUT_SIZE a while ago and probably forgot to update the docs -- be sure to change the template parameters for the chip you are actually using (note the various #ifdefs for different size AVR chips). Also, if increasing the buffer size, you should probably reduce the number of pubs/subs to keep down overall memory usage.
As for the chagnes not showing up -- perhaps it's not rebuilding due to the header file change? The arduino buildsystem is pretty funky, if you turn on verbose compile/upload under the Preferences menu, you should be able to see where it is putting the built files (typically somewhere under /tmp for linux machines) -- try deleting that folder to force a full rebuild?

Originally posted by fergs with karma: 13902 on 2013-08-19
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by dan on 2013-08-19:
this comment section has character limits so that I had to ask my followup in the form of the "answer" below.
Your suggestion to do a verbose build was great-- I had renamed a backup version of ros_lib to ros_lib_old and for some reason it was using the files there.

