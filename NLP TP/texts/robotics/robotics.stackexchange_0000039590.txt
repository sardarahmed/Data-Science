Q:

ROS tutorial on supporting and programming a useful custom robot

Is there a tutorial explaining, from start to finish, how to support a new robot in ROS, and configure it to actually do something? I have a very simple custom robot with an amd64-based architecture, two-wheeled drive, webcam, and bumper skirt. I'm trying to keep my goals modest, so to start, I'd like to use ROS and OpenCV to detect a face with the webcam, and control the motors to follow the face while avoiding simple obstacles. I've already completed a prototype for the face-detection part.
I've read over the official tutorials, but they only cover extremely low-level tasks like installing system packages. The software package list page seems to include some very sophisticated software, but most seem to have zero documentation, and I can't find any tutorials explaining how to use them.
I also saw this question, but it only covers defining the physical shape of a robot in URDF and nothing about the installation of the software on the physical robot or configuring it to do actual tasks.
I've installed ROS, and I understand the basic package system, but it's unclear to me what to do next.

Originally posted by Cerin on ROS Answers with karma: 940 on 2012-04-16
Post score: 3

Original comments
Comment by Kevin on 2012-04-16:
This is a tall request, since every robot is built different. But maybe someone could do a simpler but more complete tutorial for a differential drive robot. ROS is not user friendly by and large and there is a steep learning curve, plus it is rapidly changing ... Fuerte will bring new changes.

A:

My personal experience in building a simple two wheel robot (and also learning ROS):
http://answers.ros.org/question/12599/ros-beginning#18583
Perhaps for your case, looking at the turtlebot code would be useful. It has a follower program as well: http://www.ros.org/wiki/turtlebot_follower/Tutorials/Demo
Most of the component APIs listed here: http://www.ros.org/wiki/APIs have very detailed tutorials. Where things are hazy for me, I look at the turtlebot codes to see how it translates into a real robot.
I'm using turtlebot as reference, only because I have one that I can dissect for learning. Also, the tutorials are more complete for turtleBot. It is easier to trace codes when you see what nodes are launched specifically.

Originally posted by weiin with karma: 2268 on 2012-04-16
This answer was ACCEPTED on the original site
Post score: 0

