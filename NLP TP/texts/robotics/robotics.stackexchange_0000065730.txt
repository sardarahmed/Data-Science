Q:

About using callbacks [Not solved]

Hello, I made the actionlib tutorial and I was trying to make my own a simple action handler, but there is an error when I use catkin_make:
/usr/include/boost/bind/mem_fn_template.hpp:184:7: note:   no known conversion for argument 1 from ‘ControlAction*’ to ‘ControlAction&’
make[2]: *** [control/CMakeFiles/control_server.dir/src/control_server.cpp.o] Error 1
make[1]: *** [control/CMakeFiles/control_server.dir/all] Error 2
make: *** [all] Error 2

The code  of the action handler is:
#include <ros/ros.h>
#include <geometry_msgs/Twist.h>
#include <actionlib/server/simple_action_server.h>
#include <control/ControlAction.h>

class ControlAction {
  protected:
    ros::NodeHandle nh_;
    actionlib::SimpleActionServer<control::ControlAction> as_;
    std::string action_name_;

  public:
    ControlAction(std::string name):
    as_(nh_, name, boost::bind(&ControlAction::executeCB, this, _1), false),
    action_name_(name)
    {
      as_.start();
    }

   ~ControlAction(void)
   {
   }

   void executeCB(const control::ControlGoal &goal) {
   }
};

int main(int argc, char** argv) {
  ros::init(argc, argv, "control");
  ControlAction control(ros::this_node::getName());
  ros::spin();

  return 0;
}

And i am using the geometry_msgs/Twist as data type in the .action file.
I am looking forward to use this callback to move the turtlebot, how can i use the cmd_vel here? (if this were a publisher node_pub.publisher(goal) will be the answer, but there must be another way)
The compilation problem was solved, but stills remaining the other part of the question related about how to use cmd_vel
Thanks beforehand!

Originally posted by pexison on ROS Answers with karma: 82 on 2015-02-10
Post score: 0

A:

I think your callback signature is wrong. It wants a pointer, not a reference, so just add add Ptr to the data type.

Originally posted by dornhege with karma: 31395 on 2015-02-10
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by pexison on 2015-02-10:
I changed it to    void executeCB(const control::ControlGoalPtr &goal) but still getting
/usr/include/boost/bind/mem_fn_template.hpp:184:7: note:   no known conversion for argument 1 from ‘ControlAction*’ to ‘ControlAction&’

Comment by pexison on 2015-02-10:
void executeCB(const control::ControlGoalConstPtr &goal)
adding Const and Ptr to the signature of the callback solved the problem!
Comment by tfoote on 2015-02-11:
@pexison please accept the answer using the checkbox at the left so it's known to be solved.
Comment by pexison on 2015-02-12:
this was only one part of the question, it remains:
The compilation problem was solved, but stills remaining the other part of the question related about how to use cmd_vel as a callback
Comment by dornhege on 2015-02-12:
It is as you said in the question: You need a publisher to a topic like /cmd_vel that continuously publishes the Twist the robot should execute. There usually is no other way as that is what the robot interface provides.
Comment by saurabh on 2018-06-14:
Hello @dornhege, I am facing similar compilation issue, but I used pointer only. Still it is there.
Can you please have a look on it:
https://answers.ros.org/question/294052/compilation-error-in-ros-action-server-code/

