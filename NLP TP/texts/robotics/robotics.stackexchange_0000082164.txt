Q:

can i execute a launch file or run a node through RosWebTool

i am now using roswebtool(roslibjs) to communicate with rosbridge
so i can publish topic and subscribe topic in website
now i want to remote execute a launch file or run a node in website, is that possible?
or is there any other method to run the node when i want to ?

Originally posted by marine0131 on ROS Answers with karma: 48 on 2017-08-04
Post score: 0

A:

Hello,
When you use roslibjs with rosbridge, your website is not a node, but it can be seen as a node (it just don't register with the rosmaster, so you can't see him with "rosnode list"). Rosbridge act as a proxy to use ROS functionnalities.
The easiest way to launch a remote process from your website is to use a process management library like std::system, boost::process or POCO ,  there are all available in ROS (POCO need this)
For an example with std::system (will quit the callback only when the process finish):
#include "ros/ros.h"
#include "std_msgs/String.h"
#include <sstream>

    void callback(std_msgs::String msg){
        std::stringstream ss;
        ss << "roslaunch " << msg.data;
        std::system(ss.str().c_str());//std::system only accept c_str() a.k.a char*
    }
    
    int main(int argc, char** argv){
        ros::init(argc,argv,"roslaunch_launcher");
        ros::NodeHandle n;
        ros::Subscriber sub = n.subscribe("/launch", 1, callback);
        ros::spin();
        return 0;
    }

Just publish a string in the form "< package name > < launch file name >" and the launch file should be called
You also should be sure to source the correct environment BEFORE launch this node, if you try to launch a file from an another workspace (not sourced) or you create a package after launching this node, the loaded environmnent will not find the launch file.
And an example with POCO (with a run/kill procedure):
#include <ros/ros.h>
#include <std_msgs/String.h>
#include <std_msgs/Empty.h>
#include "Poco/Process.h"
#include <boost/algorithm/string/classification.hpp>
#include <boost/algorithm/string/split.hpp>

Poco::ProcessHandle* ph;
bool running = false;

void callback_run(std_msgs::String msg){
    if(!running){
        std::vector<std::string> args;
        boost::split(args, msg.data, boost::is_any_of(" ") ); //Split the msg.data on space and save it to a vector
        Poco::ProcessHandle ph_running = Poco::Process::launch("roslaunch", args,0,0,0); //launch a new node
        ph = new Poco::ProcessHandle(ph_running); // Copy the processhandler to our global variable
        running = true; //Refuse new launch
        ROS_INFO_STREAM("launched : roslaunch" << msg.data);
    }
    else{
        ROS_ERROR("A process is already running.");
    }
}

void callback_kill(std_msgs::Empty msg){
    if(running){
        Poco::Process::requestTermination(ph->id()); //send SIGINT
            Poco::Process::wait(*ph); //Wait for roslaunch to kill every node
        free(ph);  
        running = false;  //accept a new launch
        ROS_INFO("Killed process");
    }
    else{
        ROS_ERROR("No Process are running.");
    }
}

int main(int argc, char** argv){
    ros::init(argc, argv, "node_runner");
    ros::NodeHandle n;
    ros::Subscriber sub_run = n.subscribe("/run",100,callback_run);
    ros::Subscriber sub_kill = n.subscribe("/kill",100,callback_kill);
    ros::spin();
    return 0;
}

This example subscribe 2 topics : /run and /kill. Run will accept a node package a name (example : 'rqt_gui rqt_gui') and kill accept a std_msgs/Empty.
This need a little work, as the std::system example will block the subscriber (the function return only when the process die).

Originally posted by lmathieu with karma: 591 on 2017-08-04
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by marine0131 on 2017-08-06:
thank you so so much, that works!!!
there is anthoer question:  how to stop this launch remote?
Comment by lmathieu on 2017-08-07:
I added an example with POCO to run and kill a process, it work with rosrun but not with roslaunch... I think roslaunch spawn multiple process and detach them, but I don't know how to kill them. If you find a solution I will be happy to see it :)
Comment by marine0131 on 2017-08-08:
i use std::system start launch files and nodes.  and kill the nodes the same way using "rosnode kill node" command. if i start a launch, i have to know or record which nodes are started, and kill them using nodekill,"rosnode kill node1 node2 node3"
Comment by lmathieu on 2017-08-08:
Nice, that work too.
I found a way to do it with Poco, with the use of Poco::Process::requestTermination() instead of kill(), it send a SIGINT to the roslaunch and close all nodes launched.
Comment by marine0131 on 2017-08-08:
great, so thanks
Comment by molnardk on 2017-11-15:
Hello i just found this article. I would like to do the same as you, from a webpage. Do you mind sharing your final solution of this code for me?
Did you manage to start/stop all kind of nodes?
Thank you for your answer :)
Comment by marine0131 on 2017-11-15:
Hi, yes I made some buttons to start/stop all kind of nodes, I write a service in robot to process the request of start/stop nodes, and use std:system to start node and use nodekill to stop node. you can also use @Imathieu 's method
Comment by molnardk on 2017-11-16:
I will give a look, thank you :)
Comment by molnardk on 2017-11-23:
I just started using ROS and managed to build the example with std::system.
How i can publish a sting to it? I tried : rostopic pub /launch std_msgs/String rosbridge_server rosbridge_websocket
Also: can i start more than 1 node?(i mean i dont stop them) and what about the 2nd method the POCO?
Comment by molnardk on 2017-11-23:
[rosbridge_server] is neither a launch file in package [roslaunch] nor is [roslaunch] a launch file name
it gives me this error also
Comment by lmathieu on 2017-11-23:
have you tried : rostopic pub /launch std_msgs/String "data: 'rosbridge_server rosbridge_websocket.launch'" ?
The first method can only launch 1 process (rosrun or roslaunch), as std::system(..) is a blocking function. You can find alternative in python (like Popen) or in cpp (fork, boost,etc.)
Comment by lmathieu on 2017-11-23:
Also, if you want more than 1 process to spawn with the 2nd method, you need to save all Poco::ProcessHandler in a vector to  delete them at the end of your node (remove the bool running and create a vector of ProcessHandler and delete them all at the end).
Comment by molnardk on 2017-11-23:
rostopic pub /launch std_msgs/String "data: 'rosbridge_server rosbridge_websocket.launch'" this is works :) thank you i misunderstood the format :)
Yeah i wanted to remote start multiple nodes (like i type the node at the webpage and it starts it, and start an other) Thank you for you answer :)
Comment by james P M on 2021-09-13:
i want to launch some node from webtools. can you guys share some template for writing cmake and xml file for this and how to add boost and poco library.
Comment by meropis on 2022-10-21:
For roslibjs I have to include a messageType. Would that just be std_msgs/String? Also, in my publish code I have two objects argc and argv - is this correct too? Do I pass argc the name of my package and argv the name of the launch file?
var survey = new ROSLIB.Message({
    argc : "<package name>",
    argv : "<launch file name>"
});
cmdVel.publish(survey);

Does this look right? I'm not quite sure I follow

