Q:

One Thread Per Subscriber

I'm using roscpp, and I am programmatically creating a bunch of subscriber callbacks (using ShapeShifter). Each callback is not computationally expensive, but I'm measuring the difference between the published time in the header, and the received time. As such, the first line of my callback defines the received time.
So having a single threaded model isn't great, because one subscriber callback will block another callback, and increase its lag time.
Ideally I'd like to create one thread per subscriber. I can't use a custom callback queue, because these are not called by ros::spin.
So what is the most idiomatic way to have each subscriber run on its own thread?

Originally posted by solb22 on ROS Answers with karma: 25 on 2016-02-16
Post score: 0

A:

Does ros::MultiThreadedSpinner not already do what you describe? See roscpp - Overview - Callbacks and Spinning.

Edit: you might also be interested in the topic statistics support added in Indigo. See Topics - Topic statistics and rosprofiler.

Originally posted by gvdhoorn with karma: 86574 on 2016-02-16
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by solb22 on 2016-02-16:
Hm, I guess it does, is there a limit to the number of thread I can pass to that? The documentation made it look like I was limited to the number of cores on my machine. I was actually looking at ros::AsyncSpinner
Comment by gvdhoorn on 2016-02-16:
Both the wiki page and the API documentation state:

You can specify a number of threads in its constructor, but if unspecified (or set to 0), it will use a thread for each CPU core.

Num cpus is only default
Comment by gvdhoorn on 2016-02-16:
Same applies to AsyncSpinner.

