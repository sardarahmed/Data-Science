Q:

What are good strategies for tuning PID loops?

Tuning controller gains can be difficult, what general strategies work well to get a stable system that converges to the right solution?

A:

For small, low torque motors with little or no gearing, one procedure you can use to get a good baseline tune is to probe it's response to a disturbance.
To tune a PID use the following steps:

Set all gains to zero. 
Increase the P gain until the response to a disturbance is steady oscillation. 
Increase the D gain until the the oscillations go away (i.e. it's critically damped). 
Repeat steps 2 and 3 until increasing the D gain does not stop the oscillations.
Set P and D to the last stable values. 
Increase the I gain until it brings you to the setpoint with the number of oscillations desired (normally zero but a quicker response can be had if you don't mind a couple oscillations of overshoot)

What disturbance you use depends on the mechanism the controller is attached to. Normally moving the mechanism by hand away from the setpoint and letting go is enough. If the oscillations grow bigger and bigger then you need to reduce the P gain.
If you set the D gain too high the system will begin to chatter (vibrate at a higher frequency than the P gain oscillations). If this happens, reduce the D gain until it stops. 
I believe this technique has a name. I'll put it here when I find it.

A:

A similar experimental method to hauptmech's answer that I was taught in college:

Set all gains to 0.
Increase Kd until the system oscillates.
Reduce Kd by a factor of 2-4.
Set Kp to about 1% of Kd.
Increase Kp until oscillations start.
Decrease Kp by a factor of 2-4.
Set Ki to about 1% of Kp.
Increase Ki until oscillations start.
Decrease Ki by a factor of 2-4.

The Ziegler-Nichols method is more precise if you can get an accurate number for the oscillation period. It does generally cause oscillations using the "classic PID" numbers given, so it's not always optimal.
For general rules on the effect of each term on rise time, overshoot, settling time, steady-state error, and stability, see Table 1 of "PID Control System Analysis and Design", by Li, Ang, and Chong in IEEE Control Systems Magazine.

A:

Embedded.com has moved my article yet again, but here is where it is now.  This shows you both how to write a PID loop (figuring out how to do it in something other than floating point is left as an exercise to the reader) and how to tune it.
PID Without a PhD
The best way depends a lot on your abilities.  The way to get the best tuning, assuming you're an experienced control system hand, is usally to measure the response of the plant ("plant" == "the thing you're controlling"), then depending on how you did the measurements extract a model of the plant and design to that, or just design directly to the measurements.
For certain difficult plants you'll find that you can't ever make satisfactory measurements, in which case you have to go by models alone.  Those are rare, but satisfying when you get them working.

