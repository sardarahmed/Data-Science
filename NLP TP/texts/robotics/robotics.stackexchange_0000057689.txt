Q:

Bloom - "Could not resolve rosdep key 'message_runtime'"

I am trying to build a package in a private Bloom repository with ROSDISTRO_INDEX_URL pointing to a custom index.yaml file. This works up until Bloom invokes rosdep to resolve my package's dependencies.
I tried following the answer to a similar question from 2012:
sudo rm /etc/ros/rosdep/sources.list.d/20-default.list
sudo rosdep init
rosdep update

This did not change anything. I repeated the above with the latest versions of rosdep and Bloom in the Ubuntu APT repository (python-rosdep and python-bloom) and pip (rosdep and bloom) and got the same result.
Interestingly, it looks like the "hydro" line added in 09e4ae3ff3e8e81408127582c4b260718c679f6 was recently removed in 5e4a02a408361241a7158361ea2b228b08c0c671. This comment was added in its place:
# newer distributions (Groovy, Hydro, ...) must not be listed anymore, they are being fetched from the rosdistro index.yaml instead

Unfortunately, this does not seem to be the case. I can't rosdep resolve any of the standard Hydro packages:
$ rosdep resolve message_generation
ERROR: no rosdep rule for 'message_generation'

This happens even if I am in a shell that freshly sourced /opt/ros/hydro/setup.bash; i.e. ROSDISTRO_INDEX_URL is not set.
Any suggestions?
Edit 1: Running rosdep update fixes the issue when running with the default ROSDISTRO_INDEX_URL.
Edit 2: To outline our use-case in a bit more detail:
We use ROS extensively across two robots---one robotic arm and one dual-arm mobile manipulator---and have accumulated a large collection of internal ROS packages. Most of our packages are open-source, but we have some hard constraints that prevent us from open-sourcing everything (e.g. includes on commercial/proprietary software, sponsor has IP restrictions, software associated with papers that are under peer review, etc).
We've been building Debians of our dry Fuerte packages with a custom Jenkins setup and are finally upgrading to Indigo. Our plan is to switch to Bloom to manage releases and a (potentially heavily modified) version of buildbot-ros as our internal build server.
Edit 3: See our discussion on @tfoote's comment below for the solution we arrived at.

Originally posted by mkoval on ROS Answers with karma: 524 on 2014-03-05
Post score: 4

Original comments
Comment by lucasw on 2016-03-02:
What is the current status of this?  Have buildfarm changes made this possible through other means (what are they?), or you still need your rosdep-generator script, or that needs to be updated for the latest system?
Comment by lucasw on 2016-03-02:
http://roscon.ros.org/2015/presentations/Buildfarm.pdf indicates rosdep-generator https://github.com/mikepurvis/rosdep-generator is still part of the process.

A:

This is not a use case we've worked on much. The nominal way we've thought about overlaying one rosdistro on another is to act like the upstream distro is in the standard distro. To do that you should just make sure it's in the sources, and add a rosdep rules file which lists all the packages from Hydro that you expect to already be built and present in your repositories.

Originally posted by tfoote with karma: 58457 on 2014-03-05
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by mkoval on 2014-03-05:
Thanks! Is this correct?: I should: (1) add the ROS apt repository to my /etc/apt/sources.list.d files, (2) add the Hydro rosdep YAML URL to my /etc/ros/rosdep/sources.list.d files, and (3) run rosdep update. What is the correct URL for the Hydro YAML file as of commit 5e4a02 to rosdistro?
Comment by mkoval on 2014-03-05:
Quick clarification...I was asking how to get rosdep to read the "index.yaml" file from the standard ROS distribution. Judging from the comment "...are being fetched from the rosdistro index.yaml", it sounds like this is being handled internally by rosdep.
Comment by Dirk Thomas on 2014-03-05:
For Hydro and newer ROS distros there is no rosdep yaml url anymore. The content in generated on the fly by rosdistro which uses the data of released wet packages provided by the https://github.com/ros/rosdistro repo. rosdep update already fetches these data via rosdistro so if you provide a custom ROSDISTRO_INDEX_URL rosdep will utilize the distros listed in your index.yaml file.
Comment by mkoval on 2014-03-05:
That's exactly the problem. I have my ROSDISTRO_INDEX_URL pointing to my custom rosdistro, which is why rosdep can't find the standard packages. Tully suggested I add the ROS rosdistro packages to my rosdep rules to fix that. I can't have two ROSDISTRO_INDEX_URLs, so I'm not sure what to do.
Comment by Dirk Thomas on 2014-03-05:
That is simply not a supported use case with the current infrastructure.
Comment by mkoval on 2014-03-05:
That's a shame. I actually tried this path because REP-137 explicitly lists "building binary packages of custom packages on top of the existing ROS distributions for publicly or privately hosted projects" as a supported use-case. Perhaps you could update that page? In any case, thanks for the help.
Comment by tfoote on 2014-03-05:
That is a use case that has been designed for. and is a valid part of the REP. however to make this work you just need to write a simple script to expand the distro definition into rosdep rules. And then add them to rosdep like any other set of rosdep rules. We just haven't fully implemented scripts for doing that. A submission of a script like that would be appreciated.
Comment by mkoval on 2014-03-06:
That sounds fine; I can work on this and send a patch upstream. I see two options: (1) generate a rosdep YAML file from a rosdistro or (2) extend rosdep to pull from multiple rosdistros. I prefer (2) since the YAML file will inevitably become out of date. Does that make sense?
Comment by William on 2014-03-06:
@mkoval I think the second option sounds fine, but you may have to propose changes to the python-rosdistro library as well to handle this properly (maybe not though).
Comment by tfoote on 2014-03-06:
I would recommend option 1 as it should be a snapshot at the time of the import of the repo. The rosdistro and the repo at any given point are not guaranteed to be completely synced. It should be kept on the server hosting the debs and updated when the debs are imported.
Comment by tfoote on 2014-03-06:
Implicit in that is that you should be importing a copy of the debs so that you have a guarenteed stable base to build against.
Comment by William on 2014-03-06:
In that case you should just fork our rosdistro (adding your own things to it) and only rebase it when you bring in new debs from our repository.
Comment by mkoval on 2014-03-06:
@William Is there a suggested way of mirroring the apt packages? I noticed that there is an undocumented apt_mirror option in rosdistro, but I'm not sure exactly what it does. Also, is there a recommended way of telling our build server which packages it can ignore (i.e. those in the mirror)?
Comment by William on 2014-03-06:
I don't know how to do it, @tfoote might. That option, like several others defined in REP-137 (141), are not used by the build farm yet. We haven't found a way to justify spending time on the buildfarm generalization.
Comment by tfoote on 2014-03-06:
There are standard ways to do it using reprepro. The scripts we use are in this repo: https://github.com/ros-infrastructure/reprepro-updater
Comment by mkoval on 2014-03-06:
@tfoote @William @Dirk Thomas Thanks for all of your help! It sounds like forking the default rosdistro and using reprepro to mirror the official distribution is the way to go. I'll do my best to document the process for anyone else in the same situation.
Comment by mkoval on 2014-03-10:
Follow-up: I managed to get everything [mostly] working by forking the rosdistro repo. One sticking point is that bloom-release issues a pull request on my local rosdistro repo, which fails because it is not hosted on Gitihub. Is there any way to get Bloom to push directly to the remote?
Comment by William on 2014-03-10:
No, but it does provide a diff and a patch file for you.
Comment by mkoval on 2014-03-11:
I now see that Bloom generates a patch file in /tmp with an auto-generated filename. Is there any way to control where the patch file is written? Or to query where the file was saved? The best options I can come up with are to either fork Bloom or grep its output for the log message.
Comment by William on 2014-03-11:
I would recommend forking it, if you find a general way to do that part better for non-github.com rosdistro forks, then I would gladly review a pull request for that.
Comment by mkoval on 2014-03-12:
@William Thanks! I'll send you a pull request if I figure out a better way of handling this use-case.
Comment by William on 2014-03-12:
Relavent: https://github.com/ros-infrastructure/bloom/issues/257
Comment by mikepurvis on 2015-01-15:
Did anyone ever end up building a rosdistro -> rosdep export tool for this purpose?
Comment by mikepurvis on 2015-03-04:
Aight, I finally did it myself. It's basic, but the result is here:
https://github.com/mikepurvis/rosdep-generator/blob/master/rosdep-generator

