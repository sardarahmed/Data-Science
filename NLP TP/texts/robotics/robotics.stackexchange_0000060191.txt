Q:

Possible to write move_base plugin in Python?

Hi folks,
I'd like to write simple global and local planner plugins for move_base. Is it possible to do that in Python? Or do they have to be written in C++? Is there any documentation about this? Tutorials? Anything besides already existing planners?
Thanks a lot!
Cheers,
Hendrik

Originally posted by Hendrik Wiese on ROS Answers with karma: 1145 on 2014-06-19
Post score: 5

A:

The planners are loaded into move_base using pluginlib, which is entirely C++ and does not have Python capabilities. However, you could possibly use Boost::Python capabilities to embed Python into C++. This wouldn't be trivial, but is probably possible, although you might have a real hard time debugging a plugin that embeds Boost::Python, so you will probably want to write a number of standalone tests before you even try to move such a planner into move_base as a plugin.
I'm not sure from your question if you are also looking for general docs on how to actually write a new planner in just C++, but basically, the docs you need are pluginlib which tells you how to actually expose and load the class you design, and the nav_core docs which tell you the base classes you need to derive from (an instance of a pluginlib loader basically can only load one type of base class). If developing a local planner, there are a number of helper classes in the base_local_planner package for things like odometry or the "latched_xy_controller".

Originally posted by fergs with karma: 13902 on 2014-06-19
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by Hendrik Wiese on 2014-06-21:
Yeah, actually my question is both specifically regarding Python based plubins and generally about writing planners. So thanks for answering both parts. I'll take a look into the docs. Thanks!
Comment by David Lu on 2014-06-22:
http://answers.ros.org/question/11521/plans-for-pluginlib-for-python/
Comment by Hendrik Wiese on 2014-06-23:
Thanks, David! Sounds interesting. Complicated but interesting... I'll see what good use I can make of it.

