Q:

Using tf2 as a standalone library

I'm working on a project where a transform library like tf2 would be really useful, but where bringing in all of ROS would be overkill. I read here that the core of tf2 is ROS-independent. I'm wondering, what would be a good way to build a standalone tf2 library? I've considered grabbing all the necessary header and source files, and building the library manually, but wanted to inquire in case there's a better way.

Originally posted by jmdaly on ROS Answers with karma: 3 on 2015-05-21
Post score: 0

A:

tf2 was designed to operate as a standalone library. For efficiency and easy of integration it does rely on the message primatives in the ros messaging libraries.
To use it completely outside a ROS ecosystem as it stands it will require copying a few header files.
I think there is room for some templated logic to conditionally support ros datatypes or support any datatypes with similar enough APIs. If you'd like to look at doing that I'd be happy to consider merging it upstream and possibly releasing tf2 as a standalone library assuming it could be done without adding dependencies.

Originally posted by tfoote with karma: 58457 on 2015-05-21
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by jmdaly on 2015-05-22:
Thanks for the quick reply! Good suggestion - I'm going to take a look into the time it might take to template it, and will proceed if I'm able to get the time to do it. I'll keep you posted about the progress.
Comment by goksankobe on 2020-07-25:
hi, have you managed to use tf2 as a standalone c++ library?

