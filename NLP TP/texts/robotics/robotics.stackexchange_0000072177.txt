Q:

Which frames i have to provide tf between hokuyo lidar and dynamixel motor ax-12a?

I want to see the laser scans spinning in rviz.
`#include <ros/ros.h>
#include <tf/transform_broadcaster.h>
#include <dynamixel_msgs/JointState.h>
#include "sensor_msgs/PointCloud2.h"
#include <sensor_msgs/JointState.h>
#include "laser_assembler/AssembleScans.h"
void transform_Callback(const dynamixel_msgs::JointState& msg)
{
ROS_INFO("broadcasting transform");
}
int main(int argc, char** argv){
ros::init(argc, argv, "tf_broadcaster");
ros::NodeHandle node;
ros::Rate rate(30.0);
static tf::TransformBroadcaster br;
tf::Transform transform;
while(ros::ok()) {
transform.setOrigin( tf::Vector3(0.0, 0.0, 0.0) );
tf::Quaternion q;
q.setRPY(0, 0, 0);
transform.setRotation(q);
br.sendTransform(tf::StampedTransform(transform, ros::Time::now(), "/tilt_laser", "/laser"));
ros::Subscriber sub = node.subscribe("/tilt_controller/command", 1000, transform_Callback);
rate.sleep();
ros::spinOnce();
}
return 0;
};
`

Originally posted by ARCHANA on ROS Answers with karma: 3 on 2016-02-19
Post score: 0

A:

Frames of the TF are not fixed. Some nodes have some defaults that can be (most of the times) changed with ROS parameters when launching the nodes. That said, Hokuyo node usually publishes laserscans in the laser frame.  By default, there is also the world frame.
Therefore, all you are missing is a transformation between world and laser that you can set with a TransformBroadcaster publishing the transformation between these frames based on the motor positions.
Usually, there is a link in the middle called base_link which is the main link for a given robot. And usually, transformation between world and base_link is given by a localization node. Therefore, some people just publishes the transformation between base_link and laser.
By the way, I suggest for the next times to have a short, concise title and a more detailed question body, giving a bit more details about your problem. It is hard to know what you exactly want based on just this information.

Originally posted by Javier V. Gómez with karma: 1305 on 2016-02-22
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by ARCHANA on 2016-02-22:
That means the tf tree will be:  world ->laser->base_link. How these transformations are based on motor positions?
Comment by Javier V. Gómez on 2016-02-22:
@ARCHANA transformations should be world -> base_link -> laser (some more info http://www.ros.org/reps/rep-0105.html). But given that you are having problems, I suggest to forget about base_link so far and just publish a transform from world to laser.
Comment by Javier V. Gómez on 2016-02-22:
@ARCHANA and how these transformations are based on motor positions is something I cannot answer, because it depends on the real configuration of your motor. If you have no idea, just try some transformations and then try to think in mathematical terms what the transformation is.
Comment by ARCHANA on 2016-02-22:
If i provide transform between world and laser like here, http://wiki.ros.org/tf/Tutorials/Writing%20a%20tf%20broadcaster%20%28Python%29﻿, and set fixed frame in rviz to world then will i be able to see scans spinning?
Comment by Javier V. Gómez on 2016-02-22:
@ARCHANA I would say so, unless I am missing something here. But you have to periodically publish the transformation.
Comment by ARCHANA on 2016-02-23:
Shall i use periodic_snapshotter for publishing transformation periodically.
Comment by ARCHANA on 2016-03-10:
Hi Javier, can you please tell me what is wrong in my tf_broadcaster file that i provided above because I am not able get 3d pointcloud. The laser frame is not moving. What should i do? Thanks.

