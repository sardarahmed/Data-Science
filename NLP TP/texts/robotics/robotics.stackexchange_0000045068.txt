Q:

How to use substitution args in a yaml file?

I have a yaml file that is used by many launch files. I centralized most of the parameters in the yaml file, but those with substitution arguments do not get properly evaluated. Instead, they get passed in literally (verbatim) to the node. For example:
# params.yaml
showRobotModel: true
folderNameForSnapshots: $(find ocu)/snapshots
robot_description: cat $(find ocu)/media/robot_model/NIFTi.urdf

How could I avoid copy-pasting the more complex parameters in each launch file? Can they be interpreted somehow in the yaml file?

Originally posted by Benoit Larochelle on ROS Answers with karma: 867 on 2012-10-19
Post score: 2

Original comments
Comment by Nikola Malešević on 2017-10-24:
I'm asking the same question 5 years later, but it appears there is no solution.
Comment by ahendrix on 2017-10-24:
YAML is just a markup language and doesn't have a concept of paths or includes. As @dornhenge said, the better way to do this is by creating a launch file which does the substitution and sets the desired parameters.
Comment by Nikola Malešević on 2017-10-24:
I do not agree. My case is that I have other package's large YAML in which I need to change only one parameter depending on the scenario. Having an arg substitution there would be fantastic.
There is an open request here: https://github.com/ros/ros_comm/issues/1051

A:

I think the best way is to set those parameter directly from the launch file instead of loading the yaml. If want to keep it separated make a params.launch from params.yaml and include that.
The way to specific package relative paths would be to use: package://ocu/bla syntax, but afaik the node needs to support that, i.e. call the proper ROS api functions.

Originally posted by dornhege with karma: 31395 on 2012-10-19
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by Benoit Larochelle on 2012-10-21:
This workaround works in simple cases, but not always. This comes back to another question that I posted, but I need these parameters inside a node with an anonymous name. I am allowed to place  inside my  tag, but not .
Comment by Benoit Larochelle on 2012-10-21:
The result is that I must include params.launch outside of the  tag, but then the parameters are not in the anonymous namespace.

