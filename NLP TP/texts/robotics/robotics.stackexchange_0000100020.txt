Q:

Custom message header not found when running cmake (c++)

When I include the message header as #include "tutorial2/person_data.h, and then run catkin_make it says that there is no such file or directory. I have followed this solution: https://www.theconstructsim.com/ros-qa-163-custom-message-fails-build-no-file-directory/. But it still shows the error.
I think the problem is in this line add_dependencies(publisher_node tutorial2_generate_messages_cpp) tutorial2 is the name of the package. publisher_node is the name of the file I'm trying to include the message in.
Here is my CMakeLists.txt:
cmake_minimum_required(VERSION 3.0.2)
project(tutorial2)

## Compile as C++11, supported in ROS Kinetic and newer
# add_compile_options(-std=c++11)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
set(CMAKE_INCLUDE_CURRENT_DIR ON)
find_package(catkin REQUIRED COMPONENTS roscpp rospy std_msgs message_generation)

include_directories(${catkin_INCLUDE_DIRS})

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)

## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend tag for "message_generation"
##   * add a build_depend and a exec_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in
##     but can be declared for certainty nonetheless:
##     * add a exec_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
 add_message_files(
   FILES
   person_data.msg
)

## Generate services in the 'srv' folder
# add_service_files(
#   FILES
#   Service1.srv
#   Service2.srv
# )

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here

#generate_messages(DEPENDENCIES std_msgs)

################################################
## Declare ROS dynamic reconfigure parameters ##
################################################

## To declare and build dynamic reconfigure parameters within this
## package, follow these steps:
## * In the file package.xml:
##   * add a build_depend and a exec_depend tag for "dynamic_reconfigure"
## * In this file (CMakeLists.txt):
##   * add "dynamic_reconfigure" to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * uncomment the "generate_dynamic_reconfigure_options" section below
##     and list every .cfg file to be processed

## Generate dynamic reconfigure parameters in the 'cfg' folder
# generate_dynamic_reconfigure_options(
#   cfg/DynReconf1.cfg
#   cfg/DynReconf2.cfg
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if your package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(CATKIN_DEPENDS roscpp message_runtime)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(
# include
# ${catkin_INCLUDE_DIRS}
)

## Declare a C++ library
# add_library(${PROJECT_NAME}
#   src/${PROJECT_NAME}/tutorial2.cpp
# )

## Add cmake target dependencies of the library
## as an example, code may need to be generated before libraries
## either from message generation or dynamic reconfigure
# add_dependencies(${PROJECT_NAME} ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Declare a C++ executable
## With catkin_make all packages are built within a single CMake context
## The recommended prefix ensures that target names across packages don't collide
add_executable(publisher_node src/publisher_node.cpp)
add_executable(subscriber_node src/subscriber_node.cpp)

## Rename C++ executable without prefix
## The above recommended prefix causes long target names, the following renames the
## target back to the shorter version for ease of user use
## e.g. "rosrun someones_pkg node" instead of "rosrun someones_pkg someones_pkg_node"
# set_target_properties(${PROJECT_NAME}_node PROPERTIES OUTPUT_NAME node PREFIX "")

## Add cmake target dependencies of the executable
## same as for the library above
#add_dependencies(tutorial2_genereate_messages_cpp ${publisher_node_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
add_dependencies(publisher_node ${publisher_node_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
add_dependencies(subscriber_node ${subscriber_node_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Specify libraries to link a library or executable target against
target_link_libraries(publisher_node
${catkin_LIBRARIES}
)

target_link_libraries(subscriber_node
${catkin_LIBRARIES}
)

#add_executable(person_data src/publisher_node.cpp)
#add_executable(person_data src/subscriber_node.cpp)
target_link_libraries(publisher_node ${catkin_LIBRARIES})
add_dependencies(publisher_node tutorial2_generate_messages_cpp)

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# catkin_install_python(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables for installation
## See http://docs.ros.org/melodic/api/catkin/html/howto/format1/building_executables.html
# install(TARGETS ${PROJECT_NAME}_node
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark libraries for installation
## See http://docs.ros.org/melodic/api/catkin/html/howto/format1/building_libraries.html
# install(TARGETS ${PROJECT_NAME}
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_GLOBAL_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_tutorial2.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)

Here is my publisher_node.cpp:
#include "ros/ros.h"
#include "tutorial2/person_data.h"
int main(int argc, char **argv)
{
ros::init(argc, argv, "Publisher");
ros::NodeHandle nh;
ros::Publisher topic_pub = nh.advertise<tutorial2::person_data>("tutorial", 1000);
ros::Rate loop_rate(1);

while(ros::ok())
{
    tutorial2::person_data person_data;
    person_data.name = "Harry Sutherland";
    person_data.age = 14;
    person_data.color = "Grey"

    topic_pub.publish(person_data);
    ros::spinOnce();
    loop_rate.sleep();
}

return 0;

}
Here is my person_data.msg:
string name
unsigned age
string color
Here is my package.xml:
<?xml version="1.0"?>
<package format="2">
  <name>tutorial2</name>
  <version>0.0.0</version>
  <description>The tutorial2 package</description>

  <!-- One maintainer tag required, multiple allowed, one person per tag -->
  <!-- Example:  -->
  <!-- <maintainer email="jane.doe@example.com">Jane Doe</maintainer> -->
  <maintainer email="harry@todo.todo">harry</maintainer>

  <!-- One license tag required, multiple allowed, one license per tag -->
  <!-- Commonly used license strings: -->
  <!--   BSD, MIT, Boost Software License, GPLv2, GPLv3, LGPLv2.1, LGPLv3 -->
  <license>TODO</license>

  <!-- Url tags are optional, but multiple are allowed, one per tag -->
  <!-- Optional attribute type can be: website, bugtracker, or repository -->
  <!-- Example: -->
  <!-- <url type="website">http://wiki.ros.org/tutorial2</url> -->

  <!-- Author tags are optional, multiple are allowed, one per tag -->
  <!-- Authors do not have to be maintainers, but could be -->
  <!-- Example: -->
  <!-- <author email="jane.doe@example.com">Jane Doe</author> -->

  <!-- The *depend tags are used to specify dependencies -->
  <!-- Dependencies can be catkin packages or system dependencies -->
  <!-- Examples: -->
  <!-- Use depend as a shortcut for packages that are both build and exec dependencies -->
  <!--   <depend>roscpp</depend> -->
  <!--   Note that this is equivalent to the following: -->
     <build_depend>roscpp</build_depend>
   <build_depend>message_generation</build_depend>
     <exec_depend>roscpp</exec_depend>
  <exec_depend>message_runtime</exec_depend>

  <!-- Use build_depend for packages you need at compile time: -->
  <!--   <build_depend>message_generation</build_depend> -->
  <!-- Use build_export_depend for packages you need in order to build against this package: -->
  <!--   <build_export_depend>message_generation</build_export_depend> -->
  <!-- Use buildtool_depend for build tool packages: -->
  <!--   <buildtool_depend>catkin</buildtool_depend> -->
  <!-- Use exec_depend for packages you need at runtime: -->
  <!--   <exec_depend>message_runtime</exec_depend> -->
  <!-- Use test_depend for packages you need only for testing: -->
  <!--   <test_depend>gtest</test_depend> -->
  <!-- Use doc_depend for packages you need only for building documentation: -->
  <!--   <doc_depend>doxygen</doc_depend> -->
  <buildtool_depend>catkin</buildtool_depend>
  

  <!-- The export tag contains other, unspecified, tags -->
  <export>
    <!-- Other tools can request additional information be placed here -->

  </export>
</package>

Thank you

Originally posted by cyberoverlord on ROS Answers with karma: 5 on 2021-09-03
Post score: 0

Original comments
Comment by Ranjit Kathiriya on 2021-09-03:
Did you include a message in your Cmake.txt and if you are using an external package for your message then did you include it in both Cmake and package.xml file?
Comment by cyberoverlord on 2021-09-03:
Yes, I have included the message in my CMake file
Comment by Ranjit Kathiriya on 2021-09-03:
Is it possible for you to share your code?
If yes, then click on the Edit button of your question and post your code.

Cmake FIle
CPP file
Msg file
Package File

Comment by cyberoverlord on 2021-09-03:
I have edited my question
Comment by tryan on 2021-09-04:
Have you confirmed that the generated header (person_data.h) does exist?  I see that the generate_messages call is commented out in CMakeLists.txt:
#generate_messages(DEPENDENCIES std_msgs)

Comment by cyberoverlord on 2021-09-06:
It comes up with this error when running catkin_make
Could not find messages which
'/home/harry/tutorials/src/tutorial2/msg/person_data.msg' depends on.  Did
you forget to specify generate_messages(DEPENDENCIES ...)?
Comment by tryan on 2021-09-06:
That states that catkin can't find the file, but it could still exist (e.g., in an unexpected location).  In this case, I expect it doesn't exist due to the commented line I mentioned above.  As indicated in the error message you should uncomment that line (remove the leading #).  In any case, Ranjit has pointed out a couple of other issues that you should address.

A:

Hello @cyberoverlord,
I have found a couple of bugs in your catkin file, msg file and code file, I don't know if I am able to point out all correctly, you may get errors after solving these bugs, what I suggest is that please! drop comments if you have any error.
A) In your msg file: you cannot write such thing as an unsigned data type in ros msg.  Instead you can use int32 or int16.
So, you have to change from
string name 
unsigned age 
string color

TO,
string name
int32 age
string color

B) In your catkin file: You have to uncomment this line:
From this ,
#generate_messages(DEPENDENCIES std_msgs)

to
generate_messages(DEPENDENCIES std_msgs)

C) In your code there is many issues::
You forgot to add semi colon ; from this
person_data.color = "Grey"

to
person_data.color = "Grey";

I don't know it will work or not but yes, feel free to drop a comment if any issue.

Originally posted by Ranjit Kathiriya with karma: 1622 on 2021-09-06
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by tryan on 2021-09-06:
As a point of clarification, though there is no data type named "unsigned", there are unsigned data types as listed in the msg wiki.  Since it appears @cyberoverlord wants an unsigned data type, they could use uint32 for example.
Comment by Ranjit Kathiriya on 2021-09-06:\

There is no such thing as an unsigned data type in ros msg. Instead you can use int32 or int16.

Over here I was going to tell you cannot write unsigned age  because this will not support in ros msg. You have to change it to int32 or int 16. unsigned I told this specific because bool is a part of unsigned data types.
I think now the answer will be okay..

