Q:

Costmap's obstacle does not clear properly under sparse environment

Hi,
I would like to use Hokuyo to perform navigation under outdoor environment (open field for example). However, the obstacles detected before is not clearing out although the laser shows that there's no object. There is some hack that I can use for example http://answers.ros.org/question/1375/how-to-clear-older-costmap-just-before-updating but is there a more elegant way to do this? Perhaps through some parameter settings?
Thanks in advance.

Originally posted by Demian on ROS Answers with karma: 1 on 2011-10-06
Post score: 0

Original comments
Comment by Demian on 2011-10-07:
Ah, yes, the UTM-30LX is exactly the one we are using. So far so good even under direct sunlight. Can anyone shed some light to the way the costmap does the clearing?
Comment by DimitriProsser on 2011-10-07:
Oh yes, I forgot to make that distinction. I apologize.
Comment by Stefan Kohlbrecher on 2011-10-06:
That depends, the URG models are basically non-usable in sunlight, but the UTM-30LX worked ok for us so far.
Comment by DimitriProsser on 2011-10-06:
I know this isn't an answer, but I must warn you, in direct sunlight, I've determined that the Hokuyo scanner performs very poorly. It wasn't even feasible for us to use because of it's performance. I know this is just our analysis, but it could be a problem for you.

A:

I don't believe there is any more elegant way.
When clearing obstacles, costmap_2d only trusts laser scans returning a definite range. Indoors, that makes sense. Outdoors, most scans return max range, which does not clear intervening obstacles. A fake scan with slightly shorter ranges can be constructed that does clear them out.
That hack is messy, but not particularly difficult.

Originally posted by joq with karma: 25443 on 2011-10-07
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by eitan on 2011-10-07:
This is something that's come up a few times. Missing returns don't always imply max range so the navigation stack makes no assumptions about them by default. As Jack suggested, the easiest thing to do is write a filter that inserts measurements into a clearing scan at some range.

