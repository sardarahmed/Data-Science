Q:

What kinds of robot platforms are most appropriate for ROS?

I am looking at building a new robot for my course and looking at the platforms available I have a question. I think I have learned that the various ROS navigation packages that are most popular, supported, mature, use a tricycle, two driven wheels and one 'caster like' wheel.
update: As we are pursuing our projects we are exploring ROS packages from many sources. At this point we are preferring ones that are well discussed and seem to be well supported. As we get more adventurous we will go further. Our requirements are still evolving but for now we are going to want to navigate with an existing map, create new maps, integrate fiducials, and interior navigation on any surface that is  ADA (== wheelchair) compliant.
ROS (and it's many packages) is very sophisticated and requires tuning, trouble shooting, and experimentation. My impressions (right or wrong) is that a very common configuration is a differential drive 2 wheel + passive caster(s) because many of the examples and papers I read use those. So my question is, given that we are still working up the learning curve, what kind of steering should we avoid because they will be nothing but headaches?

Originally posted by pitosalas on ROS Answers with karma: 628 on 2018-09-08
Post score: 0

Original comments
Comment by gvdhoorn on 2018-09-09:\

But of course there are mobile platforms with four wheel drive, with tracks, and others. Would you agree that ROS works less well with those?

No, I wouldn't.
It would perhaps help if you clarify what you mean with "ROS" (ie: which pkgs) and with "works less well" (what doesn't work (so well)?).
Comment by pitosalas on 2018-09-09:
Check update!

A:

I agree with @gvdhoorn that (at least some) of those types of platforms are also pretty well supported.
Given that your main goal seems to be doing navigation (I'm assuming/suggesting with the navigation stack, at least to begin with) in flat indoor environments, the kinematics that are well supported are differential and omnidirectional (meccanum wheels, omni wheels, multiple driven and steered wheels) ones.
There are packages that can also deal with ackermann kinematics (in terms of path-planning, e.g. the teb_local_planner).
Obviously, the respective platforms require you to have a suitable base driver, providing odometry and transforming the geometry_msgs/Twist that is provided by most navigation algorithms to the respective wheel velocities.
Differential drive robots (with two fixed, driven wheels + caster) are typcially most often used because they provide quite some flexibility and are, as they only need two motors, comparably cheap.
Obviously, other types of robot (with tracks, underwater, airborne) are also available, but in terms of using exisiting navigation packages (you are saying "well discussed" and "well supported"), I'd suggest to start with the navigation stack and thus use a differential or omnidirectional robot base.
(Disclaimer: just my 2 cents ;-) )

Originally posted by mgruhler with karma: 12390 on 2018-09-10
This answer was ACCEPTED on the original site
Post score: 1

