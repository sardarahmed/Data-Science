Q:

Move_base stuck at Sim period

Hello
I'm a begginer with ros
I'm trying to use move_base to control my robot but i don't know why my move_base stuck at Sim period is set to 0.20 and cant receive odom like in this https://imgur.com/E7uYihx
This is my screen while launching move_base https://imgur.com/BWQkXLA
This is my tf tree https://imgur.com/NZ7zJfw
This is my main launch file
 <launch>
  <node pkg="robot" type="lidar_tf.py" name="lidar_tf" output="screen"/>
  <node pkg="robot" type="diff_tf.py" name="diff_tf" output="screen"/>
  <node name="rplidarNode"          pkg="rplidar_ros"  type="rplidarNode" output="screen">
  <param name="serial_port"         type="string" value="/dev/ttyUSB0"/>  
  <param name="serial_baudrate"     type="int"    value="115200"/>
  <param name="frame_id"            type="string" value="laser"/>
  <param name="inverted"            type="bool"   value="false"/>
  <param name="angle_compensate"    type="bool"   value="true"/>
 </node>
<include file="$(find robot)/launch/gmapping.launch"/>
</launch>

This is my navigation launch file
<launch>
  <!-- Name of the map to use (without path nor extension) and initial position -->
  <arg name="map_file"       default=" $(find robot)/map/mymap.yaml"/> <!-- psu -->
  <arg name="initial_pose_x" default="20.925"/>
  <arg name="initial_pose_y" default="11.925"/>
  <arg name="initial_pose_a" default="0.0"/>
  <param name="/use_sim_time" value="true"/>

<node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)">
   
  </node>

<include file="$(find robot)/launch/amcl.launch.xml">
    <arg name="scan_topic" value="scan"/>
    <arg name="use_map_topic" value="true"/>
    <arg name="initial_pose_x" value="$(arg initial_pose_x)"/>
    <arg name="initial_pose_y" value="$(arg initial_pose_y)"/>
    <arg name="initial_pose_a" value="$(arg initial_pose_a)"/>
  </include>
  <!--  ************** Navigation  ***************  -->
  <include file="$(find robot)/launch/move_base.launch.xml"/>
 <!--
 <node pkg="robot" type="navigation.py" name="navigation" output="screen">
    <rosparam param="xHome">2.77388</rosparam>
    <rosparam param="YHome">-2.25284</rosparam>
    <rosparam param="xDestination">-51.225</rosparam>
    <rosparam param="yDestination">-51.225</rosparam>
 </node>
-->

</launch>\

This is my move_base
<launch>
  <arg name="odom_frame_id"   default="odom"/>
  <arg name="base_frame_id"   default="base_link"/>
  <arg name="global_frame_id" default="map"/>
  <arg name="odom_topic" default="odom" />
  <arg name="laser_topic" default="scan" />
 
  

  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <rosparam file="$(find robot)/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find robot)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />   
    <rosparam file="$(find robot)/param/local_costmap_params.yaml" command="load" />   
    <rosparam file="$(find robot)/param/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find robot)/param/dwa_local_planner_params.yaml" command="load" />
    <rosparam file="$(find robot)/param/move_base_params.yaml" command="load" />
    <rosparam file="$(find robot)/param/global_planner_params.yaml" command="load" />
    <rosparam file="$(find robot)/param/navfn_global_planner_params.yaml" command="load" />
    <param name="global_costmap/global_frame" value="$(arg global_frame_id)"/>
    <param name="global_costmap/robot_base_frame" value="$(arg base_frame_id)"/>
    <param name="local_costmap/global_frame" value="$(arg odom_frame_id)"/>
    <param name="local_costmap/robot_base_frame" value="$(arg base_frame_id)"/>
    <param name="DWAPlannerROS/global_frame_id" value="$(arg odom_frame_id)"/>
    <remap from="odom" to="$(arg odom_topic)"/>
    <remap from="scan" to="$(arg laser_topic)"/>
    <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />

  </node>
</launch>               

This is my amcl
    <launch>
  <arg name="use_map_topic"   default="false"/>
  <arg name="scan_topic"      default="scan"/> 
  <arg name="initial_pose_x"  default="0.0"/>
  <arg name="initial_pose_y"  default="0.0"/>
  <arg name="initial_pose_a"  default="0.0"/>
  <arg name="odom_frame_id"   default="odom"/>
  <arg name="base_frame_id"   default="base_link"/>
  <arg name="global_frame_id" default="map"/>

  <node pkg="amcl" type="amcl" name="amcl">
    <param name="use_map_topic"             value="$(arg use_map_topic)"/>
    <!-- Publish scans from best pose at a max of 10 Hz -->
    <param name="odom_model_type"           value="diff-corrected"/>
    <param name="odom_alpha5"               value="0.1"/>
    <param name="gui_publish_rate"          value="10.0"/>
    <param name="laser_max_beams"             value="60"/>
    <param name="laser_max_range"           value="12.0"/>
    <param name="min_particles"             value="500"/>
    <param name="max_particles"             value="2000"/>
    <param name="kld_err"                   value="0.05"/>
    <param name="kld_z"                     value="0.99"/>
    <param name="odom_alpha1"               value="0.2"/>
    <param name="odom_alpha2"               value="0.2"/>
    <!-- translation std dev, m -->
    <param name="odom_alpha3"               value="0.2"/>
    <param name="odom_alpha4"               value="0.2"/>
    <param name="laser_z_hit"               value="0.5"/>
    <param name="laser_z_short"             value="0.05"/>
    <param name="laser_z_max"               value="0.05"/>
    <param name="laser_z_rand"              value="0.5"/>
    <param name="laser_sigma_hit"           value="0.2"/>
    <param name="laser_lambda_short"        value="0.1"/>
    <param name="laser_model_type"          value="likelihood_field"/>
    <!-- <param name="laser_model_type" value="beam"/> -->
    <param name="laser_likelihood_max_dist" value="2.0"/>
    <param name="update_min_d"              value="0.25"/>
    <param name="update_min_a"              value="0.2"/>
    <param name="odom_frame_id"             value="$(arg odom_frame_id)"/> 
    <param name="base_frame_id"             value="$(arg base_frame_id)"/> 
    <param name="global_frame_id"           value="$(arg global_frame_id)"/>
    <param name="resample_interval"         value="1"/>
    <!-- Increase tolerance because the computer can get quite busy -->
    <param name="transform_tolerance"       value="1.0"/>
    <param name="recovery_alpha_slow"       value="0.0"/>
    <param name="recovery_alpha_fast"       value="0.0"/>
    <param name="initial_pose_x"            value="$(arg initial_pose_x)"/>
    <param name="initial_pose_y"            value="$(arg initial_pose_y)"/>
    <param name="initial_pose_a"            value="$(arg initial_pose_a)"/>
    <remap from="scan"                      to="$(arg scan_topic)"/>
  </node>
</launch>

this is gmapping.launch
<launch>
  <arg name="tf_map_scanmatch_transform_frame_name" default="scanmatcher_frame"/>
  <arg name="base_frame" default="base_link"/>
  <arg name="odom_frame" default="odom"/>
  <arg name="pub_map_odom_transform" default="true"/>
  <arg name="scan_subscriber_queue_size" default="5"/>
  <arg name="scan_topic" default="scan"/>
  <arg name="map_size" default="2048"/>

 <node pkg="hector_mapping" type="hector_mapping" name="hector_mapping" output="screen">
    
    <!-- Frame names -->
    <param name="map_frame" value="map" />
    <param name="base_frame" value="$(arg base_frame)" />
    <param name="odom_frame" value="$(arg odom_frame)" />
    
    <!-- Tf use -->
    <param name="use_tf_scan_transformation" value="true"/>
    <param name="use_tf_pose_start_estimate" value="false"/>
    <param name="pub_map_odom_transform" value="$(arg pub_map_odom_transform)"/>
    <param name="pub_map_scanmatch_transform" value="false"/>
    
    <!-- Map size / start point -->
    <param name="map_resolution" value="0.050"/>
    <param name="map_size" value="$(arg map_size)"/>
    <param name="map_start_x" value="0.5"/>
    <param name="map_start_y" value="0.5" />
    <param name="map_multi_res_levels" value="2" />
    
    <!-- Map update parameters -->
    <param name="update_factor_free" value="0.4"/>
    <param name="update_factor_occupied" value="0.9" />    
    <param name="map_update_distance_thresh" value="0.4"/>
    <param name="map_update_angle_thresh" value="0.06" />
    <param name="laser_z_min_value" value = "-1.0" />
    <param name="laser_z_max_value" value = "1.0" />
    
    <!-- Advertising config --> 
    <param name="advertise_map_service" value="true"/>
    
    <param name="scan_subscriber_queue_size" value="$(arg scan_subscriber_queue_size)"/>
    <param name="scan_topic" value="$(arg scan_topic)"/>
    
    <!-- Debug parameters -->
    <!--
      <param name="output_timing" value="false"/>
      <param name="pub_drawings" value="true"/>
      <param name="pub_debug_output" value="true"/>
    -->
    <param name="tf_map_scanmatch_transform_frame_name" value="$(arg tf_map_scanmatch_transform_frame_name)" />
  </node>

<node pkg="tf" type="static_transform_publisher" name="base_to_laser_broadcaster" args="0 0 0 0 0 0 base_link laser 100" />

<!--
<node pkg="tf" type="static_transform_publisher" name="map_to_odom" args="0 0 0 0 0 0 map odom 100" />
-->
</launch>

Thanks you for any help <3

Update:
I sill can receive data to odom but nothing happend in move_base...

Originally posted by hiep127 on ROS Answers with karma: 5 on 2020-12-08
Post score: 0

Original comments
Comment by jayess on 2020-12-15:
@hiep127 please don't post an update as an answer. Please update your question instead
Comment by jayess on 2020-12-15:
Also, for any text please don't use images as the text in images can't be copy and pasted. Please see the support page

A:

It's generally better to post the text of your files/code directly with the 101010 formatting button.  That way it's searchable.  That aside, your tf tree indicates you probably have something setup incorrectly.  The map frame is usually the root of the tree and parent of the odom frame, which is the parent of base_link.  The map->odom tf comes from mapping/SLAM, and the odom->base_link tf comes from odometry (sensor data).  The navigation tutorials provide an excellent resource for getting started.  I recommend following along in simulation before trying to apply it to hardware.  If you've done that and are still having problems, please, post all of the launch files/code you are using.  Looking at the node/topic graph with rosrun rqt_graph rqt_graph may also help.  Finally, ensure that something is publishing odometry with rostopic echo /odom.  If you don't see "odom received," it's likely not published or on the wrong topic.

Originally posted by tryan with karma: 1421 on 2020-12-08
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by hiep127 on 2020-12-08:
Tks for ur advice it my second time using this forum and i still dont know all about its feature yet xD
I will try ur advice and hope it will work :3
thanks again for ur help
Comment by hiep127 on 2020-12-09:
https://imgur.com/NZ7zJfw
I have made tf tree look like this but it still now work :(
i updated the launch file i am using too
Comment by tryan on 2020-12-09:
Thanks for the additional info.  As mentioned above, looking at the node graph and echoing the topics will help determine if anything is publishing data on odom.  Your tree indicates that diff_tf is publishing the odom->base_link transform.  It appears to be a custom node, so I can't say whether that's correct without the source code--same for lidar_tf.py and navigation.py.  On a side note, I recommend static_transform_publisher nodes for generating constant transforms instead if that's what your lidar_tf node is doing.  I don't see anything that's clearly publishing odometry, though.
Your tree also indicates a hector_mapping node, but I don't see that in your launch files.  You also reference a gmapping launch file and use a map_server node.  I would step back from navigation and be sure your localization setup working first, including odometry.  What is your setup as you see it?
Comment by hiep127 on 2020-12-09:
sorry for the missing information
diff_tf is a node povided by http://wiki.ros.org/differential_drive which can be used to get odometry from differential robot and hector_mapping is a SLAM (http://wiki.ros.org/hector_slam) so i don't think they are the problem.....
Also for localization  i have tried run the robot by hand with teleop_twist_keyboard and it create an accurate map in rviz so that i  don't think it's a problem too so i forget to post it
Comment by hiep127 on 2020-12-09:
this is lidar_tf
#!/usr/bin/env python  
    import roslib
    
    
    import rospy
    import tf
    
    if __name__ == '__main__':
        rospy.init_node('lidar_tf')
        br = tf.TransformBroadcaster()
        rate = rospy.Rate(10.0)
        while not rospy.is_shutdown():
            br.sendTransform((0.0, 0.0, 0.0),
                             (0.0, 0.0, 0.0, 1.0),
                             rospy.Time.now(),
                             "laser",
                             "base_link")
            rate.sleep()

Comment by hiep127 on 2020-12-09:
i also update the gmapping.launch file and i also echo to odom and there are data published to odom but idk why my move_base cant receive it
Comment by hiep127 on 2020-12-09:
Also i have a question to ask
Ask u mentioned be4 the map to odom come from mapping/slam but SLAM also published to /map topic
if i run SLAM so that i can't publish a map to map_server right? @@!
Comment by tryan on 2020-12-09:
The diff_tf node is old but may be fine, though you should consider the diff_drive_controller package in the future.  Is it definitely publishing odometry data on the odom topic?  Is that topic connected to the correct nodes?
When you teleop your robot, do you get the correct odometry output?
If you're using hector_slam, why do you also run amcl and a map_server node?  Please, describe your work flow and overall setup.
The lidar_tf.py code looks fine, but static_transform_publisher is a standard node that does the same thing.
EDIT: apparently I missed some of your comments before posting this, so ignore the parts you answered.
Comment by hiep127 on 2020-12-09:
I want to use hector to create a map and then use amcl and move_base to drive it automatically
So that mean if i want to use amcl i need to turn off hector and run a tf from map to odom ?
For the odom i post a picture in which i echo to odom and seem like it still get data
And yeah after i fix this problem i will start using static_transform_publisher
Comment by tryan on 2020-12-09:
Yes, you can use amcl with map_server, or you can use hector_mapping.  They both handle localization, so either one works with move_base.  Since you chose amcl, turn off hector.  The amcl node will provide the map->odom transform, so no need to publish it yourself.
Since there's data on the odom topic, but move_base doesn't receive it, there's something wrong with the connection.  rosrun rqt_graph rqt_graph should show if the connection exists.  Also, I just noticed that use_sim_time is set to true in your navigation launch file.  That should be false for a real robot and could be the reason for no "odom received" message--the clock never starts!
Comment by hiep127 on 2020-12-09:
Oh when i turn off amcl and map_server and sim_time it finally WORK
Thanks u very muchhhhhhhhh
I have stuck with this for about a weeks....
Comment by tryan on 2020-12-09:
Great!  Glad I could help.

