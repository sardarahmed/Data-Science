Q:

how to fix failed loading controller in controller manager

I'm trying to use spawner for the custom controller to use different controllers like the joint trajectory controller and the forward command controller in a launch file.
This is controller.yaml file:
controller_manager:
  ros__parameters:
    update_rate: 10

    arm_controller:
      type: joint_trajectory_controller/JointTrajectoryController

    # gripper_controller:
    #   type: joint_trajectory_controller/JointTrajectoryController

    gripper_controller:
      type: forward_command_controller/ForwardCommandController

    joint_state_broadcaster:
      type: joint_state_broadcaster/JointStateBroadcaster

arm_controller:
  ros__parameters:
    joints:
      -joint_1
      -joint_2
      -joint_3
    
    command_interfaces:
      -position
      
    state_interfaces:
      -position
    
    open_loop_control: true
    allow_integration_in_goal_trajectories: true

gripper_controller:
  ros__parameters:
    joints:
      -joint_4
    
    interface_name: position
    # command_interfaces:
    #   -position
    # state_interfaces:
    #   -position

    # open_loop_control: true
    # allow_integration_in_goal_trajectories: true

This is my launch file:
from launch import LaunchDescription
from launch_ros.actions import Node
from launch_ros.parameter_descriptions import ParameterValue
from launch.actions import DeclareLaunchArgument
from launch.substitutions import Command, LaunchConfiguration
import os
from ament_index_python.packages import get_package_share_directory

def generate_launch_description():
    
    robot_description = ParameterValue(Command(['xacro ', os.path.join(get_package_share_directory("robot_description"),"urdf","robot_des.urdf.xacro")]),
                                       value_type=str)
 
    robot_state_publisher_node = Node(
        package='robot_state_publisher',
        executable='robot_state_publisher',
        parameters=[{'robot_description': robot_description}]
    )

    joint_state_broadcaster_node = Node(
        package='controller_manager',
        executable='spawner',
        arguments=['joint_state_broadcaster', "--controller-manager","/controller_manager"]
    )
    
    arm_controller_spawner = Node(
        package='controller_manager',
        executable='spawner',
        arguments=['arm_controller', "--controller-manager","/controller_manager"]
    )
    
    gripper_controller_spawner = Node(
        package='controller_manager',
        executable='spawner',
        arguments=['gripper_controller', "--controller-manager","/controller_manager"]
    )
    

 
    return LaunchDescription([
        
        robot_state_publisher_node,
        joint_state_broadcaster_node,
        arm_controller_spawner,
        gripper_controller_spawner

    ])

This is my terminal output when I'm trying to launch the controller using above launch file
ubuntu@instance-20230806-0136:~/ros2motion$ ros2 launch arm_robot_control controller.launch.py 
[INFO] [launch]: All log files can be found below /home/ubuntu/.ros/log/2023-08-27-15-50-24-736711-instance-20230806-0136-257488
[INFO] [launch]: Default logging verbosity is set to INFO
[INFO] [robot_state_publisher-1]: process started with pid [257498]
[INFO] [spawner-2]: process started with pid [257500]
[INFO] [spawner-3]: process started with pid [257502]
[INFO] [spawner-4]: process started with pid [257505]
[robot_state_publisher-1] [INFO] [1693151425.672522283] [robot_state_publisher]: got segment base_link
[robot_state_publisher-1] [INFO] [1693151425.675259673] [robot_state_publisher]: got segment base_plate
[robot_state_publisher-1] [INFO] [1693151425.675883014] [robot_state_publisher]: got segment claw_support
[robot_state_publisher-1] [INFO] [1693151425.687073843] [robot_state_publisher]: got segment forward_drive_arm
[robot_state_publisher-1] [INFO] [1693151425.687625598] [robot_state_publisher]: got segment gripper_left
[robot_state_publisher-1] [INFO] [1693151425.688204315] [robot_state_publisher]: got segment gripper_right
[robot_state_publisher-1] [INFO] [1693151425.694970715] [robot_state_publisher]: got segment horizontal_arm
[robot_state_publisher-1] [INFO] [1693151425.695374865] [robot_state_publisher]: got segment world
[spawner-2] [INFO] [1693151427.513446324] [spawner_joint_state_broadcaster]: Loaded joint_state_broadcaster
[spawner-4] [FATAL] [1693151427.606168788] [spawner_gripper_controller]: Failed loading controller gripper_controller
[spawner-3] [FATAL] [1693151427.724714084] [spawner_arm_controller]: Failed loading controller arm_controller
[ERROR] [spawner-4]: process has died [pid 257505, exit code 1, cmd '/opt/ros/humble/lib/controller_manager/spawner gripper_controller --controller-manager /controller_manager --ros-args'].
[ERROR] [spawner-3]: process has died [pid 257502, exit code 1, cmd '/opt/ros/humble/lib/controller_manager/spawner arm_controller --controller-manager /controller_manager --ros-args'].
[spawner-2] [INFO] [1693151428.065387725] [spawner_joint_state_broadcaster]: Configured and activated joint_state_broadcaster
[INFO] [spawner-2]: process has finished cleanly [pid 257500]

URDF control file
<?xml version="1.0"?>

<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="arm_robot">

    <xacro:property name="PI" value="3.14159"/>

    <ros2_control name="RobotSystem" type="system">
        <hardware>
            <plugin>gazebo_ros2_control/GazeboSystem</plugin>
        </hardware>

        <joint name="joint_1">
            <command_interface name="position">
                <params name="min">-${PI/2}</params>
            <params name="mav">${PI/2}</params>
            </command_interface>
            <state_interface name="position"/>
        
        </joint>

        <joint name="joint_2">
            <command_interface name="position">
                <params name="min">-${PI/2}</params>
            <params name="mav">${PI/2}</params>
            </command_interface>
            <state_interface name="position"/>
        
        </joint>

        <joint name="joint_3">
            <command_interface name="position">
                <params name="min">-${PI/2}</params>
            <params name="mav">${PI/2}</params>
            </command_interface>
            <state_interface name="position"/>
        
        </joint>

        <joint name="joint_4">
            <command_interface name="position">
                <params name="min">-${PI/2}</params>
                <params name="mav">0.0</params>
            </command_interface>
            <state_interface name="position"/>
        
        </joint>
        <joint name="joint_5">
            <param name="mimic">joint_4</param>
            <param name="multiplier">-1</param>
            <command_interface name="position">
                <params name="min">0.0</params>
                <params name="mav">${PI/2}</params>
            </command_interface>
            <state_interface name="position"/>
        
        </joint>
    </ros2_control>

</robot>

Gazebo URDF file:
<?xml version="1.0"?>

<robot xmlns:xacro="http://www.ros.org/wiki/xacro">
    <gazebo>
        <plugin filename="libgazebo_ros2_control.so" name="gazebo_ros2_control">
            <robot_param>robot_description</robot_param>
            <robot_param_node>robot_state_publisher</robot_param_node>
            <parameters>$(find arm_robot_control)/config/arm_robot_controllers.yaml</parameters>
        </plugin>
    </gazebo>

</robot>

Can someone please help me fix the problem fail to the load controller?

A:

Without your URDF it is hard to answer. What type of hardware_component are you using? Simulation or custom plugin? If you don't have one: Have a look at the demos how to setup your ros2_control framework.
(Edit) Summary:
Have a look in the output of the controller_manager (where you launched gazebo.launch.py):
[gzserver-1] Exception thrown during init stage with message: parameter 'joints' has invalid type: expected [string_array] got [string]

This comes from a wrong syntax in your yaml, you have to add a space between the dashes and strings, e.g. - joint_1 instead of -joint_1 â€“

