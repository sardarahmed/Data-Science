Q:

custom message generation causes problems when compiling my code

Hello guys, I have tried to find if someone has the same problem in the forum but it does not seem that way.
Basically I want to create a custom ros message to publish something from my own package. So far so good.
I have created a msg folder in my package and added a file ("sla_tracker.msg") containing:
float64 s
float64 sd
string status

I have followed the tutorial given here everything worked without a problem, except to the last point:
changing:
# generate_messages(
#   DEPENDENCIES
#   std_msgs
# )

to:
generate_messages(
  DEPENDENCIES
  std_msgs
)

as soon as I do this when using "catkin_make" it is like the header file of my cpp file does not exist which then obviously leads to a lot of missing declarations an other includes which were not done. I hope I could explain my problem properly.
Maybe the custom message must be created in a separate catkin package and can not be created in the package in which I need the custom message?
I am using ros hydro on ubuntu 12.04

Originally posted by Marcus on ROS Answers with karma: 164 on 2014-10-24
Post score: 0

A:

You can define messages in the same package with other programs.
If you do, message generation targets need to be built before any programs that depend on them. Every target that directly or indirectly uses one of your message headers must declare an explicit dependency:
add_dependencies(your_program ${${PROJECT_NAME}_EXPORTED_TARGETS})

See the catkin howto for more details.

Originally posted by joq with karma: 25443 on 2014-10-24
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by Marcus on 2014-10-27:
Thanks Jack, decided to follow the good programming practice of ros and have a separate pkg for the msgs. Could you maybe add a short explanation for what "your_program" and "PROJECT_NAME" are resembling to? I guess "PROJECT_NAME" is what can be found in the 2. line of the CMakeLists file.
Thx again
Comment by joq on 2014-10-29:
Yes, ${PROJECT_NAME} is the package name from the project() CMake command.
Comment by joq on 2014-10-29:
Moving the messages to a separate package is generally a good idea. But, you still need to declare dependencies where they are used:
add_dependencies(your_program ${catkin_EXPORTED_TARGETS})

Substitute your actual CMake target name for your_program.
Comment by Marcus on 2014-10-31:
Yup, I have done as you suggested and it looks much cleaner now. Thanks again

