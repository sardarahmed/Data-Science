Q:

Joint trajectory action rejected: Controller not connected

Hello,
i get the following error when i try to connect MoveIt! to a KUKA Agilus via the kuka_experimental package. I try to first use the simulation environment.
[ERROR] [1466076139.148929605]: Joint trajectory action rejected: waiting for (initial) feedback from controller
[ WARN] [1466076139.149173520]: Controller  failed with error code INVALID_GOAL
[ WARN] [1466076139.149246314]: Controller handle  reports status FAILED

I suppose the controller is not connected to the joint_trajectory_action topic. However, my controller is running:
$ rosrun controller_manager controller_manager list
joint_state_controller - hardware_interface::JointStateInterface ( running )

How can i efficiently debug the problem?
EDIT:
I have loaded the hardware_controllers.yaml which isnt a controller_list and i get
[ERROR] [1466425266.321644220]: No controller_list specified.

Do i have to create a separate controller_list or should hardware_controller.yaml be formatted to be a controller_list?
These are (some of) the topics i see:
/joint_states
/joint_trajectory_action/cancel
/joint_trajectory_action/feedback
/joint_trajectory_action/goal
/joint_trajectory_action/result
/joint_trajectory_action/status
...
/position_trajectory_controller/command
/position_trajectory_controller/follow_joint_trajectory/cancel
/position_trajectory_controller/follow_joint_trajectory/feedback
/position_trajectory_controller/follow_joint_trajectory/goal
/position_trajectory_controller/follow_joint_trajectory/result
/position_trajectory_controller/follow_joint_trajectory/status

<launch>
  <!-- The planning and execution components of MoveIt! configured to run -->
  <!-- using the ROS-Industrial interface. -->

  <!-- Non-standard joint names: -->
   <rosparam command="load" file="$(find kuka_rsi_hw_interface)/config/controller_joint_names.yaml"/>

  <!-- the "sim" argument controls whether we connect to a Simulated or Real robot -->
  <!--  - if sim=false, a robot_ip argument is required -->
    <arg name="sim" default="true" />
    <arg name="robot_ip" unless="$(arg sim)" />

    <!-- load the robot_description parameter before launching ROS-I nodes -->
    <include file="$(find agil_moveit_config)/launch/planning_context.launch" >
      <arg name="load_robot_description" value="true" />
    </include>

    <rosparam command="load" file="$(find agil_moveit_config)/config/controllers.yaml"/>

    <!-- remap topics to conform to ROS-I specifications -->
    <remap from="/position_trajectory_controller/follow_joint_trajectory" to="/joint_trajectory_action" />
    <remap from="/position_trajectory_controller/state" to="/feedback_states" />
    <remap from="/position_trajectory_controller/command" to="/joint_path_command"/>

    <!-- run the robot simulator and action interface nodes -->
    <group if="$(arg sim)">
      <include file="$(find industrial_robot_simulator)/launch/robot_interface_simulator.launch" />
      <include file="$(find kuka_rsi_hw_interface)/test/test_hardware_interface.launch" />
    </group>

    <include file="$(find agil_moveit_config)/launch/move_group.launch">
      <arg name="publish_monitored_planning_scene" value="true" />
    </include>

    <include file="$(find agil_moveit_config)/launch/moveit_rviz.launch">
      <arg name="config" value="true"/>
    </include>

    <include file="$(find agil_moveit_config)/launch/default_warehouse_db.launch" />

  </launch>

Originally posted by cschindlbeck on ROS Answers with karma: 56 on 2016-06-16
Post score: 1

A:

Update: I've just created an example MoveIt configuration package for the KR 6 R900 sixx, see the kr6r900sixx_moveit_rsi_convenience in my fork of ros-industrial/kuka_experimental.
See also my answer in MoveIt and ROS-Industrial: No controller_list specified.

This is probably a namespacing issue, or you don't load the joint_trajectory_controller (the joint_state_controller only reports joint states, it doesn't actually control any actuators (confusing, I know)).
For the namespace: from your previous question I gather that you have your moveit_planning_execution.launch file configured for the typical ROS-Industrial driver. That is fine, but that assumes that the ActionServer is listening on topics without any additional namespace prefixed. The ros_control infrastructure by default runs its joint_trajectory_controller under a namespace. Either remove the namespace, or remap the topics in your launch file. See abb_experimental/abb_irb120_gazebo/launch/irb120_gazebo.launch for an example (for ABB and Gazebo, but the idea is the same).
If you are not loading the joint_trajectory_controller, you'll want to add that to your ros_control configuration yaml that loads the rest of your controllers. For the kuka_rsi_hw_interface package, it should already be loaded (here, see also the test sub dir of kuka_rsi_hw_interface for an example).

Originally posted by gvdhoorn with karma: 86574 on 2016-06-16
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by cschindlbeck on 2016-06-20:
I started again from scratch.
Instead of creating a controllers.yaml like in the ROS Industrial tutorial, i just load the param file hardware_controllers.yaml. Apparently that is not a controller list and i get: [ERROR] [1466425266.321644220]: No controller_list specified.
Comment by cschindlbeck on 2016-06-20:
According to rqt_graph, the kuka_hardware_interface node seems to be connected to the joint_trajectory_action after the remapping, so this problem might be solved, i still have problems with the controller list
Comment by gvdhoorn on 2016-06-20:
The test/test_hardware_interface.launch file should show you how to load things. Make sure to first load your URDF to the parameter server.
Comment by gvdhoorn on 2016-06-20:
Btw, I've captured the difficulty users run into when trying to set this up (without any prior experience with ros_control) with ros-industrial/kuka_experimental#27.
Comment by gvdhoorn on 2016-06-20:
Also: make sure to update your local clone of kuka_experimental. I've updated some bits related to the rsi hw interface recently.
Comment by cschindlbeck on 2016-06-20:
Do i need to create another controllers.yaml file like described in
http://wiki.ros.org/Industrial/Tutorials/Create_a_MoveIt_Pkg_for_an_Industrial_Robot
or is the hardware_controllers.yaml file sufficient? If the latter is the case, wouldnt it need a controller_list prefix of some sort?
Comment by cschindlbeck on 2016-06-20:
i have included my launch file for MoveIt. Is there an error evident? Maybe it would be helpful for others too to include one in the repository.
Comment by gvdhoorn on 2016-06-24:
The main issue is that I meant for the files in the test/ directory to be a template / inspiration for your own launch file, not necessarily to be re-used directly.
Comment by tengfei on 2017-11-14:
I also meet thesame problem  but I cannot solve it. can you give me some suggestions? Thanks!

