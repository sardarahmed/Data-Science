Q:

Referencing constants in .srv from Python

Given the file:

foo.srv
  string service_name = foo_service
  string in
  ---
  string out

In my C++ code, my_project::foo::Request::service_name works as expected, but how do I do this in Python? I do:
from my_project.srv import foo

at the head of the file, but in the code foo.service_name, fooRequest.service_name, foo.fooRequest.service_name all fail. I can see service_name = 'foo_service' in the generated _foo.py file, so I think it's a problem in my code, not my build process.

Originally posted by KenYN on ROS Answers with karma: 541 on 2016-04-14
Post score: 2

A:

I looked on my system for some example services with constants:
/opt/ros/jade/share$ grep -r "=" * | grep \\.srv
...
gazebo_msgs/srv/GetJointProperties.srv:uint8 FIXED       = 3                # 0 DOF
...

Then
$ rossrv show GetJointProperties
[gazebo_msgs/GetJointProperties]:
string joint_name
---
uint8 REVOLUTE=0
uint8 CONTINUOUS=1
uint8 PRISMATIC=2
uint8 FIXED=3
uint8 BALL=4
...

So it was in the response.
In python:
from gazebo_msgs.srv import GetJointPropertiesResponse
print GetJointPropertiesResponse.FIXED

also:
from gazebo_msgs.srv import GetJointProperties
print GetJointProperties._response_class.FIXED

And the output is 3 as expected.  I didn't find an existing example with a string constant so tried adding my own, and it also worked the same.
This shows what is in the class:
print GetJointPropertiesResponse.__dict__.keys()
['_type', 'BALL', '_has_header', 'PRISMATIC', '_slot_types', 'CONTINUOUS', '__module__', 'rate', 'serialize', 'FIXED', '__init__', 'deserialize_numpy', 'success', 'deserialize', 'type', 'UNIVERSAL', '_full_text', '_md5sum', '__doc__', '_get_types', '__slots__', 'damping', 'REVOLUTE', 'position', 'status_message', 'serialize_numpy']

Originally posted by lucasw with karma: 8729 on 2016-04-14
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by KenYN on 2016-04-14:
Thank you; _response_class was the magic I was missing.

