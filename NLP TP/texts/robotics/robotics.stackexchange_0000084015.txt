Q:

How to avoid the axis jumping when the orientation is constrainted

Hi
Now the end-effector's orientation constraints is implemented in my offline simulation in Moveit. It can be seen that the orientation of end-effector is keeping horizontal to the ground. But during the motion, several axis of UR-10  jumps anyway. So do you guys know how to avoid the unexpected pose?
video!!!!!!!!!!
On the other hand, i am using Trac IK to UR-10  and the solve_type is inevitably set as 'speed', which has been changed as 'distance' in kinematics.yaml, when running the c++ code. Will this setting affects the axis jumping?
[ INFO] [1511333074.249636452]: Looking in private handle: /move_group_interface_tutorial for param name: arm/position_only_ik
[ INFO] [1511333074.250346507]: Looking in private handle: /move_group_interface_tutorial for param name: arm/solve_type
[ INFO] [1511333074.251106283]: Using solve type Speed

Originally posted by pdmike on ROS Answers with karma: 43 on 2017-11-22
Post score: 0

A:

Late response but I believe this is related to a known moveit namespace issue, reported here: https://bitbucket.org/traclabs/trac_ik/issues/25
I resolved it on my system by adding the following code to my movegroup.launch file;
<group ns="move_group">
    <rosparam command="load" file="$(find MY_PACKAGE)/config/kinematics.yaml"/>
</group>

This ensured the correct solve type was used.

Originally posted by rmck with karma: 147 on 2018-01-10
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by pdmike on 2018-01-10:
yes, the parameters of kinematics can been correctly loaded when starting the launch-file. But after that, when i run a code with C++, it still change back to solve type Speed. You can see the last post in link text in Nov is mine.
Comment by rmck on 2018-01-10:
Ahhh right, I see. I also added the same load command to my C++ launch file. That resolved the issue for me. It seems to be a namespace problem. If you ensure the parameters are loaded in the same namespace as your C++ component it should work.

