Q:

Measuring code coverage in ROS

Hello,
I am looking for a solution to measure code coverage in ROS. For example, in the ROS turtlesim package, I would like to measure how many functions / branches / program-blocks the tutorial program draw_square.cpp reaches during its execution. Such coverage can be helpful, for example,  in determining the thoroughness of a test program.
The ROS Continuous Integration page (http://wiki.ros.org/CIs) provides hints on some existing solutions of measuring coverage, but the page does not seem to  give details.
For your information, I sometimes used GCOV for measuring C program coverage. I am looking for  a solution that can deal with both C++ and Python programs in ROS.
Thank  you.

Originally posted by Zhoulai Fu on ROS Answers with karma: 186 on 2019-04-29
Post score: 1

Original comments
Comment by gvdhoorn on 2019-04-29:
Perhaps mikeferguson/code_coverage can help here, or at least the C++ side. For Python I wouldn't know anything integrated/nice/ROS wrapped.
Edit: according to this the sr-build-tools project can provide code coverage for both C++ and Python. Haven't used it myself though.

A:

I have an example of doing code coverage using gcov for ROS C++ code at node_example. The tests are run as part of a Travis job and the results are uploaded to codecov, but you can also get the coverage results locally as well.
The relevant steps for doing code coverage of a ROS package can be found in the Travis configuration file at:
https://github.com/tdenewiler/node_example/blob/master/.travis.yml#L134
That package does not yet include tests for Python code.

Originally posted by Thomas D with karma: 4347 on 2019-04-29
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by Zhoulai Fu on 2020-10-16:
Link not working.
Comment by Thomas D on 2020-10-16:
I switched from Travis CI to Github Actions. The same approach is used. https://github.com/tdenewiler/node_example/blob/main/.github/workflows/test.yml

