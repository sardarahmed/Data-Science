Q:

Passing Matrices as params in Launch Files

I'd like to pass the data contained within a matrix as a parameter to several nodes in a launch file. This link states how to pass in std::vector<...> params for bools, ints, doubles, etc. Is it possible to pass in something like a std::vector< std::vector<int> > via the launch file?
I'm looking for something similar to this answer: given a launch file
<launch>
<node name="..." ...>
     <rosparam param="matrix">
         [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
     </rosparam>
</node>
</launch>

I'd like to recover the value of matrix within the node by calling something similar to:
std::vector<std::vector<int> > matrix;
nh.getParam("matrix", matrix);

This method didn't work when I tried it though. Is there another way this can be done?
(I'm using ROS Kinetic on Ubuntu 16.04)

Originally posted by jbu on ROS Answers with karma: 13 on 2019-04-30
Post score: 0

A:

Robot localization package is a great example for something like this
you can define your 2d matrix as a param as shown in this example:
https://github.com/cra-ros-pkg/robot_localization/blob/32896d6d1aaec5a92c3a65e5f16dfc0b859a7d26/params/ukf_template.yaml#L209
you can then parse it back using the example here:
https://github.com/cra-ros-pkg/robot_localization/blob/32896d6d1aaec5a92c3a65e5f16dfc0b859a7d26/src/ros_filter.cpp#L1556

Originally posted by rumman with karma: 26 on 2019-04-30
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by jbu on 2019-05-01:
So essentially this works by reshaping the matrix into a 1D array, passing it in along with the matrix row length, then iterating over the elements to reconstruct each row. That seems like a good alternative.
Comment by rumman on 2019-05-01:
Yes that is correct. Just keep in mind, if all the parameters are not specified with a decimal point, you will have to use stringstream to handle them

