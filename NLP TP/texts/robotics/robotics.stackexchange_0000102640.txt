Q:

Problem with service call

Hi. Sorry for all mistakes, English is not my native language. I am porting my project from ros1 to ros2 and I have following error:
/usr/bin/ld: CMakeFiles/minicar_control_node.dir/src/control_node.cpp.o: in function `main':
control_node.cpp:(.text+0x8a4): undefined reference to `minicar::LoopbackRobotHWSim::LoopbackRobotHWSim()'
/usr/bin/ld: control_node.cpp:(.text+0xa8a): undefined reference to `minicar::STMRobotHW::STMRobotHW()'
collect2: error: ld returned 1 exit status
make[2]: *** [CMakeFiles/minicar_control_node.dir/build.make:1039: minicar_control_node] Error 1
make[1]: *** [CMakeFiles/Makefile2:439: CMakeFiles/minicar_control_node.dir/all] Error 2
make[1]: *** Waiting for unfinished jobs....
/usr/bin/ld: CMakeFiles/cmd_vel_limiter.dir/src/cmd_vel_limiter_node.cpp.o: in function
`rclcpp::Service<std_srvs::srv::SetBool>::Service(std::shared_ptr<rcl_node_t>, 
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, 
rclcpp::AnyServiceCallback<std_srvs::srv::SetBool>, rcl_service_options_t&)':
cmd_vel_limiter_node.cpp:(.text._ZN6rclcpp7ServiceIN8std_srvs3srv7
SetBoolEEC2ESt10shared_ptrI10rcl_node_tERKNSt7_
_cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_18AnyServiceCallback
IS3_EER21rcl_service_options_t[_ZN6rclcpp7
ServiceIN8std_srvs3srv7SetBoolEEC5ESt10shared_ptrI10rcl_node
_tERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS
_18AnyServiceCallbackIS3_EER21rcl_service_options_t]+0xb4): 
undefined reference to `rosidl_service_type_support_t 
const* rosidl_typesupport_cpp::get_service_type_support_handle<std_srvs::srv::SetBool>()'
collect2: error: ld returned 1 exit status
make[2]: *** [CMakeFiles/cmd_vel_limiter.dir/build.make:1039: cmd_vel_limiter] Error 1
make[1]: *** [CMakeFiles/Makefile2:525: CMakeFiles/cmd_vel_limiter.dir/all] Error 2
make: *** [Makefile:141: all] Error 2
--- stderr: minicar_control                             
/usr/bin/ld: CMakeFiles/minicar_control_node.dir/src/control_node.cpp.o: in function `main':
control_node.cpp:(.text+0x8a4): 
undefined reference to `minicar::LoopbackRobotHWSim::LoopbackRobotHWSim()'
/usr/bin/ld: control_node.cpp:(.text+0xa8a): 
undefined reference to `minicar::STMRobotHW::STMRobotHW()'
collect2: error: ld returned 1 exit status
make[2]: *** [CMakeFiles/minicar_control_node.dir/build.make:1039: minicar_control_node] Error 1
make[1]: *** [CMakeFiles/Makefile2:439: CMakeFiles/minicar_control_node.dir/all] Error 2
make[1]: *** Waiting for unfinished jobs....
/usr/bin/ld: CMakeFiles/cmd_vel_limiter.dir/src/cmd_vel_limiter_node.cpp.o: 
in function `rclcpp::Service<std_srvs::srv::SetBool>::
Service(std::shared_ptr<rcl_node_t>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > 
const&, rclcpp::AnyServiceCallback<std_srvs::srv::SetBool>, rcl_service_options_t&)':
cmd_vel_limiter_node.cpp:(.text._ZN6rclcpp7ServiceIN8std_srvs3srv7SetBoolEEC2ESt10shared_ptrI10rcl_node_tERKNSt7__
cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_18AnyServiceCallbackIS3_EER21rcl_service_options_t[_ZN6rclcpp7
ServiceIN8std_srvs3srv7SetBoolEEC5ESt10shared_ptrI10rcl_node_tERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS
_18AnyServiceCallbackIS3_EER21rcl_service_options_t]+0xb4): undefined reference to `rosidl_service_type_support_t const* rosidl_typesupport_cpp::get_service_type_support_handle<std_srvs::srv::SetBool>()'
collect2: error: ld returned 1 exit status
make[2]: *** [CMakeFiles/cmd_vel_limiter.dir/build.make:1039: cmd_vel_limiter] Error 1
make[1]: *** [CMakeFiles/Makefile2:525: CMakeFiles/cmd_vel_limiter.dir/all] Error 2
make: *** [Makefile:141: all] Error 2

This is how looks create_service lines looks like:
rclcpp::Service<std_srvs::srv::SetBool>::SharedPtr srv_enableLimiter = pNodeHandle->create_service<std_srvs::srv::SetBool>("/minicar/control/enable_limiter", &EnableLimiterService);

EnableLimiterService method constructor:
bool EnableLimiterService(const std::shared_ptr<std_srvs::srv::SetBool::Request> request, std::shared_ptr<std_srvs::srv::SetBool::Response> response);

This is CMakeLists.txt:
cmake_minimum_required(VERSION 3.5)
project(minicar_control)
# Add support for C++14
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 14)
endif()

# Load catkin and all dependencies required for this package

link_directories(${catkin_LIBRARY_DIRS})

## Restrict Windows header namespace usage
if(WIN32)
  add_definitions(-DNOGDI)
endif()

add_library(minicar_hw_interface src/loopback_hw_interface.cpp
  src/stm_hw_interface.cpp src/base_hw_interface.cpp)

add_executable(minicar_control_node src/control_node.cpp)

add_executable(cmd_vel_limiter src/cmd_vel_limiter_node.cpp)

find_package(ament_cmake REQUIRED)
find_package(std_srvs REQUIRED)
find_package(angles REQUIRED)
find_package(controller_manager REQUIRED)
find_package(transmission_interface REQUIRED)
find_package(pluginlib REQUIRED)
find_package(urdf REQUIRED)
find_package(control_toolbox REQUIRED)
find_package(rclcpp REQUIRED)
find_package(std_msgs REQUIRED)
find_package(hardware_interface REQUIRED)
find_package(rosidl_default_generators REQUIRED)
set(INCLUDE_DIRS ${ament_cmake_INCLUDE_DIRS} ${angles_INCLUDE_DIRS}
  ${controller_manager_INCLUDE_DIRS} ${transmission_interface_INCLUDE_DIRS}
  ${pluginlib_INCLUDE_DIRS} 
  ${urdf_INCLUDE_DIRS} ${control_toolbox_INCLUDE_DIRS} ${rclcpp_INCLUDE_DIRS}
  ${std_msgs_INCLUDE_DIRS} ${hardware_interface_INCLUDE_DIRS}
  ${rosidl_default_generators_INCLUDE_DIRS})
include_directories(${INCLUDE_DIRS})
set(LIBRARY_DIRS ${ament_cmake_LIBRARIES} ${angles_LIBRARIES}
  ${controller_manager_LIBRARIES} ${transmission_interface_LIBRARIES}
  ${pluginlib_LIBRARIES} ${urdf_LIBRARIES}
  ${control_toolbox_LIBRARIES} ${rclcpp_LIBRARIES} ${std_msgs_LIBRARIES}
  ${hardware_interface_LIBRARIES} ${rosidl_default_generators_LIBRARIES})
target_link_libraries(minicar_control_node ${LIBRARY_DIRS})
target_link_libraries(cmd_vel_limiter ${LIBRARY_DIRS})
set(LIBS ${ament_cmake_LIBRARIES} ${angles_LIBRARIES}
  ${controller_manager_LIBRARIES} ${transmission_interface_LIBRARIES}
  ${pluginlib_LIBRARIES} ${urdf_LIBRARIES}
  ${control_toolbox_LIBRARIES} ${rclcpp_LIBRARIES} ${std_msgs_LIBRARIES}
  ${hardware_interface_LIBRARIES} ${rosidl_default_generators_LIBRARIES})
rosidl_generate_interfaces(${PROJECT_NAME} "msg/Feedback.msg" "msg/Control.msg"
  DEPENDENCIES builtin_interfaces std_msgs)
#add_dependencies(minicar_hw_interface ${catkin_EXPORTED_TARGETS})
#add_dependencies(minicar_hw_interface ${minicar_control_EXPORTED_TARGETS})

## Install
install(TARGETS minicar_control_node minicar_hw_interface cmd_vel_limiter
  LIBRARY
  DESTINATION lib
  ARCHIVE
  DESTINATION lib
  RUNTIME
  DESTINATION bin)

install(DIRECTORY include/ DESTINATION include/${PROJECT_NAME})

## Other

install(DIRECTORY config DESTINATION share/${PROJECT_NAME})

install(DIRECTORY launch DESTINATION share/${PROJECT_NAME})

install(DIRECTORY msg DESTINATION share/${PROJECT_NAME})

ament_target_dependencies(minicar_control_node rclcpp std_srvs)
ament_target_dependencies(minicar_hw_interface rclcpp std_srvs) 
ament_export_dependencies(std_srvs)
ament_export_dependencies(ament_cmake)
ament_export_dependencies(angles)
ament_export_dependencies(controller_manager)
ament_export_dependencies(transmission_interface)
ament_export_dependencies(pluginlib)
ament_export_dependencies(urdf)
ament_export_dependencies(control_toolbox)
ament_export_dependencies(rclcpp)
ament_export_dependencies(std_msgs)
ament_export_dependencies(hardware_interface)
ament_export_dependencies(rosidl_default_generators)
ament_export_include_directories(${INCLUDE_DIRS})
#ament_export_libraries(minicar_hw_interface ${LIBS})

ament_package()

And package.xml:
<?xml version='1.0' encoding='utf-8'?>
<package format="3">
  <name>minicar_control</name>
  <version>0.1.0</version>
  <description>The minicar_control package</description>
  <author email="cirkit.infomation@gmail.com">CIR-KIT</author>
  <maintainer email="k104009y@mail.kyutech.jp">Arita Yuta</maintainer>
  <maintainer email="p595201m@mail.kyutech.jp">Masaru Morita</maintainer>
  <maintainer email="k104073r@mail.kyutech.jp">Ryodo Tanaka</maintainer>
  <license>BSD</license>
  <url type="repository">https://github.com/CIR-KIT-Unit03/cirkit_unit03_common.git</url>
  <url type="bugtracker">https://github.com/CIR-KIT-Unit03/cirkit_unit03_common/issues</url>
  <buildtool_depend>ament_cmake</buildtool_depend>
  <buildtool_depend>rosidl_default_generators</buildtool_depend>
  <build_depend>rclcpp</build_depend>
  <build_depend>std_msgs</build_depend>
  <build_depend>control_toolbox</build_depend>
  <build_depend>controller_manager</build_depend>
  <build_depend>pluginlib</build_depend>
  <build_depend>hardware_interface</build_depend>
  <build_depend>transmission_interface</build_depend>
  <build_depend>joint_state_controller</build_depend>
  <build_depend>urdf</build_depend>
  <build_depend>angles</build_depend>
  <build_depend>rosserial_server</build_depend>
  <build_depend>geometry_msgs</build_depend>
  <build_depend>sensor_msgs</build_depend>
  <build_depend>twist_mux</build_depend>
  <build_depend>teb_local_planner</build_depend>
  <build_depend>builtin_interfaces</build_depend>
  <build_depend>std_srvs</build_depend>
  <exec_depend>rclcpp</exec_depend>
  <exec_depend>std_msgs</exec_depend>
  <exec_depend>control_toolbox</exec_depend>
  <exec_depend>controller_manager</exec_depend>
  <exec_depend>pluginlib</exec_depend>
  <exec_depend>hardware_interface</exec_depend>
  <exec_depend>transmission_interface</exec_depend>
  <exec_depend>joint_state_controller</exec_depend>
  <exec_depend>urdf</exec_depend>
  <exec_depend>angles</exec_depend>
  <exec_depend>rosserial_server</exec_depend>
  <exec_depend>geometry_msgs</exec_depend>
  <exec_depend>sensor_msgs</exec_depend>
  <exec_depend>twist_mux</exec_depend>
  <exec_depend>teb_local_planner</exec_depend>
  <exec_depend>builtin_interfaces</exec_depend>
  <exec_depend>rosidl_default_runtime</exec_depend>
  <exec_depend>std_srvs</exec_depend>
  <member_of_group>rosidl_interface_packages</member_of_group>
  <export>
    <build_type>ament_cmake</build_type>
  </export>
</package>

Appreciate any help.

Originally posted by Edvard on ROS Answers with karma: 95 on 2022-10-30
Post score: 0

A:

I managed to solve this problem. Here is all things that I done in CMakeLists.txt:

add find_package(std_srvs REQUIRED)
add ament_target_dependencies(your_node_name rclcpp std_srvs)
add ament_export_dependencies(std_srvs) (not sure if that line is necessary but it works now for me)

In package.xml file:

add build_depend std_srvs
add exec_depend std_srvs

Originally posted by Edvard with karma: 95 on 2022-10-31
This answer was ACCEPTED on the original site
Post score: 0

