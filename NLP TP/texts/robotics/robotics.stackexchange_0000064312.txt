Q:

Undefined reference to pcl_ros::transformPointCloud

I am migrating to catkin and I am trying to compile a node already compiled under rosbuild.
I have this message error: undefined reference to pcl_ros::transformPointCloud(std::string const&, sensor_msgs::PointCloud2_<std::allocator<void> > const&, sensor_msgs::PointCloud2_<std::allocator<void> >&, tf::TransformListener const&)
I followed the migration guide.
This is the CMakeList:
cmake_minimum_required(VERSION 2.8.3)
project(path_planner)   

find_package(catkin REQUIRED 
    COMPONENTS 
    dynamic_reconfigure
    pcl_conversions
        roscpp
    tf
    rospy
    geometry_msgs 
    interactive_markers

)
find_package(PCL 1.7 REQUIRED)

catkin_package(
  INCLUDE_DIRS include
  LIBRARIES ${PROJECT_NAME} 
  CATKIN_DEPENDS 
    geometry_msgs 
    pcl_conversions 
    roscpp 
    rospy 
    tf 
    std_msgs
    pcl_ros
    interactive_markers
  DEPENDS PCL 
)

include_directories(include ${catkin_INCLUDE_DIRS}  ${PCL_INCLUDE_DIRS})
   
 add_library(normalestimation src/NormalEstimationPcl.cpp)
 add_library(dynamicjoinpcl src/DynamicJoinPcl.cpp)
 add_library(clusterpcl src/ClusterPcl.cpp)
 add_library(conversionpcl src/ConversionPcl.cpp)
 add_library(travanalpcl src/TravAnal.cpp)
 add_library(pathplanning src/PathPlanning.cpp)
 add_library(marker src/MarkerController.cpp)
    
add_executable(mapping src/mapping.cpp)
add_executable(traversability src/traversability.cpp)
add_executable(pathPlanner src/pathPlanner.cpp)

target_link_libraries(mapping dynamicjoinpcl  conversionpcl normalestimation  ${catkin_LIBRARIES} ${PCL_LIBRARIES})
target_link_libraries(traversability clusterpcl  conversionpcl travanalpcl  ${catkin_LIBRARIES} ${PCL_LIBRARIES})
target_link_libraries(pathPlanner marker  pathplanning   ${catkin_LIBRARIES} ${PCL_LIBRARIES})
 
install(FILES
    launch/test.launch
    launch/test.yaml   
   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
 )

And this is the package.xml
<buildtool_depend>catkin</buildtool_depend>
 
<build_depend>message_runtime</build_depend>   <build_depend>roscpp</build_depend>  
<build_depend>rospy</build_depend>  
<build_depend>dynamic_reconfigure</build_depend>
<build_depend>tf</build_depend>  
<build_depend>std_msgs</build_depend> 
<build_depend>geometry_msgs</build_depend>
<build_depend>visualization_msgs</build_depend>
<build_depend>pcl_ros</build_depend>  
<build_depend>pcl_conversions</build_depend>   <build_depend>interactive_markers</build_depend>
<build_depend>nav_msgs</build_depend> 
<build_depend>laser_geometry</build_depend>
<build_depend>dynamic_reconfigure</build_depend>
<build_depend>libpcl-all-dev</build_depend>  

<run_depend>message_runtime</run_depend>
<run_depend>roscpp</run_depend>  
<run_depend>rospy</run_depend>  
<run_depend>dynamic_reconfigure</run_depend>
<run_depend>tf</run_depend>  
<run_depend>std_msgs</run_depend>  
<run_depend>geometry_msgs</run_depend>
<run_depend>visualization_msgs</run_depend>
<run_depend>libpcl-all</run_depend>  
<run_depend>pcl_conversions</run_depend>
<run_depend>interactive_markers</run_depend>
<run_depend>nav_msgs</run_depend>  
<run_depend>laser_geometry</run_depend>
<run_depend>dynamic_reconfigure</run_depend>
<run_depend>pcl_ros</run_depend>

<test_depend>python-mock</test_depend>

What I forget????

Originally posted by mennamatteo on ROS Answers with karma: 21 on 2014-11-27
Post score: 2

A:

I also had a linking problem with pcl_ros::transformPointCloud() and solved it by changing the point type from PointXY to PointXYZ (pcl_ros::transformPointCloud() can only cope with 3d-points).
Edit:
Try #include <pcl_ros/impl/transfoms.hpp>. This solved the linker error and gave me more helpful compiler errors instead (complaining about the missing 'z'). Though your problem seems to be different, it might give you a more helpful error, too.

Originally posted by luator with karma: 108 on 2014-12-05
This answer was ACCEPTED on the original site
Post score: 4

Original comments
Comment by mennamatteo on 2014-12-05:
In my case it can be both PointXYZ and PointXYZRGBNormal
Comment by luator on 2014-12-05:
@mennamatteo: They should both be ok, my problem was the missing Z. Maybe try #include <pcl_ros/impl/transfoms.hpp>, see edit.
Comment by stfn on 2016-06-01:
#include <pcl_ros/impl/transforms.hpp> helped me too (I have a custom point type). I think the function needs to be re-compiles for custom point types and is pre-compiled for the standard ones ..?

