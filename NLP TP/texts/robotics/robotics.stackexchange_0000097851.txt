Q:

Failed to load Joint Controller - Ros Melodic

Hello,
I am running ROS melodic on a NVIDIA Jetson Nano and I am at the stage of simulation of a rover. To be more specific I have created the following rover (see XML code below) and I am trying to move its two continuous joints (essentially the two wheels) with a certain velocity. For this reason I am trying to use ros_control and more specifically effort_controllers/JointVelocityController. Below I have attached my config.yaml file as well as the spawn launch file I use to spawn the model in gazebo. My issue is that I get the following error in the command window when I try to run this:
SUMMARY
========

PARAMETERS
 * /rosdistro: melodic
 * /rosversion: 1.14.10
 * /rover/joint_left_wheel_velocity_controller/joint: joint_left_wheel
 * /rover/joint_left_wheel_velocity_controller/pid/d: 50
 * /rover/joint_left_wheel_velocity_controller/pid/i: 10
 * /rover/joint_left_wheel_velocity_controller/pid/p: 1000
 * /rover/joint_left_wheel_velocity_controller/type: effort_controller...
 * /rover/joint_right_wheel_velocity_controller/joint: joint_right_wheel
 * /rover/joint_right_wheel_velocity_controller/pid/d: 50
 * /rover/joint_right_wheel_velocity_controller/pid/i: 10
 * /rover/joint_right_wheel_velocity_controller/pid/p: 1000
 * /rover/joint_right_wheel_velocity_controller/type: effort_controller...
 * /rover/joint_state_controller/publish_rate: 60
 * /rover/joint_state_controller/type: joint_state_contr...
 * /rover/robot_description: <?xml version="1....

NODES
  /rover/
    controller_spawner (controller_manager/spawner)
    m2wr_spawn (gazebo_ros/spawn_model)

ROS_MASTER_URI=http://localhost:11311

process[rover/m2wr_spawn-1]: started with pid [22037]
process[rover/controller_spawner-2]: started with pid [22038]
[INFO] [1608147460.849910, 0.000000]: Controller Spawner: Waiting for service controller_manager/load_controller
[INFO] [1608147460.881118, 0.000000]: Controller Spawner: Waiting for service controller_manager/switch_controller
[INFO] [1608147460.905153, 11720.939000]: Controller Spawner: Waiting for service controller_manager/unload_controller
[INFO] [1608147460.919619, 11720.944000]: Loading controller: joint_state_controller
[INFO] [1608147460.951871, 11720.959000]: Loading controller: joint_left_wheel_velocity_controller
[ERROR] [1608147461.983806, 11721.560000]: Failed to load joint_left_wheel_velocity_controller
[INFO] [1608147461.988456, 11721.566000]: Loading controller: joint_right_wheel_velocity_controller
[ERROR] [1608147463.008570, 11722.090000]: Failed to load joint_right_wheel_velocity_controller
[INFO] [1608147463.013640, 11722.093000]: Controller Spawner: Loaded controllers: joint_state_controller
[INFO] [1608147463.036750, 11722.102000]: Started controllers: joint_state_controller
[INFO] [1608147464.088454, 0.000000]: Loading model XML from ros parameter robot_description
[INFO] [1608147464.170536, 0.000000]: Waiting for service /gazebo/spawn_urdf_model
[INFO] [1608147464.197719, 11722.766000]: Calling service /gazebo/spawn_urdf_model
[INFO] [1608147464.229827, 11722.781000]: Spawn status: SpawnModel: Failure - entity already exists.

Ros control is installed, thus I am bit confused on why I get this error. Could you please help?
URDF file:
<?xml version="1.0" ?>
<robot name="rover" xmlns:xacro="http://www.ros.org/wiki/xacro">
  <material name="black">
    <color rgba="0.0 0.0 0.0 1.0"/>
  </material>
  <material name="blue">
    <color rgba="0.203125 0.23828125 0.28515625 1.0"/>
  </material>
  <material name="green">
    <color rgba="0.0 0.8 0.0 1.0"/>
  </material>
  <material name="grey">
    <color rgba="0.2 0.2 0.2 1.0"/>
  </material>
  <material name="orange">
    <color rgba="1.0 0.423529411765 0.0392156862745 1.0"/>
  </material>
  <material name="brown">
    <color rgba="0.870588235294 0.811764705882 0.764705882353 1.0"/>
  </material>
  <material name="red">
    <color rgba="0.80078125 0.12890625 0.1328125 1.0"/>
  </material>
  <material name="white">
    <color rgba="1.0 1.0 1.0 1.0"/>
  </material>
  
  <gazebo reference="link_chassis">
    <material>Gazebo/Orange</material>
  </gazebo>
  <gazebo reference="link_left_wheel">
    <material>Gazebo/Blue</material>
  </gazebo>
  <gazebo reference="link_right_wheel">
    <material>Gazebo/Blue</material>
  </gazebo>
  <gazebo reference="camera_link">
    <material>Gazebo/Black</material>
  </gazebo>

  <!-- camera -->
  <gazebo reference="camera_link">
    <sensor type="camera" name="main_cam">
      <update_rate>30.0</update_rate>
      <camera name="head">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>800</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>60.0</updateRate>
        <cameraName>camera1</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>
  

  
  <link name="link_chassis">
    <!-- pose and inertial -->
    <pose>0 0 0.1 0 0 0</pose>
    <inertial>
      <mass value="5"/>
      <origin rpy="0 0 0" xyz="0 0 0.1"/>
      <inertia ixx="0.0395416666667" ixy="0" ixz="0" iyy="0.106208333333" iyz="0" izz="0.106208333333"/>
    </inertial>
    <!-- body -->
    <collision name="collision_chassis">
      <geometry>
        <box size="0.5 0.3 0.07"/>
      </geometry>
    </collision>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.5 0.3 0.07"/>
      </geometry>
      <material name="blue"/>
    </visual>
    <!-- caster front -->
    <collision name="caster_front_collision">
      <origin rpy=" 0 0 0" xyz="0.35 0 -0.05"/>
      <geometry>
        <sphere radius="0.05"/>
      </geometry>
      <surface>
        <friction>
          <ode>
            <mu>0</mu>
            <mu2>0</mu2>
            <slip1>1.0</slip1>
            <slip2>1.0</slip2>
          </ode>
        </friction>
      </surface>
    </collision>
    <visual name="caster_front_visual">
      <origin rpy=" 0 0 0" xyz="0.2 0 -0.05"/>
      <geometry>
        <sphere radius="0.05"/>
      </geometry>
    </visual>
  </link>
  
  <link name="link_right_wheel">
    <inertial>
      <mass value="0.2"/>
      <origin rpy="0 1.5707 1.5707" xyz="0 0 0"/>
      <inertia ixx="0.000526666666667" ixy="0" ixz="0" iyy="0.000526666666667" iyz="0" izz="0.001"/>
    </inertial>
    <collision name="link_right_wheel_collision">
      <origin rpy="0 1.5707 1.5707" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.04" radius="0.1"/>
      </geometry>
    </collision>
    <visual name="link_right_wheel_visual">
      <origin rpy="0 1.5707 1.5707" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.04" radius="0.1"/>
      </geometry>
    </visual>
  </link>
  
  <joint name="joint_right_wheel" type="continuous">
    <origin rpy="0 0 0" xyz="-0.05 0.15 0"/>
    <child link="link_right_wheel"/>
    <parent link="link_chassis"/>
    <axis rpy="0 0 0" xyz="0 1 0"/>
    <limit effort="10000" velocity="1000"/>
    <joint_properties damping="1.0" friction="1.0"/>
  </joint>

  <transmission name = "joint_right_wheel_trans">
    <type> transmission_interface/SimpleTransmission </type>
        <joint name = "joint_right_wheel">
            <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface>
        </joint>
        <actuator name = "joint_right_wheel_motor">
                <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface>
        <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  
  <link name="link_left_wheel">
    <inertial>
      <mass value="0.2"/>
      <origin rpy="0 1.5707 1.5707" xyz="0 0 0"/>
      <inertia ixx="0.000526666666667" ixy="0" ixz="0" iyy="0.000526666666667" iyz="0" izz="0.001"/>
    </inertial>
    <collision name="link_left_wheel_collision">
      <origin rpy="0 1.5707 1.5707" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.04" radius="0.1"/>
      </geometry>
    </collision>
    <visual name="link_left_wheel_visual">
      <origin rpy="0 1.5707 1.5707" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.04" radius="0.1"/>
      </geometry>
    </visual>
  </link>
  
  <joint name="joint_left_wheel" type="continuous">
    <origin rpy="0 0 0" xyz="-0.05 -0.15 0"/>
    <child link="link_left_wheel"/>
    <parent link="link_chassis"/>
    <axis rpy="0 0 0" xyz="0 1 0"/>
    <limit effort="10000" velocity="1000"/>
    <joint_properties damping="1.0" friction="1.0"/>
  </joint>

  <transmission name = "joint_left_wheel_trans">
    <type> transmission_interface/SimpleTransmission </type>
        <joint name = "joint_left_wheel">
            <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface>
        </joint>
        <actuator name = "joint_left_wheel_motor">
                <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface>
        <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>

  <!-- Camera -->
  <link name="camera_link">
    <inertial>
        <mass value = "1e-5"/>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
    </inertial>
    <collision name = "camera_link_collision">
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
            <box size="0.05 0.05 0.05"/>
        </geometry>
    </collision>
    <visual name = "camera_link_visual">
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
            <box size="0.05 0.05 0.05"/>
        </geometry>
     </visual>
  </link>

  <joint name="camera_joint" type="fixed">
        <origin xyz="0.225 0 0.06" rpy="0 0 0"/>
        <child link="camera_link"/>
        <parent link="link_chassis"/>
            <axis rpy = "0 0 0" xyz="0 1 0" />
  </joint>

<gazebo>
  <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
    <robotNamespace>/rover</robotNamespace>
  </plugin>
</gazebo>
</robot>

Config.yaml file:
# Publish all joint states ------------------------------
  joint_state_controller:
    type: joint_state_controller/JointStateController
    publish_rate: 60

# Velocity Controllers ----------------------------------
  joint_left_wheel_velocity_controller:
    type: effort_controllers/JointVelocityController
    joint: joint_left_wheel
    pid: {p: 1000, i: 10, d: 50}

  joint_right_wheel_velocity_controller:
    type: effort_controllers/JointVelocityController
    joint: joint_right_wheel
    pid: {p: 1000, i: 10, d: 50}

Launch file to spawn the model in gazebo:
<?xml version="1.0"?>
<launch>
  <group ns ="/rover">

    <param name="robot_description" command="cat '$(find m2wr_description)/urdf/rover.xacro'"/>

    <arg name = "x" default = "0"/>
    <arg name = "y" default = "0"/>
    <arg name = "z" default = "0.5"/>

        <!-- Spawn the robot in gazebo -->
    <node name = "m2wr_spawn" pkg = "gazebo_ros" type = "spawn_model" output = "screen" args = "-urdf -param robot_description -model rover -x $(arg x) -y $(arg y) -z $(arg z)"/>
        
        <!-- Load Controllers -->
        <rosparam command = "load" file = "$(find m2wr_description)/config/joints.yaml"/>
        
        <node name = "controller_spawner" pkg = "controller manager" type = "spawner"
    respawn = "false" output = "screen" ns = "/rover"
    args = "--namespace=/rover
    joint_state_controller
    joint_left_wheel_velocity_controller
    joint_right_wheel_velocity_controller
    --timeout 60">
    </node>
  </group>

</launch>

Originally posted by patrchri on ROS Answers with karma: 354 on 2020-12-16
Post score: 0

A:

I figured the error. The error has to do with a syntax error in the xacro file. It should be:
  <transmission name = "joint_left_wheel_trans">
    <type> transmission_interface/SimpleTransmission </type>
        <joint name = "joint_left_wheel">
            <hardwareInterface> hardware_interface/EffortJointInterface </hardwareInterface>
        </joint>
        <actuator name = "joint_left_wheel_motor">
                <hardwareInterface> hardware_interface/EffortJointInterface </hardwareInterface>
        <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>

Originally posted by patrchri with karma: 354 on 2020-12-16
This answer was ACCEPTED on the original site
Post score: 0

