Q:

How do I convert a mesh to a pointcloud for use with pcl ICP

I want to find partial overlaps between meshes in the household object database and pointcloud sensor data. My method is to convert the arm_navigation_msgs::Shape to a pcl::PointCloud and then find clusters that overlap through pcl::IterativeClosestPoint. I have all pieces working, I just think my function for converting the shape meshes to pointclouds is inefficient. Is there a way to take advantage of the underlying structure to speed up the conversion?
This is my current implementation
pcl::PointCloud<pcl::PointXYZ> PCLMeshOverlap::convertMeshToPointcloud(arm_navigation_msgs::Shape mesh)
{
    ROS_INFO("Converting mesh to pointcloud");
    pcl::PointCloud<pcl::PointXYZ> cloud_out;
    pcl::PointXYZ point;
    for (int i = 0; i < mesh.vertices.size(); i++)
    {
        float isNew = true;
        for (int j = 0; j < cloud_out.points.size(); j++)
        {
            if (    mesh.vertices.at(i).x == cloud_out.points.at(j).x &&
                    mesh.vertices.at(i).y == cloud_out.points.at(j).y &&
                    mesh.vertices.at(i).z == cloud_out.points.at(j).z   )
            {
                isNew = false;
                break;
            }
        }
        if (isNew)
        {
            point.x = mesh.vertices.at(i).x;
            point.y = mesh.vertices.at(i).y;
            point.z = mesh.vertices.at(i).z;
            cloud_out.points.push_back(point);
        }
    }
    cloud_out.width = cloud_out.points.size();
    cloud_out.height = 1;
    cloud_out.is_dense = true;
    cloud_out.header.frame_id = "/base_link";
    return cloud_out;
}

*Edited because the original code had some typos

Originally posted by brawner on ROS Answers with karma: 581 on 2012-05-12
Post score: 2

A:

You could do this in ROS Hydro PCL 1.7 if your mesh was a pcl::PolygonMesh:
#include <pcl/io/vtk_lib_io.h>
const std::string meshFileName = "test.stl";

pcl::PolygonMesh testMesh;
pcl::io::loadPolygonFileSTL( meshFileName, testMesh );    
pcl_conversions::fromPCL( testMesh.cloud, output );

Originally posted by isura with karma: 403 on 2013-12-18
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by ben on 2014-02-03:
Does this conversion sample points on the surfaces or strictly converts the vertices in the STL file into points in the point cloud? If not, is there any tool out that does sample points on the surfaces?
Comment by isura on 2014-05-09:
@ben to my knowledge this just converts vertices in the STL file into points in the point cloud. I am not aware of a tool that resamples points. Did you find any good solution?

