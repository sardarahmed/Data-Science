Q:

<>Getting started with Arbotix python. Keeping it simple

Hello World,
Good news everybody!! I'm new to robotics and I'm ready to get started. The thing is, I need a little help getting started. I recently bought six AX-12 servos, an Arbotix-M controller, a FTDI cable, and I have it all put together with some 3D printed parts. For software I currently have both my laptop (i7, 16GB RAM, 1TB SSD) and Raspberry Pi 2 (SSH) running Ubuntu 14.04 LTS, ROS Jade, and the PYTHON Arbotix package for ROS. Everything is up, running with all error messages fixed. This is where you hopefully come in...
I'm reaching out for someone to create a simple 'starter package' to help me out. In this package I just need the basic few files to just get these motor moving. A BASIC 2-3 servo (pan and tilt) setup that is made with a simple loop that has a # Commented area showing where to add some code so I can program a couple moves to get started. So, a package contain CMakeList.txt, package.xml, .yaml (2-3 servos, small setup), .launch, publisher.py (with a basic back and forth loop), and a subscriber.py (printing some basic servo feedback).
#############################################################################################
In the publisher python file that will be doing a basic pan tilt loop, can you just comment the section for me to add code to, like this currently is (or something to make it understandable).
#############################################################################################
This should be a quick project for anyone willing to help, and I would be overly appreciative. I will be sharing this with many other noobs that are getting starting like me. We are a new group of students who just wanted an educational hobby. So the 'Beginner_Arbotix_Python_PKG' you come up with will be used to teach fellow student, as well as younger students. Can't wait to see what you come up with!!!
Thanks,
Mike

Originally posted by bordenmike518@gmail.com on ROS Answers with karma: 66 on 2016-05-15
Post score: 2

A:

<< SOLVED>>>
I'm new to this, so this is only for reference, I am by no means a professional. After some long hours, I have made the arm move!! I thought I would show the files I used to make it work since it is not so simple for some. If you have already downloaded the arbotix package, and used the 'arbotix_terminal' to find all of your dynamixel ax-12 servos (I will assume you have already done this after installing the arbotix package). Also, I will assume that you have loaded ROS onto your arbotix controller with the Arduino IDE as described here. I will now describe the files I needed to accomplish this. Good luck!!
Create a new package
$ cd ~/catkin_ws/src
$ catkin_create_package arbotix_ros std_msgs rospy roscpp
$ cd arbotix_ros

In the src folder, update your package.xml to look like this...
<?xml version="1.0"?>
<package>
  <name>ros_arbx</name>
  <version>0.0.0</version>
  <description>The ros_arbx package</description>

  <maintainer email="ubuntu@todo.todo">ubuntu</maintainer>

  <license>TODO</license>

  <buildtool_depend>catkin</buildtool_depend>
  <build_depend>roscpp</build_depend>
  <build_depend>rospy</build_depend>
  <build_depend>std_msgs</build_depend>
  <run_depend>roscpp</run_depend>
  <run_depend>rospy</run_depend>
  <run_depend>std_msgs</run_depend>

  <export>

  </export>
</package>

Then make your CMakeLists.txt look like this...
cmake_minimum_required(VERSION 2.8.3)
project(ros_arbx)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  roscpp
  rospy
  std_msgs
)

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)

## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend tag for "message_generation"
##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in
##     but can be declared for certainty nonetheless:
##     * add a run_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
# add_message_files(
#   FILES
#   Message1.msg
#   Message2.msg
# )

## Generate services in the 'srv' folder
# add_service_files(
#   FILES
#   Service1.srv
#   Service2.srv
# )

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
# generate_messages(
#   DEPENDENCIES
#   std_msgs
# )

################################################
## Declare ROS dynamic reconfigure parameters ##
################################################

## To declare and build dynamic reconfigure parameters within this
## package, follow these steps:
## * In the file package.xml:
##   * add a build_depend and a run_depend tag for "dynamic_reconfigure"
## * In this file (CMakeLists.txt):
##   * add "dynamic_reconfigure" to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * uncomment the "generate_dynamic_reconfigure_options" section below
##     and list every .cfg file to be processed

## Generate dynamic reconfigure parameters in the 'cfg' folder
# generate_dynamic_reconfigure_options(
#   cfg/DynReconf1.cfg
#   cfg/DynReconf2.cfg
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES ros_arbx
#  CATKIN_DEPENDS roscpp rospy std_msgs
#  DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
# include_directories(include)
include_directories(
  ${catkin_INCLUDE_DIRS}
)

## Declare a C++ library
# add_library(ros_arbx
#   src/${PROJECT_NAME}/ros_arbx.cpp
# )

## Add cmake target dependencies of the library
## as an example, code may need to be generated before libraries
## either from message generation or dynamic reconfigure
# add_dependencies(ros_arbx ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Declare a C++ executable
# add_executable(ros_arbx_node src/ros_arbx_node.cpp)

## Add cmake target dependencies of the executable
## same as for the library above
# add_dependencies(ros_arbx_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Specify libraries to link a library or executable target against
# target_link_libraries(ros_arbx_node
#   ${catkin_LIBRARIES}
# )

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS ros_arbx ros_arbx_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_ros_arbx.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)

Create a dynamiel_params.yaml file that looks like this...
port: /dev/ttyUSB0
baud: 115200
rate: 70
read_rate: 70
write_rate: 70

joints: {
    head_pan_joint: {id: 1, neutral: 512, max_speed: 100, min_angle: 2.0, max_angle: 2.0, invert: true},
    head_tilt_joint: {id: 2, neutral: 512, max_speed: 100, max_angle: 612, min_angle: 412},
    head_topple_joint: {id: 3, neutral: 512, max_speed: 100, max_angle: 712, min_angle: 312}
}

controllers: {
  head_controller: {type: follow_controller, joints: [head_pan_joint, head_tilt_joint, head_topple_joint], action_name: head_controller/follow_joint_trajectory },
  base_controller: {type: diff_controller, base_width: 0.140, ticks_meter: 26145 }
}

Create an arbotix.launch file and make it look like this...
<launch>
  <node name="arbotix" pkg="arbotix_python" type="arbotix_driver" output="screen">
    <rosparam file="$(find YOUR_PACKAGES_NAME)/dynamixel_params.yaml" command="load" />
  </node>
</launch>

Then to control the arm. Create a mover.py file that looks like this...
#!/usr/bin/env python

import rospy
from std_msgs.msg import Float64

def talker():

    # Set up for 3 joint arm (Anthropomorphic)
    pan = rospy.Publisher('/head_pan_joint/command', Float64, queue_size=10)
    tilt = rospy.Publisher('/head_tilt_joint/command', Float64, queue_size=10)
    topple = rospy.Publisher('/head_topple_joint/command', Float64, queue_size=10)

    # Make this a node in Ros
    rospy.init_node('mover')

    # The rate at which the messages are sent
    rate = rospy.Rate(70)  # 10hz

    # This will just move it to a position
    # A loop is not needed.
    while not rospy.is_shutdown():

        # Create the end position (in radians)
    pan_pos = -1.0
        tilt_pos = 0.5
        topple_pos = -1.0

        # Log the information to /rosout
    rospy.loginfo(pan_pos)
        rospy.loginfo(tilt_pos)
        rospy.loginfo(topple_pos)
        
    # Finally, publish to a node
    pan.publish(pan_pos)
        tilt.publish(tilt_pos)
        topple.publish(topple_pos)
        
    rate.sleep()

if __name__ == '__main__':
    try:
        talker()
    except rospy.ROSInterruptException:
        pass

catkin_make the file then source it...
$ cd ~/catkin_ws
$ catkin_make
$ source devel/setup.bash

Finally, while running roscore and having everything set connected, powered, and running, type...
$ roslaunch arbotix_ros arbotix.launch

In another terminal,  run...
$ cd src/arbotix_ros
$ python move.py

Hope this works for you, too!!

Originally posted by bordenmike518@gmail.com with karma: 66 on 2016-05-24
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by rational_galt on 2020-05-18:
what a great answer. how does this not have more upvotes?

