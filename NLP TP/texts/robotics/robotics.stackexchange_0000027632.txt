Q:

URDF to Gazebo differs from URDF to SDF to Gazebo

I found out a strange behaviour when spawning model in Gazebo.
I have an URDF model of a humanoid robot and a launch file where it is sapwned to Gazebo through model_spawn of the gazebo_ros package using -urdf flag:
<param name="robot_description" 
       command="$(find xacro)/xacro.py '$(find my_robot_description)/urdf/my_robot.xacro'"/>
<node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
      args="-urdf -model my_robot -param robot_description"/>

In such a case, if I endow the URDF with a simple <gazebo> property as follows:
<gazebo>
  <!-- robot model offset -->
  <pose>0 0 0.5 0 0 0</pose>
</gazebo>

It doesn't affect my model in Gazebo, which generate a warning like this:

Warning [parser_urdf.cc:1232] multiple inconsistent  exists due to fixed joint reduction overwriting previous value [0 0 0.5 0 0 0] with [0 0 0 0 -0 0].

However, if I convert the URDF first to SDF (using gz sdf -p my_robot.urdf) and spawn the SDF directly with the -sdf flag, this does not happen and everything works as expected.
Why does this happen? Is a problem of the URDF parser of Gazebo or I'm doing something wrong?

Originally posted by alextoind on Gazebo Answers with karma: 13 on 2016-02-16
Post score: 0

Original comments
Comment by Brosseau.F on 2016-02-17:
And if you try to do :

0 0 0.5 0 0 0

Comment by alextoind on 2016-02-17:
Nothing happens, but no warning is displayed this time... At a closer look it seems that no properties in the <gazebo> tags pass from the URDF to Gazebo (I've specified frictional parameters but they are filled with default values), even if the gazebo_ros_control plugin is properly loaded... I'm using Gazebo7 with ROS Jade; could this be a problem?
Comment by hsu on 2016-02-17:
which version of sdformat and urdf are you running? There are some examples in the unit tests, see equivalent examples in https://bitbucket.org/osrf/sdformat/src/753c70f286d59790160cf458ad18fa322def0691/test/integration/fixed_joint_reduction_collision_visual_extension.urdf?at=default and https://bitbucket.org/osrf/sdformat/src/753c70f286d59790160cf458ad18fa322def0691/test/integration/fixed_joint_reduction_collision_visual_extension.sdf?at=default
Comment by alextoind on 2016-02-17:
Thanks @hsu, I probably got the problem: as I said in http://answers.ros.org/question/226659/ros-jade-gazebo7-and-gazebo_ros_control-compatibility/ I compiled directly the jade-devel branch of gazebo_ros_pkgs because there is no gazebo_ros_pkgs for ROS Jade and Gazebo7 yet. I thought that it was quite fine because I could control my robot from ROS as explained in the tutorials, but now I believe that the spawn_model could be a bit dated. Why gz sdf and spawn_model use distinct code?
Comment by alextoind on 2016-02-17:
What would you suggest now? Switch to Gazebo 6? Create two distinct models (SDF only for Gazebo simulation and URDF for control purposes) even if this would mean update twice when modifying something in the model? Or even other advices?

A:

You could use additional options from spawn_model (-z 0.5):
$ rosrun gazebo_ros spawn_model 
Commands:
    -[urdf|sdf|trimesh|gazebo] - specify incoming xml is urdf, sdf or trimesh format. gazebo arg is deprecated in ROS Hydro
    -[file|param|database] [<file_name>|<param_name>|<model_name>] - source of the model xml or the trimesh file
    -model <model_name> - name of the model to be spawned.
    -reference_frame <entity_name> - optinal: name of the model/body where initial pose is defined.
                                     If left empty or specified as "world", gazebo world frame is used.
    -gazebo_namespace <gazebo ros_namespace> - optional: ROS namespace of gazebo offered ROS interfaces.  Defaults to /gazebo/ (e.g. /gazebo/spawn_model).
    -robot_namespace <robot ros_namespace> - optional: change ROS namespace of gazebo-plugins.
    -unpause - optional: !!!Experimental!!! unpause physics after spawning model
    -wait - optional: !!!Experimental!!! wait for model to exist
    -trimesh_mass <mass in kg> - required if -trimesh is used: linear mass
    -trimesh_ixx <moment of inertia in kg*m^2> - required if -trimesh is used: moment of inertia about x-axis
    -trimesh_iyy <moment of inertia in kg*m^2> - required if -trimesh is used: moment of inertia about y-axis
    -trimesh_izz <moment of inertia in kg*m^2> - required if -trimesh is used: moment of inertia about z-axis
    -trimesh_gravity <bool> - required if -trimesh is used: gravity turned on for this trimesh model
    -trimesh_material <material name as a string> - required if -trimesh is used: E.g. Gazebo/Blue
    -trimesh_name <link name as a string> - required if -trimesh is used: name of the link containing the trimesh
    -x <x in meters> - optional: initial pose, use 0 if left out
    -y <y in meters> - optional: initial pose, use 0 if left out
    -z <z in meters> - optional: initial pose, use 0 if left out
    -R <roll in radians> - optional: initial pose, use 0 if left out
    -P <pitch in radians> - optional: initial pose, use 0 if left out
    -Y <yaw in radians> - optional: initial pose, use 0 if left out
    -J <joint_name joint_position> - optional: initialize the specified joint at the specified value

So something like this could work:
 <param name="robot_description" 
   command="$(find xacro)/xacro.py '$(find my_robot_description)/urdf/my_robot.xacro'"/>
<node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
  args="-z 0.5 -urdf -model my_robot -param robot_description"/>

On the other hand, I like the suggestion of supporting robot extensions that goes directly under the model tag, issued
https://bitbucket.org/osrf/sdformat/issues/edit/112

Originally posted by hsu with karma: 1873 on 2016-02-18
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by alextoind on 2016-02-18:
Thank you very much, I didn't see those options! At least the model pose is fine now, even if I still don't get why some parameters in the  tags are not passed to the SDF model... I'll open another question in the next few days with a code example.
Comment by hsu on 2016-02-18:
the  extension tags are not passed to sdf, issue has been created to track this missing feature: https://bitbucket.org/osrf/sdformat/issues/edit/112
Comment by alextoind on 2016-02-18:
Yes sorry, I've already seen it. I was talking about something like the ones in Brosseau answer; they should appear in the SDF as told in the tutorial, aren't they?

