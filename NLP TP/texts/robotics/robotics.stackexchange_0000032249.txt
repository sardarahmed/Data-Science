Q:

Motion Planning with base_local_planner

I'm a bit confused about how to use base_local_planner; I'm following  this tutorial . Apologies if questions below seem silly; I'm a newcomer to ROS.
My robot configuration launch file looks like this:

<launch>

 <node pkg="gazebo_plugins" type="hokuyo_node" name="hokuyo_node" output="screen">
    <param name="sensor_param" value="param_value" />
  </node>

 < uncommented for display ; odom is a c++ program I wrote to listen to odometry information -->
 <node pkg="learning_tf" type="odom" name="odom_node" output="screen">
    <param name="odom_param" value="param_value" />
  </node>

  <node pkg="tf" type="tf_echo" name="tf_listener" output="screen" args="/base_link /map">
  </node>

</launch>

My move_base file is the same as erratic_navigation's move_base.launch.
Questions:

 What are the sensor, odom and transform packages required for the robot configuration file? Are they listeners to the information published by move_base? 
 The only odometry reading I get by looking at rostopic output is from erratic_odom. Is this enough? 
 Is /base_link --> /map the right transformation for tf?
 What output should I expect after I run both launch files? Shouldn't I be getting a plan through which the robot moves, dumping output?
 Is hokuyo_node the right sensor?

Originally posted by PKG on ROS Answers with karma: 365 on 2011-06-14
Post score: 1

Original comments
Comment by Martin Günther on 2011-06-19:
Is there a particular reason for using the Erratic? Most Willow packages use the PR2 simulation and are better-supported than the Erratic packages. I'd start by playing around with the launch files recommended by Eitan below to get a feel for how everything plays together.
Comment by PKG on 2011-06-16:
I'm using the Erratic simulation.
Comment by Martin Günther on 2011-06-16:
Do you have a real robot that you want to port to ROS? Or do you want to test the navigation stack using a simulated robot in Gazebo (e.g., the Erratic or PR2)?

A:

Have you first tried the example launch files in the navigation_stage package. If you're just looking to run the navigation stack in simulation, that package is a good place to start.

Originally posted by eitan with karma: 2743 on 2011-06-16
This answer was ACCEPTED on the original site
Post score: 1

