Q:

Prevent python scripts and cpp files to run directly, allow run only using roslaunch

I am designing a ROS (ROS Indigo on Ubuntu 14.04 LTS) package containing several python scripts and CPP files. I don't want any user to directly invoke python scripts or CPP code. For example, if any user invokes such files directly, it should exit by displaying an error message such as following:
$rosrun my_package my_script.py
[ERROR] Do not invoke this file directly. Instead, use 'roslaunch my_package my_script.launch'
$rosrun my_package my_cpp
[ERROR] Do not invoke this file directly. Instead, use 'roslaunch my_package my_cpp.launch'

Any suggestions to incorporate such behavior? Thank you very much.

Originally posted by ravijoshi on ROS Answers with karma: 1744 on 2017-10-25
Post score: 0

Original comments
Comment by gvdhoorn on 2017-10-25:
To avoid a possible xy-problem, could you explain why you'd want to do this?
Comment by ravijoshi on 2017-11-18:
@gvdhoorn: I am passing many parameters to script and cpp files from launch file. If these scipt and cpp files are executed with rosrun/directly, it terminates by thowring long long exceptions. Hence i would like to show some info to prevent it.
Comment by gvdhoorn on 2017-11-18:
If 'parameters' are actual ROS parameters, would checking the return value of NodeHandle::hasParam(..) printing an appropriate error message and then return or exit(..)-ing not be possible?
Comment by ravijoshi on 2017-11-18:
Yeah. that's what I am doing till now. and just before exit, I put a print command in each file.
Comment by gvdhoorn on 2017-11-19:
Then I would suggest you make the whole thing a bit more generic, and don't complain about starting things 'directly', but just error out on a missing parameter.
Launch files can be changed, there is no guarantee that all your parameters will always be there.

A:

I'm not sure how robust it is, but one way to approach this would be to check for certain command line arguments (CLAs) that indicate that the binary or the script has been started by roslaunch. This would be almost 'the reverse' of what is described in #q272267.
Examples of such arguments are __name and __log. Those should be present in the argv of any program started from a launch file. Users could of course add those CLAs when invoking your script or starting your binary, but abuse is probably always possible.

Originally posted by gvdhoorn with karma: 86574 on 2017-10-25
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by gvdhoorn on 2017-10-25:
I'm not sure actually whether rosrun does not also set those arguments. That would be something to check.
Comment by ahendrix on 2017-10-25:
rosrun does not set any additional command-line arguments.
Comment by ahendrix on 2017-10-25:
While it's possible for the launch file that invokes these nodes to add arguments, parameters or environment variables, in the end the user can mimic all of these if they really want to run the node with rosrun or by directly invoking the binary.
Comment by gvdhoorn on 2017-10-25:
Yes, I agree. And I added that as well at the end of my answer I believe:

Users could of course add those CLAs when invoking your script or starting your binary, but abuse is probably always possible.

