Q:

When should FPGAs be used in Robotics?

FPGA has good points such as a lot of IO points but then again you need to think things on very low level with flip-flops and pioneer on areas where things are not yet mature -- for example see this question here about development-tools on FPGAs -- this is my understanding currently! Now FPGA has been used to create excellent dexterity in robotic hands like here. Now some people market FPGA for fast prototyping and "forward looking" designs like here, I don't fully understand them: if you don't need a lot of IO points for things such as sensors, why to choose FPGA for a robot? So
When should FPGA be chosen for a project in robotics?

A:

I'm not sure what in the linked question about development tools makes you think that they are not mature. It is true that most of them are proprietary and not open source. But I thought that the tools were quite mature even back when that question was asked three years ago. Today Xilinx, Altera, and Lattice all have freely available development environments that run on Windows and Linux with 32 and 64-bit support. If you insist on open source Icarus Verilog can do quite a bit. But I'd personally stick with the vendor specific tools.
FPGA's are more than just a bunch of configurable flip flops. Consider the Altera NIOS II. A 32-bit soft-core processor capable of running Linux. Mix and match communications and other peripherals from OpenCores or from Xilinx, Altera, or Lattice and you've built a custom microcontroller with everything you need and nothing you don't. You can even write C code for the NIOS II processor and have certain functions implemented directly in the FPGA hardware if you need the speed. Is that high level enough thinking for you?
FPGA's have a high initial investment cost. But it's cheaper and easier to add functionality later in the design process. That's what's meant by "forward looking" designs. Consider a project where you want to add some additional motors to your robot but you've run out of PWM generators on your microcontroller. What do you do? Add another microcontroller? Buy separate PWM chips and connect them to a communications interface? What if all your communications interfaces are in use? With an FPGA, this is reduced almost entirely to a copy and paste operation. It's a lot easier, cheaper, and quicker to scale a design to include new functionality without buying as much additional hardware with an FPGA.
But probably the biggest reason to use an FPGA is speed. I'm not talking about pure clock speed. But when you need a lot of things to happen simultaneously. As Gossamer mentioned, parallelism is what FPGA's are really good at. Filter designs especially benefit from this kind of parallel architecture. If you need to filter and respond to a rapidly changing sensor, then you need an FPGA. They are also quite good at video processing as this too benefits from parallel processing.
Take for instance this high-speed hand robot. It needs to process the video from the high-speed (1000 frames per second) machine vision camera as well as the tactile sensors and respond by manipulating numerous actuators in only a few milliseconds. This type of project is when you need to choose FPGAs.

