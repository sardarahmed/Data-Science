Q:

ROS2 MoveIt can't find mimic joint

In ROS2 Humble, I'm attempting to add a rudimentary gripper to a UR arm, simulate in Gazebo (fortress), and control using MoveIt. I'm starting from the official UR URDF and MoveIt config files, and somewhat haphazardly trying to combine them with my gripper URDF and modified configs. Currently when I run the system, I'm getting the repeated error:
[move_group-6] [ERROR] [1691647994.590613776] [moveit_robot_model.robot_model]: Joint 'left_finger_joint_mimic' not found in model 'mybot'
The gripper URDF has a mimic joint named left_finger_joint, which is also added to a group in my SRDF:
<group name="${prefix}gripper">
  <link name="${prefix}palm" />
  <link name="${prefix}finger_left" />
  <link name="${prefix}finger_right" />
  <joint name="${prefix}right_finger_joint" />
  <passive_joint name="${prefix}left_finger_joint" />
</group>

However, it appears ros2_control is appending _mimic to the controller (confirmed by calling /controller_manager/list_controllers), which is then confusing MoveIt. (Edit: it is happening in gz_ros2_control: https://github.com/ros-controls/gz_ros2_control/blob/cf5c6a4135d6b46c95e0e135ffd0400fb4db7731/ign_ros2_control/src/ign_system.cpp#L279)
Am I supposed to explicitly refer to left_finger_joint_mimic somewhere in the SRDF, or elsewhere? I'm particularly confused because I've been referring to https://github.com/ros-planning/moveit_resources/tree/humble/panda_moveit_config, which similarly has a mimic joint, but doesn't seem to ever refer to it with _mimic appended.

A:

This is a Gazebo ROS2 Control plugin issue and the same issue exists in Gazebo Classic implementation of gazebo_ros2_control as documented in this issue. I also stumbled across the same Ign Gazebo issue you seem to have found here (for reference)
The plugin adds a (as far as I'm aware unused) mimic suffix to mimic joints when parsing the URDF, creating a hardware interface with the suffixed version of the joint name. The intent is to semantically signify that the joints are not actually controlled / measured, but this unsurprisingly confuses Moveit, because the URDF references hardware with a different name than what the ros2_control hardware manager lists.
In that case, as will likely be the case for "Ignition" Gazebo, simply removing the suffix or changing it to an empty string should fix your issues with Moveit without breaking anything.
If you are unable to build the Gazebo ros2_control plugins from source, you can modify the generated URDF used by Moveit to reference the mimic joint, but I don't personally encourage that approach.
EDIT: responding to this comment
First, robot_state_publisher:
My understanding is that robot_state_publisher couldn't care less whether a joint has a _mimic suffix in the name or not. It just looks for any joint that has the <mimic> element set and adds that to a set of mimic_ joints. When evaluating the state for the joints in the mimic_ set, the robot_state_publisher will override state in the JointState msg it receives.
Now this might cause unexpected behavior if you also have your JointStateBroadcaster setup to publish joint states for your mimic joint (as would be the default behavior when no joints are specified), as you'd have a separate node overriding the data getting published by ros2_control. But also, I'd argue it doesn't really matter if the JointStateBroadcaster is publishing state information that is getting ignored, since (in a perfect world) both ros2_control and robot_state_publisher should have the same understanding of the mimic's joint state and the math to get the mimics state from the parent is fairly trivial. Again, this might cause issues if the Gazebo simulation is acting strangely and the mimic isn't following its parent as one might expect and you're assuming the published joint state for a mimic joint will have perfect omniscient state knowledge that exactly matches the sim (rather than the implied state information from the mimic relationship). It sounds like @destogl was interested in that "perfect" state information for debugging purposes, but it seems like an uncommon use case to me, and you could extract the same information by subscribing to the /joint_states topic anyways.
For RViz, my understanding of any typical use cases that might involve joint states (visualizing TFs, Robot Models, etc), is that RViz again doesn't care what the name of a joint is or whether its a mimic. To my knowledge it uses the transforms published by robot_state_publisher, so as long as those are consistent, I don't foresee (or remember from when I tried this workaround ~1/2 a year ago) any RViz issues. I'm not aware of any RViz functionality that would break, but that's not to say they don't exist.

