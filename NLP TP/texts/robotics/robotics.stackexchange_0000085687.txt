Q:

move_base and arduino interaction

hello i have an issue in my move_base and my arduino interaction
( robot description : robot with four wheels drive controlled by arduino i subscribe by arduino node to cmd_vel and controll the 4 motors )
I gave a goal to the robot , the robot navigate autonomously, when it reached the goal pub { 0 0 0 0 0 0 } and stopped publishing into /cmd_vel but my robot keep moving it didn't sub to the last msg in /cmd_vel and keep moving with the before last /cmd_vel data when i use keyboard it stoppet
arduino code :
messageCb( const geometry_msgs::Twist& t)
 { 
.....
 } 
ros::Subscriber<geometry_msgs::twist> sub("/cmd_vel", &messageCb ); 
void setup() 
{
 ... 
nh.initNode();
 nh.subscribe(sub);
 } 
void loop() 
{ 
 nh.spinOnce(); delay(50);
}

Originally posted by abdelkrim on ROS Answers with karma: 9 on 2018-03-06
Post score: 0

Original comments
Comment by gvdhoorn on 2018-03-07:
May I suggest a title chance? Your question seems to be more about how to deal with missed messages and robots that are controlled by velocity inputs. move_base and drivers that accept Twist are just one example of such a setup, and the question is therefor much broader.
Comment by abdelkrim on 2018-03-07:
thank you  yes i see :)

A:

Your question is a bit implied, but what you noticed (your robot not stopping after the last command input has been given) is typically addressed by adding a time-out mechanism to your driver.
Keep track of when the last Twist was received and if dt becomes too large, automatically stop.
That way even missed 'stop' commands won't lead to your robot continuing on forever, as it will have timed out long before.
Note that adding such a time-out mechanism to your base driver (ie: the code running on your Arduino) will require your Twist producer to keep publishing new messages at a rate at least as high as the inverse of the time-out you've configured your driver to use.

Edit: thanks for the code, but I don't see any timeout -- or at least, not implemented in a way I would expect given your initial question.
I'm also rather uncertain as to what your question now is: what is it that you feel is not working now / not appropriate to do? I only see a single Subscriber (good). Are you saying there is a 0.5 second delay between publishing a Twist and receiving it in your callback?

Originally posted by gvdhoorn with karma: 86574 on 2018-03-07
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by abdelkrim on 2018-03-07:
thank you for reply
yeah i have a time-out in the running on my Arduino at least it keep 0.5 seconde to subscribe to new  twist msgs so the new question is how i can reduce the  rate  of twist msg published by my move_base ? it is controller frequency parameters which i have to modify !!
Comment by gvdhoorn on 2018-03-07:\

it keep 0.5 seconde to subscribe to new twist msgs

are you re-subscribing to the topic in a loop?
Comment by abdelkrim on 2018-03-07:
yes at least 0.5 seconde because there are  some instructions to control the 4 wheels inside  messageCb
no at the end of messageCb
ros::Subscriber<geometry_msgs::Twist> sub("/cmd_vel", &messageCb );
Comment by gvdhoorn on 2018-03-07:
It's up to you, but I would rethink your implementation. Can you explain why you unsubscribe? This is a rather unusual thing to do.
Comment by abdelkrim on 2018-03-07:
unsubscribe i didn't :o
if i increase controller frequency that will confused something other ??
Comment by gvdhoorn on 2018-03-07:
can you please add some parts of your code to your question? If you don't unsubscribe, why do you create new ros::Subscriber instances then? You typically only need one?
Comment by gvdhoorn on 2018-03-07:
I cannot say whether changing controller frequency will affect the rest of your system. But I'm also not sure whether it's really needed.
Comment by abdelkrim on 2018-03-07:
i fixed i set  controller frequency to 0.5 and its good now thank you so much

