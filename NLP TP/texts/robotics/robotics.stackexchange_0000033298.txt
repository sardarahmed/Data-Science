Q:

Is it safe to change system date/time during execution

Reading on how ros Time is implemented, it looks like it uses system wall-time. http://www.ros.org/wiki/Clock
Would it be safe to change system time when ros nodes are running?
We plan to synchronize the time between robots using NTP on startup using Wi-Fi.
But if a robot was powered on out of Wi-Fi range, started all it's nodes, and then (once in Wi-Fi range) changed it's system time using NTP, we are afraid that those nodes would start acting weird.
This question is both for C++ and python implementation of Time.

Originally posted by Victor Lopez on ROS Answers with karma: 651 on 2011-07-26
Post score: 3

A:

It is not safe as you already suspected. Timestamps might jump and this might lead to inconsistencies. If you sync with NTP before, there shouldn't be much difference, though.
It is recommended to use chrony for your application, although there still is the problem that the times might get out of sync. In a comparably short time that should not matter unless you are synching high-frequency sensor data between different machines.

Originally posted by dornhege with karma: 31395 on 2011-07-26
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by tfoote on 2011-07-30:
This is why chrony is recommended.  It doesn't jump the clock it skews the rate to synchronize instead of jumping time.
Comment by dornhege on 2011-07-27:
I think that wouldn't solve the problem. A clock server still has to run on one of the machines and once you have a disconnect the problem is again the sync. You can see one systems clock as a clock server.
Comment by Victor Lopez on 2011-07-26:
I was thinking about using a Clock Server that publishes time based on monotonic time, therefore a change on system time wouldn't cause timestamp jumps, I'll have to test it which harmful effects this has.

