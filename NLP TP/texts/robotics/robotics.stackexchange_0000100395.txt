Q:

Downsides to colcon's --symlink-install option in ROS2?

Are there any downsides or pitfalls to using the --symlink-install option in when building a workspace with colcon in ROS2?
To me, it seems like a cross-the-board improvement; symbolic links instead of copies take less disk space, and make for faster development when using python, urdf, xacro, yaml, etc; and compiled language files are still handled as expected (to my knowledge). But I feel like I must be missing something, else I would expect colcon to enable --symlink-install by default if there weren't any downsides.

Originally posted by shonigmann on ROS Answers with karma: 1567 on 2021-10-25
Post score: 3

A:

If you're just developing on your local machine, there's no down-side and I threw it into my colcon defaults file.
If you're cross-compiling and sending built software to a remote target, you don't need to transport the src, build or log.  The workspace functions just fine with only the install folder as long as you didn't --symlink-install back to src when you built it.
I think it would cause a number of expensive headaches in CI/CD and production deployment if symlink was the default, so personally I think the user-side colcon defaults file is a reasonable compromise.

Originally posted by BrettRD with karma: 86 on 2021-11-03
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by shonigmann on 2021-11-03:
This is definitely a good point that I hadn't considered. I've been pretty focused on my own dev machine, but deployment and CI/CD are definitely important, thanks!

