Q:

Delphi ESR 2.5 - Python code to start

Hi all
I have just got a new Delphi ESR 2.5 Radar.
It will be great you can point me to some basic python scripts to get started with the sensor.
My setup uses Kvaser Leaf to communicate with Delphi ESR 2.5 on Ubuntu 18.04
Thanks for the help in advance

Originally posted by Asit on ROS Answers with karma: 3 on 2019-05-29
Post score: 0

Original comments
Comment by gvdhoorn on 2019-05-29:
Can you clarify how this is related to ROS?
Comment by Asit on 2019-05-30:
Get the python basic would allow me to plug this script into ROS and ROS2...
Comment by gvdhoorn on 2019-05-30:
That makes sense, but at this point your question is about basic interaction with your hardware and the SDK provided by kvaser. That is not a ROS question and would be better asked on a different forum.
Comment by Asit on 2019-05-30:
Edited it to fit the forum topic... Hope, now it can stay live...

A:

Connect your Kvaser adapter to usb
Make sure it's visible: ifconig -a should show can0 (or other canX interface)
Up your can interface as explained here https://en.wikipedia.org/wiki/SocketCAN#Usage
Run sudo apt install can-utils (https://github.com/linux-can/can-utils)
Make sure you see the data coming on your can interface cansniffer -f can0
Use socketcan_bridge (http://wiki.ros.org/socketcan_bridge) to publish CAN data from can0 to ROS topic
Create regular python node listening to topic published by socketcan_bridge and processed received radar data

Originally posted by mch with karma: 46 on 2019-06-07
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by gvdhoorn on 2019-06-08:\

Create regular python node listening to topic published by socketcan_bridge and processed received radar data

something to consider: if you transparently bridge CAN msgs into your ROS nodegraph, any node you write that subscribes to the CAN messages is immediately completely coupled to your radar sensor.
I would seriously recommend not doing that. Instead, use ROS messages: either existing ones or create a new one. Not to hold a bare CAN message, but to correctly encode the semantics and content of what "a radar message" would be.

