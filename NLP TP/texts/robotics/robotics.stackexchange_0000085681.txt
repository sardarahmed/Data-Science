Q:

Relation between footprint and command velocity

I am working with a dynamic footprint, the footprint is small when the robot is close to obstacles and it gets bigger if the robot is in a free open space. when the footprint is big ,the velocity decreases that means that the velocity is way below max_velocity even when there are no obstacles in the costmap, and if the footprint gets smaller the robot accelerates as the footprint is getting smaller and it reaches max_velocity. Does somebody has an explanation for this behavior and can I reverse it (fp big / vel big and vice versa). I am using dwa as local planner. Thank you in advance.

Originally posted by starter on ROS Answers with karma: 1 on 2018-03-06
Post score: 0

A:

I recommend you to be familiar with the costmap to understand the behavior it's interesting, check the wiki.
If you increase your footprint size then your footprint is getting closer to the obstacles hence to collision zones so the robot decreases its speed to avoid that.
On the contrary, if you decrease the footprint size when getting closer to an obstacle, then you won't get closer to the collision zones defined by the costmap so the speed won't decrease (it would even increase if you're reducing your footprint faster than getting closer to an obstacle).
Someone already asked a similar question you should check the answer it might help you.

Originally posted by Delb with karma: 3907 on 2018-03-06
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by starter on 2018-03-06:
@Delb Thank you for your answer, but the main reason why I asked my question is why even when there are absolutely no obstacles, just open space, when the footprint gets bigger the velocity drops.
Comment by Delb on 2018-03-06:
Look at line 102 of the obstacle_cost_function.cpp it clearly states that the speed is linked to the footprint size, but I can't find exactly where the speed is changed..
Comment by starter on 2018-03-06:
Actually that method is only used once here the output is just passed as an argument to ObstacleCostFunction::footprintCost below and never used.

