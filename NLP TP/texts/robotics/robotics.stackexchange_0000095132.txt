Q:

Question regarding ROS(turtlesim).Moving one turtle towards another turtle

I want to write a python node such that it subscribes to relevant topics and publishes to relevant topics to make default 'turtle1' at (5.444,5.444) move towards a newly spawned turtle 'blah' at (X1, Y1) and stops at a 'D' unit distance from 'blah'.(This is in ROS)Can someone please explain or provide a solution?!
I gave new subscriber as rospy.Subscriber('turtle/blah',Pose,update_posenew)and a new object called as posenew=Pose() inside __init__ function. The callback function is:

def update_posenew(self,data)

   self.posenew=data

   self.posenew.x = round(self.pose.x, 4)

   self.posenew.y = round(self.pose.y, 4)

... Uptil now fine.now.. In the move2goal function

 def move2goal(self): 

     goal_pose =Pose()

     goal_pose.x =∆

     goal_pose.y = ∆ 

What should be given in place of ∆?

Originally posted by Gun_Kan02 on ROS Answers with karma: 3 on 2020-03-21
Post score: 0

A:

I think this is exactly what you are looking for. You just need to subscribe your /blah/pose to get the goal pose rather than get it from the user.  
As for

stops at a 'D' unit distance from 'blah'

simply set  distance_tolerance to your D unit.
I hope this helps!
P.S. This question is not really related to turtlebot. I suggest you change the tag to turtlesim.

Edit:
You should add self to create your instance attribute so that  other methods in TurtleBot class are able to access self.posenew too. The topic you have subscribed to is incorrect. What is turtle/blah? It should be spawn_name/poseso in your case, i.e. blah/pose. The  callback – update_posenew where you update your self.posenew is also wrong. Notice that you have two turtles so you have two different poses. Therefore, you need to round the pose of your blah turtle not the turtle1's one. So simply make this change to your code.
self.posenew.x = round(self.posenew.x, 4)
self.posenew.y = round(self.posenew.y, 4)

∆.x and ∆.y are thus the updated self.posenew.x and self.posenew.y respectively.
goal_pose.x = self.posenew.x
goal_pose.y = self.posenew.y

Please also be aware that when you assign Pose() to your new instance attribute self.posenew inside __init__, the contents of self.posenew are initially all set to 0.0 which might affect the calculation of distance/velocity in move2goal(). So I advise you to add
rospy.wait_for_message('blah/pose', Pose)

after definition of self.posenew to wait for the message to arrive on the topic blah/pose or simply adding rospy.sleep(0.5) will do the trick.

Originally posted by karenchiang with karma: 241 on 2020-03-21
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by Gun_Kan02 on 2020-03-22:
I understood that there is a need of /blah/pose subscriber but after that how to change the goal_pose to and how to update and callback and how to differentiate between blah and turtle1 subscriber?!
Comment by karenchiang on 2020-03-22:
You can create another subscriber that subscribes to /blah/pose and has its own callback function. For more information, please take a look at this post. I am not sure what you want to achieve specifically. If you just want to make your turtle1 move towards blah once instead of continuously chasing it. It's probably better to set the goal_pose once using ros::topic::waitForMessage() than update it repeatedly through callback.
Comment by Gun_Kan02 on 2020-03-22:
http://wiki.ros.org/turtlesim/Tutorials/Go%20to%20Goal.
I referred to this link and now I got stuck at one point. I created another subscriber and callback(update_posenew) for 'blah' turtle with topic /blah/pose.now in the move2goal function what should I equate goal_pose to(i mean what is the syntax) Can you please help?! This has been itching me for 2 days. Please!!
Comment by karenchiang on 2020-03-22:
Can you please elaborate on that? At what point did you get stuck? I would like to know what you've assigned to your goal_pose.
Comment by Gun_Kan02 on 2020-03-22:
I gave new subscriber as rospy.Subscriber('turtle/blah',Pose,update_posenew)
And a new object called as
posenew=Pose() inside init function.
The callback function is:
def update_posenew(self,data)
self.posenew=data
self.posenew.x = round(self.pose.x, 4)
self.posenew.y = round(self.pose.y, 4)
...
Uptil now fine.now..
In the move2goal function
def move2goal(self):
goal_pose =Pose()
goal_pose.x =∆
goal_pose.y = ∆
What should be given in place of ∆?!
Comment by gvdhoorn on 2020-03-22:
@Gun_Kan02: could you please add these sort of updates (ie: the ones which contain code) to your main question text? Comments are too small.
Please append your current code to your original question. Use the edit button/link for that.
Comment by Gun_Kan02 on 2020-03-22:
someone please explain?!
Comment by Gun_Kan02 on 2020-03-22:
Yess this worked thank you so much tcchiang
Comment by karenchiang on 2020-03-23:
I'm glad to be of help, @Gun_Kan02.
Comment by Suyashhchougule on 2021-01-30:
@Gun_khan what worked ? i am stuck at same problem . can you explain ?

