Q:

Will binaries for nav2 MPPI Controller be available in ROS Humble?

Hi all
I'm working with ROS Humble and I wanted to try and test the new nav2 MPPI controller. I was able to build from source on my dev machine as the code has been backported to the nav2 humble branch here: https://github.com/ros-planning/navigation2/commit/ff5308f95d805a0a0895fc136323addde027c262
My question is if this nav2 MPPI controller package will also be available as binaries from http://packages.ros.org/ros2/ubuntu/? I'm confused because on ROS Index the distro humble is listed as supported: https://index.ros.org/p/nav2_mppi_controller/github-ros-planning-navigation2/#humble-overview
The reason I'm asking is the following: My target system is a Raspberry Pi 4 at the moment running nav2. I didn't manage to build directly on the pi because it simply breaks down when trying to build the full nav2. I have a task in the backlog to cross compile for arm64 on my dev machine. However, this is currently not my top priority. So it would really be helpful if arm64 binaries would be available from the official ros2 repository.
Thanks for any advice!

Originally posted by gislers on ROS Answers with karma: 3 on 2023-05-07
Post score: 0

A:

Yes, it will be available in binaries shortly. For now, you don't need to compile all of Nav2 to compile MPPI. You can just compile that one and use the binaries for the rest of Nav2. Its an algorithm plugin so its totally independent from the framework to be compiled separately without an issue.
The Humble syncs only happen every so often and I've been a little lacking in releases on Humble the last ~2 months for reasons I'm not able to discuss here. June 2nd is my next scheduled release cutting date, but I may be able to fast forward that a week.

Originally posted by stevemacenski with karma: 8272 on 2023-05-08
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by gislers on 2023-05-10:
Ah yes, thanks a lot! For some reason I assumed that the MPPI controller has tighter dependencies on the rest of nav2. With this, I was able to build now in about 20 minutes using the following command:
export MAKEFLAGS="-j 1"
colcon build --packages-select nav2_mppi_controller 

This will utilize only one core preventing the Raspberry Pi to freeze due to insufficient RAM. Parallelization is also nicely explained in this thread here if anyone runs into similar issues: #q368249
Comment by stevemacenski on 2023-05-16:
Yeah, its quite the package to compile even on a developer machine. Next to Smac Planner, its the second longest run-time package to compile.

