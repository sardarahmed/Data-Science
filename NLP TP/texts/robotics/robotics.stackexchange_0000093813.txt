Q:

Difference between Jenkins log and generated package (lib prefix)

Hi,
I am trying to debug a failure in setting up the CMake variables for library installation.

I am inspecting the generated package (ros-kinetic-eigenpy, version 1.6.5-1) by installing in a new Kinetic docker. The pkg-config eigenpy.pc is installed in /opt/ros/kinetic/lib/x86_64-linux-gnu/pkgconfig, while the library itself is in /opt/ros/kinetic/lib. This would suggest an issue setting up the CMAKE_INSTALL_LIBDIR.
After reviewing the output of the latest Jenkins job, it appears there it correctly installs without the x86_64-linux-gnu prefix (in devel_isolated).

Am I missing something obvious here why on Jenkins it appears to install correctly but the packaged version on ros-testing has it using the prefix?
I appreciate any insights

Originally posted by wxm on ROS Answers with karma: 3 on 2019-11-13
Post score: 0

A:

The job output you're linking is for a devel job which tests the latest version of packages in a source repository. The job which builds the Kinetic eigenpy debian package is http://build.ros.org/job/Kbin_uX64__eigenpy__ubuntu_xenial_amd64__binary/
You can also run a local copy of the binarydeb job using the ros_buildfarm library: https://github.com/ros-infrastructure/ros_buildfarm/blob/master/doc/jobs/release_jobs.rst#run-the-release-job-locally

Originally posted by nuclearsandwich with karma: 906 on 2019-11-13
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by wxm on 2019-11-14:
Thank you - this is what I was looking for.
It turns out the original problem is related to an old version of debhelper on kinetic. Versions >10.2.1 solve the problem. I will work on a workaround.
Comment by wxm on 2019-11-14:
@nuclearsandwich: I have described the issue I am trying to debug with references in https://github.com/stack-of-tasks/eigenpy/issues/116. It boils down to the use of GNUInstallDirs using old versions of debhelper on 16.04 appending the architecture to lib. As such the pkgconfig files end up in lib/arch/pkgconfig while the library ends up in lib/. Is there a recommended workaround? (This is a REP136 released third-party package)

