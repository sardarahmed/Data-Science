Q:

Using GPL licensed packages in a commercial product

Hi,
Using a GPL licensed package in a commercial product should not be a problem, right? It ought not force us to release all our own software in the product under the GPL? As long as we're not linking directly towards the package, but rather just send or receive messages from it, that is.
If I understand it correctly, if we use a secret message format that we don't explain to anyone we could get into trouble. But now it's just a Scan message. It should be fine, shouldn't it?
We will still have to distribute the source code of the GPL'ed package of course, if requested too.
Regards,
Rasmus Ahlberg

Originally posted by raahlb on ROS Answers with karma: 317 on 2011-12-12
Post score: 2

Original comments
Comment by raahlb on 2012-01-02:
Yeah, but the laser driver we're using is GPL and LGPL licensed. It all comes down to in which situations the GPL "spreads" across socket communication. But as the interface, i.e. sensor_msgs/Scan, has a publicly available specification it ought to be fine.
Comment by tfoote on 2012-01-02:
Note that all of this is moot for the sensor_msgs/Scan message for it is BSD licensed not GPL.  All of the core of ROS is BSD licensed, and the BSD is a much more permissive license.

A:

Too long for a comment to Dimitri's answer, so separate answer.
IANAL, but I disagree with the interpretation that requiring a GPL'd node is "linking against" it. Statically or dynamically linking against a GPL component will get you one, complete binary file that contains that GPL component, hence the license applies to all of that binary. You should be careful about the manifest.xml, since you may automatically be linking against things if your ROS node has a dependency on the GPL'd package and it exports a library. That is one reason to use separate message packages.
If you are not directly linking against the GPL'd library, then your software should not need to be licensed as GPL. Just because you "require" a piece of GPL software in order to function, as long as the GPL component is standalone, I do not believe your software also needs to be GPL. Since nodes communicate via TCP and live in completely separate processes (and hence are separate binaries), I do not think the GPL can cross the process boundary and "infect" other pieces of software on the system. For example, much of ROS "depends" on the Linux kernel to function (which is GPL'd) but, because we don't link directly against the kernel and live in user-space, we don't need to worry about the kernel's licensing terms, since ROS is not a "derivative work" of the Linux kernel.
Really, my understanding is that if component FOO never includes any of the copyrighted material of BAR (either through headers or linking), then the license for BAR cannot affect FOO. Again, IANAL, so obviously you should consult an actual intellectual property lawyer (maybe the FSF has a list/could point you to one knowledgeable about the GPL) before making any business decisions.

Originally posted by Eric Perko with karma: 8406 on 2011-12-12
This answer was ACCEPTED on the original site
Post score: 6

Original comments
Comment by raahlb on 2011-12-13:
Well, there is the case Dimitri mentions in his updated post. If you split a program in two and use some pipe or socket to communicate, just to get rid of linking some GPL'ed code in one of the parts, you're probably kinda screwed.
Comment by Daniel Stonier on 2011-12-12:
Just a note: if you set --link-as-needed as a global cflag for all your ros compiles (we do this via ros/rosconfig.cmake - compare with rosbuild/rosconfig.cmake), then you don't need to worry about manifests exporting it unnecessarily to packages which don't actually make any api calls.

