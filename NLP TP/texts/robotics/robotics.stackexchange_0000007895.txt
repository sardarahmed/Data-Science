Q:

IRobot Create 2: Powering Up after Sleep

I've notice the IRobot Create 2 does not respond to the app's commands when it has been sleeping.  If I press the Clean button and re-run the app then the robot is responsive to the commands.
My initialization sequence (Android/Java) using usb-serial-for-android:
port.open(connection);
port.setParameters(115200, 8, UsbSerialPort.STOPBITS_1,UsbSerialPort.PARITY_NONE);
command(Opcode.START);
command(Opcode.SAFE);

The physical architecture is IRobot Create 2 connected by IRobot Serial Cable to Google Project Tango Tablet.
How can my app wake up the Roomba from it's sleep?

A:

Roomba goes to sleep to save power after five minutes of inactivity, as detailed in the OI spec (Aug. 10, 2015) on page 6, under "Passive Mode." The documentation is not in error where you have quoted it, as Roomba powers on with the OI off (and not in passive, safe, or full). If you want your robot to never fall asleep, put it into FULL. If you want the robot to wake up, instead, simply pulse the BRC pin before communicating, as detailed in the same passage as mentioned above. If you are using a USB to Create cable, one easy way to do this would be to open your serial port with hardware flow control, as the Roomba's BRC is attached to RTS on the computer side, and so when characters are Ready To Send, the BRC will be pulsed. It appears that at least some of the official Create to USB cables do not properly implement this functionality, but making the cable following the directions on the site does work. The second version of the Create cable, which has a 0.1" header along with a USB A connector in its overmold, has this error corrected. Please note that I am an iRobot employee, but the postings on this site are my own and don't necessarily represent iRobot's positions, strategies, or opinions.

A:

I have been testing Steve’s answer using the Create cable and Python and have ran into some difficulties.
Enabling hardware flow control when opening the serial port results in nothing happening when sending/receiving data from the Create 2.  Page 4 of the guide says “Flow control: None”.  While I have never used hardware flow control, I suspect the Create 2 is not properly handling the handshake so data is not flowing properly.
When enabling hardware flow control did not work at the time of opening the connection, I attempted to make use of the setRTS method.  (Research into this method and setDTR indicate both are implemented in PySerial.)
I tried the following to see if it would wake the Create 2
serial_port.setRTS(True)
time.sleep(1)
serial_port.setRTS(False)
time.sleep(1)
serial_port.setRTS(True)

where the sleep argument of 1 is in seconds.  I also tried the above with the following changes
toggling False, True, then False
setting the sleep period to .5
In addition, I tried all the above with setDTR().  None of the above worked to wake the Create 2.
Next I tried to something simpler – trying to keep the Create 2 from falling asleep.  Based on page 6
“To disable sleep, pulse the BRC pin low periodically before these five minutes expire. Each pulse resets this five minute counter. (One example that would not cause the baud rate to inadvertently change is to pulse the pin low for one second, every minute, but there are other periods and duty cycles that would work, as well.)”
With the Create 2 in Passive mode I tried the following 
while True:
    time.sleep(60)
    serial_port.setRTS(True)
    time.sleep(1)
    serial_port.setRTS(False)
    time.sleep(1)
    serial_port.setRTS(True)

This had no effect.  I then tried all the permutations as above when trying to wake the Create 2, but none of these had any effect.  I did find a pdf guide detailing how to make your own Create cable that indicates the BRC line should be connected to the RTS on the computer side, but it does not seem to work.

A:

Steve is right: orange and green wires are swapped in the official Create cable. If you swap the two wires the robot will wake up as soon as BRC is brought to zero. 

