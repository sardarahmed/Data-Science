Q:

xacro macros model not showing up in rviz(noetic)

hi,
I am trying to visualize xacro macros model on rviz which works fine in gazebo but i have few issues while visualizing it in rviz.
in gazebo i am able to visualize the links, collision and inertia are properly configured but when i launch rviz i get this warning
    Unable to parse component [${base_length}] to a double (while parsing a vector value)
    [ERROR] [1623216223.772835121, 69.582000000]: Could not parse visual element for Link [base_link]

i tried rosparam load <myxacro.urdf.xacro> robot_description
and the same error. i followed the solution in this thread but no luck.
and i also get robotmodel error.
    Parameter [robot_description] does not exist, and was not found by searchParam()

i tried running export LC_NUMERIC="en_US.UTF-8" before rviz but does not solve it.
my xacro files
inertials.xacro
<?xml version="1.0" ?>
<!--  xacro macros for inertials.

    Define xacro macros for math constants and inertials:
    
    - solid cuboid
    - solid cylinder
    - null (a placeholder inertial for logical link elements)
 -->
<robot name="inertials" xmlns:xacro="http://wiki.ros.org/xacro">

    <!-- Math constants -->
    <xacro:property name="math_pi"        value="3.141592653589793" />
    <xacro:property name="math_pi_over_2" value="1.5707963267948966" />
    <xacro:property name="math_pi_over_4" value="0.785398163397448" />

    <!-- Inertial for solid cuboid with dimensions x y z  -->
    <xacro:macro name="solid_cuboid_inertial" params="rpy xyz mass x y z">
        <inertial>
            <origin rpy="${rpy}" xyz="${xyz}"/>
            <mass value="${mass}" />
            <inertia
                ixx="${mass * (y * y + z * z) / 12.0}" ixy="0.0" ixz="0.0"
                iyy="${mass * (x * x + z * z) / 12.0}" iyz="0.0"
                izz="${mass * (x * x + y * y) / 12.0}" />
        </inertial>
    </xacro:macro>
    <solid_cuboid_inertial/>

    <!-- Inertial for solid cylinder with radius and length aligned to z-axis  -->
    <xacro:macro name="solid_cylinder_inertial" params="rpy xyz mass radius length">
        <inertial>
            <origin rpy="${rpy}" xyz="${xyz}"/>
            <mass value="${mass}" />
            <inertia
                ixx="${mass * (3.0 * radius * radius + length * length) / 12.0}" ixy="0.0" ixz="0.0"
                iyy="${mass * (3.0 * radius * radius + length * length) / 12.0}" iyz="0.0"
                izz="${mass * (radius * radius) / 2.0}" />
        </inertial>
    </xacro:macro>
    <solid_cylinder_inertial/>

    <!-- A null inertial - used in placeholder links to esure the model will work in Gazebo -->
    <xacro:macro name="null_inertial">
        <inertial>
            <mass value="0.001"/>
            <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001"/>
        </inertial>
    </xacro:macro>
    <null_inertial/>

</robot>

materials.xacro
<?xml version="1.0" ?>
<!--  xacro macros for robot materials.
 -->
<robot name="materials" xmlns:xacro="http://wiki.ros.org/xacro">
   <material name="red">
        <color rgba="0.8 0 0 1"/>
    </material>

    <material name="green">
        <color rgba="0 0.8 0 1"/>
    </material>

    <material name="blue">
        <color rgba="0 0 0.8 1"/>
    </material>
    
    <material name="orange">
        <color rgba="0.8 0.25 0 1"/>
    </material>

wheel.xacro
<?xml version="1.0"?>
<!-- 
  Robot model adapted from https://github.com/CIR-KIT/steer_drive_ros/blob/kinetic-devel/steer_drive_controller/test/common/urdf/wheel.xacro

  Modifications:
    <transmissions> elements have been updated and added to 'front_steer'.
    Update inertials.
    Remove dependency on externally defined parameters.
-->
<robot name="wheel" xmlns:xacro="http://wiki.ros.org/xacro">
  <!-- Include xacro for materials and inertials -->
  <xacro:include filename="$(find steer_bot_description)/urdf/materials.xacro"/>
  <xacro:include filename="$(find steer_bot_description)/urdf/inertials.xacro"/>

  <!-- Properties -->
  <xacro:property name="steer_effort" value="10.0"/>
  <xacro:property name="steer_velocity" value="5.0"/>
  <xacro:property name="steer_limit_deg" value="45.0"/>

  <!-- Bicycle model front steering link (required for steer_drive_controller) -->
  <xacro:macro name="front_steer"
    params="
      name
      parent
      steer_radius
      steer_thickness
      steer_mass
      base_length
      base_width
      axle_offset
      steer_height">
    <link name="${name}_steer_link">
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <cylinder radius="${steer_radius}" length="${steer_thickness}"/>
        </geometry>
        <material name="yellow" />
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <cylinder radius="${steer_radius}" length="${steer_thickness}"/>
        </geometry>
      </collision>
      <xacro:solid_cylinder_inertial 
          rpy="0 0 0" xyz="0 0 0"
          mass="${steer_mass}"
          radius="${steer_radius}" length="${steer_thickness}" />
    </link>

    <joint name="${name}_steer_joint" type="revolute">
      <parent link="${parent}_link"/>
      <child link="${name}_steer_link"/>
      <origin xyz="${base_length/2-axle_offset} 0 ${steer_height}" rpy="0 0 0"/>
      <axis xyz="0 0 1"/>
      <limit effort="${steer_effort}"
             lower="${-180.0 * deg_to_rad}" upper="${180.0 * deg_to_rad}"
             velocity="${steer_velocity}"/>
    </joint>

    <transmission name="${name}_steer_joint_trans">
      <type>transmission_interface/SimpleTransmission</type>
      <actuator name="${name}_steer_joint_motor">
        <mechanicalReduction>1</mechanicalReduction>
        <hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
      </actuator>
      <joint name="${name}_steer_joint">
        <hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
      </joint>
    </transmission>

    <gazebo reference="${name}_steer_link">
      <material>Gazebo/Yellow</material>
    </gazebo>
  </xacro:macro>

  

 <!-- Bicycle model rear wheel link (required for steer_drive_controller) -->
  <xacro:macro name="rear_wheel"
params="
  name
  parent
  wheel_radius
  wheel_thickness
  wheel_mass
  *origin">
<link name="${name}_wheel_link">
  <visual>
    <origin xyz="0 0 0" rpy="0 0 0"/>
    <geometry>
      <cylinder radius="${wheel_radius}" length="${wheel_thickness}"/>
    </geometry>
    <material name="yellow" />
  </visual>
  <collision>
    <origin xyz="0 0 0" rpy="0 0 0"/>
    <geometry>
      <cylinder radius="${wheel_radius}" length="${wheel_thickness}"/>
    </geometry>
  </collision>
  <xacro:solid_cylinder_inertial 
      rpy="0 0 0" xyz="0 0 0"
      mass="${wheel_mass}"
      radius="${wheel_radius}" length="${wheel_thickness}" />
</link>
    <joint name="${name}_wheel_joint" type="continuous">
      <parent link="${parent}_link"/>
      <child link="${name}_wheel_link"/>
      <xacro:insert_block name="origin"/>
      <axis xyz="0 0 1"/>
    </joint>

    <transmission name="${name}_wheel_joint_trans">
      <type>transmission_interface/SimpleTransmission</type>
      <actuator name="${name}_wheel_joint_motor">
        <mechanicalReduction>1</mechanicalReduction>
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
      </actuator>
      <joint name="${name}_wheel_joint">
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
      </joint>
    </transmission>

    <gazebo reference="${name}_wheel_link">
      <material>Gazebo/Yellow</material>
    </gazebo>
  </xacro:macro>

  <!-- Bicycle model front wheel link (passive - no transmission) -->
  <xacro:macro name="front_wheel"
    params="
      name
      parent
      wheel_radius
      wheel_thickness
      wheel_mass
      *origin">
    <link name="${name}_wheel_link">
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_thickness}"/>
        </geometry>
        <material name="yellow" />
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_thickness}"/>
        </geometry>

    </collision>
      <xacro:solid_cylinder_inertial 
          rpy="0 0 0" xyz="0 0 0"
          mass="${wheel_mass}"
          radius="${wheel_radius}" length="${wheel_thickness}" />
    </link>

    <joint name="${name}_wheel_joint" type="continuous">
      <parent link="${parent}_link"/>
      <child link="${name}_wheel_link"/>
      <xacro:insert_block name="origin"/>
      <axis xyz="0 0 1"/>
    </joint>

    <gazebo reference="${name}_wheel_link">
      <material>Gazebo/Yellow</material>
    </gazebo>

    <gazebo reference="${name}_wheel_joint">
      <provideFeedback>true</provideFeedback>
    </gazebo>
  </xacro:macro>
</robot>

bicycle_bot.urdf.xacro
<?xml version="1.0"?>
<!--
  Robot model adapted from https://github.com/CIR-KIT/steer_drive_ros/blob/kinetic-devel/steer_drive_controller/test/common/urdf/steerbot.xacro

  Modifications:
    Remove base_footprint link. Useful for navigation but not necessary for a simple example.
    Added materials for URDF
    Updated inertials

  Geometry:
    The Ackermann steering controllers require the longitudinal
    separation between the front and back wheel axes and the
    lateral separation between the left and right front steering axes.
    
    For this model:
    wheel_separation_h = base_length - 2 * axle_offset = 0.4
    wheel_separation_w = base_width  + 2 * axle_offset = 0.4
-->
<robot name="bicycle_bot" xmlns:xacro="http://wiki.ros.org/xacro">
  <!-- Include xacro for inertials, materials and wheels -->
  <xacro:include filename="$(find steer_bot_description)/urdf/wheel.xacro"/>

  <xacro:property name="robot_namespace" value="/bicycle_bot"/>

  <!-- Gazebo plugins -->
  <gazebo>

    <!-- Load ros_control plugin -->
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
      <robotNamespace>${robot_namespace}</robotNamespace>
      <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType>
      <legacyModeNS>false</legacyModeNS>
    </plugin> 

    <!-- Load gazebo_ros plugin. Publish passive (non-actuated) joints from Gazebo -->
    <plugin name="gazebo_ros_joint_state_publisher" filename="libgazebo_ros_joint_state_publisher.so">
        <robotNamespace>${robot_namespace}</robotNamespace>
        <jointName>
            front_wheel_joint
        </jointName>
        <updateRate>50</updateRate>
        <alwaysOn>true</alwaysOn>
    </plugin>
  </gazebo>

  <!-- Math constants -->
  <xacro:property name="deg_to_rad" value="0.01745329251994329577"/>

  <!-- Robot base dimensions -->
  <xacro:property name="base_length" value="0.5" /> 
  <xacro:property name="base_width" value="0.12" /> 
  <xacro:property name="base_height" value="0.1" /> 
  <xacro:property name="base_mass" value="5" /> 

  <!-- Wheel link dimensions -->
  <xacro:property name="wheel_radius" value="0.1" />
  <xacro:property name="wheel_thickness" value="0.1" />
  <xacro:property name="wheel_mass" value="1" />

  <!-- Steering link dimensions -->
  <xacro:property name="steer_radius" value="0.05" />
  <xacro:property name="steer_thickness" value="0.02" />

  <xacro:property name="steer_mass" value="1" />

  <!-- Axle positions -->
  <xacro:property name="axle_offset" value="0.05" />
  <xacro:property name="steer_offset" value="0.02" />

  <!-- Base link -->
  <link name="base_link">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
      <material name="green" />
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
    </collision>
    <xacro:solid_cuboid_inertial 
        rpy="0 0 0" xyz="0 0 0"
        mass="${base_mass}"
        x="${base_length}" y="${base_width}" z="${base_height}" />
  </link>

  <!-- Front steer and rear wheel joints required for ackermann_steering_controller -->
  <xacro:front_steer
    name="front"
    parent="base"
    steer_radius="${steer_radius}"
    steer_thickness="${steer_thickness}" 
    steer_mass="${steer_mass}" 
    base_length="${base_length}"
    base_width="${base_width}"
    axle_offset="${axle_offset}"
    steer_height="${wheel_radius+steer_offset}">
  </xacro:front_steer>

  <xacro:front_wheel
    name="front"
    parent="front_steer"
    wheel_radius="${wheel_radius}"
    wheel_thickness="${wheel_thickness}"
    wheel_mass="${wheel_mass}">
    <origin xyz="0 0 ${-wheel_radius-steer_offset}" rpy="${-90 * deg_to_rad} 0 0"/>
  </xacro:front_wheel>

  <xacro:rear_wheel
    name="rear"
    parent="base"
    wheel_radius="${wheel_radius}"
    wheel_thickness="${wheel_thickness}"
    wheel_mass="${wheel_mass}">
    <origin xyz="${-base_length/2+axle_offset} 0 0" rpy="${-90 * deg_to_rad} 0 0"/>
  </xacro:rear_wheel>

  <!-- Colour -->
  <gazebo reference="base_link">
    <material>Gazebo/Green</material>
  </gazebo>

</robot>        

launch file:
<?xml version="1.0"?>
<launch>

    <arg name="model" default="$(find steer_bot_description)/urdf/bicycle_bot.urdf.xacro"/>
    <arg name="namespace" default="/bicycle_bot" />
    <arg name="world_name" default="worlds/empty_world" />
    <arg name="cmd_timeout" default="0.5"/>
    <arg name="x" default="0.0"/>
    <arg name="y" default="0.0"/>
    <arg name="z" default="1.0" />
    <arg name="roll" default="0.0"/>
    <arg name="pitch" default="0.0"/>
    <arg name="yaw" default="0.0"/>

    <group ns="$(arg namespace)">

        <!-- Gazebo  -->
        <include file="$(find gazebo_ros)/launch/empty_world.launch">
            <arg name="world_name" default="$(arg world_name)"/>
        </include>

        <!-- Load the robot description -->
        <param name="robot_description" command="$(find xacro)/xacro --inorder $(arg model)"/>

        <!-- Load ros_control controller configuration parameters -->
        <rosparam file="$(find steer_bot_control)/config/ctrl_ackermann_steering_controller.yaml" command="load" ns="$(arg namespace)" />
        <rosparam file="$(find steer_bot_control)/config/ctrl_joint_state_publisher.yaml" command="load" ns="$(arg namespace)" />

        <!-- Spawn the controllers -->
        <node pkg="controller_manager" type="spawner" name="controller_spawner" ns="$(arg namespace)"
            args="joint_state_publisher ackermann_steering_controller"
            output="screen" respawn="false" />

        <!-- Launch  the robot state publisher -->
        <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" >
            <param name="publish_frequency" value="50.0"/>
        </node>

        <!-- Launch a rqt steering GUI for publishing to /steer_bot/ackermann_steering_controller/cmd_vel -->
        <node pkg="rqt_robot_steering" type="rqt_robot_steering" name="rqt_robot_steering" >
            <param name="default_topic" value="$(arg namespace)/ackermann_steering_controller/cmd_vel"/>
        </node>

        <!-- Spawn robot in Gazebo -->
        <node name="spawn_vehicle" pkg="gazebo_ros" type="spawn_model"
            args="-urdf
                -param robot_description
                -model bicycle_bot
                -gazebo_namespace /$(arg namespace)/gazebo
                -x $(arg x) -y $(arg y) -z $(arg z)
                -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)"
            respawn="false" output="screen" />

    </group>
   </launch>

here is what i see on gazebo vs rviz.
to reproduce the same issue on noetic, repo for it is here

Originally posted by siddharthcb on ROS Answers with karma: 100 on 2021-06-09
Post score: 0

A:

EDIT: After playing a bit with the git repo, I am pretty sure you just need to change the Robot Description topic source in rviz. Solution to this is bolded in answer below.
A couple of quick things I noticed:
You should not have inertial components on your base link. Instead make a dummy base link and a static joint. Replace your base_link definition with this:
<!-- Required Base Link -->
<link name="base_link"/>

<!-- Body link -->
<link name="body_link">
  <visual>
    <origin xyz="0 0 0" rpy="0 0 0"/>
    <geometry>
      <box size="${base_length} ${base_width} ${base_height}"/>
    </geometry>
    <material name="green" />
  </visual>
  <collision>
    <origin xyz="0 0 0" rpy="0 0 0"/>
    <geometry>
      <box size="${base_length} ${base_width} ${base_height}"/>
    </geometry>
  </collision>
  <xacro:solid_cuboid_inertial 
      rpy="0 0 0" xyz="0 0 0"
      mass="${base_mass}"
      x="${base_length}" y="${base_width}" z="${base_height}" />
</link>

<!-- A joint to connect the body to the base_link -->
<joint name="body_joint" type="fixed">
  <origin xyz="0 0 0" rpy="0 0 0" />
  <parent link="base_link"/>
  <child link="body_link"/>
</joint>

You won't be able to pass just the xacro to rosparam using rosparam load <myxacro.urdf.xacro> robot_description because a xacro file is not a valid robot description. It needs to be processed into a urdf (which is what your launchfile is doing with <param name="robot_description" command="$(find xacro)/xacro --inorder $(arg model)"/>
Speaking of that command, you can remove the --inorder flag as that has been the default for a couple distributions now.
Your materials.xacro is missing an end tag for </robot> (at least in this posting, maybe not in your actual code)
In RVIZ, your robot description topic is no longer just robot_description because you are grouping into a namespace in your launchfile. Try replacing that with the full param path /bicycle_bot/robot_description
If you are still running into errors, please run a rosrun xacro xacro path/to/bicycle_bot.urdf.xacro and make sure the robot description is generated without errors (it will print the resulting urdf to screen).
Hope this helps!

Originally posted by djchopp with karma: 328 on 2021-06-09
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by siddharthcb on 2021-06-10:
thanks @djchopp. it worked. i did not have to add an extra dummy link though.

