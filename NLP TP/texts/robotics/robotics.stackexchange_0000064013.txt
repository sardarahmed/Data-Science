Q:

how to subscribe disparity image?

I have started working with stereo camera. I have the disparity image on the /stereo/disparity topic. Now I want to subcribe that stereo_msgs/DisparityImage form the /stereo/disparity topic. For subscribing this is
image_transport::ImageTransport it(nh);
image_transport::Subscriber sub = it.subscribe("/stereo/disparity", 1, imageCallback);
enough? Or do i have to use some other transport for disparity image. .

Originally posted by Robot on ROS Answers with karma: 180 on 2014-11-13
Post score: 0

A:

I am not sure image_transport can handle stereo_msgs/DisparityImage, probably it can. In such case just make sure that imageCallback has the following signature:
void imageCallback(const stereo_msgs::DisparityImage& msg);

If that doesn't work, this will work for sure:
#include <ros/ros.h>
#include <stereo_msgs/DisparityImage.h>

void disparityImageCallback(const stereo_msgs::DisparityImage& msg)
{
    //Do cool stuff here
}

....

int main (int argc, char **argv)
{
  ...
  ros::NodeHandle nh;
  ros::Subscriber sub = nh.subscribe("/stereo/disparity", 1, disparityImageCallback);

  ...
}

Originally posted by Martin Peris with karma: 5625 on 2014-11-13
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by Robot on 2014-11-14:
thank you very much...
it worked..
Comment by Martin Peris on 2014-11-14:
Glad I could help :)
Comment by Robot on 2014-11-14:
well now i am stuck with the image encodings and step size.. do ypu have any idea about the format of the disparity image.. thanks in advance
Comment by Martin Peris on 2014-11-16:
Well, inside the DisparityImage structure there is a field called image with all the information you need. The field image contains a string called enconding and a uint32 step so you can figure out how to interpret the raw data
Comment by Robot on 2014-11-17:
Thanks again.. the step field is visible but if I try to print the encoding it is showing an error..
error: cannot pass objects of non-trivially-copyable type ‘sensor_msgs::Image_std::allocator<void >::_encoding_type {aka struct std::basic_string}’ through ‘...’
Comment by Martin Peris on 2014-11-17:
Remember that encoding is a message of type string and therefore to access the actual string of characters you need to reference it as encoding.data
Comment by CesarHoyosM on 2017-06-28:
Hello there,
Thanks for this answer. I know its have been a while, but, I am not sure how to handle the msg object in disparityImageCallback. I am trying to get the image as msg->image but is not working...
Comment by Martin Peris on 2017-07-06:
Since disparityImageCallback receives a reference to a stereo_msgs/DisparityImage, msg.image should be the way to go

