Q:

Using SDF instead of URDF with Robot State Publisher

With URDF models, you can use robot_state_publisher to have the joints published in tf. Since this needs the <robot> tag, it does not work with SDF models. If you try to roslaunch for a SDF it would say
Could not find the 'robot' element in the xml file

Everything else works fine in gazebo but the state publisher dies
Is there any way I can use robot state publisher with SDF? Maybe include URDF into the SDF? Or specify the <robot> tag in it somehow?

TL;DR:
I have found many other questions related to this question but none had a positive answer and most of them are more than 5 years old. However,

This answer suggests that you can do anything with SDF that is possible in URDF.
This question has an answer suggesting an alternative by having both URDF and SDF but it's an ugly solution
There's this old unanswered question as well

I want to created a 6 wheeled robot model with two wheels having shock absorbers (prismatic joints with damping and spring actions). To my understanding, this cannot be done using URDF

Originally posted by teshansj on ROS Answers with karma: 168 on 2020-07-13
Post score: 2

A:

Hi @teshansj,
The main question here is why you want to use the native Gazebo description format with ROS utilities. Looking at the robot_state_publisher implementation you can see that it uses a KDL tree to parse only URDFs, that are the standard robot description format used in ROS, since RST is a ROS application you cannot expect it can parse other than the standard formats.
The second question is if there is a real need for using a SDF since ROS already support a direct translation between: Xacro -> URDF -> SDF to be able to spawn models on Gazebo worlds. So from here we reach this point in your question:
I want to created a 6 wheeled robot model with two wheels having shock absorbers (prismatic joints with damping and spring actions). To my understanding, this cannot be done using URDF
An that is actually not true, since you can create 4 normal wheels and another 2 with a shock absorber joint, I know this because I was able to implement that in a Gazebo Car model. The most important thing here is that while you cannot use URDF things in SDF files, you can use SDF tags in URDF files. And that is done with the  tag.
So if you really want to generate a shock absrober joint you can use in a URDF the  tag with the reference name as your joint name and provide the proper dynamic parameters.
This will look like:
For the joint
<joint name="shock" type="prismatic">
  <parent link=parent"/>
  <child link="child"/>
  <origin xyz="x y z" rpy="r p y" />
  <axis xyz="x y z"/>
  <limit lower="low" upper="upp" effort="eff" velocity="vel"/>
  <dynamics damping="damp" friction="fric"/>
</joint>

and for the SDF
<gazebo reference="shock">
  <implicitSpringDamper>true</implicitSpringDamper>
  <springStiffness>[stiffness]</springStiffness>
  <springReference>[reference]</springReference>
</gazebo>

That should fill the SDF  tag to generate a good shock absorber joint.
With that you willl have your URDF and no problems when using RSP. Apart from that I recommend you Xacro instead of URDF.
Hope it helps.
Regards.

Originally posted by Weasfas with karma: 1695 on 2020-07-14
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by teshansj on 2020-07-14:
After posting this question I actually got it to work using gazebo tags. I wasn't aware of the <gazebo> tag at the time of posting the question. Anyway I'm going to let the question be as it is since your answer might help others as well.
Comment by LR on 2020-10-10:
if I want to use the gearbox joint of sdf file,but there is not the gearbox joint in urdf file,and what I should do by using  tag?
Comment by Weasfas on 2020-10-12:
@LR, This a different question from the original post, hence, following community rules you may want to write your question in a different post. However, since this I think has a fast solution you can try with the <gazebo> tag like:
<gazebo>
  <joint name="joint_gearbox" type="gearbox">
    <parent>parent_link</parent>
    <child>child_link</child>
    <gearbox_reference_body>${name}_base_link</gearbox_reference_body>
    <gearbox_ratio>1</gearbox_ratio>
    <axis>
      <xyz>0 1 0</xyz>
    </axis>

    <axis2>
      <xyz>0 1 0</xyz>
    </axis2>
  </joint>
</gazebo>

Comment by LR on 2020-10-12:
what is the reference frame of the  in  and ?I have set the revolute joint between parent_link/child_link and ${name}_base_link,so the reference frame of  is parent_link/child_link frame?and thanks for you advices.
Comment by Weasfas on 2020-10-12:
@LR You can check everything about this is the SDF format specification here. But to answer your question, extracted from the manual:

axis: Parameters related to the axis of rotation for revolute joints, the axis of translation for prismatic joints.
axis2: Parameters related to the second axis of rotation for revolute2 joints and universal joints.

Basically axis is the input axis (relative to child) and axis2 is output axis (relative to child). You can also check the joint_demo from gazebo here to know more about this.

