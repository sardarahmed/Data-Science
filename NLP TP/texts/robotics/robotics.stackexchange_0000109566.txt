Q:

Does a shorter tf2 buffer lead to faster lookup times?

I'm curious if/how much a shorter tf2 buffer length improves performance. Does it increase the tf lookup speed? How much does it decrease the memory footprint of the program?
This is an optional constructor argument of tf2_ros::Buffer.
Buffer (ros::Duration cache_time=ros::Duration(BufferCore::DEFAULT_CACHE_TIME), bool debug=false)

A:

In most applications the length of the tf2 Buffer cache timeout will not effect the lookup speed. From testing the best performance was shown to come from searching a vector starting at the latest data and iterating backwards in time. So in general the length of the list doesn't effect lookup times because you never iterate there. What does is how frequent the data arrives and how far back into the history you want to look.
If you were to shorten the cache timeout, you would reduce the length of the lookup at the cost of incurring LookupExceptions. The one case that would be slower would be failed lookups that have to iterate the whole cache. A shortcut could be added to check if the end of the cache is beyond the query window and skip the iteration through every element.
The main result of increasing the cache timeout is increasing the memory usage. The memory usage will be proportional to the frequency with which data is being published times the length of the cache timeout.
For long term queries far into the past the storage format is sub optimal, I would recommend using an alternative storage mechanism built for that case. The buffer lookup is optimized for dealing with the inherent latencies in distributed system. It generally doesn't need much adjustment. Performance would decrease with much higher transformation publish frequency and that is somewhat naturally limited by available network bandwidth for the publishing too.

