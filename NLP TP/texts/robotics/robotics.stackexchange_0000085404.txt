Q:

Long initialization in nodelet

On page http://wiki.ros.org/nodelet#Threading_Model the following is written:

1.6.1 onInit

This method is called on init and should not block or do significant work.

If the nodelet initialization process takes longer (e.g. reading data from database and process it etc.) what is the best practice to execute the long initialization process without blocking the onInit() call? One possible solution is to create a worker thread in the onInit() method which does the long initialization without blocking the call but I am wondering is there any "ROS pattern" to do this job?

Originally posted by Tibor Takacs on ROS Answers with karma: 13 on 2018-02-19
Post score: 1

A:

onInit() is called on the nodelet manager's callback thread, so it will block all other nodelets if you are using a single-threaded nodelet manager.
If you need to do a long-running initialization you could use a separate loader thread, or if you have C++11 you could use some of the async or futures primitives that were introduced in C++11.

Originally posted by ahendrix with karma: 47576 on 2018-02-19
This answer was ACCEPTED on the original site
Post score: 1

