Q:

ros_canopen dcf_overlay setting

Hi,
I'm using ros_canopen to control my robot.
The joint_position_controller works but I get stuck with joint_trajectory_controller.
I set PDO mapping through dcf_overlay :
dcf_overlay:
    "1600sub0": "2"
    "1600sub1": "0x60400010" # map Control Word to RPDO1
    "1600sub2": "0x60c10120" # map 60c1sub2(position for PVT mode) to RPDO1
    "1601sub0": "2"
    "1601sub1": "0x60400010" # map Control Word to RPDO2
    "1601sub2": "0x60600008" # map 0x6060(mode of operation) to RPDO2
    "60c0": "0x0000" # map Interpolation submode 0:Linear interpolation with constant time

The candump message confused me because:
$ candump can0 -dcex |grep 201 # candump RPDO1
   can0  TX - -  201   [6]  04 00 AA 32 00 00
$ candump can0 -dcex |grep 301 # candump RPDO2
   can0  TX - -  301   [3]  1F 01 07 # halt the drive?
   can0  TX - -  301   [3]  1F 00 07
   can0  TX - -  301   [3]  1F 01 07  # halt the drive?
   can0  TX - -  301   [3]  1F 00 07
   ...

1.How come the first two bytes of the RPDO1 message differ with that of RPDO2 since they both are mapped to control word?
2.$ candump can0 -dcex |grep 201 showed that the position data were successfully sent to CAN bus. But the robot didn't move. Control word 1F 01 seems to be halting the drive and indicates the operation mode is profile position mode(see Copley Manual P58). Is it a problem?
Thank you in advance.

Originally posted by Craig on ROS Answers with karma: 78 on 2016-12-30
Post score: 1

A:

Mapping an object to multiple PDOs is not supported (https://github.com/ros-industrial/ros_canopen/issues/183).
Each object can only be mapped once, not even twice within the same PDO.

Originally posted by Mathias L端dtke with karma: 1596 on 2016-12-30
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by Craig on 2016-12-30:
Thank you. Now I've changed the PDO mappings(github.com/Linkeway/BIRL_modular_robot/blob/master/birl_module_canopen/config/manipulator5d_motors.yaml).abort60c1#1, reason: Invalid value for parameter (download only) showed up during initialization. I set DefaultValue for 60c1#1 in dcf. No luck.
Comment by Craig on 2016-12-30:
candump showed
can0  TX - -  601   [8]  23 C1 60 01 00 00 00 00
can0  RX - -  581   [8]  80 C1 60 01 30 00 09 06

Comment by Mathias L端dtke on 2016-12-30:
Looks like your PDO mapping was not applied correctly.
Please fix  doubled object in https://github.com/Linkeway/BIRL_modular_robot/blob/master/birl_module_canopen/config/manipulator5d_motors.yaml#L28
And all other doubled configs.
Comment by Mathias L端dtke on 2016-12-30:
In addition your DCF is wrong: https://github.com/Linkeway/BIRL_modular_robot/blob/master/birl_module_canopen/config/birl_copley.dcf#L31
It even misses the 140x entries.
Please use CANeds
And: using the Schunk DCF as a template might be error prone, too!
Comment by Craig on 2016-12-31:
You are right. I used the Schunk DCF because the Copley eds was faulty. I use a modified Copley eds now, and initialization produces:
[ERROR]:canopen_master/src/pdo.cpp(372): Throw in function void canopen::PDOMapper::Buffer::write(const canopen::ObjectDict::Entry&, const canopen::String&)

Comment by Craig on 2016-12-31:
Dynamic exception type:      boost::exception_detail::clone_implboost::exception_detail::error_info_injector<std::bad_cast >
std::exception::what: std::bad_cast
[canopen::tag_objectdict_key*] = 60c1sub1
Comment by Mathias L端dtke on 2016-12-31:
Your DCF contains a wrong object type for 60c1, please use CANeds to validate your DCF against 301 and 402 standard and fix all warnings.
Update: The object type should work as well, not sure why you get the size mismatch..

