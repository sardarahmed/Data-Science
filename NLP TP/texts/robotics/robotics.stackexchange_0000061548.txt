Q:

Bad maps produced by gmapping in simulation with feature-poor environments

I've found that in relatively feature-poor environments, e.g. a large rectangular room, the maps produced by gmapping can be very wrong. This is using a Turtlebot simulated in Gazebo, I'm not sure how transferrable this issue is. Also when using the environment from the tutorial  gmapping works fine, so I suspect it's the lack of features causing the problem.
The symptoms are that the robots position jumps suddenly by up to ~1.5m, and walls it maps from then on are offset correspondingly.
I've tracked down the cause of this to "scan matching" in the OpenSLAM Gmapping code - particle locations are updated in two cases, first when applying the motion model, and second when each particle is 'jiggled' by the scan matcher to better fit the scan data. The fix for this is to change the minimumScore gmapping parameter to a large value:
<param name="minimumScore" value="10000"/>

by editing / copying gmapping.launch.xml. This turns gmapping into a pure mapping rather than a SLAM algorithm. However, the odometry provided by Gazebo seems pretty good, and not the cause of the problem (as some people seem to have suspected previously, e.g. http://answers.ros.org/question/12919/map-and-odom-after-mapping-the-environment/).
You can also set the motion model noise to zero, and reduce the number of particles to 1:
<param name="srr" value="0.0"/>
<param name="srt" value="0.0"/>
<param name="str" value="0.0"/>
<param name="stt" value="0.0"/>
<param name="particles" value="1"/>

which means the algorithm assumes the odometry is perfect. I think there might be some benefit in leaving these parameters as the default, to allow some corrections as the Gazebo odometry drifts, but I'm not completely sure.

Originally posted by zsaigol on ROS Answers with karma: 225 on 2014-08-06
Post score: 13

Original comments
Comment by jorge on 2014-08-06:
This is the first time I hear about the minimumScore parameter. I have added to the gmapping documentation. It can be a very interesting tweak for some people reporting robot "jumps" while mapping, specially because the default values is 0!.
Comment by bvbdort on 2014-08-06:
If Odometry is perfect, no need scanmatching. Scan matching is to correct pose of the robot.  Reasons for fail may be your robot is moving with hight veloctiy. Try by increasing number of particle. Please share map you build so far.
Comment by zsaigol on 2014-08-06:
@jorge - I mostly just meant this post to help people out. Regarding the motion model noise, the first question (which I don't need answering) is:

Why doesn't Gazebo produce perfect odometry? - I can see that it makes sense most of the time to simulate the real robot as faithfully as possible.

Comment by zsaigol on 2014-08-06:
@jorge - the second question I'm not 100% sure of is:
2) Does keeping noise non-zero in the gmapping parameters mean we get a more accurate localisation even when the scan-matcher is effectively disabled?
Yes, i.e. gmapping still chooses the best particle.
Comment by zsaigol on 2014-08-06:
@bvbdort - I'm happy that disabling the scan matching fixes the problem, thanks anyway.
Comment by drtritm on 2020-05-26:
@zsaigol hello, could you tell me how to disable the scan matching? thanks in advance
Comment by Zuhair95 on 2022-08-15:
Thanks for the information.
Please, can you suggest for me how to select the correct Gmapping odometry model noise (srr, srt, str, stt) ?
Is it correct to calculate the RMSE between /cmd_vel/linear/x and /odom/twist/twsit/linear/x for translation and RMSE between /cmd_vel/angular/z and /odom/twist/twist/angular/z for rotation ?

A:

Ah, ok. Yes, it's an interesting information what you are providing here. I will try to contribute with this answerm as my previous comment was not very precise, admittedly. There're two different things here:

Gmapping odometry model noise (srr, srt, str, stt) reflects the confidence the slam algorithm can have on odometry readings, and so cannot be zero unless the odometry is perfect, what only can happen on simulation. I supposed that, when gmapping corrects current pose based on scan matching, it should have some kind of "inertia" to keep in the same position, the bigger the more accurate is the odometry, and don't move at all if the odometry is perfect. But I noticed that that's not the case, that even with zero srr, srt, str and stt the robot can jump, and thanks to your question I see now that the reason can be that minimumScore parameter is 0, by default.
Simulated (Gazebo) odometry model noise should not be zero, (except, maybe, for particular experiments) so the simulated robots mimics faithfully enough the robot, with their inaccuracies, so it can serves as test-bench for your algorithms. But as explained in this issue, Kobuki (and so TB2) is perfect on Gazebo, what should be fixed.

mmm... I pretended to write only some lines! ^_^ Sorry for been so verbose.
UPDATE I have tried gmapping demo on gazebo by setting minimumScore to 100 and works notably better, eliminating jumps when there aren't obstacles in the fov; thanks zsaigol!

Originally posted by jorge with karma: 2284 on 2014-08-06
This answer was ACCEPTED on the original site
Post score: 6

Original comments
Comment by jihoonl on 2014-08-06:
Thank you for this fruitful information. I have also noticed turtlebot was jumping really often when I SLAM..  Will you make a PR to turtlebot_navigation?
Comment by zsaigol on 2014-08-07:
Thanks for this clarification, jorge. I had thought the TB2 odometry drifted a bit, as I tried comparing 'tf_echo /odom /base_footprint' to the 'mobile_base' pose from topic /gazebo/model_states, but the discrepancy is tiny and may not really be increasing (2 cm after 10 mins).
Comment by stevej_80 on 2016-03-06:
Hi Jorge, we faced an interesting case with gmapping/kobuki. we produce good maps but robot pose keeps teleporting 20-25cm every now & then. we tried everything & it didnt help. Turned off built-in IMU_heading & pose jumps got significantly smaller. ever faced similar problem? firmware is 1.1.4.
Comment by tsdk00 on 2019-07-30:
@zsaigol But what if you want to keep minimumScore to a high value at some point and low at some other point. For example a very long corridor with a turning. In the long corridor, a high minimunScore could be used while at turning a low value. Is it possible to do this switching during the on-going simulation?
Comment by Zuhair95 on 2022-08-15:
Thanks for the information.
Please, can you suggest for me how to select the correct Gmapping odometry model noise (srr, srt, str, stt) ?
Is it correct to calculate the RMSE between /cmd_vel/linear/x and /odom/twist/twsit/linear/x for translation and RMSE between /cmd_vel/angular/z and /odom/twist/twist/angular/z for rotation ?

