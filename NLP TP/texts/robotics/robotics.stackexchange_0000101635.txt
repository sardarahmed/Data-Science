Q:

Is it possible to simulate cntx% of fanuc with ros?

As you may know, fanuc does not provide any insights on the inner work of cnt. I need to simulate exact fanuc robots with their different movement types (specially joint) and with their different options (fine, cntx%). Is it possible with ros ? Did someone tried to reverse engineer the cntx% algorithm of fanuc ?
Thanks.

Originally posted by Lemon on ROS Answers with karma: 3 on 2022-05-03
Post score: 0

A:

No, not to my knowledge.
All ROS integrations I've seen (or worked on) simply use whatever Fanuc provides.
They do not circumvent or replace.
So they are as dependent and 'encumbered' by the CNT-system as regular TP programs.
Additionally, there's nothing specific to Fanuc "in ROS".
I don't believe you can ask "Is it possible to simulate [..] of Fanuc with ROS", as the available simulators are all generic tools.

Originally posted by gvdhoorn with karma: 86574 on 2022-05-03
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by Lemon on 2022-05-04:
Following that, how is it possible to plan collision-free trajectory without simulating cnt ?
Maybe cnt of fanuc is similar to all robots ? It's probably just a b√©zier curve.
Comment by gvdhoorn on 2022-05-04:\

how is it possible to plan collision-free trajectory without simulating cnt ?

By assuming the robot will do a reasonable job of following the trajectory faithfully, and by including padding in the collision checks.
But if you're asking: "how can we know the robot will execute a given trajectory perfectly?", then the answer would be: we can't.
That's the biggest problem with using TP to command motions on Fanucs. It's an unavoidable trade-off between precision and motion smoothness.
But there are other ways to control Fanuc robots which don't suffer from this. J519 being one.
Comment by Lemon on 2022-05-04:
The stream motion option. I will check it out. Thanks for the answers.
Comment by Lemon on 2022-05-04:
Fanuc support said it's replaced by RMI and RMI uses TP .. weird
Comment by gvdhoorn on 2022-05-04:
RMI does not replace J519.
Fanuc just doesn't want to sell you J519.
They then try and tell customers asking for J519 that RMI is "the replacement".
J519 is like ABB EGM and KUKA RSI.
RMI is a drip-feed for TP programs (with all the limitations (and then some) that TP programs have).
J519 is a 125 Hz joint and Cartesian position control, hard real-time external interface over UDP.
RMI is a JSON-over-TCP/IP RPC protocol, which happens to also let you start TP-backed motions.
Those are most definitely not the same things.
Comment by gvdhoorn on 2022-05-04:
Could you please mark the question as answered btw if you feel it has been answered?
Your original question was about "using ROS to simulate Fanuc CNT behaviour", which I believe we addressed.
Your follow-up comments are technically different questions.
Comment by Lemon on 2022-05-04:
oh yeah sorry i'm new here. It's weird that fanuc don't want to sell us the J519.
Comment by gvdhoorn on 2022-05-04:\

It's weird that fanuc don't want to sell us the J519.

That would be something you'd have to take up with them.
You're (most likely) in Europe, and Fanuc EU is very difficult about it.
If you'd have been in the US, there would be much less of a problem.
If this is a research project, you might be able to get it as a trial, but I would be surprised.
Comment by Lemon on 2022-05-04:
Exactly i'm in France. And yes it's an r&d project. We really need this option so we'll see.
Comment by gvdhoorn on 2022-05-04:
R&D sounds like it could be commercial.
It's unlikely Fanuc will be happy about that.
If it's strictly academic, you might have a slim chance.
But again: don't get your hopes up.
Comment by gvdhoorn on 2022-05-04:
Btw: you can get J519 working in Roboguide. So if you have that, you can at least investigate it.
Comment by gvdhoorn on 2022-05-04:
Oh and here are some packages/utils I've made available for J519: fanuc-stream-motion.
It's not a complete driver/interface, as that's not OSS (yet), but the Wireshark dissector is really nice to have when writing your own implementation.

