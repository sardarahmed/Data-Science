Q:

Convert message const ptr to non-const ptr

What is the PROPER way to convert the ConstPtr that I receive in a message callback to a non-const ptr so that I can modify the data? What I want to do is to store a buffer of the messages my node receives and then do some additional manipulation.
I know I can manually allocate a copy the message information and store it locally, but this removes the whole point of using classes and becomes a pain when a class has member data which is another class. The autogenerated messages do not have a specific copy constructor and I could not find any good way of adding one (I don't wanna do it manually in the generated header as it will disappear if I change the message). Using the default C++ copy constructor will get me in trouble as it makes only shallow copies of complex data structures which are part of the member data of the message class and when the shared_ptr count for the message goes to 0 I will get a segfault.

Originally posted by naikin on ROS Answers with karma: 21 on 2017-02-22
Post score: 1

A:

I don't know about converting (as that would seem to violate semantics), but according to wiki/roscpp/Overview - Publishers and Subscribers - Subscribing to a Topic - Callback Signature, non-const callbacks are also fully supported:

You can also request a non-const message, in which case a copy will be made if necessary (i.e. there are multiple subscriptions to the same topic in a single node):

void callback(const boost::shared_ptr<std_msgs::String>&);

void callback(boost::shared_ptr<std_msgs::String>);
void callback(const std_msgs::StringPtr&);
void callback(const std_msgs::String::Ptr&);
void callback(std_msgs::StringPtr);
void callback(std_msgs::String::Ptr);
void callback(const ros::MessageEvent<std_msgs::String>&);

Originally posted by gvdhoorn with karma: 86574 on 2017-02-23
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by naikin on 2017-02-23:
Thanks, that indeed works in some cases, but I cannot make it work with actionlib because it expects a ConstPtr.
Comment by gvdhoorn on 2017-02-24:
So this is basically an xy-problem then?
Comment by naikin on 2017-02-24:
Partially, yes. Sorry about that. I failed to mention it is about actionlib in particular cause I was not aware there is a difference. Again, what I really want is to end up with non-const ptr to the message when I receive it with actionlib.

