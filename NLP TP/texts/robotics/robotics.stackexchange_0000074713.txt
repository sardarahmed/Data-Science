Q:

Rosdep fails with easy_install

Hi,
I have a set of self-defined rosdep rules which have been working nice until now. I need to install a package through easy_install, therefore my rosdep rule is:
 python-pkg:
   ubuntu:
     easy_install:
       packages: [my_pkg]

But this does not work:
$ rosdep update
$ rosdep resolve python-pkg
#apt
<empty_line>

I tried different combinations, such adding trusty, etc, but still rosdep is not able to find it.
Any suggestion? Thanks!
Edit: If I use pip for instance it shows the rosdep resolve as expected, but not for easy_install. I am assuming there is support as it is said here

Originally posted by Javier V. Gómez on ROS Answers with karma: 1305 on 2016-06-21
Post score: 0

Original comments
Comment by gvdhoorn on 2016-06-21:
Not an answer, but I'm not sure whether the rosdep documentation you're linking is still up-to-date. I seem to remember the support for package-specific rosdep rules (as was customary in the rosbuild days) being removed with the migration to catkin, but I could be wrong. Ping @Dirk Thomas?

A:

The docs were updated to remove the errant reference to easy_install: https://github.com/ros-infrastructure/rosdep/pull/463 you should use the pip key.
easy_install does not have enough introspection to support the rosdep abstraction. (no instrospection) https://packaging.python.org/en/latest/pip_easy_install/ and pip can install all the same packages.

Originally posted by tfoote with karma: 58457 on 2016-06-22
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by Javier V. Gómez on 2016-06-23:
Thanks for the reply. However, as far as I can tell pip cannot install all the same packages, it cannot install egg files. Example: https://pypi.python.org/pypi/ortools/3.3629
Comment by tfoote on 2016-06-23:
Interesting, I didn't realize that. Though it looks like that doesn't have the same generality as pip packages as they're architecture specific.

