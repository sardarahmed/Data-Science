Q:

Build of ROS2 package: Out of memory

Problem
I try to build a ros2 package and run out of memory so that the system gets unresponsive or the process is terminated.
I'm using ros2 foxy on ubuntu 20.04
Hardware

CPU: 4 x ARM A53
RAM: 4 GB
Swap: 0 Byte

Package
It's a single node without any functionality.
I've created about 65 custom ros messages as idl files.
As soon as I create subscriber for each message with empty callback functions, the build process ends up in consuming whole memory.
Example Code:
// Subscriber
  cust1_gen_Sub = this->create_subscription<my_pkg::msg::Cust1>("cust1_gen", 10, std::bind(&Nd::topic_callback_Cust1_gen, this, _1));

// Callback
void Nd::topic_callback_Cust1_gen(const my_pkg::msg::Cust1::SharedPtr msg) const
{
// empty
}

My CMakeLists.txt is this
cmake_minimum_required(VERSION 3.5)
project(my_pkg)

# Default to C99
if(NOT CMAKE_C_STANDARD)
  set(CMAKE_C_STANDARD 99)
endif()

# Default to C++14
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 14)
endif()

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(std_msgs REQUIRED)
find_package(builtin_interfaces REQUIRED)

find_package(rosidl_default_generators REQUIRED)
rosidl_generate_interfaces(${PROJECT_NAME}
  "msg/Cust1.idl"
  ...
  "msg/Cust65.idl"
  DEPENDENCIES builtin_interfaces
 )
ament_export_dependencies(rosidl_default_runtime)

include_directories(include/${PROJECT_NAME})

add_executable(Nd xs/nd.cpp)
ament_target_dependencies(Nd rclcpp std_msgs)
rosidl_target_interfaces(Nd
  ${PROJECT_NAME} "rosidl_typesupport_cpp")

ament_package()

Observation
Observed memory consumption during build by means of htop.
While building the message file objects, it's up to 800 MB Mem usage
Sometimes it simply stucks for hours, sometimes the process gets aborted after 10 minuts.
Process which consumes whole memory as shown by ps aux
/usr/lib/gcc/aarch64-linux-gnu/9/cc1plus -quiet -I .../my_pkg -I build/my_pkg/rosidl_generator_cpp -imultiarch aarch64-linux-gnu -D_GNU_SOURCE -D DEFAULT_RMW_IMPLEMENTATION=rmw_fastrtps_cpp -D RCUTILS_ENABLE_FAULT_INJECTION -D ROS_PACKAGE_NAME="my_pkg" -D SPDLOG_COMPILED_LIB -isystem /opt/ros/foxy/include my_pkg/Nd.cpp -quiet -dumpbase Nd.cpp -mlittle-endian -mabi=lp64 -auxbase-strip CMakeFiles/Nd.dir/os/Nd/Nd.cpp.o -Wall -Wextra -Wpedantic -std=gnu++14 -fasynchronous-unwind-tables -fstack-protector-strong -Wformat-security -fstack-clash-protection -o /tmp/ccd6zsmm.s

What I've already tried
Building with
$ MAKEFLAGS="-j1 -l1"
$ colcon build --executor sequential

Questions
Is there anything I could try to solve the issue and speed up the build on my device?
I was used to build my project on target in ROS1. Is this not suitable for devices of this performance?

Originally posted by holunder on ROS Answers with karma: 20 on 2022-11-08
Post score: 0

A:

Edit:

What I've already tried
Building with
$ MAKEFLAGS="-j1 -l1"
>     $ colcon build --executor sequential

apologies, as I only now noticed you'd already configured Colcon to reduce/disable build parallelism.
I'm a bit uncertain whether MAKEFLAGS="-j1 -l1" on its own line like that would work though. I would at least expect you to have to run export MAKEFLAGS="-j1 -l1", or otherwise MAKEFLAGS="-j1 -l1" colcon build --executor sequential.
If you're still running into this problem, it's likely there isn't anything at the Colcon/CMake level you can do about this.
Note that an A53 has about 1/100th of the performance of a typical desktop processor. So things taking a little longer would not be unexpected I believe.

Original answer:
It's very likely this is caused by C++ template instantiation.
rclcpp is template heavy, and the type support code is as well.
By default, Colcon will ask CMake to use all CPU cores available for a build. On embedded systems, especially without any swap, this will typically lead to memory becoming the bottleneck (ie: there is not enough memory to let the compiler 'comfortably' use all the cores).
You have various ways to reduce parallelism (and thereby most likely also work around the limited available memory) with Colcon. See #q368249 and #q304300 for previous discussions.
Adding some swap also typically helps, but you may not have that possibility.

Originally posted by gvdhoorn with karma: 86574 on 2022-11-09
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by holunder on 2022-11-22:
I've added 4 GB of swap to the machine and found that build eventually completes now.
Thanks a lot for guiding me in this direction.
Unfortunately, it still needs quite long (30 minutes) to complete.

