Q:

Using custom messages in ROSAndroid

Hi,
i am doing http://wiki.ros.org/rosjava/Tutorials/hydro/Unofficial%20Messages
and http://wiki.ros.org/ROS/Tutorials/CreatingMsgAndSrv
can anyone have a short look on my CMakeList.txt?
When i do catkin_make i get the error
-- ==> add_subdirectory(custom_msgs)
-- Using these message generators: gencpp;genlisp;genpy
CMake Error at /opt/ros/hydro/share/genmsg/cmake/genmsg-extras.cmake:85 (message): 
  add_message_files() directory not found:
  /home/user/rosjava/src/custom_msgs/msg
Call Stack (most recent call first):
 custom_msgs/CMakeLists.txt:68 (add_message_files)

-- Configuring incomplete, errors occurred!
 make: *** [cmake_check_build_system] Fehler 1
Invoking "make cmake_check_build_system" failed

In my Folder custom_msgs i have the file  mycustomMSG.msg
CMakeList:
 cmake_minimum_required(VERSION 2.8.3)
 project(custom_msgs)

 ##Tutorial http://wiki.ros.org/ROS/Tutorials/CreatingMsgAndSrv

 ## Find catkin macros and libraries
 ## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
 ## is used, also find other catkin packages

 ##find_package(catkin REQUIRED COMPONENTS
 ##  std_msgs
 ##)

 find_package(catkin REQUIRED COMPONENTS
    roscpp
    rospy
    std_msgs
    message_generation
 )

 ## System dependencies are found with CMake's conventions
 # find_package(Boost REQUIRED COMPONENTS system)

 ## Uncomment this if the package has a setup.py. This macro ensures
 ## modules and global scripts declared therein get installed
 ## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
 # catkin_python_setup()

 ################################################
 ## Declare ROS messages, services and actions ##
 ################################################

 ## To declare and build messages, services or actions from within this
 ## package, follow these steps:
 ## * Let MSG_DEP_SET be the set of packages whose message types you use in
 ##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
 ## * In the file package.xml:
 ##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET
 ##   * If MSG_DEP_SET isn't empty the following dependencies might have been
 ##     pulled in transitively but can be declared for certainty nonetheless:
 ##     * add a build_depend tag for "message_generation"
 ##     * add a run_depend tag for "message_runtime"
 ## * In this file (CMakeLists.txt):
 ##   * add "message_generation" and every package in MSG_DEP_SET to
 ##     find_package(catkin REQUIRED COMPONENTS ...)
 ##   * add "message_runtime" and every package in MSG_DEP_SET to
 ##     catkin_package(CATKIN_DEPENDS ...)
 ##   * uncomment the add_*_files sections below as needed
 ##     and list every .msg/.srv/.action file to be processed
 ##   * uncomment the generate_messages entry below
 ##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

 ## Generate messages in the 'msg' folder
 ## add_message_files(
 ##   FILES
 ##   Message1.msg
 ##   Message2.msg
 ## )

  add_message_files(
    FILES
    mycustomMSG.msg
  )
 

 ## Generate services in the 'srv' folder
 # add_service_files(
 #   FILES
 #   Service1.srv
 #   Service2.srv
 # )

 ## Generate actions in the 'action' folder
 # add_action_files(
 #   FILES
 #   Action1.action
 #   Action2.action
 # )

 ## Generate added messages and services with any dependencies listed here
 ##uncommented
  generate_messages(
    DEPENDENCIES
    std_msgs
  )     

 ###################################
 ## catkin specific configuration ##
 ###################################
 ## The catkin_package macro generates cmake config files for your package
 ## Declare things to be passed to dependent projects
 ## INCLUDE_DIRS: uncomment this if you package contains header files
 ## LIBRARIES: libraries you create in this project that dependent projects also need
 ## CATKIN_DEPENDS: catkin_packages dependent projects also need
 ## DEPENDS: system dependencies of this project that dependent projects also need
 catkin_package(
 #  INCLUDE_DIRS include
 #  LIBRARIES custom_msgs
 #  CATKIN_DEPENDS std_msgs message_runtime
 #  DEPENDS system_lib
 )

 ###########
 ## Build ##
 ###########

 ## Specify additional locations of header files
 ## Your package locations should be listed before other locations
 # include_directories(include)
 include_directories(
   ${catkin_INCLUDE_DIRS}
 )     

 ## Declare a cpp library
 # add_library(custom_msgs
 #   src/${PROJECT_NAME}/custom_msgs.cpp
 # )

 ## Declare a cpp executable
 # add_executable(custom_msgs_node src/custom_msgs_node.cpp)

 ## Add cmake target dependencies of the executable/library
 ## as an example, message headers may need to be generated before nodes
 # add_dependencies(custom_msgs_node custom_msgs_generate_messages_cpp)

 ## Specify libraries to link a library or executable target against
 # target_link_libraries(custom_msgs_node
 #   ${catkin_LIBRARIES}
 # )

 #############
 ## Install ##
 #############

 # all install targets should use catkin DESTINATION variables
 # See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

 ## Mark executable scripts (Python etc.) for installation
 ## in contrast to setup.py, you can choose the destination
 # install(PROGRAMS
 #   scripts/my_python_script
 #   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
 # )

 ## Mark executables and/or libraries for installation
 # install(TARGETS custom_msgs custom_msgs_node
 #   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
 #   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
 #   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
 # )

 ## Mark cpp header files for installation
 # install(DIRECTORY include/${PROJECT_NAME}/
 #   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
 #   FILES_MATCHING PATTERN "*.h"
 #   PATTERN ".svn" EXCLUDE
 # )

 ## Mark other files for installation (e.g. launch and bag files, etc.)
 # install(FILES
 #   # myfile1
 #   # myfile2
 #   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
 # )

 #############
 ## Testing ##
 #############

 ## Add gtest based cpp test target and link libraries
 # catkin_add_gtest(${PROJECT_NAME}-test test/test_custom_msgs.cpp)
 # if(TARGET ${PROJECT_NAME}-test)
 #   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
 # endif()

 ## Add folders to be run by python nosetests
 # catkin_add_nosetests(test)

Package.xml:
<?xml version="1.0"?>
<package>
  <name>custom_msgs</name>
  <version>0.0.0</version>
  <description>The custom_msgs package</description>

  <!-- One maintainer tag required, multiple allowed, one person per tag --> 
  <!-- Example:  -->
  <!-- <maintainer email="jane.doe@example.com">Jane Doe</maintainer> -->
  <maintainer email="user@todo.todo">user</maintainer>

  <!-- One license tag required, multiple allowed, one license per tag -->
  <!-- Commonly used license strings: -->
  <!--   BSD, MIT, Boost Software License, GPLv2, GPLv3, LGPLv2.1, LGPLv3 -->
  <license>TODO</license>

  <!-- Url tags are optional, but mutiple are allowed, one per tag -->
  <!-- Optional attribute type can be: website, bugtracker, or repository -->
  <!-- Example: -->
  <!-- <url type="website">http://wiki.ros.org/custom_msgs</url> -->

  <!-- Author tags are optional, mutiple are allowed, one per tag -->
  <!-- Authors do not have to be maintianers, but could be -->
  <!-- Example: -->
  <!-- <author email="jane.doe@example.com">Jane Doe</author> -->

  <!-- The *_depend tags are used to specify dependencies -->
  <!-- Dependencies can be catkin packages or system dependencies -->
  <!-- Examples: -->
  <!-- Use build_depend for packages you need at compile time: -->
  <!--   <build_depend>message_generation</build_depend> -->
  <!-- Use buildtool_depend for build tool packages: -->
  <!--   <buildtool_depend>catkin</buildtool_depend> -->
  <!-- Use run_depend for packages you need at runtime: -->
  <!--   <run_depend>message_runtime</run_depend> -->
  <!-- Use test_depend for packages you need only for testing: -->
  <!--   <test_depend>gtest</test_depend> -->
  <buildtool_depend>catkin</buildtool_depend>
  <build_depend>std_msgs</build_depend>
  <run_depend>std_msgs</run_depend>

  <!--   eingefÃ¼gt -->
<build_depend>message_generation</build_depend>
  <run_depend>message_runtime</run_depend>

  <!-- The export tag contains other, unspecified, tags -->
  <export>
    <!-- You can specify that this package is a metapackage here: -->
    <!-- <metapackage/> -->

    <!-- Other tools can request additional information be placed here -->

  </export>
</package>

MyCustomMessage:
# ROS Header
Header header

# X
float64 X   # description

# Y
int16 yi        # description
string ys       # description

Folders /Files:
rosjava: build devel src my_custom_messages
rosjava/mycustom_messages: custom_msgs gradle (Files: build.gradle, CMakeList.txt, gradlew, gradlew.bat, package.xml, settings.gradle)
rosjava/src: custom_msgs rosjava rosjava_bootstrap rosjava_build_tools rosjava_core rosjava_extras rosjava_messages  zeroconf_jmdns_suite (File toplevel CMakeLists.txt for a catkin workspace)
i ve edited the cMakeList and package in rosjava/src/custom_msgs(There is CMakeList.txt, package.xml, mycustomMSG.msg in this Folder)
Thanks

Edit:
Adding the folder msg solved the error but my new message is not being built
i get this log, when i do catkin_make
and i am missing my custom stuff
:rosjava_messages is spawning subprojects: [map_store, r2_msgs, rocon_service_pair_msgs, tf, cob_lookat_action, rosruby_tutorials, moveit_msgs, grasp_stability_msgs, jsk_rviz_plugins, dynamixel_msgs, rosruby, visualization_msgs, baxter_maintenance_msgs, epos_driver, microstrain_3dmgx2_imu, moveit_simple_grasps, visp_camera_calibration, cob_relayboard, manipulation_msgs, rospy_message_converter, underwater_sensor_msgs, segbot_gui, c...]

the name of my custom Msg is function drivinggoal:
when i try to locate it i get
 user@Ubuntu-Test:~/rosjava$ locate function_drivinggoal
 /home/user/catkin_ws/src/architecture/ros_messages/msg/function_drivinggoal.msg
 /home/user/catkin_ws/src/architecture/yamdl_messages/include/function_drivinggoal_yamdl.hh
 /home/user/catkin_ws/src/architecture/yamdl_messages/src/function_drivinggoal_yamdl.cpp
 /home/user/rosjava/devel/include/custom_msgs/function_drivinggoal.h
 /home/user/rosjava/devel/lib/python2.7/dist-packages/custom_msgs/msg/_function_drivinggoal.py
 /home/user/rosjava/devel/share/common-lisp/ros/custom_msgs/msg/_package_function_drivinggoal.lisp
 /home/user/rosjava/devel/share/common-lisp/ros/custom_msgs/msg/function_drivinggoal.lisp
 /home/user/rosjava/src/custom_msgs/msg/function_drivinggoal.msg

Edit:
I moved the mycustom_messages folder to src next to the folders custom_msgs rosjava rosjava_bootstrap rosjava_build_tools rosjava_core ...
did catkin_make
now i get
user@Ubuntu-Test:~/rosjava$ locate function_drivinggoal
/home/user/catkin_ws/src/architecture/ros_messages/msg/function_drivinggoal.msg
/home/user/catkin_ws/src/architecture/yamdl_messages/include/function_drivinggoal_yamdl.hh
/home/user/catkin_ws/src/architecture/yamdl_messages/src/function_drivinggoal_yamdl.cpp
/home/user/rosjava/devel/include/custom_msgs/function_drivinggoal.h
/home/user/rosjava/devel/lib/python2.7/dist-packages/custom_msgs/msg/_function_drivinggoal.py
/home/user/rosjava/devel/share/common-lisp/ros/custom_msgs/msg/_package_function_drivinggoal.lisp
/home/user/rosjava/devel/share/common-lisp/ros/custom_msgs/msg/function_drivinggoal.lisp
/home/user/rosjava/src/custom_msgs/msg/function_drivinggoal.msg
/home/user/rosjava/src/my_custom_messages/custom_msgs/build/classes/main/custom_msgs/function_drivinggoal.class
/home/user/rosjava/src/my_custom_messages/custom_msgs/build/generated-src/custom_msgs/function_drivinggoal.java

and  i think i got it
custom_msgs-0.0.0.jar  finally exists
What are the steps to use this custom messages in my android project???

Originally posted by stefan on ROS Answers with karma: 15 on 2014-08-13
Post score: 0

A:

You have to put the message file     mycustomMSG.msg into the subfolder msg of your project folder custom_msgs. If it does not exist, you have to create the folder msg  and pÃ¼ut the message file into it. add_message_files does not look directly in your project folder but only in the msg subfolder, i. e. if you message files lies there (next to CMakeLists.txt and package.xml) it won't be found..............

Originally posted by Wolf with karma: 7555 on 2014-08-13
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by denis on 2016-01-11:
Hi, I've succesfully created my custom_msg with the msg and srv subfolder. I'm trying to use this package on the rosjava_tutorial_services, but the compiler says that the custom_msg package doesn't exist. Do you have some suggestion on how to build the project in a correct way?

