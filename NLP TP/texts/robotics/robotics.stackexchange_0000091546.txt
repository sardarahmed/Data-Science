Q:

Specifying CMake options for external CMake project

Hi!
I'd like to use the following to wrap a CMake-native project in a catkin environment by exporting the build_type as cmake:
(Code preview on GitHub issue: https://github.com/ros/catkin/issues/1007)
While this works great to build, it defaults all options as in the CMake project. In many cases, we'd like to set a few of those - e.g., not to build tests etc. (what we would usually do by cmake .. -DBUILD_TESTS=OFF). Is there a way to do this, or a convenient work-around?
Thanks,
Wolfgang

Originally posted by wxm on ROS Answers with karma: 3 on 2019-04-30
Post score: 0

A:

If you build your workspace with colcon you can put a colcon.pkg file beside the manifest to specify custom cmake-args just for that package.

Originally posted by Dirk Thomas with karma: 16276 on 2019-04-30
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by demmeln on 2019-04-30:
So you can specify this in the source of the package and you can customize the defaults for that package (compared to a non-colcon build just using cmake) when built with colcon, which is great. But is there a way to change the options per-package when building / configuring a workspace? I.e. having some options in one workspace, and another set in another workspace, without changing the package source, just by different colcon commands / workspace-wide config.
Comment by demmeln on 2019-04-30:
Wait, I think I misunderstood how the .meta files work. It should be possible with those (either with name or path).
Comment by Dirk Thomas on 2019-04-30:
The difference of a colcon.pkg file is that it can be co-located with the package in source - rather than .meta / .mixin files which are usually outside the workspace and might need to be referenced explicitly.

