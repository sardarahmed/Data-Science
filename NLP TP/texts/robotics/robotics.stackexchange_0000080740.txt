Q:

What tools are available for persistent storage in ROS?

I have a small amount of information (e.g., camera position and orientation) that I would like to persist through roscore shutdowns and restarts.  There are potentially multiple providers and multiple consumers of this information so it seems like a latched ROS topic would be appropriate -- the only difference is that I would like to latch to disk instead of just latching in memory.  Are there any tools that accomplish this task or something like it?
I see that warehouse_ros exists, but setting up a MongoDB just for a few hundred bytes of information seems like ultra overkill.  warehouse_ros seems geared more toward storing very large amounts of information.

Originally posted by BJP on ROS Answers with karma: 100 on 2017-05-10
Post score: 1

A:

I decided there was apparently no generalized/robust way to persist information using the ROS infrastructure, so I wrote something myself: https://github.com/MisoRobotics/persistent_topics  That package allows the user to read from and write to ROS topics and this node will take care of ensuring that the topic is populated with the message from last session next time the system is started up.
EDIT: This actually doesn't work (well) because of the way ROS topics are architected.  If a topic represented a series of messages that supersede each other (the way I assumed it would work since that seems like the vast majority of use cases, and is the way it works within a single node), this would work great.  Instead, a topic just represents a set of instantaneous messages with no assumption of precedence or behavior -- sometimes, as in the case of /tf_static, messages on a topic represent the accumulation of information instead of a sequence of information.  If there are two nodes who each have a latched message where the type doesn't include a timestamped header, how a subscriber should interpret the message pair they'll receive upon subscription is completely undefined.

Originally posted by BJP with karma: 100 on 2017-05-11
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by 130s on 2017-05-11:
I'm a fan of sending a pull request to somewhere upstream for such a useful and generic feature. Maybe ros_comm?
Comment by BJP on 2017-05-12:
I'm glad you think it's useful and generic :)  If people end up finding it useful as a separate package, I might consider a pull request in the future, but not a whole lot of time available right now.

