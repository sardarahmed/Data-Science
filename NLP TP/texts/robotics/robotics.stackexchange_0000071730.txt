Q:

catkin version of the hector_slam package: mapping issue

Hi,
I am new to ROS. I have been trying to work with hector_slam tutorial for logged data and I noticed that the catkin version of the hector_slam does not give good mapping results as compared to the hector_slam installation using package manager (sudo apt-get install ros-indigo-hector-slam). There is a significant difference in the scan matching .I am using the default tutorial.launch given in the github without any change. The trajectory of the robot is also different, which I believe is due to the scan mismatch.
Am I missing something here or is this a known issue? I also tried replacing the hector_mapping executable in the catkin_HS/devel/lib/ directory from the /opt/ros/indigo/lib/hector_mapping and it works fine.
To build the catkin package I followed:

clone the hector_slam catkin stack from the github into src folder
catkin_make
Source the setup file in the workspaceÂ´s devel folder
roslaunch the tutorial.launch
Play the bag file provided in the tutorial tutorial
Save the geotiff node.

I also tried the wstool method described here. But the result does not improve. I dont have enough points to attach the images.
update: I am using Dual core CPU @2.60GHz with 4 GB RAM with 60 GB disk space (dual boot with windows). OS: 64 bit Ubuntu 14.04.I had the same issue with other machine with i7 processor 4GB RAM(dual boot). I am building without optimization (catkin_make).
Thanks in advance,

Originally posted by kiranb222 on ROS Answers with karma: 15 on 2016-02-01
Post score: 0

A:

What kind of machine are you using? If it has low CPU power (such as a Raspberry Pi2) and you accidentally build without optimization, this might explain the issues observed. If you could edit your question with additional information that would be helpful.
For reference, with optimization on the tutorial ran with 10% CPU consumption on  a single CPU on a RPi2.
To build with optimization, run
catkin_make -DCMAKE_BUILD_TYPE=Release

Originally posted by Stefan Kohlbrecher with karma: 24361 on 2016-02-01
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by kiranb222 on 2016-02-02:
I tried building it with optimization on  and it worked well. The CPU consumption was around 50- 60 % with rviz consuming 30-35 % of the CPU and hector_mapping(5%-10%). In case of Debug build the CPU consumptions remains at 100%
Comment by Stefan Kohlbrecher on 2016-02-02:
If the answer was correct, please mark it solved to indicate that no further action is required to others.

