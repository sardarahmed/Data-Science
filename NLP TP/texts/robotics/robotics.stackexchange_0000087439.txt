Q:

Error while importing services for python : ImportError: No module named srv

Hello everyone,
I am new to the ROS community and I am currently learning to use ROS kinetic, but I'm unable to find an easy way to create and use a service proprely. I have updated the CMakelist and the package.xml file as described in this tutorials in order to account for the new .srv file, but I still have ImportError. I have also double checked in this Cmakelist documentation. I hope that it is a small and dumb mistake. The weird thing is that the service seems to be recognized by ros. I find that the documentation is pretty vague about this, or maybe I just skipped a step.

Here is the code of my wcomputation_node.py:
#!/usr/bin/env python
import rospy
import numpy as np
from geometry_msgs.msg import Pose2D
from wcomputation.srv import *

Here is the Wservice.srv file
float64 x
float64 y
float64 theta
---
float64 wa
float64 wb
float64 wc

.
├── CMakeLists.txt -> /opt/ros/kinetic/share/catkin/cmake/toplevel.cmake
├── gui
│   ├── CMakeLists.txt
│   ├── launch
│   │   └── gui.launch
│   ├── package.xml
│   └── src
│       └── gui.py
└── wcomputation
    ├── CMakeLists.txt
    ├── msg
    ├── package.xml
    ├── scripts
    │   ├── sendserial.py
    │   ├── wcomputation_node.py
    │   └── wcomputation_node.pyc
    ├── src
    └── srv
        └── Wservice.srv

And finally the service seems to be recognized by ROS
user@ordi:~/Bureau/omniROS/omniROS_ws/src$ rossrv show wcomputation/Wservice float64 x
float64 y
float64 theta
---
float64 wa
float64 wb
float64 wc
user@ordi:~/Bureau/omniROS/omniROS_ws/src$ rossrv info wcomputation/Wservice  
float64 x
float64 y
float64 theta
---
float64 wa
float64 wb
float64 wc

And here is my CMakeList :
EDIT :
I do need to use this service via a python script. Here is my CMakeList file :
cmake_minimum_required(VERSION 2.8.3)
project(wcomputation)

## Compile as C++11, supported in ROS Kinetic and newer
# add_compile_options(-std=c++11)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  geometry_msgs
  roscpp
  rospy
  message_generation
  std_msgs
)

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)

## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend tag for "message_generation"
##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in
##     but can be declared for certainty nonetheless:
##     * add a run_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
# add_message_files(
#   FILES
#   Message1.msg
#   Message2.msg
# )

## Generate services in the 'srv' folder
 add_service_files(
   FILES
   Wservice.srv
#   Service2.srv
 )

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
generate_messages(
   DEPENDENCIES
   geometry_msgs
)

################################################
## Declare ROS dynamic reconfigure parameters ##
################################################

## To declare and build dynamic reconfigure parameters within this
## package, follow these steps:
## * In the file package.xml:
##   * add a build_depend and a run_depend tag for "dynamic_reconfigure"
## * In this file (CMakeLists.txt):
##   * add "dynamic_reconfigure" to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * uncomment the "generate_dynamic_reconfigure_options" section below
##     and list every .cfg file to be processed

## Generate dynamic reconfigure parameters in the 'cfg' folder
# generate_dynamic_reconfigure_options(
#   cfg/DynReconf1.cfg
#   cfg/DynReconf2.cfg
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if your package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES wcomputation
  CATKIN_DEPENDS geometry_msgs roscpp rospy message_runtime
#  DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(
# include
  ${catkin_INCLUDE_DIRS}
)

## Declare a C++ library
# add_library(${PROJECT_NAME}
#   src/${PROJECT_NAME}/wcomputation.cpp
# )

## Add cmake target dependencies of the library
## as an example, code may need to be generated ...

PS: Since this is my first post I can't send a zip file of my whole workspace if needed unfortunately

Originally posted by RobinB on ROS Answers with karma: 23 on 2018-06-20
Post score: 1

Original comments
Comment by lmathieu on 2018-06-20:
Hi Robin,
Have you tried the solution in this post : https://answers.ros.org/question/271620/importerror-no-module-named-xxxxmsg/ ?
Comment by RobinB on 2018-06-20:
Yes I did, I have copied the content of my CMakeList file
Comment by stevemacenski on 2018-06-21:
Where's your python script in this? I don't see any install or python rules
Comment by lmathieu on 2018-06-21:
So, maybe you forgot to run catkin_make ? Or did you install anaconda or an other python interpreter that can change your default python 2.7 to python 3 ? btw, you can upload a link to you workspace if you have one, you should have enough Karma (or you can put it in a  to show it :) )
Comment by stevemacenski on 2018-06-21:
I'm talking about your cmakelists file, there's no install rules for python or setting up the workspace to work with it.

A:

Please add your cmakelists file.
I'm going to take a good guess you haven't generated the messages correctly.
add_service_files(DIRECTORY srvs
  FILES
  ServiceFile.srv
)

generate_messages(
   DEPENDENCIES
   std_msgs
   other_deps
)

also add as a catkin dep.
message_generation

I forget if you need this in python, but here it is anyhow.
add_dependencies(${PROJECT_NAME} ${PROJECT_NAME}_generate_messages_cpp)

Originally posted by stevemacenski with karma: 8272 on 2018-06-20
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by latrapo on 2018-12-09:
Thanks for this, I forgot to add my .srv to add_service_files in CMakeLists.txt! Works perfectly now

