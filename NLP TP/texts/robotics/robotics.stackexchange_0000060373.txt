Q:

JointTrajectory time_from_start resets to all zeros after publish()

Ubuntu 12.04
ROS Hydro
I am publishing a JointTrajectory to Gazebo and monitoring the topic using rostopic echo. The data that I publish is different from what gets captured by rostopic echo.  Somehow the "time_from_start" portion of the data gets zeroed out.
A snippet of my code is as follows
  # this is where I create and populate the JointTrajectory
  jt = make_trajectory_msg(plan=plan, secs=0.5, dt=0.2, frame_id='base_link' )
  rospy.loginfo("Publishing joint trajectory")
  while not rospy.is_shutdown():
    print jt
    gazebo_command_publisher.publish(jt)
    r.sleep()  

As you can see, right before I call publish() I print the trajectory.  Here is what the trajectory looks like before the publish()
header: 
  seq: 5
  stamp: 
    secs: 0
    nsecs: 0
  frame_id: base_link
joint_names: ['arm_joint_1', 'arm_joint_2', 'arm_joint_3', 'arm_joint_4', 'arm_joint_5']
points: 
  - 
    positions: [0.2792831707677692, 0.4627657000396006, -0.8622084888670658, 0.8533643604717218, 0.1568816032950613]
    velocities: [0.0, 0.0, 0.0, 0.0, 0.0]
    accelerations: [0.0, 0.0, 0.0, 0.0, 0.0]
    effort: []
    time_from_start: 
      secs: 0.7
      nsecs: 0

And here is the trajectory after it is captured by rostopic echo:
header: 
  seq: 5
  stamp: 
    secs: 0
    nsecs: 0
  frame_id: base_link
joint_names: ['arm_joint_1', 'arm_joint_2', 'arm_joint_3', 'arm_joint_4', 'arm_joint_5']
points: 
  - 
    positions: [0.2792831707677692, 0.4627657000396006, -0.8622084888670658, 0.8533643604717218, 0.1568816032950613]
    velocities: [0.0, 0.0, 0.0, 0.0, 0.0]
    accelerations: [0.0, 0.0, 0.0, 0.0, 0.0]
    effort: []
    time_from_start: 
      secs: 0
      nsecs: 0

Originally posted by Rick C NIST on ROS Answers with karma: 28 on 2014-06-26
Post score: 0

A:

The secs and nsecs fields of a timestamp are integer values, so secs: 0.7 is getting truncated to zero.
To represent 0.7s, you can either do time_from_start = rospy.Duration.from_sec(0.7), or explicitly set the fields to secs = 0 and nsecs = 700000000
More here http://wiki.ros.org/rospy/Overview/Time

Originally posted by Adolfo Rodriguez T with karma: 3907 on 2014-06-27
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by Rick C NIST on 2014-06-27:
Thank you. That was what I was looking for. I will use the rospy.Duration method from now on.
Comment by Adolfo Rodriguez T on 2014-06-27:
You're welcome. I'd appreciate it if you check the answer as valid to so the question shows up as resolved.

