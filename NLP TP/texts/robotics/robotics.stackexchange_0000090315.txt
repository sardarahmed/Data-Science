Q:

rosjava kinetic discussing with roscpp melodic

Hi,
During a test phase that we are currently putting in place, we have created a project that has ros running in a ROS-Docker (Melodic), in which we created some nodes using roscpp. We have been able to interact with those nodes with rosbridge javascript and also jrosbridge on a web page. We are willing to test more java in our project.
Does it make any sens to create rosjava nodes (supported only for Kinetic) interacting with our ros in the docker based on Melodic? What would we lose with rosjava?
I don't want to have ros in the docker based on kinetic, since we want to keep up with the latest developments.
will rosjava follow up the development and pass to ROS2 when stable?

Originally posted by yyvus on ROS Answers with karma: 3 on 2019-01-31
Post score: 0

A:

Hi @yyvus,
If you install rosjava from source (it shouldn't take you more than 10 mins) you shouldn't find any difference between kinetic and melodic; it's just a problem of branch naming. The basic message definitions are the same between kinetic and melodic as of today, and AFAIK there are no dependencies that you cannot get in a system running melodic.
ROS2 is a whole different story. The most official client library for java is here: https://github.com/esteve/ros2_java; but note that the concept is completely different. Rosjava in ROS1 is a whole reimplementation of the client libraries just like roscpp and rospy. Ros2 java is basically a wrapper on top of ROS2 common libraries. You can see more info about it here: https://index.ros.org/doc/ros2/Concepts/ROS-2-Client-Libraries/.

Originally posted by jubeira with karma: 1054 on 2019-01-31
This answer was ACCEPTED on the original site
Post score: 0

