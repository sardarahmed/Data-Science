Q:

Latency between nodelets

Dear all,
I have implemented stereo_image_proc with customized algorithms. Now I am trying to measure the latency in the pipeline.
I have observed that each nodelet has inconsistency latency ranging form 0 to 60ms.
I have measured the latency as follows
Ros_latency = (nodelet1_publishing_time - nodelet2_subscribing_time)
How can I minimize these delays so that making the whole system consistent.
Thanks in advance

Originally posted by mkreddy477 on ROS Answers with karma: 58 on 2017-04-12
Post score: 0

Original comments
Comment by cellard0or on 2017-04-12:
I guess you mean nodelet2_callback_time or something similar? The subscribing time is not very meaningful in this investigation. How exactly do you measure the time? Do you call ros::Time::now() after publishing and at the beginning of the receiving callback?
Comment by mkreddy477 on 2017-04-13:
Yes, I am referring to the nodelet2 callback time. I am using gettimeoftheday() to just before publishing in nodelet1 and just after the callback called in nodelet2. Also, I am using the exact sync polocy.
Comment by cellard0or on 2017-04-13:
So your timing suggests that indeed the ROS system takes varying amounts of time to call your callback. How could that be not the case? ROS internal maintenance and callback queues/schedulers is not deterministic in the end. However, I am not sure if 60ms is maybe too much to call it Jitter.

A:

To get a more specific answer you'll need to provide a lot more information about how to reproduce your issue. In particular you need to understand how any specific component is integrated into the larger system.
Questions that would be helpful for improving performance.

Are you running the nodelets in the same process?
Is there other nodelets running?
How many threads are available in the nodelet manager? How many do you expect used at any given time?
Are you CPU constrained?
What else is running on the system?
What else is publishing or subscribing in the node on the system?

If you can also get 0ms latency that suggests that it can go quickly. And then the question is why is it sometimes not delivering it quickly in other cases.
My speculation guessing at many of the answers to the above question is that you're callback queue is being starved for threads/processing time when you get the large latency numbers. When resources are exhausted we have many ways to gracefully degrade. Everything is queued etc, and if queues overflow content will get dropped. Adding a large processing load in other callbacks can starve other callbacks in the queue etc.

Originally posted by tfoote with karma: 58457 on 2017-04-12
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by mkreddy477 on 2017-04-13:
Yes, I am running the nodelets in the same process and all the nodelets are running.
The nodelets are consuming not more than 20 threads at a time.
Available threads to the manager are 88.
Nothing else is running on the system except the roscore and rosbag play.

