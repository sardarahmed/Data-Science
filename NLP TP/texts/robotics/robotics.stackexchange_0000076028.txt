Q:

Global planner behavior upon planning failure

Hi,
I am using navigation stack and wondering what is the expected behavior of global planner upon the local planner fails to control robot according to thewaypoints.
According to a test that I ran (link), it seems that it enters the global planner over and over again (without taking into account any info from sensors).
That is not what I would expect - I expected it to return impossible to find a plan the second time it enters the planner.
Is it really so, or did I make a mistake in the setup?
EDIT:
I found suitable parameters to control number of time global planner is called - those are planner_patience and max_planning_retries (the latter one is exactly what I was looking for, as found here ). 
However, even with this parameters set to smaller values (2 seconds or 4 attempts), makePlan is still invoked multiple times. It seems as if that happens in separate threads, because I get the info that max_planning_retries is exceeded, but makePlan is being called over and over again.
 I have no idea how to detect which function or which node calls it multiple times. Does somebody know better?
EDIT2: Additionally, it is clear that infinite loop of calling makePlan starts once the max_planning_retries is exceeded and afterwards it does not check that condition.
EDIT3: disabling recovery behaviors all together keeps number of calls to makePlan lower (although, still higher than max_planning_retries)

Originally posted by gavran on ROS Answers with karma: 526 on 2016-08-29
Post score: 3

Original comments
Comment by asimay_y on 2017-02-05:
+1
same issue with gavran.

A:

Hi all, I think the big and arbitrary number of calls to global planner is caused by a bug in move_base.cpp
I pull requested a fix. I would really apreciate if you can give it a try, as move_base.cpp code is quite chaotic and I'm afraid of having broked something else.
Btw, the number of calls to global planner is:
1+max_planning_retries + number_of_recovery_behavior*(1+max_planning_retries)
because max_planning_retries is the times to retry, after a first attempt we always do (so 0 means not retry, just 1 attempt)
Hope this helps!

Originally posted by jorge with karma: 2284 on 2016-09-29
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by gavran on 2016-10-05:
I tested it and it works. However, not really clear what you did there to fix it. I suggest that we continue the discussion under pull request comments, if you would like to explain it a bit.
Comment by jorge on 2016-10-05:
Thanks for testing. I added a more detailed explanation in the PR. Can you please comment there that you tested the PR? I suppose that will speed up merging.
Comment by gavran on 2016-10-06:
oh, I already did (only there my nickname is different, gergia)

