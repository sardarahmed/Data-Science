Q:

Programatically set the camera pose in gazebo or rviz

Hello,
I am trying to automatically generate a bunch of videos of a robot manipulating objects. I figured out a way to record the screen from gazebo or rviz, but I can't find any tutorial about how to programatically move the camera around the robot.
Do you know if in either gazebo or rviz the viewpoint can be set programatically?
Gazebo shows XYZ and RPY as you move with the mouse so it seems reasonable to think that one can set those. Maybe in rviz, I should set the fixed frame to be a frame offset of the head of the robot?

Originally posted by Dimitar Simeonov on ROS Answers with karma: 535 on 2011-06-21
Post score: 6

Original comments
Comment by Dimitar Simeonov on 2011-06-21:
glc, look at http://www.ros.org/wiki/RecordingOpenGLAppsWithGLC  The glc installation script appear to be broken for me but I hacked my way though it and now it works fine. Let me know if you encounter any troubles and I can send you my version of the install script.
Comment by JonW on 2011-06-21:
This may be off topic, but what method are you using for video capture?
Comment by Josch on 2013-03-13:
Hi, I'm currently trying to record RViz via GLC. Since I'm doing this via a RViz plugin, the software should execute the Shift+F8 command for GLC programmatically.
Do you have any idea how to do this? Did you only hack the install script or also the source code?

A:

If you're using glc-capture, one way to do this is to can write a plugin to move the cameras, for example, by putting this code in UpdateChild() of the plugin:
gazebo::OgreCamera *cam = gazebo::CameraManager::Instance()->GetCamera("UserCamera(0)");
gazebo::Pose3d pose = cam->GetCameraWorldPose();
pose.pos.z = pose.pos.z + 0.001;
cam->SetWorldPose(pose);

should make the gui view camera move upwards in z-direction 1mm on every udpate.
Alternatively, you can spawn a single urdf link with a camera sensor attached, e.g.
<?xml version="1.0" ?>
<robot name="camera" xmlns:body="http://playerstage.sourceforge.net/gazebo/xmlschema/#body" xmlns:controller="http://playerstage.sourceforge.net/gazebo/xmlschema/#controller" xmlns:geom="http://playerstage.sourceforge.net/gazebo/xmlschema/#geom"  xmlns:sensor="http://playerstage.sourceforge.net/gazebo/xmlschema/#sensor" xmlns:xacro="http://ros.org/wiki/xacro">
  <link name="camera_link">
    <inertial>
      <mass value="1"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1"/>
    </inertial>
  </link>
  <gazebo reference="camera_link">
    <sensor:camera name="camera_sensor">
      <imageSize>640 480</imageSize>
      <imageFormat>BAYER_BGGR8</imageFormat>
      <hfov>90</hfov>
      <nearClip>0.1</nearClip>
      <farClip>100</farClip>
      <updateRate>25.0</updateRate>
      <controller:gazebo_ros_camera name="camera_controller" plugin="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>25.0</updateRate>
        <cameraName>camera</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_link</frameName>
        <CxPrime>320.5</CxPrime>
        <Cx>320.5</Cx>
        <Cy>240.5</Cy>
        <!-- image_width / (2*tan(hfov_radian /2)) -->
        <!-- 320 for wide and 772.55 for narrow stereo camera -->
        <focal_length>320</focal_length>
        <distortion_k1>0.0</distortion_k1>
        <distortion_k2>0.0</distortion_k2>
        <distortion_k3>0.0</distortion_k3>
        <distortion_t1>0.0</distortion_t1>
        <distortion_t2>0.0</distortion_t2>
      </controller:gazebo_ros_camera>
    </sensor:camera>
    <turnGravityOff>true</turnGravityOff>
    <material>Gazebo/Blue</material>
  </gazebo>
</robot>

and use ros service /gazebo/set_model_state to update the camera pose.  Using ''rosbag record'' to capture a series of images.

Originally posted by hsu with karma: 5780 on 2011-06-21
This answer was ACCEPTED on the original site
Post score: 4

Original comments
Comment by hsu on 2011-07-08:
I believe if you set "Overlay Alpha" to 1 for your camera in rviz, then you should not see the superimposed image.
Comment by Dimitar Simeonov on 2011-07-08:
thanks a lot! Do you know how frameName is used - I couldn't find it referenced in the code that you linked to. When I look at the camera in rviz it shows me two superimposed images-  the correct one and the one from the origin of frameName as seen in rviz - I'd like to turn this second image off.
Comment by hsu on 2011-06-26:
There isn't one but we are actively working on it right now.  In the mean time you can see everything being read by gazebo's camera sensor in https://kforge.ros.org/gazebo/hg/file/0d8f8ab482ed/server/rendering/OgreCamera.cc.  We'll make an announcement as soon as we are done updating xml/docs.
Comment by Dimitar Simeonov on 2011-06-24:
hsu, this has been very helpful and I was able to create an artificial camera. Can you point me to the documentation format for sensor:camera I am seeing few images overlap in RVIZ when I look at the camera, and I'd like to try different camera options.
Comment by Dimitar Simeonov on 2011-06-22:
Your second approach seems better for my needs - thanks for the XML!

