Q:

How to load an asdf system and run a lisp file within a launch file?

I followed ControllingTurtlesimFromLisp.
I open emacs and I use "rosrun" to open "turtlesim".
Then I use asdf system to control my turtle.
I need to run a robot system which is opened by "roslaunch", but I can't open emacs by "roslaunch" to load asdf system and lisp file to control my turtle.
So I think I should not use emacs. Now I think I need to load an asdf system and run a lisp file within a launch file.
But how to run a lisp file and load an asdf system within a launch file?

My package name is "flower_cram_turtlesim_control". I made a flower_cram_turtlesim_control.asd in this package. I made a flower_cram_turtlesim_control.lisp in src. I add
  rospack_add_lisp_executable(bin/turtle_controller flower-cram-system flower_cram_turtlesim_control:main)

in my CMakeLists.txt.
After "rosmake", I tried executing it, but it didn't work. Here is the error message:
  flower@flower:~/ros/flower_cram_turtlesim_control/bin$ ./turtle_controller 
  Roslisp exiting due to condition: SB-INT:SIMPLE-READER-PACKAGE-ERROR at 34 (line 1, column 34) on #<SB-IMPL::STRING-INPUT-STREAM
  
                                                                                                      {10040722B1}>:
                                      package "FLOWER_CRAM_TURTLESIM_CONTROL" not found
  flower@flower:~/ros/flower_cram_turtlesim_control/bin$

What should I do?

Originally posted by Jui Wang on ROS Answers with karma: 15 on 2012-05-02
Post score: 1

A:

Roslisp provides a way to create a script that loads an asdf system and run a lisp function. Assume you created the asdf file turtle-controller in the ROS package turtle_controller. The lisp package is call turtle-controller and your entry point is the lisp function main. To get an executable, do the following:

Create a lisp "main" function that is the entry point for the script. Let's call it main for now.

Open your package's CMakeLists.txt and add the following at the end:
rospack_add_lisp_executable(bin/turtle_controller turtle-controller turtle-controller:main)

rosmake turtle_controller

Now you should have a binary in turtle_controller/bin. Try executing it. If it works, you can also use it in launch files, e.g.:
<roslaunch>
  <node name="turtle_controller" type="turtle_controller" pkg="turtle_controller" />
</roslaunch>

Originally posted by Lorenz with karma: 22731 on 2012-05-02
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by Jui Wang on 2012-05-13:
I tried your solution, but I met some problem. I edited my question, and my problem is show on the above. Thank you very much. :)
Comment by Lorenz on 2012-05-13:
It seems like you didn't define the package FLOWER_CRAM_TURTLESIM_CONTROL. Can you please add how your defpackage call looks like? Maybe your complete asd file could help as well.
Comment by Jui Wang on 2012-05-16:
I defined the package FLOWER_CRAM_TURTLESIM_CONTROL in my asd file. Then I met a new problem. Here is my error message: Roslisp exiting due to condition: The function COMMON-LISP-USER::SEND-VEL-CMD is undefined. How to solve it? Thank you.
Comment by Lorenz on 2012-05-16:
That's a package problem. SEND-VEL-CMD should be in package FLOWER-CRAM_TURTLESIM_CONTROL. I guess you are missing a (in-package :flower_cram_turtlesim_control) at the beginning of your source file. I suggest follow the instructions at http://ros.org/wiki/cram_pl/Tutorials/CreatingCramPackage

