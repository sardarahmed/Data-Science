Q:

Simulating robot_localization on pioneer3at with xsens 300 AHRS

I am testing robot_localization using the receive_xsens stack listed here: link text, and the ros-pioneer3at stack listed here: link text.
I set up the frame id's to match those in the pioneer3at simulation stack as follows:
map_frame = Pioneer3AT/map
odom_frame = Pioneer3AT/odom
base_link_frame = Pioneer3AT/base_link
world_frame = Pioneer3AT/odom

I configured xsens imu to produce orientation, angular velocity, and acceleration. The imu0 configuration looks like this:
<param name="imu0" value="/imu/data" />

I will incorporate p3at hardware later with wheel encoders. For now trying to fuse simulated odometry from the ros-pioneer3at stack. Specifically, I have configured the odom0 as follows:
<param name="odom0" value="Pioneer3AT/pose" />

After configuring, I launch the ros-pioneer3at simulation, then launch the receive_xsens hardware, then launch the ekf_localization to fuse the sensor and simulation data.
There is no data being published to odometry/filtered. I am not sure where to start the debugging.
-----edit 1-----
Here is the node graph:
rosgraph.png
-----edit 2-----
Thanks for the insight!
Here is the script for /Pioneer3AT/pose:
import rospy
import tf
from nav_msgs.msg  import Odometry
def subCB(msg):
  P = (msg.pose.pose.position.x, msg.pose.pose.position.y, msg.pose.pose.position.z )
  Q = (msg.pose.pose.orientation.x, msg.pose.pose.orientation.y, msg.pose.pose.orientation.z, msg.pose.pose.orientation.w)
  br = tf.TransformBroadcaster()
  br.sendTransform(P, Q, rospy.Time.now(), "/Pioneer3AT/base_link", "world")
if __name__ == '__main__':
  rospy.init_node('tf_from_pose')
  rospy.Subscriber("/Pioneer3AT/pose", Odometry, subCB)
  rospy.spin()

Also, here is the ekf_localization_node launch file I used to try and fuse the xsens imu hardware with the ros-pioneer3at simulation:
<launch>
<node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization" clear_params="true">
<param name="frequency" value="30"/>  
<param name="sensor_timeout" value="0.1"/>  
<param name="two_d_mode" value="false"/>

<param name="map_frame" value="/Pioneer3AT/map"/>
<param name="odom_frame" value="/Pioneer3AT/odom"/>
<param name="base_link_frame" value="/Pioneer3AT/base_link"/>
<param name="world_frame" value="/Pioneer3AT/odom"/>

<param name="odom0" value="/Pioneer3AT/pose"/>
<param name="imu0" value="/imu/data"/>

<rosparam param="odom0_config">[true, true, true, 
                                true, true, true, 
                                false,  false, false, 
                                false, false, false,
                                false, false, false]</rosparam>

<rosparam param="imu0_config">[false, false, false, 
                               true,  true,  true, 
                               false, false, false, 
                               true,  true,  true,
                               true,  true,  true]</rosparam>

  <param name="odom0_differential" value="false" />
  <param name="imu0_differential" value="false" />
  <param name="imu0_remove_gravitational_acceleration" value="true"/>

  <param name="odom0_pose_rejection_threshold" value="5"/>
  <param name="imu0_pose_rejection_threshold" value="0.3"/>
  <param name="imu0_angular_velocity_rejection_threshold" value="0.1"/>
  <param name="imu0_linear_acceleration_rejection_threshold" value="0.1"/> -->

  <rosparam param="process_noise_covariance">
[0.05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
 0.0, 0.05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
 0.0, 0.0, 0.06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
 0.0, 0.0, 0.0, 0.03, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
 0.0, 0.0, 0.0, 0.0, 0.03, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
 0.0, 0.0, 0.0, 0.0, 0.00, 0.06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
 0.0, 0.0, 0.0, 0.0, 0.00, 0.0, 0.025, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
 0.0, 0.0, 0.0, 0.0, 0.00, 0.0, 0.0, 0.025, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
 0.0, 0.0, 0.0, 0.0, 0.00, 0.0, 0.0, 0.0, 0.04, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
 0.0, 0.0, 0.0, 0.0, 0.00, 0.0, 0.0, 0.0, 0.0, 0.01, 0.0, 0.0, 0.0, 0.0, 0.0,
 0.0, 0.0, 0.0, 0.0, 0.00, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01, 0.0, 0.0, 0.0, 0.0,
 0.0, 0.0, 0.0, 0.0, 0.00, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02, 0.0, 0.0, 0.0,
 0.0, 0.0, 0.0, 0.0, 0.00, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01, 0.0, 0.0,
 0.0, 0.0, 0.0, 0.0, 0.00, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01, 0.0,
 0.0, 0.0, 0.0, 0.0, 0.00, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.015]</rosparam>
</node>  
</launch>

Here are the sample message for /imu/data:
header: 
  seq: 53
  stamp: 
    secs: 1422541047
    nsecs: 981105890
  frame_id: /imu
orientation: 
  x: -0.0338176414371
  y: -0.0273063704371
  z: -0.260511487722
  w: 0.964491903782
orientation_covariance: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
angular_velocity: 
  x: -0.00170594989322
  y: 0.000133183944854
  z: 0.0014496203512
angular_velocity_covariance: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
linear_acceleration: 
  x: 0.690724253654
  y: -0.452333807945
  z: 9.75730419159
linear_acceleration_covariance: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
---

Here is a sample sensor message for /Pioneer3AT/pose:
header: 
  seq: 3203
  stamp: 
    secs: 1422541097
    nsecs: 747374621
  frame_id: /Pioneer3AT/odom
child_frame_id: /Pioneer3AT/base_link
pose: 
  pose: 
    position: 
      x: 0.000293139455607
      y: 0.00299759814516
      z: 0.17000131309
    orientation: 
      x: 2.56361946104e-06
      y: 7.77009058467e-06
      z: 0.0016544693635
      w: 0.999998631331
  covariance: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
twist: 
  twist: 
    linear: 
      x: 0.0
      y: 0.0
      z: 0.0
    angular: 
      x: 0.0
      y: 0.0
      z: 0.0
  covariance: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
---

---edit 3---
Still trying to make it work! I now started trying to get odometry working without an imu as you suggest. robot_localization improves the estimate as there is less drift than before.
Next, I attempt to integrate the imu. I have an updated launch file here:
<launch>

<node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization" clear_params="true">

  <param name="frequency" value="30"/>  
  <param name="sensor_timeout" value="1"/>  
  <param name="two_d_mode" value="false"/>

  <param name="map_frame" value="/Pioneer3AT/map"/>
  <param name="odom_frame" value="/Pioneer3AT/odom"/>
  <param name="base_link_frame" value="/Pioneer3AT/base_link"/>
  <param name="world_frame" value="/Pioneer3AT/odom"/>

  <param name="odom0" value="/Pioneer3AT/odom"/>
  <param name="imu0" value="/imu"/>

  <rosparam param="odom0_config">[true, true, true, 
                                  true, true, true, 
                                  false,  false, false, 
                                  false, false, false,
                                  false, false, false]</rosparam>

  <rosparam param="imu0_config">[false, false, false, 
                                 true,  true,  true, 
                                 false, false, false, 
                                 true,  true,  true,
                                 true,  true,  true]</rosparam>

  <param name="odom0_differential" value="true" />
  <param name="imu0_differential" value="true" />

  <param name="imu0_remove_gravitational_acceleration" value="true"/>

  <param name="odom0_pose_rejection_threshold" value="5"/>
  <param name="imu0_pose_rejection_threshold" value="0.3"/>
  <param name="imu0_angular_velocity_rejection_threshold" value="0.1"/>
  <param name="imu0_linear_acceleration_rejection_threshold" value="0.1"/>

  <rosparam param="process_noise_covariance">[0.05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                              0.0, 0.05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                              0.0, 0.0, 0.06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                              0.0, 0.0, 0.0, 0.03, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                              0.0, 0.0, 0.0, 0.0, 0.03, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                              0.0, 0.0, 0.0, 0.0, 0.00, 0.06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                              0.0, 0.0, 0.0, 0.0, 0.00, 0.0, 0.025, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                              0.0, 0.0, 0.0, 0.0, 0.00, 0.0, 0.0, 0.025, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                              0.0, 0.0, 0.0, 0.0, 0.00, 0.0, 0.0, 0.0, 0.04, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                              0.0, 0.0, 0.0, 0.0, 0.00, 0.0, 0.0, 0.0, 0.0, 0.01, 0.0, 0.0, 0.0, 0.0, 0.0,
                                              0.0, 0.0, 0.0, 0.0, 0.00, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01, 0.0, 0.0, 0.0, 0.0,
                                              0.0, 0.0, 0.0, 0.0, 0.00, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02, 0.0, 0.0, 0.0,
                                              0.0, 0.0, 0.0, 0.0, 0.00, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01, 0.0, 0.0,
                                              0.0, 0.0, 0.0, 0.0, 0.00, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01, 0.0,
                                              0.0, 0.0, 0.0, 0.0, 0.00, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.015]</rosparam>

    </node>
</launch>

I connect Pioneer3AT/base_link->/imu with the following:
<launch>
  <node pkg="tf" type="static_transform_publisher" name="link1_broadcaster" args="0 0 0 0 0 0 1 /Pioneer3AT/base_link /imu 100" />
</launch>

The tf_tree is here with ekf node running: 
One observation:
I notice that in RVIZ the wheels of the P3AT bounce up and down every few seconds. Is this likely because I am trying to set position/orientation with two broadcasters?

Originally posted by Orso on ROS Answers with karma: 37 on 2015-01-26
Post score: 0

Original comments
Comment by l0g1x on 2015-01-26:
your topics might be namespaced to "pioneer3AT/imu/data" for example. can you post a picture of the ros node graph from rqt?
Comment by l0g1x on 2015-01-26:
Seems like you only have one input source (imu). I may be wrong, but im pretty sure you may need at least two. (wheel odometry, GPS, etc..)
Comment by Orso on 2015-01-26:
@Tom Moore:
--Pioneer3AT/pose is of the type nav_msgs.msg/Odometry. I have included the scripts in my original post, along with my ekf_localization_node, and a sample message from each sensor.
--Still trying to get one sensor at a time up and running.
--Not able to run /imu/data alone.
Comment by Tom Moore on 2015-01-28:
Would you mind just posting one example of each sensor message? You don't need to do record all of them with -p. Just do rostopic echo, copy a single message, and paste it in the question. I'm not trying to debug all your data. I just want to see one sample message of each. Thanks!
Comment by Tom Moore on 2015-01-29:
Ha, no, sorry, I meant the entire message, complete with frame_ids. Like this (click the "more" link in the question to see the whole thing).
Comment by Tom Moore on 2015-02-08:
What do you mean by "set position/orientation with two broadcasters"? Do you still have the P3 node broadcasting the odom->base_link transform as well?
Comment by Orso on 2015-02-08:
I meant that ekf_localization is broadcasting odom->base_link and Gazebo_Bridge is broadcasting odom->base_link. I could not realize another way to provide odom data in my current setup. For now, I am fusing simulation odom data, with xsens data. Later planned to use wheel odometry data.
Comment by Tom Moore on 2015-02-09:
What do you mean by "provide odom data"? You simply can not have two different nodes publishing the same transform. If you are running ekf_localization_node, it is providing your odometry message and the odom->base_link transform.

A:

One data source will work.
What message type is Pioneer3AT/pose? If it's a PoseWithCovarianceStamped, then your configuration is wrong. Change it to
<param name="pose0" value="Pioneer3AT/pose" />

When in doubt, start with one sensor at a time. Get your pose data working, then add the IMU, etc.
EDIT: Also, the best thing to do is paste your entire ekf_localization_node launch file, and post a sample message from each sensor.
EDIT 2: Your IMU data appears to be in the /imu frame. Are you providing a transform from /imu to /Pioneer3AT/base_link? Also, you want to make sure that your Pioneer code is not broadcasting a /Pioneer3AT/odom->/Pioneer3AT/base_link transform.
EDIT 3: So I ran your bag file with the launch file you posted. I am definitely getting publications on /odometry/filtered, though the only data going into it is IMU data, because your bag didn't have any Pioneer odometry messages in it. If you're still having trouble, do this for me:

Set up your robot as before, without ekf_localization_node running. Bring everything up.
Start bagging everything.
Drive your robot in some pattern. A square works well. Make note of how you drove the robot (e.g., clockwise turns, leg lengths, etc.).
Post the bag, and let me know what, if any, output you were getting from ekf_localization_node.

EDIT 4: If you download the bag file you posted, and then start playing it back, and do rostopic echo /Pioneer3AT/pose, you'll see that no messages are published to /Pioneer3AT/pose (or you can just do rosbag info on the bag and see that no odometry messages are in there). Now run your system live, and do rostopic echo /Pioneer3AT/pose. If nothing comes out, then you've got a problem with your odometry publishing.
EDIT 5 (in response to comment): here's a screenshot of the output of your bag after about 30 seconds. Is this what you mean by "light years"?

This is exactly what I would expect to see from a single IMU being used for your state estimate. You're fusing linear acceleration, which is typically pretty noisy, and is clearly not zero-mean in this case, as you are creeping along in all three dimensions. If you have no other measurements from other sensors to help, small errors in your IMU acceleration will accumulate and lead to false velocity, which will continue to grow infinitely, and your position will as well.
Long story short: you can't get a good state estimate with a single IMU by itself.
Re: the odom->base_link transform, see REP-105. ROS assumes three principal frames: map, odom, and base_link (or whatever naming scheme you want). The purpose of packages like robot_localization is to provide two things:

A nav_msgs/Odometry message with the robot's current pose estimate
A transform from odom->base_link or a transform from map->odom. With your configuration, we are going from /Pioneer3/odom->/Pioneer3/base_link. This transform will contain effectively the same data as the message, but will be used by tf. Note that the transform from the odom frame to the base_link frame is equivalent to your pose in the world (technically, it's the inverse, but when you put the transform together, you use the same data as your message).

Now, tf does not like two different nodes broadcasting the same transform. The Pioneer node you're using has an option that allows it to broadcast the /Pioneer3/odom->/Pioneer3/base_link based on its raw wheel odometry. You want a better estimate of your position, so you fuse the raw wheel odometry with IMU data. This produces the two outputs above.

Originally posted by Tom Moore with karma: 13689 on 2015-01-27
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by Orso on 2015-01-28:
I am not providing a transform from /imu frame to /Pioneer3AT/base_link. I believe that I had the broadcaster on from /Pioneer3AT_Gazebo, broadcasting a /Pioneer3AT/odom->/Pioneer3AT/base_link transform. Sorry about that.
Comment by Tom Moore on 2015-01-29:
No worries! Try providing the /Pioneer3AT/base_link->imu transform (you can probably just use tf's static_transform_publisher). Then disable the broadcast of the odom->base_link transform from Gazebo. Let me know if that helps.
Comment by Orso on 2015-01-30:
I tried tf's static_transform_publisher for Pioneer3AT/base_link->imu while disabling broadcast of odom->base_link. /odometry/filtered publish's pose and orientation data. Both grow without bounds, and seem unaffected by the imu. Would you have any other suggestions? Greatly appreciated!
Comment by Tom Moore on 2015-01-30:
Can you run your system without running anything from robot_localization, and then post a bag? Thanks!
Comment by Tom Moore on 2015-01-30:
Unless you have a Kinect/camera/LIDAR, then yes.
Comment by Orso on 2015-01-30:
Tom: Here is a link to the bag file: link text
Please let me know if I can provide anything else....Is it best to post in the question? Thanks!
Comment by Orso on 2015-02-02:
Here is link to bag file: link text. I turned off Pioneer3AT/odom->Pioneer3AT/base_link. Just using imu sensor for now. I moved forward a few meters, turned CCW, forward a few meters, CCW, forward a few meters.
Comment by Orso on 2015-02-03:
The bag file is in the previous comment. This time I surely had nothing running from robot_localization (Sorry about the previous bag file that did), and I got no output from robot_localization. Thanks!
Comment by Orso on 2015-02-03:
Right. I tried not publishing odometry data to Pioneer3AT/pose in order to work with just the imu sensor. Do I need to have that published? Thanks!
Comment by Tom Moore on 2015-02-03:
I guess it depends on what remains to be answered in your question. When I use your launch file, the IMU data is clearly being integrated and a state estimate is being produced (i.e., the /odometry/filtered message gets published). Is that not the case for you?
Comment by Orso on 2015-02-03:
The IMU data is being integrated in my case too, but the state estimate is off by light years. Also, it is unaffected by any motion of the IMU. I turned off the odom->base_link transform, and I am not sure how to get pose data without that broadcast.

