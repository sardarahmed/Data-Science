Q:

What is the UDP port subscribers open up?

In preparing/configuring networking for a ROS environment, I have noticed that ROS subscribers (and rosout) opens UDP ports.
(from TCPView)
KineticListener.exe **4908  UDP ASHTRAY-1** 52513   *   *                                           
KineticListener.exe 4908    TCP ashtray-1   51328   desktop-mp2jcia 3143    ESTABLISHED

Given I am using TCPROS, I am wondering why this is so and what this 52513 port is for.  UDP is not optimal, because I can't route UDP through the NAT, so if these UDP ports are important for something I may not be able to work around it.  (rosout.exe also opens UDP, but it is a subscriber, so I think all subscribers do it).
I would just like to know: What is this UDP port for?    I would like to ignore it, because I can't (for many reasons) route UDP through the firewall.
NOTE: if you notice the .exe extension and such, yes...this is a ROS installation (kinetic) on windows.  I have ported the ROS client libraries and the python infrastructure (roscore, etc.) and they work very well with very little modification.

Originally posted by codenotes on ROS Answers with karma: 261 on 2017-09-27
Post score: 0

A:

I would just like to know: What is this UDP port for?

Afaik each ROS node will also open a UDP port to facilitate subscribers that would like to exchange messages over UDPROS. Subscribers can negotiate that by adding the unreliable hint to their TransportHints.
See also: wiki/roscpp/Overview - Publishers and Subscribers - Subscribing to a Topic - Transport Hints.

I would like to ignore it, because I can't (for many reasons) route UDP through the firewall.

As long as your subscribers do not request subscriptions over the unreliable transport (ie: use UDPROS), firewalling those UDP ports should be fine.
There may even be fallback behaviour built-in, but I'm not sure of this: if the unreliable transport doesn't work, the reliable one (ie: TCPROS) gets used automatically.

NOTE: if you notice the .exe extension and such, yes...this is a ROS installation (kinetic) on windows. I have ported the ROS client libraries and the python infrastructure (roscore, etc.) and they work very well with very little modification.

You're referring to codenotes/ros_cygwin here, correct?

Originally posted by gvdhoorn with karma: 86574 on 2017-09-27
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by codenotes on 2017-09-27:
Actually, NOT cygwin, pure windows.   I became frustrated with the cygwin layer and just sat down for a couple days and went through all python backend stuff and amended it to work on raw windows (10 anyway).   The Visual C++ version of the roscpp and TF libraries I had done some time ago.
Comment by gvdhoorn on 2017-09-27:
That's very nice.
Do you intend to provide those ports to the community as well?
Comment by codenotes on 2017-09-27:
BTW, thank you for the answer here...that puts my fears at rest.   It is pretty cool to be doing roscore and the console tools (rostopic, rosnode, etc.) purely on windows.  All that backed architecture works real well, credit to you guys. all that is needed is a change to the use of python's popen.
Comment by codenotes on 2017-09-27:
I do plan to share, absolutely.  Not sure of the best way...I could document my steps for others to reproduce via a ROS wiki...not sure.  Open to suggestions.   There are remarkably few patches needed on the python/roscore and the roscpp/TF libraries.
Comment by gvdhoorn on 2017-09-27:
Just keep in mind I'm also "just a user". So my answers are based on my (current) understanding.
Comment by gvdhoorn on 2017-09-27:
re: sharing: the current instructions for a 'native ROS install' on Windows date back to Electric, Fuerte and Groovy. See wiki/win_ros fi. It would be awesome if we could update that for Kinetic. The patches themselves could either be upstreamed, or kept in a ..
Comment by gvdhoorn on 2017-09-27:
.. separate repository. As long as build instructions are available I imagine people should be able to manage. Binary distributions could then always be considered.
Comment by codenotes on 2017-09-27:
it's all good...your comment jives with my read of the source...but there's a lot going on, so just wanted to make sure.  Anyway, if it proves an issue, I can patch roscpp and remove it...but I really don't like changing the core libraries too much.
Comment by codenotes on 2017-09-27:
windows has a package manager now (apparently) vcpkg or something. Maybe I just package for that. Well, one way or another, I will get the steps/patches out.   But credit to y'all:  the c++ source, python and roscpp has a large number of provisions for win32.  Not much needs to be added.
Comment by gvdhoorn on 2017-09-27:
Hm. That pkg manager might be a nice idea. ROS2 uses chocolately, afaik.
Patches themselves could probably be upstreamed, guarded with appropriate #ifdefs, similar to how some of the code paths for WIN32 are now included. I'm pretty sure those would be accepted.
Comment by gvdhoorn on 2017-09-27:\

But credit to y'all: the c++ source, python and roscpp has a large number of provisions for win32. Not much needs to be added.

can't take credit for it: that is largely the work of @Daniel Stonier and others on win_ros.

