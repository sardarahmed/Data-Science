Q:

Unknown tf::filter_failure_reasons in rviz

Hey,
I have a really weird bug .. I have a laser scanner (xv11) which is publishing data at approximately 5hz. If I visualize this in rviz, the messages seems to be visualized fine if I set the fixed frame equal to the frame of the laserscan message (base_laser_link). However if I change the fixed frame to base_link, I see a delay of approximately 1 second. I also tried sending laserscan messages with another device (asus xtion) at 5hz with the same link, which does not appear to be delayed.
The transform between base_laser_link and base_link is published by my robot_state_publisher and this is working fine, otherwise the asus xtion would also have problems..
In addition, if I set the queue size for both LaserScan display to 1, I only see the asus xtion message remain. The laserscanner message claims it has an unknown reason for why the transform failed.
Also, if I change the laserscan display in rviz of the xv11 laserscanner topic to that of the asus xtion, I see the same delay as with the xv11! As if that display is in a bugged state or something. So I can have both displays on, both listening to the xtion, one of which is delayed, the other is not. They both read in from the same topic, same queue size, same settings... What in earth could be causing this?
Best regards,
Hans

Originally posted by Hansg91 on ROS Answers with karma: 1909 on 2014-05-02
Post score: 0

Original comments
Comment by Stefan Kohlbrecher on 2014-05-02:
The latter part of your post suggests this canÂ´t be the explanation of your issue, but the one second delay would be pretty well explained if your XV-11 driver timestamped the LaserScan messages incorrectly (e.g. 1 second into the future). Have you looked at the timestamps?
Comment by Hansg91 on 2014-05-02:
I did, I had both devices publishing and echoed both topic side by side, took a screenshot so that I could compare the times and they were nearly identical. Timestamps being wrong wouldn't explain the delay when both displays listen to the same topic though.. I have never seen such a weird bug :p

A:

Okay... apparently the culprit was the LaserScan::time_increment value. We had it set to some (apparently) too large value. What good does this value do anyway? Why is there a scan_time and time_increment? Isn't it always so that scan_time = time_increment * ranges.size() ?
Sorry, this is both a question and an answer in one, I should probably start a new question.

Originally posted by Hansg91 with karma: 1909 on 2014-05-09
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by Stefan Kohlbrecher on 2014-05-09:
Interesting. Certainly sounds like a good question to ask ;)

