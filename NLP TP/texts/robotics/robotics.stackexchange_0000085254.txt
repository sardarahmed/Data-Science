Q:

How to build a persistent hash?

I want to have a node that subscribes to some messages and builds from that a data structure (which I would think of as a hash or dictionary). I would like the available keys not to be hardwired into the message definitions.
So calling this node the notekeeper, who subscribes to notes, I would want something like this:
note "name", "robot1"
note "mood", "happy"
note "emotion", 12
And then subsequently I would like other nodes using the notekeeper as a service (perhaps) asking
get_note "mood" and have it return "happy"
Do you follow? What's a good ROSish way of doing this?
Followup
My question comes from the fact that I am not sure of the process model that is involved and what kind of variable, object instance, global, survives while waiting for a subscription callback. If you store it in a dict as you recommend, where should that go, as an instance of a class created in the "main" program, in a "global" or where? Obviously it will not survive a crash of the node (or the robot).

Originally posted by pitosalas on ROS Answers with karma: 628 on 2018-02-10
Post score: 0

Original comments
Comment by lucasw on 2018-02-11:
Followup - I usually use a python class like in https://github.com/lucasw/simple_sim_ros/blob/master/sim_clock/scripts/clock.py , the dict would be created in the init and the subscribe and service callbacks would be class methods.  It's not more 'rosish' than any other approach but it works.
Comment by lucasw on 2018-02-11:
If you want to save and reload the data the easiest way is probably putting it into a yaml file https://stackoverflow.com/questions/12470665/how-can-i-write-data-in-yaml-format-in-a-file

A:

You can define your own key-pair message/s and a corresponding service with a key in the request and the value in the response.  The simplest thing would be to store initially non-string values into a string and have the msg and srv be each two strings, the 12 from your example would be a "12".
The node would subscribe to the StringString message type and be a String service provider, it could have a python dict or C++ std::map<std::string, std::string> for the data structure.
Or just use rosparams?

Originally posted by lucasw with karma: 8729 on 2018-02-10
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by pitosalas on 2018-02-11:
Thanks! See followup in original question?

