Q:

Typical Methods of Building Large 3D Maps?

I'd like to build a 3D map of our lab (a number of rooms and hallways and cubicles, etc) using a Kinect and/or Turtlebot.
I've looked into a number of methods (right now I'm looking at possibly using RGBDSLAM), but I'd like to know if there are any typical methods people use.
Is RGBDSLAM a good choice for this? Are there other standard methods people use? What are their pros and cons?
(Related side-note: I tried using a Turtlebot with gmapping to build a 2D map of one section of the office, and it came out horribly. It also refused to work properly with any sort of loop closures involving hallways, I think largely because of the Turtlebot's horrible odometry.)
Edit:
I Heart Robotics provided some very useful information, but if anyone has more information to offer, I'd very much appreciate it! :)

Originally posted by Yo on ROS Answers with karma: 183 on 2012-03-22
Post score: 9

Original comments
Comment by I Heart Robotics on 2012-03-23:
Please ask the TurtleBot problem as a separate question with any diagnostic information you have. Also, you may want to check that the gyro is calibrated and that you are using the latest turtlebot code. The calibration code has been improved here https://kforge.ros.org/turtlebot/trac/ticket/111
Comment by I Heart Robotics on 2012-03-23:
Also this belongs in a seperate question but this may also help with tuning the parameters for gmapping. http://www.iheartrobotics.com/2011/10/mapping-environment.html
Comment by Yo on 2012-03-23:
I mostly included that just to note other similar things I've tried, but thanks for the info -- it looks very helpful for if I decide to try that again. :)

A:

This is an area of open research, with several research groups working in slightly different directions. So, I am not sure there is a consensus on what is the best approach.
http://openslam.org is a nice resource the provides code for some 2D and 3D SLAM systems.
Also, if you are looking for papers you may want to look at the archives for the RGB-D Workshop at RSS. http://www.cs.washington.edu/ai/Mobile_Robotics/rgbd-workshop-2011/home.html
The biggest problems I see with large scale mapping is managing the massive amount of data coming from the sensor and limiting the growth of the map over time without discarding critical information. One solution is to simply wait for Moore's law to provide faster processors.

Originally posted by I Heart Robotics with karma: 403 on 2012-03-23
This answer was ACCEPTED on the original site
Post score: 5

Original comments
Comment by Yo on 2012-03-23:
As odd as it might sound, I'm actually semi working alongside (kinda complicated) one of those research groups. ;) Part of why I'm asking is I wanted to try to see things from the user/consumer side instead of the developer side. Thanks for the response, that's helpful information!
Comment by I Heart Robotics on 2012-03-23:
Something like SLAM6D http://openslam.org/slam6d.html seems pretty useful for surveyors and architects, even in the state it is in now.
Robots which could benefit the most, such as quadrotors with 6DoF are often very cpu limited which makes 3DSLAM even more difficult to do in real-time.
Comment by I Heart Robotics on 2012-03-23:
Also, for those who are interested, Dr. Nüchter has a book that I can recommend that covers many of the fundamentals of 3D mapping.
Andreas Nüchter. 3D Robotic Mapping. Springer Tracts in Advanced Robotics (STAR), ISBN 978-3540898832, 210 pages, Springer Verlag

