Q:

make_unique vs make_shared

Hello,
In the TF2 listener tutorial (c++), the buffer is defined as a std::unique_ptr whereas the listener is a std::shared_ptr.
tf_buffer_ = std::make_unique<tf2_ros::Buffer>(this->get_clock());
tf_listener_ = std::make_shared<tf2_ros::TransformListener>(*tf_buffer_);

Is this intentional? I.e. is there a specific reason for the listener to be a std::shared_ptr, or could it just as well also have been a std::unique_ptr?

Originally posted by jrtg on ROS Answers with karma: 145 on 2022-11-23
Post score: 1

A:

Hi,
I am not sure it matters a lot.
Actually when using tf inside a node you can also not use pointers at all. You just have to initialize the constructors of buffer and listener in the member initializer list.
class MyNode : public rclcpp::Node
{
public:
    MyNode(rclcpp::NodeOptions options)
        : Node("the_name", options), tf_buffer(get_clock()), tf_listener(tf_buffer)
    {
    // constructor
    }

private:

// TF 2 stuff
tf2_ros::Buffer tf_buffer; // order matters, buffer has to be built before listener
tf2_ros::TransformListener tf_listener;

}

You can even do it in the member variable declaration:
class MyNode : public rclcpp::Node
{
public:
    MyNode(rclcpp::NodeOptions options)
        : Node("the_name", options)
    {
    // constructor
    }

private:

// TF 2 stuff
tf2_ros::Buffer tf_buffer{get_clock()};
tf2_ros::TransformListener tf_listener{tf_buffer};

}

Originally posted by Olivier Kermorgant with karma: 280 on 2023-06-02
This answer was ACCEPTED on the original site
Post score: 0

