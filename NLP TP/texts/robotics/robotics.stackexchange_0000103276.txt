Q:

Best practices or code examples of how a "complete system" manages nodes

Most good examples of ROS systems I've seen on Github make strong use of launch files, and keep a good separation between nodes.
What I have not seen is how a complete robot system handles node faults.  For example if a node goes down while the robot is running, there are probably several potential courses of action:

try to relaunch the node
if after 3 attempts the node does not come back, log or report this to some notification system

While that seems self-explanatory, I am curious if anyone has an example of the implementation of this?
My primary issue with ros2 has always been a lack of open source "professional projects" where one can learn how a production-grade ros2 code base looks like.  There are quite a few using ros-neotic out in the wild however.

Originally posted by sameh4 on ROS Answers with karma: 89 on 2023-05-18
Post score: 1

A:

Look at Nav2 + Lifecycle Manager, that is a professionally maintained and commercially deployed system that has checks on deadlocked or crashed servers to handle respawn and lifecycle management to bring down the system into a safe state until the fault is handled, when that fault is internal to Nav2.
It is however still on the application developer for higher level failures to put the system into a safe state, but we make it as easy as possible with tooling and the infrastructure to support Nav2 safe state setting once your application detects the problem to require it.

Originally posted by stevemacenski with karma: 8272 on 2023-05-18
This answer was ACCEPTED on the original site
Post score: 1

