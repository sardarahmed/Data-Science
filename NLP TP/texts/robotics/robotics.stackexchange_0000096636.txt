Q:

diff_drive_controller failing to launch

I want to implement differential drive on a 4 Wheel robot of my own, similar to the Husky and Jackal. In fact both of these mobile robots use diff_drive_controller. However when I implement the controller I get the following problem:
[ERROR] [1595632494.285913005, 0.476000000]: Robot description couldn't be retrieved from param server.
[ERROR] [1595632494.285965899, 0.476000000]: Failed to initialize the controller
[ERROR] [1595632494.286022155, 0.476000000]: Initializing controller 'differential_drive' failed
[ERROR] [1595632495.287013, 1.468000]: Failed to load differential_drive

I am confused to why I get this error as the very first thing I do in my launch file is load the param robot_description with the URDF file of the robot. I have looked and followed the documentation of the Jackal robot and the wiki page of the diff_drive_controller. I made sure the namespaces are correctly applied and even checked by yaml file. Below I will attach the YAML, launch and URDF files. I thought the solution would be to include a different plugin other than the gazebo_ros_control. Thank you for your help in advance and apologies if this error is on my behalf, I am still new to ROS. I am on Ubuntu 18.04 and ROS Melodic.
<!-- Loads the URDF in the parameter server variable 'robot_description' -->
<param name="robot_description" command="cat $(find monsterborg_description)/urdf/monsterborg.urdf"/>

<!-- Include the file path for empty world, launches the services required for the urdf_spawner node below -->
<include file="$(find gazebo_ros)/launch/empty_world.launch"/>

<!-- Arguements for Gazebo --> 
<arg name="x" value="0.0"/>
<arg name="y" value="0.0"/>
<arg name="z" value="0.5"/>
<arg name="urdf_robot_file" value="$(find monsterborg_description)/urdf/monsterborg.urdf" />
<arg name="robot_name" value="monsterborg"/> 

<!-- Node to spawm the robot in Gazebo --> 
 <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
args="-urdf -x $(arg x) -y $(arg y) -z $(arg z)  -model $(arg robot_name) -param robot_description"/>

<!-- Launch the robot_state_publisher to broadcast transforms to '/tf' --> 
<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn='false' output="screen">
    <remap from="/joint_states" to="/monsterborg/joint_states" />
</node>

<!-- Load the joint controller configuration-->
<rosparam file='$(find monsterborg_description)/config/monsterborg_controllers.yaml' command='load'/> 

<!-- Load the controllers --> 
<node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" ns="/monsterborg"
      args="joint_state_controller differential_drive"/> 

monsterborg:
  joint_state_controller:
    type: joint_state_controller/JointStateController
    publish_rate: 50

  differential_drive:
    type: diff_drive_controller/DiffDriveController
    left_wheel: [base_to_lf_wheel, base_to_lb_wheel]
    right_wheel: [base_to_rf_wheel, base_to_rb_wheel]
    publish_rate: 50
    pose_covariance_diagonal: [0.001, 0.001, 1000000.0, 1000000.0, 1000000.0, 0.03]
    twist_covariance_diagonal: [0.001, 0.001, 0.001, 1000000.0, 1000000.0, 0.03]
    cmd_vel_timeout: 0.25
    base_frame_id: base_link
    wheel_seperation: 0.09
    wheel_radius: 0.0525
    linear:
      x:
        has_velocity_limits: true
        max_velocity: 2.0        # m/s
        has_acceleration_limits: true
        max_acceleration: 20.0   # m/s^2
    angular:
      z:
        has_velocity_limits: true
        max_velocity: 4.0        # rad/s
        has_acceleration_limits: true
        max_acceleration: 25.0   # rad/s^2

<link name="base_link">
    <visual>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
            <box size="0.16 0.14 0.05"/>
        </geometry>
        <material name="white">
            <color rgba="1 1 1 1"/>
        </material>
    </visual>

    <inertial>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <mass value="3"/>
        <inertia ixx="0.007025" ixy="0" ixz="0"
                 iyy="0.005525" iyz="0" izz=" 0.0113"/>
    </inertial>

    <collision>
        <origin xyz="0 0 0 " rpy="0 0 0"/>
        <geometry>
            <box size=" 0.16 0.14 0.05"/>
        </geometry>
    </collision>

</link>

<gazebo reference="base_link">
    <kp>100000.0</kp>
    <kd>100000.0</kd>
    <mu1>10.0</mu1>
    <mu2>10.0</mu2>
    <material>Gazebo/White</material>
</gazebo>

<link name="lb_wheel">
    <visual>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
            <cylinder radius="0.0525" length="0.05"/>
        </geometry>
        <material name="black">
            <color rgba="0 0 0 1"/>
        </material>
    </visual>

    <inertial>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <mass value="0.104"/>
        <inertia ixx="9.332916666666665e-05" ixy="0" ixz="0"
                 iyy="9.332916666666665e-05" iyz="0" izz="0.00014332499999999997"/>
    </inertial>

    <collision>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
            <cylinder radius="0.0525" length="0.05"/>
        </geometry>
    </collision>

</link>

<gazebo reference="lb_wheel">
    <kp>100000.0</kp>
    <kd>100000.0</kd>
    <mu1>1.0</mu1>
    <mu2>1.0</mu2>
    <material>Gazebo/Black</material>
</gazebo>

<gazebo>
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
        <robotNamespace>/monsterborg</robotNamespace>
    </plugin>
</gazebo>

<joint name="base_to_lb_wheel" type="continuous">
    <origin xyz="-0.065 0.0935 0" rpy="-1.5708 0 0"/>
    <parent link="base_link"/>
    <child link="lb_wheel"/>
    <axis xyz="0 0 1"/>
    <limit effort="10" velocity="100"/>
    <joint_properties damping="0.0" friction="0.0"/>
</joint>

<transmission name="tran1">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="base_to_lb_wheel">
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
    </joint>
    <actuator name="motor1">
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
        <mechanicalReduction>1</mechanicalReduction>
    </actuator>
</transmission>

<link name="lf_wheel">
    <visual>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
            <cylinder radius="0.0525" length="0.05"/>
        </geometry>
        <material name="black">
            <color rgba="0 0 0 1"/>
        </material>
    </visual>

    <inertial>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <mass value="0.104"/>
        <inertia ixx="9.332916666666665e-05" ixy="0" ixz="0"
                 iyy="9.332916666666665e-05" iyz="0" izz="0.00014332499999999997"/>
    </inertial>

    <collision>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
            <cylinder radius="0.0525" length="0.05"/>
        </geometry>
    </collision>

</link>

<gazebo reference="lf_wheel">
    <kp>100000.0</kp>
    <kd>100000.0</kd>
    <mu1>1.0</mu1>
    <mu2>1.0</mu2>
    <material>Gazebo/Black</material>
</gazebo>

<joint name="base_to_lf_wheel" type="continuous">
    <origin xyz="0.065 0.0935 0" rpy="-1.5708 0 0"/>
    <parent link="base_link"/>
    <child link="lf_wheel"/>
    <axis xyz="0 0 1"/>
    <limit effort="10" velocity="100"/>
    <joint_properties damping="0.0" friction="0.0"/>
</joint>

<transmission name="tran2">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="base_to_lf_wheel">
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
    </joint>
    <actuator name="motor2">
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
        <mechanicalReduction>1</mechanicalReduction>
    </actuator>
</transmission>

<link name="rf_wheel">
    <visual>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
            <cylinder radius="0.0525" length="0.05"/>
        </geometry>
        <material name="black">
            <color rgba="0 0 0 1"/>
        </material>
    </visual>

    <inertial>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <mass value="0.104"/>
        <inertia ixx="9.332916666666665e-05" ixy="0" ixz="0"
                 iyy="9.332916666666665e-05" iyz="0" izz="0.00014332499999999997"/>
    </inertial>

    <collision>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
            <cylinder radius="0.0525" length="0.05"/>
        </geometry>
    </collision>

</link>

<gazebo reference="rf_wheel">
    <kp>100000.0</kp>
    <kd>100000.0</kd>
    <mu1>1.0</mu1>
    <mu2>1.0</mu2>
    <material>Gazebo/Black</material>
</gazebo>

<joint name="base_to_rf_wheel" type="continuous">
    <origin xyz="0.065 -0.0935 0" rpy="-1.5708 0 0"/>
    <parent link="base_link"/>
    <child link="rf_wheel"/>
    <axis xyz="0 0 1"/>
    <limit effort="10" velocity="100"/>
    <joint_properties damping="0.0" friction="0.0"/>
</joint>

<transmission name="tran3">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="base_to_rf_wheel">
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
    </joint>
    <actuator name="motor3">
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
        <mechanicalReduction>1</mechanicalReduction>
    </actuator>
</transmission>

<link name="rb_wheel">
    <visual>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
            <cylinder radius="0.0525" length="0.05"/>
        </geometry>
        <material name="black">
            <color rgba="0 0 0 1"/>
        </material>
    </visual>

    <inertial>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <mass value="0.104"/>
        <inertia ixx="9.332916666666665e-05" ixy="0" ixz="0"
                 iyy="9.332916666666665e-05" iyz="0" izz="0.00014332499999999997"/>
    </inertial>

    <collision>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
            <cylinder radius="0.0525" length="0.05"/>
        </geometry>
    </collision>

</link>

<gazebo reference="rb_wheel">
    <kp>100000.0</kp>
    <kd>100000.0</kd>
    <mu1>1.0</mu1>
    <mu2>1.0</mu2>
    <material>Gazebo/Black</material>
</gazebo>

<joint name="base_to_rb_wheel" type="continuous">
    <origin xyz="-0.065 -0.0935 0" rpy="-1.5708 0 0"/>
    <parent link="base_link"/>
    <child link="rb_wheel"/>
    <axis xyz="0 0 1"/>
    <limit effort="10" velocity="100"/>
    <joint_properties damping="0.0" friction="0.0"/>
</joint>

<transmission name="tran4">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="base_to_rb_wheel">
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
    </joint>
    <actuator name="motor4">
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
        <mechanicalReduction>1</mechanicalReduction>
    </actuator>
</transmission>

Originally posted by moshahin on ROS Answers with karma: 36 on 2020-07-24
Post score: 0

Original comments
Comment by Humpelstilzchen on 2020-07-27:
I wonder if the robot_description-cat combination works. Did you check if the urdf is ok with
rosparam get /robot_description

A:

Okay so I managed to solve this problem by removing the namespace from the URDF (the gazeb_ros_control plugin), the YAML file and the launch file (the ns=' ' from the controller_spawner package). I don't know why it would work without the namespaces but it does and I am not complaining (however please let me know why if you find out). For people in the future who face a similar problem, make sure you do the following:

Include the gazebo_ros_control plugin in the URDF.
Transmission includes hardware_interface/VelocityJointInterface
Joint names match the YAML left_wheel and right_wheel parameters
The args in the launch contain the name of the controllers in the YAML file.
Check the package is installed (it is) : diff_drive_controller /opt/ros/melodic/share/diff_drive_controller
Make sure the package diff_drive_controller is a dependency of the package.

Originally posted by moshahin with karma: 36 on 2020-07-27
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by gvdhoorn on 2020-10-08:
All good points to check.
Another case where the controller failed to load for me was when either the pose_covariance_diagonal or twist_covariance_diagonal parameters were missing (or both).
Comment by moshahin on 2020-10-08:
@gvdhoorn did you have any trouble when putting a namespace for the controller in the URDF file (the gazebo_ros_control)? I had trouble every time I would fill in the namespace and would just have to leave it empty. This is the case for when I want to spawn multiple robots. It actually solved my issue.

