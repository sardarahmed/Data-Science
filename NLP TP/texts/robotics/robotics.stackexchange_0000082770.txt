Q:

How to know if new message is different from previous message in a subscribed rostopic?

Hello, my question might be very basic. I have a subscriber node that is subscribing to a topic from a publisher. Now, the publisher might keep publishing same message over and over again while occasionally sending a new message to the topic. I want a functionality in my subscriber node that does the following:
if new message received is different from previous message in the topic:
       do something
else (if same message received again)
       do nothing

Can anyone direct me how to do this, please?

Originally posted by medhijk on ROS Answers with karma: 1 on 2017-09-11
Post score: 0

Original comments
Comment by NEngelhard on 2017-09-11:
Have you written the publishing node? Your approach sounds like solving the wrong problem.
Comment by billy on 2017-09-11:
What is difference between "same" message and "new" message? If the publisher processes something and issues a message that happens to have the same value as the previous message, is that a "new" message or a "same" message?
Comment by NEngelhard on 2017-09-12:
I suspect it would be the same message for him and that his problem could be solved by a latched publisher.
Comment by gvdhoorn on 2017-09-12:
This is basically a level- vs edge-triggered signal problem (ie: publish always vs publish only on change).
@NEngelhard's suggestion of using a latched publisher is a good idea, but would require the publisher to not publish when there is nothing to publish.

A:

Hi @medhijk ,
the answer provided by @lmathieu works perfectly in C++.
If you need to do it in python, the concept is the same. I have created a video (https://youtu.be/U3fYcQwV1nY) that show how to do this in Python.
Below you have the code generated on the video. The subscriber subscribes to the /chatter topic and prints the received message only when the message is different from the previous one. If you still have any doubts, just take a look on the video.
The final code is:
#!/usr/bin/env python
import rospy
from std_msgs.msg import String

last_msg = ''

def callback(data):
    
    global last_msg
    
    if data.data != last_msg:
        last_msg = data.data
        rospy.loginfo("I heard a DIFFERENT msg: %s", data.data)
    
    
def listener():

    rospy.init_node('listener', anonymous=True)

    rospy.Subscriber("chatter", String, callback)

    # spin() simply keeps python from exiting until this node is stopped
    rospy.spin()

if __name__ == '__main__':
    listener()

Ruben.

Originally posted by Ruben Alves with karma: 1038 on 2017-09-29
This answer was ACCEPTED on the original site
Post score: 1

