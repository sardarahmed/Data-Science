Q:

how to check if there are waiting messages in a callback queue?

The test case is the following: i receive images from a camera through a callback, and I want to run a loop of processing until a new image arrive. Is there any function that can tell me if there are new messages in the queue? The pseudocode would look like this (i'm looking for new_imagemsg()):
void imagecb(imagemsg)
{
  while(!new_imagemsg())
  {
    optimize(imagemsg);
  }
  return;
}

I tried the following:
void imagecb(imagemsg)
{
  while(static_cast<ros::CallbackQueue*>(nh->getCallbackQueue())->isEmpty())
  {
    optimize(imagemsg);
  }
  return;
}

But it looks like the function isEmpty() always returns false when called from inside a callback, which makes me think that the callback is removed once the callback function finishes instead of when it enters. Unfortunately it looks like CallbackQueue doesn't have a getSize function ( i would like to check if the size is bigger than one).
Any other ideas? clearing the queue from inside a callback function doesn't seem to work either, apart from being kind of hacky.

Originally posted by Javier Romero on ROS Answers with karma: 66 on 2011-04-28
Post score: 2

A:

The callback queues do not have this functionality.  You'll need to clear the queue and build your own which you can track.  If you use the boost shared pointer callbacks you can do this with only pointers and thus relatively efficiently.

Originally posted by tfoote with karma: 58457 on 2011-07-19
This answer was ACCEPTED on the original site
Post score: 1

