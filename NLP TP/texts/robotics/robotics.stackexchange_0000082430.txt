Q:

How to get image from custom server using service?

Hello People,
I am trying to pass image from server to a client. The code complies when I use cv_bridge::toCvCopy, but it says core dumped when I actually call the image from the server. So I am currently trying to do the same thing using cv_bridge::toCvShare, but it throws following error -
error: no matching function for call to ‘toCvShare(robot_vision::request_imageResponse_<std::allocator<void> >::_img_type&, const char [5])’ cv::imshow("view", cv_bridge::toCvShare(srv.response.img, "bgr8")->image);

Inorder to check my server please check my previous question (I have updated the code with working one). My code for client is below -
#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <opencv2/highgui/highgui.hpp>
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>
#include "sensor_msgs/Image.h"
#include <opencv2/imgproc/imgproc.hpp>
#include "robot_vision/request_image.h"
#include <cstdlib>
#include <iostream>

namespace enc = sensor_msgs::image_encodings;

cv_bridge::CvImagePtr cv_ptr;

int main(int argc,char **argv)
{
    ros::init(argc,argv,"image_client_node");
    ros::NodeHandle nh;
    ros::ServiceClient client = nh.serviceClient<robot_vision::request_image>("image_server");
    robot_vision::request_image srv;
    srv.request.request_msg = true;
    if(client.call(srv))
    {
        ROS_INFO("Service initiated");
        try
        {
           //cv_ptr = cv_bridge::toCvCopy(srv.response.img, sensor_msgs::image_encodings::BGR8);
           cv::imshow("view", cv_bridge::toCvShare(srv.response.img, "bgr8")->image);
           cv::waitKey(30);
        }
        catch (cv_bridge::Exception& e)
        {
           ROS_ERROR("cv_bridge exception: %s", e.what());
           //return;
        }
    }
    else
    {
        ROS_ERROR("Failed to call service image_server");
        return 1;
    }
    ros::spinOnce();
    return 0;
}

Originally posted by the_notorious_kid on ROS Answers with karma: 5 on 2017-08-21
Post score: 0

Original comments
Comment by jayess on 2017-08-21:
Please use the Preformat Text (101010) button to make your code readable. http://wiki.ros.org/Support#Do
Comment by the_notorious_kid on 2017-08-21:
Will do it, Thanks @jayess
Comment by jayess on 2017-08-21:
You mention a previous question but I don't see a link to one...
Comment by the_notorious_kid on 2017-08-21:
Done @jayess

A:

According to this answer on Stack Overflow your function call is incorrect.
Here's what the accepted answer says

A shared_ptr to an object owning the
sensor_msgs::Image and the other
A shared_ptr to a sensor_msgs::Image
message You are providing neither one
nor the other.
In your case, the first option should
work, which expects the image as first
parameter and the shared_ptr to the
object owning the image (which is msg)
as second parameter:
cv_bridge::toCvShare(msg->color, msg, "bgr8")

In short, try changing
cv::imshow("view", cv_bridge::toCvShare(srv.response.img, "bgr8")->image);

to
cv::imshow("view", cv_bridge::toCvShare(srv.response.img.color, srv.response, "bgr8"));

(Change srv.response.img.color and srv.response to whatever the equivalent is for your service message, since I don't know exactly how yours is formatted.)

Originally posted by jayess with karma: 6155 on 2017-08-21
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by the_notorious_kid on 2017-08-21:
@ jayees I don't have any msg variable in my client code. The link you shared has a image callback function, i.e. it's a subscriber node using customized message to get image data and msg is boost shared pointer in callback (which I don't have). I am passing the image using service.
Comment by jayess on 2017-08-21:
I updated the answer to remove the msg variable. I think that how the data is being passed (services vs topics) is irrelevant. The main point is how you're calling the cv_bridge::toCvShare function is incorrect.
Comment by the_notorious_kid on 2017-08-22:
I tried with what you said and it throws following error -
error: base operand of ‘->’ has non-pointer type ‘robot_vision::request_imageResponse_<std::allocator<void> >::_img_type {aka sensor_msgs::Image_<std::allocator<void> >}’

Comment by the_notorious_kid on 2017-08-22:
cont....
error: base operand of ‘->’ has non-pointer type ‘robot_vision::request_imageResponse_<std::allocator<void> >::_img_type {aka sensor_msgs::Image_<std::allocator<void> >}’
            cv::imshow("view", cv_bridge::toCvShare(srv.response.img->color,srv.response,"bgr8"));

Comment by jayess on 2017-08-22:
Well, it looks like you didn't do exactly what I wrote. It looks like you used ->color instead of .color.
Comment by the_notorious_kid on 2017-08-22:
this is how .color went -
error: ‘robot_vision::request_imageResponse_<std::allocator<void> >::_img_type’ has no member named ‘color’
                        cv::imshow("view", cv_bridge::toCvShare(srv.response.img.color,srv.response,"bgr8"))

Comment by the_notorious_kid on 2017-08-22:
I managed to solve the core problem by using cv_bridge::toCvCopy. @jayees Thanks for the help though.
Comment by jayess on 2017-08-22:
Great. Post it as answer and you can accept it.

