Q:

How ROS Packages work with each other?

Update2:
As the source code is configured in a catkin workspace, does every package needs a catkin work space or I can put all what I need and what I am developing in one workspace?
Thanks for the answer from @jarvisschultz

Update:
If I want to make modification to some packages, should it be installed by source or sudo install? Any difference?
Thanks for the answer from @jarvisschultz

How ros packages work with each other?
There are packages built from source or built from binary packages, but how do they work?
Any explanations or examples are welcomed

Originally posted by rosder on ROS Answers with karma: 3 on 2016-04-07
Post score: 0

Original comments
Comment by jarvisschultz on 2016-04-11:
If you would like to modify the source code for packages you should definitely be installing the packages from source. One reason would be that many apt-get packages don't include the source code (e.g. C++ nodes will only include the compiled binary not the code).
Comment by jarvisschultz on 2016-04-11:
As another rule of thumb, you generally want to avoid editing code, configurations, scripts, etc. that are placed in areas of your filesystem requiring "root access". Let's say you edit a Python script in /opt/ros/indigo/ . Then the next update to the containing package will overwrite your changes.
Comment by jarvisschultz on 2016-04-11:
The "root access" rule, of course, doesn't always apply. Sometimes you have to edit these things, but try to avoid it unless absolutely necessary.
Comment by jarvisschultz on 2016-04-13:
You can put many packages into a single workspace. You may also want to investigate the concept of workspace chaining AKA workspace overlaying. http://wiki.ros.org/catkin/Tutorials/workspace_overlaying

A:

I suggest you read the ROS Packages page describing the concept of packages. It provides detailed explanations of what a package is, what may be included in a package, how packages define dependencies on other packages, how command line tools and ROS introspection tools operate within the package construct, and more. The distinction of a "binary" package (a package installed with apt-get... a debian package) and a source package (a package that is most likely in a catkin workspace that was compiled on your machine with catkin_make) has very little to do with what a package itself is. If you find yourself confused by the descriptions on the linked page, please edit your original question to provide more detailed questions.

Originally posted by jarvisschultz with karma: 9031 on 2016-04-07
This answer was ACCEPTED on the original site
Post score: 2

