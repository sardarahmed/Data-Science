Q:

Nav 2 - Max speed blocked way under the max vel specified

I'm working with Gazebo and run into an issue with Nav 2. I would like to increase the max speed but I'm not able to do so. It seems the speed is stuck to a maximum of 2m/s while my configuration is as follow :
bt_navigator:
  ros__parameters:
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odometry/filtered_map
    default_nav_to_pose_bt_xml: $(find-pkg-share otto_navigation)/behavior_tree/follow_point.xml
    bt_loop_duration: 10
    default_server_timeout: 20
    plugin_lib_names:
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_compute_path_through_poses_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_drive_on_heading_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_truncate_path_action_bt_node
    - nav2_goal_updater_node_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_distance_traveled_condition_bt_node
    - nav2_single_trigger_bt_node
    - nav2_is_battery_low_condition_bt_node
    - nav2_navigate_through_poses_action_bt_node
    - nav2_navigate_to_pose_action_bt_node
    - nav2_remove_passed_goals_action_bt_node
    - nav2_planner_selector_bt_node
    - nav2_controller_selector_bt_node
    - nav2_goal_checker_selector_bt_node

controller_server:
  ros__parameters:
    controller_frequency: 10.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["goal_checker"]
    controller_plugins: ["FollowPath"]
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 0.25
      stateful: True
    FollowPath:
      # DWB Controller : https://navigation.ros.org/configuration/packages/dwb-params/controller.html
      plugin: "dwb_core::DWBLocalPlanner"
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.02
      PathAlign.scale: 32.0
      PathAlign.forward_point_distance: 0.1
      GoalAlign.scale: 24.0
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 32.0
      GoalDist.scale: 24.0
      RotateToGoal.scale: 32.0
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0
      transform_tolerance: 0.2
      stateful: True
      short_circuit_trajectory_evaluation: true
      # Kinematic : https://navigation.ros.org/configuration/packages/dwb-params/kinematic.html
      max_vel_theta: 3.14
      min_speed_xy: 0.0
      max_speed_xy: 3.0
      min_speed_theta: 0.0
      min_vel_x: 0.0
      min_vel_y: 0.0
      max_vel_x: 3.0
      max_vel_y: 0.0
      acc_lim_x: 1.0
      acc_lim_y: 0.0
      acc_lim_theta: 2.0
      decel_lim_x: -10.0
      decel_lim_y: 0.0
      decel_lim_theta: -2.0
      # XYTheta Iterator : https://navigation.ros.org/configuration/packages/dwb-params/iterator.html
      vx_samples: 20
      vy_samples: 0
      vtheta_samples: 40
      # LimitedAccelGenerator : https://navigation.ros.org/configuration/packages/dwb-plugins/limited_accel_generator.html
      sim_time: 2.0
      # StandardTrajectoryGenerator : https://navigation.ros.org/configuration/packages/dwb-plugins/standard_traj_generator.html
      linear_granularity: 0.05
      angular_granularity: 0.025
      
local_costmap:
  local_costmap:
    ros__parameters:
      always_send_full_costmap: True
      update_frequency: 5.0
      publish_frequency: 2.0
      height: 100
      width: 100
      resolution: 0.05
      robot_base_frame: base_link
      robot_radius: 0.22
      rolling_window: true
      plugins: ["inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.55

# GPS WPF CHANGE: Set rolling global costmap with 50x50 size. See note below
global_costmap:
  global_costmap:
    ros__parameters:
      always_send_full_costmap: True
      update_frequency: 1.0
      publish_frequency: 1.0
      height: 500
      width: 500
      resolution: 0.1
      global_frame: map
      robot_base_frame: base_link
      robot_radius: 0.22
      # When using GPS navigation you will potentially traverse huge environments which are not practical to
      # fit on a big static costmap. Thus it is recommended to use a rolling global costmap large enough to 
      # contain each pair of successive waypoints. See: https://github.com/ros-planning/navigation2/issues/2174
      rolling_window: True     
      track_unknown_space: True 
      # no static map
      plugins: ["inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.55

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    planner_plugins: ['GridBased']
    GridBased:
      plugin: 'nav2_navfn_planner/NavfnPlanner'

waypoint_follower:
  ros__parameters:
    loop_rate: 200
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"   
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

velocity_smoother:
  ros__parameters:
    smoothing_frequency: 20.0
    scale_velocities: false
    feedback: "OPEN_LOOP"
    max_velocity: [3.0, 0.0, 2.5]
    min_velocity: [-0.5, 0.0, -2.5]
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0
    max_accel: [2.5, 0.0, 3.2]
    max_decel: [-2.5, 0.0, -3.2]
    odom_topic: "odom"
    odom_duration: 0.1```

Here is what I see in rviz when I send a goal :

Here is what I see on cmd_vel_nav and cmd_vel (output of velocity smoother)

However, I expect my robot to be able to reach 3m/s because of the 'max_vel_x: 3.0' parameter I set BUT it never happens, even when it has to follow a straight line. Can you help me on this one please ?
Here is the ros2 node list output (I removed irrelevant nodes) :
/behavior_server
/bt_navigator
/bt_navigator_navigate_through_poses_rclcpp_node
/bt_navigator_navigate_to_pose_rclcpp_node
/controller_server
/global_costmap/global_costmap
/lifecycle_manager_navigation
/nav2_container
/planner_server
/smoother_server
/velocity_smoother
/waypoint_follower
/local_costmap/local_costmap
[...]

A:

Its hard to help answer any of these types of questions without reproducable examples. There's no hard limit at 1.8947... in the code, so there's clearly something not configured properly that's blocking you. I can't precisely give you an easy answer without sitting down with it myself and working through it.
Looking at your config, nothing immediately jumps out to me as obviously wrong except perhaps:
      sim_time: 2.0

which might need to be increased for 3m/s?

