Q:

rosparam load only part of yaml

Hi,
Is it possible to load only part of yaml file into the parameter server?
My reason for wanting to do this is, suppose you have a properties.yaml file as follows:
sensors: &COMMON_PROPERTIES
    common_property1: bla
    common_property2: ble
 
sensor1:
    <<: *COMMON_PROPERTIES
    specific_property1: foo
    specific_property2: bar
        .
        .
        .

sensor2:
    <<: *COMMON_PROPERTIES
    specific_property1: foo
    specific_prop2erty: baz
.
.
.

Now, from my launch file, I would like to do:
<node pkg="sensor_pkg" type="sensor_node" name="sensor1">
    <rosparam command="load" file="properties.yaml['sensor1']"/>
</node>

<node pkg="sensor_pkg" type="sensor_node" name="sensor2">
    <rosparam command="load" file="properties.yaml['sensor2']"/>
</node>

Similar to what you can do in xacro. Is it possible?

Originally posted by vbs on ROS Answers with karma: 62 on 2019-05-22
Post score: 0

Original comments
Comment by vbs on 2019-05-24:
Anyone? :|

A:

No, this is not supported.

Edit: so if you want to keep the ability to use anchors and aliases, and your setup is as you show it in your question, then I believe there is no need to load "parts of a yaml file".
The .launch file example you show starts two nodes: sensor1 and sensor2.
The .yaml you show has -- ultimately -- two sections: sensor1 and sensor2.
Private parameters don't necessarily need to be loaded by a rosparam node that is a child of a node to become private parameters. They just need to be loaded in a namespace that corresponds to the name of the node.
So if the private parameters of node sensor1 are loaded from a .yaml file that contains a section called sensor1 and the .yaml file is loaded into the global namespace, the end result will be that the parameters end up in the sensor1 namespace, making them private parameters of the sensor1 node.
The .yaml file doesn't need to be loaded in parts -- in this specific example.
As to a more generic case: I would still recommend using a small Python script for this, as I wrote in my comment.

But I'm in Kinetic and from what I understand support for the yaml type was only added in Lunar.

yes, that is true. So that wouldn't work under Kinetic unfortunately.

Originally posted by gvdhoorn with karma: 86574 on 2019-05-24
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by gvdhoorn on 2019-05-24:
You could potentially use the command variant of param and write a short Python script that dump(..)s a subsection of a yaml.safe_load(..)ed .yaml file to stdout. That would then be parsed as a set of parameters. Not sure if that works though (as I just made that up).
You'd have to use the yaml type, otherwise it'll just be considered text.
Comment by vbs on 2019-05-24:
Thanks! But I'm in Kinetic and from what I understand support for the yaml type was only added in Lunar.
Comment by vbs on 2019-05-24:
But this seemed to me like a direct approach to a common use case and as such I thought it would have natural ROS support. Am I missing a simpler way to implement this?
Comment by gvdhoorn on 2019-05-24:\

Am I missing a simpler way to implement this?

yes. Using multiple files.
Comment by vbs on 2019-05-24:
But then you lose the ability of using YAML anchors and aliases. I've edited my question to illustrate.
Comment by gvdhoorn on 2019-05-24:
Well, your original question did not mention that was one of your requirements. Please do not post incomplete questions.
Comment by vbs on 2019-05-28:
Well, being the first time using the feature, I couldn't foresee what would or not be exactly relevant for the question; and was trying to put together a minimal case example in order to gather more viewers for possible help. I thought this was good practice, no?
Comment by vbs on 2019-05-28:
Honestly, I think the example was perfectly fine to illustrate the question until I had to address your comment suggesting to separate the thing into multiple files. And then I addressed it. What's wrong with that?
Comment by gvdhoorn on 2019-05-28:\

was trying to put together a minimal case example in order to gather more viewers for possible help. I thought this was good practice, no?

that is certainly good practice.

Honestly, I think the example was perfectly fine to illustrate the question until I had to address your comment suggesting to separate the thing into multiple files. And then I addressed it. What's wrong with that?

there was nothing necessarily wrong with what you did. My comment was directed towards the fact that it appeared that you were asking a question about a possible solution that you've already come up with yourself, instead of asking the actual question. That is called an xy-problem.
Comment by gvdhoorn on 2019-05-28:
You asked whether loadng subsections of yaml files is supported. My answer to that was 'no'. As it isn't.
Your follow-up question then appeared to be: how can I still achieve this? My answer: using separate files.
Then you add that you can't do that, as you now lose the ability to use anchors and aliases -- this is what I believe to be your actual problem and which should've been the topic of your question.
The question title is "[how do I] load only part of a yaml?". The body also did not mention anchors or aliases.
It's perhaps not a clear-cut case of an xy-problem, but I hope you see what I meant with my comment "please don't pose incomplete questions": we spent quite a bit of time getting to your real question, which could've been avoided.
Comment by vbs on 2019-05-30:
I see. So, I've learned that there are these competing goals between writing the minimal case example but also being as descriptive as possible in regarding the problem. Thanks for going into lengths to elaborate on that.
Comment by vbs on 2019-05-30:
As for your edited answer, yes, that does solve my problem. But I can also see how it might be a bad idea for large launch or yaml files, and how using the approach you mentioned in your first comment would then be a better option, if available.
Comment by gvdhoorn on 2019-05-30:\

So, I've learned that there are these competing goals between writing the minimal case example but also being as descriptive as possible in regarding the problem.

I think the best thing you can do is to always ask about what you're trying to achieve exactly -- at a higher level. Don't assume that whatever solution you've already chosen yourself is the solution. If you start asking questions without providing context or what you're actually trying to do, it's very hard for forum members to give you a good answer, as all they see is your question about a problem with a subsolution you've picked.
Comment by gvdhoorn on 2019-05-30:\

As for your edited answer, yes, that does solve my problem. But I can also see how it might be a bad idea for large launch or yaml files,

Yes. It works in the example context you gave. That is also what I tried to get across.

and how using the approach you mentioned in your first comment would then be a better option, if available.

Yes, indeed. So if you have the option, use ROS Melodic. Or, if you're OK with building packages from source, you could try using Melodic's roslaunch in your Kinetic workspace. I haven't tried, but it could work.

