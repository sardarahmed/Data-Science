Q:

Using DRC vehicle commands in version 2.5

I built a self driving vehicle using version 2.2 by following the tutorial here:
http://gazebosim.org/wiki/Tutorials/drcsim/2.2/VRC_Plugin_DRC_Vehicle
But after upgrading to 2.5, my code won't run anymore. I don't want to downgrade again since some of my other programs run on 2.5, so I'd rather just modify my existing vehicle driver to work for 2.5. What can I use to manipulate the drc vehicle in version 2.5?

Originally posted by David Jeang on Gazebo Answers with karma: 34 on 2013-05-15
Post score: 0

Original comments
Comment by scpeters on 2013-06-14:
Can you elaborate on what's not working? Are you trying to use ros topics? Are you able to echo the state topics like rostopic echo /drc_vehicle/brake_pedal/state? Are there any console error messages?
Comment by David Jeang on 2013-06-14:
According to my code, the driver should do this once the loop begins, get in the car, undo the handbrake, drive in figure 8, then four corner turns in a square, brake,reverse direction, brake, and repeat until forced termination. All it seems to do is enter the car, I get the printed messages on the console, so I know it's executing the functions with no error. I think according to the code I am using rostopics. I'm not sure about the echoing, I haven't tried that. What's the result wanted?
Comment by David Jeang on 2013-06-19:
Just to reiterate, I have posted a copy of my code on pastebin for others to analyze, are there any more suggestions?
Comment by scpeters on 2013-06-24:
Ok, I've examined your code. It looks like you are using ros topics for control. I'm trying to remember if there were bugs with vehicle control in drcsim_2.5. The latest version is 2.6, but there's a few things to try aside from upgrading.
Comment by scpeters on 2013-06-24:
Can you try running the command from the command line while the simulation is running: "rostopic echo /drc_vehicle/brake_pedal/state" It should print out several numbers near zero if the brake pedal is not pressed. If there's no messages, then there's a problem with the vehicle plugin.
Comment by David Jeang on 2013-06-28:
I've actually upgraded as I've made some progress on a different machine with 2.6, I have a new problem now that is right here:http://answers.gazebosim.org/question/3395/sdf-version-problems-cause-drcsim26-and-gazebo18/.this topic is still open though.
Comment by David Jeang on 2013-07-09:
Updated issue has been resolved, and the VRC cheats seem to work, as the wheels can now turn, however the vehicle still will not move, so either the issue is with the brake, handbrake, or accelerator. I adjusted values for all three, but no response.
Comment by scpeters on 2013-07-09:
When you say the wheels can turn, I assume you mean that the steering works? The following commands can help with debugging the brake, handbrake, and gas pedal: rostopic echo /drc_vehicle/gas_pedal/state, rostopic echo /drc_vehicle/brake_pedal/state, rostopic echo /drc_vehicle/hand_brake/state
Comment by David Jeang on 2013-07-13:
I've never used echo before, do I use that command before, during, or after running the executable? And do I do it in a new terminal next the one running the program or in the same one? Also, on a side note, does anyone know how to install rospy? Issue right here:https://bitbucket.org/osrf/drcsim/issue/334/unable-to-use-rospy
Comment by David Jeang on 2013-07-13:
Just so you know, I think it's the hand brake, when I echoed it before and after the program, it remains the same value of 1.0, but the gas pedal and brake changed to their respective assigned values(i.e. gas pedal 0.0->1.0). The code is still the same on pastebin, so what should I try to get the handbrake working?
Comment by scpeters on 2013-07-14:
I'm not sure what's wrong with your code, but can you try the following command from the terminal: rostopic pub -1 /drc_vehicle/hand_brake/cmd std_msgs/Float64 -- 0
Comment by David Jeang on 2013-07-14:
what will that do?
Comment by scpeters on 2013-07-15:
That command should set the hand_brake to zero. It's a way to publish ros topic messages from the command-line as an alternative to using compiled C++ code.
Comment by David Jeang on 2013-07-15:
Well good. That seems to do the trick. Now the only problem that remains is finding out how to get rospy installed for the other script I need to run.

A:

Do you have the environment variable VRC_CHEATS_ENABLED set to 1? The ros topics for controlling the vehicle are provided as a development aid, but will not be available during the Virtual Robotics Challenge. As such, they are disabled by default, but are available by setting the VRC_CHEATS_ENABLED variable.
For example, to launch VRC task 1 with cheats enabled:
VRC_CHEATS_ENABLED=1 roslaunch atlas_utils vrc_task_1.launch

You could also make that setting persistent in your shell:
export VRC_CHEATS_ENABLED=1

Then subsequent launches will include cheats.

Originally posted by scpeters with karma: 2861 on 2013-05-17
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by David Jeang on 2013-05-28:
So export VRC_CHEATS_ENABLED=1 in the shell, that's the ./bashrc right? Does it matter where I put that?
Comment by gerkey on 2013-05-28:
Sure, putting the export line in your ~/.bashrc would do the trick.
Comment by David Jeang on 2013-06-14:
No good. I set it both the shell and on command line. export VRC_CHEATS_ENABLED=1 roslaunch atlas_utils atlas_drc_vehicle_fire_hose.launch. When I ran my code, it still wouldn't respond. Should I show a copy of my code so it can be tested?
Comment by scpeters on 2013-06-14:
Sure, if you can show the code, then we can help diagnose the problem.
Comment by David Jeang on 2013-06-14:
Thanks, there's a character limit, so I'll have ot break it down in parts, luckily it's not too long. #include <math.h>
#include <ros/ros.h>
#include <ros/subscribe_options.h>
#include <boost/thread.hpp>
#include <boost/algorithm/string.hpp>
#include <gazebo/common/Time.hh>
#include <sensor_msgs/JointState.h>
#include <geometry_msgs/Pose.h>
#include <osrf_msgs/JointCommands.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Int8.h>
Comment by David Jeang on 2013-06-14:
ros::Publisher pub_drive_commands_1;
ros::Publisher pub_drive_commands_2;
ros::Publisher pub_drive_commands_3;
ros::Publisher pub_drive_commands_4;
ros::Publisher pub_drive_commands_5;
ros::Publisher pub_drive_commands_6;
geometry_msgs::Pose posemsgs;void toggleHandBrake(ros::Publisher pub_drive_commands, std_msgs::Float64 hand_brake){
printf("robot toggle hand brake\n");
pub_drive_commands.publish(hand_brake);
printf("ros spinOnce\n");
ros::spinOnce();
}
Comment by David Jeang on 2013-06-14:
void toggleGasPedal(ros::Publisher pub_drive_commands, std_msgs::Float64 gas_pedal){
printf("robot press/unpress gas pedal\n");
pub_drive_commands.publish(gas_pedal);
printf("ros spinOnce\n");
ros::spinOnce();
}void toggleBrakePedal(ros::Publisher pub_drive_commands, std_msgs::Float64 brake_pedal){
printf("robot press/unpress brake pedal\n");
pub_drive_commands.publish(brake_pedal);
printf("ros spinOnce\n");
ros::spinOnce();
}
Comment by David Jeang on 2013-06-14:
void turnWheel(ros::Publisher pub_drive_commands, std_msgs::Float64 turn_wheel_magnitude, bool leftorright){
printf("robot turn wheel\n");
if(leftorright == false)
turn_wheel_magnitude.data = (((double)turn_wheel_magnitude.data) * -1.0);
pub_drive_commands.publish(turn_wheel_magnitude);
printf("ros spinOnce\n");
ros::spinOnce();
}
Comment by David Jeang on 2013-06-14:
void changeGear(ros::Publisher pub_drive_commands, std_msgs::Int8 direction){
printf("robot change direction of vehicle\n");
pub_drive_commands.publish(direction);
printf("ros spinOnce\n");
ros::spinOnce();
}void figure8(ros::Publisher turn_command, std_msgs::Float64 degree){
turnWheel(turn_command,degree,true);
ros::Duration(5).sleep();
turnWheel(turn_command,degree,false);
ros::Duration(5).sleep();

}
Comment by David Jeang on 2013-06-14:
void circle(ros::Publisher turn_command, std_msgs::Float64 degree, bool lr){
turnWheel(turn_command,degree,lr);
ros::Duration(10).sleep();
}void square(ros::Publisher turn_command, std_msgs::Float64 degree, bool lr, int length){
std_msgs::Float64 hand_wheel3;
hand_wheel3.data = 00.00f;
turnWheel(turn_command,degree,lr);
ros::Duration(1.5).sleep();
turnWheel(turn_command,hand_wheel3,lr);
ros::Duration(length).sleep();turnWheel(turn_command,degree,lr);
ros::Duration(1.5).sleep();
Comment by David Jeang on 2013-06-14:
turnWheel(turn_command,hand_wheel3,lr);
ros::Duration(length).sleep();
turnWheel(turn_command,degree,lr);
ros::Duration(1.5).sleep();

turnWheel(turn_command,hand_wheel3,lr);
ros::Duration(length).sleep();

turnWheel(turn_command,degree,lr);
ros::Duration(1.5).sleep();

turnWheel(turn_command,hand_wheel3,lr);
ros::Duration(length).sleep();  

}int main(int argc, char** argv)
{
ros::init(argc, argv, "pub_drive_command_test");
ros::NodeHandle rosnode;
ros::Time last_ros_time_;
Comment by David Jeang on 2013-06-14:
bool wait = true;
bool right = true;
while (wait)
{
last_ros_time_ = ros::Time::now();
if (last_ros_time_.toSec() > 0)
wait = false;
}
pub_drive_commands_1 =
rosnode.advertise<geometry_msgs::Pose>(
"drc_world/robot_enter_car", 1, true);
pub_drive_commands_1.publish(posemsgs);ros::spinOnce();pub_drive_commands_2 = rosnode.advertise<std_msgs::Float64>("drc_vehicle/hand_brake/cmd", 1);std_msgs::Float64 hand_brake;
hand_brake.data = 0.5;
Comment by David Jeang on 2013-06-14:
toggleHandBrake(pub_drive_commands_2, hand_brake);
hand_brake.data = 0.0;
toggleHandBrake(pub_drive_commands_2, hand_brake);
pub_drive_commands_3 = rosnode.advertise<std_msgs::Float64>("drc_vehicle/gas_pedal/cmd", 1);
std_msgs::Float64 gas_pedal;
gas_pedal.data = 1.0;
toggleGasPedal(pub_drive_commands_3, gas_pedal);
pub_drive_commands_4 = rosnode.advertise<std_msgs::Float64>("drc_vehicle/hand_wheel/cmd", 1);
std_msgs::Float64 hand_wheel;
hand_wheel.data = 3.14f;
Comment by David Jeang on 2013-06-14:
turnWheel(pub_drive_commands_4, hand_wheel, true);
pub_drive_commands_5 = rosnode.advertise<std_msgs::Float64>("drc_vehicle/brake_pedal/cmd", 1);
std_msgs::Float64 brake_pedal;
brake_pedal.data = 0;
toggleBrakePedal(pub_drive_commands_5, brake_pedal);
pub_drive_commands_6 = rosnode.advertise<std_msgs::Int8>("drc_vehicle/direction/cmd", 1);
std_msgs::Int8 direction;
direction.data = 1;
changeGear(pub_drive_commands_6, direction);ros::Rate loop_rate(3);
while (rosnode.ok()) {
Comment by David Jeang on 2013-06-14:
std_msgs::Float64 gas_pedal1;
gas_pedal1.data = 140.0;
toggleGasPedal(pub_drive_commands_3, gas_pedal1);
std_msgs::Float64 hand_wheel1;
hand_wheel1.data = 38.14f;
figure8(pub_drive_commands_4,hand_wheel1);
std_msgs::Float64 hand_wheel2;
hand_wheel2.data = 120.00f;
square(pub_drive_commands_4, hand_wheel2, right, 2);
std_msgs::Float64 brake_pedal1;
brake_pedal1.data = 1;
toggleBrakePedal(pub_drive_commands_5,brake_pedal1);
std_msgs::Int8 direction1;
direction1.data = -1;
Comment by David Jeang on 2013-06-14:
changeGear(pub_drive_commands_6,direction1);
toggleBrakePedal(pub_drive_commands_5, brake_pedal);
ros::Duration(5).sleep();
changeGear(pub_drive_commands_6, direction);
}
ros::spinOnce();
printf("ros spin again before return\n");
return 0;
}
Comment by David Jeang on 2013-06-14:
changeGear(pub_drive_commands_6,direction1);
toggleBrakePedal(pub_drive_commands_5, brake_pedal);
ros::Duration(5).sleep();
changeGear(pub_drive_commands_6, direction);
}
ros::spinOnce();
printf("ros spin again before return\n");
return 0;
}
Comment by scpeters on 2013-06-14:
Can you put it on pastebin or something? It's kinda hard to read this way.
Comment by David Jeang on 2013-06-15:
Done, search public for Skyeheart DRC Vehicle

