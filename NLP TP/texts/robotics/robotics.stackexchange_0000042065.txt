Q:

tf extrapolation exception using ros::Time(0)

I'm trying to get the latest transform between two frames. What's wrong with this code?
listener.waitForTransform(target_frame, source_frame,      ros::Time(0),ros::Duration(.1));
tf::StampedTransform st;
listener.lookupTransform(target_frame, source_frame, ros::Time(0), st);

terminate called after throwing an instance of 'tf::ExtrapolationException'
  what():  Lookup would require extrapolation into the future.  Requested time 1341794988.800442521 but the latest data is at time 1341794988.782343800, when looking up transform from frame [/openni_rgb_optical_frame] to frame [/base_footprint]

EDIT: I got this error while playing back a bag file. When I set the parameter use_sim_time true, the error disappeared. I'm still mystified, though.

Originally posted by joschu on ROS Answers with karma: 131 on 2012-07-08
Post score: 4

A:

This can happen if you have all links in your transform tree but they are not overlapping.  This can happen if you have poor connectivity to part of your graph and part of the tree is significantly out of date.
The following test is an example: a->b is from t = 1,2,3  b->c is from 10,11,12 and it throws an extrapolation because there is no common time for which it can operate.
#include <tf/tf.h>
#include <gtest/gtest.h>

TEST(TimeCache, Repeatability)
{
  tf::Transformer tr;
  tf::StampedTransform t;
  t.setIdentity();
  t.child_frame_id_ = 'b';
  t.frame_id_ = 'a';

  t.stamp_ = ros::Time().fromNSec(1);
  tr.setTransform(t);

  t.stamp_ = ros::Time().fromNSec(2);
  tr.setTransform(t);

  t.stamp_ = ros::Time().fromNSec(3);
  tr.setTransform(t);

  t.child_frame_id_ = 'c';
  t.frame_id_ = 'b';

  t.stamp_ = ros::Time().fromNSec(10);
  tr.setTransform(t);

  t.stamp_ = ros::Time().fromNSec(11);
  tr.setTransform(t);

  t.stamp_ = ros::Time().fromNSec(12);
  tr.setTransform(t);

  std::string target = "a";
  std::string dest = "c";

  tr.lookupTransform(target, dest, ros::Time(), t);

}

int main(int argc, char **argv){
  testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}

Originally posted by tfoote with karma: 58457 on 2012-08-02
This answer was ACCEPTED on the original site
Post score: 6

