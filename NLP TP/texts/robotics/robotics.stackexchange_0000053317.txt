Q:

"Failed to clone repository" error on first-time bloom releasing for svn devel repo

Following bloom's Releasing a Package for the First Time tutorial with my svn upstream repo and git release repo with source version of bloom(to avoid this problem), I get this error:
ros-giantsquid@calamari:~/ROS/hydro_precise/catkinws/src/openrtm_common$ ~/ROS/ros-infrastructure/bloom/scripts/bloom-release --rosdistro hydro --track hydro openrtm_common --edit
/home/ros-giantsquid/ROS/ros-infrastructure/bloom/bloom/__init__.py:2: UserWarning: Module bloom was already imported from /home/ros-giantsquid/ROS/ros-infrastructure/bloom/bloom/__init__.pyc, but /usr/lib/pymodules/python2.7 is being added to sys.path
  import pkg_resources
/home/ros-giantsquid/ROS/ros-infrastructure/bloom/bloom/__init__.py:2: UserWarning: Module bloom was already imported from /home/ros-giantsquid/ROS/ros-infrastructure/bloom/bloom/__init__.pyc, but /usr/lib/pymodules/python2.7 is being added to sys.path
  import pkg_resources
Specified repository 'openrtm_common' is not in the release file located at 'https://raw.github.com/ros/rosdistro/master/hydro/release.yaml'
Did you mean one of these: 'pr2_common', 'cob_common', 'clearpath_common'?
Could not determine release repository url for repository 'openrtm_common' of distro 'hydro'
You can continue the release process by manually specifying the location of the RELEASE repository.
To be clear this is the url of the RELEASE repository not the upstream repository.
Release repository url [press enter to abort]: https://github.com/start-jsk/openrtm_common-release.git
==> Fetching 'openrtm_common' repository from 'https://github.com/start-jsk/openrtm_common-release.git'
Cloning into '/tmp/tmpKb0aIo'...
warning: You appear to have cloned an empty repository.
WARNING [vcstools] Command failed: 'git log -1 --format='%H''
 run at: '/tmp/tmpKb0aIo'
 errcode: 128:
fatal: bad default revision 'HEAD'
[/vcstools]
WARNING [vcstools] Command failed: 'git log -1 --format='%H''
 run at: '/tmp/tmpKb0aIo'
 errcode: 128:
fatal: bad default revision 'HEAD'
[/vcstools]
WARNING [vcstools] Command failed: 'git checkout master'
 run at: '/tmp/tmpKb0aIo'
 errcode: 1:
error: pathspec 'master' did not match any file(s) known to git.
[/vcstools]
Creating 'master' branch.
Creating track 'hydro'...
Repository Name:
  upstream
    Default value, leave this as upstream if you are unsure
  <name>
    Name of the repository (used in the archive name)
  ['upstream']: 
Upstream Repository URI:
  <uri>
    Any valid URI. This variable can be templated, for example an svn url
    can be templated as such: "https://svn.foo.com/foo/tags/foo-:{version}"
    where the :{version} token will be replaced with the version for this release.
  [None]: https://rtm-ros-robotics.googlecode.com/svn/tags/:{version}
Upstream VCS Type:
  svn
    Upstream URI is a svn repository
  git
    Upstream URI is a git repository
  hg
    Upstream URI is a hg repository
  tar
    Upstream URI is a tarball
  ['git']: svn
Version:
  :{ask}
    This means that the user will be prompted for the version each release.
    This also means that the upstream devel will be ignored.
  :{auto}
    This means the version will be guessed from the devel branch.
    This means that the devel branch must be set, the devel branch must exist,
    and there must be a valid package.xml in the upstream devel branch.
  <version>
    This will be the version used.
    It must be updated for each new upstream version.
  [':{auto}']: 3.1.4
Release Tag:
  :{none}
    For svn and tar only you can set the release tag to :{none}, so that
    it is ignored.  For svn this means no revision number is used.
  :{ask}
    This means the user will be prompted for the release tag on each release.
  :{version}
    This means that the release tag will match the :{version} tag.
    This can be further templated, for example: "foo-:{version}" or "v:{version}"
    
    This can describe any vcs reference. For git that means {tag, branch, hash},
    for hg that means {tag, branch, hash}, for svn that means a revision number.
    For tar this value doubles as the sub directory (if the repository is
    in foo/ of the tar ball, putting foo here will cause the contents of
    foo/ to be imported to upstream instead of foo itself).
  [':{version}']: 
Upstream Devel Branch:
  <vcs reference>
    Branch in upstream repository on which to search for the version.
    This is used only when version is set to ':{auto}'.
  [None]: 
ROS Distro:
  <ROS distro>
    This can be any valid ROS distro, e.g. groovy, hydro
  ['hydro']: 
Patches Directory:
  :{none}
    Use this if you want to disable overlaying of files.
  <path in bloom branch>
    This can be any valid relative path in the bloom branch. The contents
    of this folder will be overlaid onto the upstream branch after each
    import-upstream.  Additionally, any package.xml files found in the
    overlay will have the :{version} string replaced with the current
    version being released.
  [None]: 
Release Repository Push URL:
  :{none}
    This indicates that the default release url should be used.
  <url>
    (optional) Used when pushing to remote release repositories. This is only
    needed when the release uri which is in the rosdistro file is not writable.
    This is useful, for example, when a releaser would like to use a ssh url
    to push rather than a https:// url.
  [None]: 
Created 'hydro' track.
==> Testing for push permission on release repository
==> git remote -v
origin  https://github.com/start-jsk/openrtm_common-release.git (fetch)
origin  https://github.com/start-jsk/openrtm_common-release.git (push)
==> git push --dry-run
Username for 'https://github.com': 130s
Password for 'https://130s@github.com': 
No refs in common and none specified; doing nothing.
Perhaps you should specify a branch such as 'master'.
Everything up-to-date
==> Releasing 'openrtm_common' using release track 'hydro'
==> git-bloom-release hydro
/home/ros-giantsquid/ROS/ros-infrastructure/bloom/bloom/__init__.py:2: UserWarning: Module bloom was already imported from /home/ros-giantsquid/ROS/ros-infrastructure/bloom/bloom/__init__.pyc, but /usr/lib/pymodules/python2.7 is being added to sys.path
  import pkg_resources
/home/ros-giantsquid/ROS/ros-infrastructure/bloom/bloom/__init__.py:2: UserWarning: Module bloom was already imported from /home/ros-giantsquid/ROS/ros-infrastructure/bloom/bloom/__init__.pyc, but /usr/lib/pymodules/python2.7 is being added to sys.path
  import pkg_resources
Processing release track settings for 'hydro'

Executing release track 'hydro'
==> bloom-export-upstream https://rtm-ros-robotics.googlecode.com/svn/tags/3.1.4 svn --tag 3.1.4 --display-uri https://rtm-ros-robotics.googlecode.com/svn/tags/3.1.4 --name upstream --output-dir /tmp/tmpXlbMIF
/home/ros-giantsquid/ROS/ros-infrastructure/bloom/bloom/__init__.py:2: UserWarning: Module bloom was already imported from /home/ros-giantsquid/ROS/ros-infrastructure/bloom/bloom/__init__.pyc, but /usr/lib/pymodules/python2.7 is being added to sys.path
  import pkg_resources
Checking out repository at 'https://rtm-ros-robotics.googlecode.com/svn/tags/3.1.4' to reference '3.1.4'.
svn: Syntax error in revision argument '3.1.4'
Failed to clone repository at 'https://rtm-ros-robotics.googlecode.com/svn/tags/3.1.4' to reference '3.1.4'.
<== Error running command '['/home/ros-giantsquid/ROS/ros-infrastructure/bloom/scripts/bloom-export-upstream', 'https://rtm-ros-robotics.googlecode.com/svn/tags/3.1.4', 'svn', '--tag', '3.1.4', '--display-uri', 'https://rtm-ros-robotics.googlecode.com/svn/tags/3.1.4', '--name', 'upstream', '--output-dir', '/tmp/tmpXlbMIF']'
Release failed, exiting.
/home/ros-giantsquid/ROS/ros-infrastructure/bloom/bloom/__init__.py:2: UserWarning: Module bloom was already imported from /home/ros-giantsquid/ROS/ros-infrastructure/bloom/bloom/__init__.pyc, but /usr/lib/pymodules/python2.7 is being added to sys.path
  import pkg_resources
ros-giantsquid@calamari:~/ROS/hydro_precise/catkinws/src/openrtm_common$

The error message of the stuck part sounds like it comes from svn, but is anything wrong with my bloom setting or that of upstream repo?

Originally posted by 130s on ROS Answers with karma: 10937 on 2013-08-04
Post score: 0

A:

My collaborator @Kei Okada suggested to set Release Tag as :{none}, which let bloom move forward.
The release repository must have been already initialized with README.

Originally posted by 130s with karma: 10937 on 2013-08-05
This answer was ACCEPTED on the original site
Post score: 0

