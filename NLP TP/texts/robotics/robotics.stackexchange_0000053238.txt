Q:

catkin command for rosbuild_invoke_rospack(${PROJECT_NAME} ${_prefix} DIRS depends-manifests)

I'm currently working to update our package from from rosbuild to catkin and would like know how to write get list of packages that depends on current target package.
in the rosbuild system, we used following command and we're looking for the equivalent function/procedure in catkin system.
   rosbuild_invoke_rospack(${PROJECT_NAME} ${_prefix} DIRS depends-manifests)

Originally posted by Kei Okada on ROS Answers with karma: 1186 on 2013-08-01
Post score: 1

A:

The catkin migration guide (http://ros.org/wiki/catkin/migrating_from_rosbuild#line-95) says "do not do this". Conceptually a package should not query its downstream dependencies.
Could you describe why you have been doing this before? Perhaps there is another way to get to the same goal.

Originally posted by Dirk Thomas with karma: 16276 on 2013-08-01
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by Kei Okada on 2013-08-01:
thanks, we have defined idl message compilation helper cmake functions, that searches all downlostreamy dependent directories with ./idl folder and compile them
https://code.google.com/p/rtm-ros-robotics/source/browse/trunk/rtmros_common/rtmbuild/#rtmbuild%2Fcmake
Comment by Dirk Thomas on 2013-08-01:
Without further information I would just guess that this should be handled differently.
Message generation is very similar to this an genmsg/genpy/gencpp provide cmake functions and additional scripts to perform the generation. But each downstream package explicitly invokes the generation for its messages. That also makes it more in line with the goal that the result should be bundled within each package (and not with the generator).
Comment by Kei Okada on 2013-08-01:
Ok, but how about [1] case, To invoke message generation for each downstream package, for custom client library which is not available as ubuntu system package?
[1] http://ros-users.122217.n3.nabble.com/Shared-installation-wiki-page-td1313245.html
Comment by Dirk Thomas on 2013-08-01:
The clean way is to write a generator and build all message packages from source to also generate messages with your custom generator. Otherwise I don't see a good way to perform clean dependencies and checking for rebuilds.

