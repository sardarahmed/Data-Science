Q:

What is the benefit of metapackages?

I can't figure out what is the benefit of using metapackages, as opposed to just putting stuff in different folders.
It seems metapackages can't be whitelisted or blacklisted, they cannot be used while defining dependencies of other catkin packages. They are not allowed to have common scripts for e.g. software delivery. It's just a package.xml and CMakeLists.txt.
So what's the point?

Originally posted by Tommi on ROS Answers with karma: 111 on 2017-03-08
Post score: 2

A:

So what's the point?

They are used to group together sets of packages that form a 'coherent set' through their run_depends.
This then allows you to install - say all of the Robot variant (defined in REP-142) - with a single command:
sudo apt-get install ros-$distro-robot

instead of:
sudo apt-get install ros-$distro-actionlib ros-$distro-angles ros-$distro-bond_core ros-$distro-catkin ros-$distro-class_loader ros-$distro-cmake_modules ros-$distro-common_msgs ros-$distro-console_bridge ros-$distro-control_msgs ros-$distro-diagnostics ros-$distro-dynamic_reconfigure ros-$distro-executive_smach ros-$distro-filters ros-$distro-gencpp ros-$distro-geneus ros-$distro-genlisp ros-$distro-genmsg ros-$distro-gennodejs ros-$distro-genpy ros-$distro-geometry ros-$distro-message_generation ros-$distro-message_runtime ros-$distro-nodelet_core ros-$distro-pluginlib ros-$distro-robot_model ros-$distro-robot_state_publisher ros-$distro-ros ros-$distro-ros_comm ros-$distro-rosbag_migration_rule ros-$distro-rosconsole_bridge ros-$distro-roscpp_core ros-$distro-rosgraph_msgs ros-$distro-roslisp ros-$distro-rospack ros-$distro-std_msgs ros-$distro-std_srvs ros-$distro-xacro

which is both longer, allows for more mistakes and is harder to document.
The same infrastructure can obviously be used to group together packages created by community members. One example would be MoveIt, which has a moveit metapackage.
See REP-140 - Package Manifest Format Two Specification - Data Representation - <metapackage/> for more information on metapackages.

Edit: note that metapackages are not stacks, in that they do not physically contain other packages (ie: other packages can not and may not be sub directories of other packages).

Originally posted by gvdhoorn with karma: 86574 on 2017-03-08
This answer was ACCEPTED on the original site
Post score: 8

Original comments
Comment by gvdhoorn on 2017-03-09:
Also: they're metapackages because they 'package' packages, and not directly installable artefacts.

