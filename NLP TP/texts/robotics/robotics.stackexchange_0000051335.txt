Q:

Cannot locate rosdep definition for [joint_state_publisher]

One of my packages has a run dependency on the joint state publisher (cfrom a roslauncher). Checking the dependencies with rosdep gives me this error:
$ rosdep check robosem_meta
All system dependencies have been satisified
ERROR[robosem_meta]: Cannot locate rosdep definition for [joint_state_publisher]
        rosdep key : joint_state_publisher
        OS name    : ubuntu
        OS version : precise
        Data: <no data>

I have the joint_state_publisher installed and I can use it without problems. So this is not a real problem, but I would still like to fix it. Anyone knows how?
PS: Unfortunately the link for filing issue tickets on the wiki is not existent or broken, otherwise I would have used that for problems like this one here. Maybe the maintainer could move the code to Github or Bitbucket?
/edit: My package is a catkin package and the dependency on the joint_state_publisher is defined like this:
<run_depend>joint_state_publisher</run_depend>

Originally posted by bit-pirate on ROS Answers with karma: 2062 on 2013-05-22
Post score: 1

Original comments
Comment by sobotacm on 2013-05-23:
What happens when you do "rosdep install joint_state_publisher"?
You could try installing urdf_tools from http://www.ros.org/wiki/urdf_tools/ which comes with the joint_state_publisher node.
Comment by bit-pirate on 2013-05-23:
@sobotacm The joint_state_publisher is installed and working. The only issue is that rosdep does not recognise it.

A:

According to:
http://ros.org/debbuild/groovy.html
joint_state_publisher is part of the robot_model_visualization stack which is dry (rosbuild).  caktin packages cannot depend on rosbuild packages.

Originally posted by William with karma: 17335 on 2013-05-23
This answer was ACCEPTED on the original site
Post score: 4

Original comments
Comment by bit-pirate on 2013-05-23:
So that's the reason why rosdep complains?
Comment by joq on 2013-05-23:
Yes. Since catkin can't resolve it, the dependency is passed along to rosdep. That has some advantages, but frequently generates confusing error messages.
Comment by William on 2013-05-23:
@joq is correct. All catkin dependencies are passed to rosdep for processing. rosdep has no knowledge of dry (rosbuild) packages so when you list a dry package as a dependency of a wet package, rosdep doesn't know what to do with it.
Comment by bit-pirate on 2013-05-23:
Thanks for the clarification!

