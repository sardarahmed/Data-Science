Q:

Understanding InteractiveMarkers

I have followed the interactive markers tutorial, and I successfully achieved want I wanted: to mix the quadrocopter and button markers. However, I do not understand how the code works. To define the marker, I have the following code:
def makeMarker():
    marker = Marker()
    marker.type = Marker.CYLINDER
    marker.scale.x =  0.3
    marker.scale.y =  0.3
    marker.scale.z =  0.3
    marker.color.g = 1.0
    marker.color.a = 1.0
    return marker

# create an interactive marker for our server
int_marker = InteractiveMarker()
int_marker.header.frame_id = "world"
int_marker.name = "goal_marker"
int_marker.description = "goal_marker"
int_marker.scale = 0.7

# create marker and a non-interactive control containing the marker
control = InteractiveMarkerControl()
control.always_visible = True
control.markers.append(makeMarker())

# add control to interactive marker
int_marker.controls.append(control)

# add control for position (as it has no marker, RViz decides which one to use).
control = InteractiveMarkerControl()
control.orientation.w = 1
control.orientation.x = 0
control.orientation.y = 1
control.orientation.z = 0
control.interaction_mode = InteractiveMarkerControl.MOVE_PLANE
int_marker.controls.append(copy.deepcopy(control))

# add control for the height (as it has no marker, RViz decides which one to use).
control.interaction_mode = InteractiveMarkerControl.MOVE_AXIS
int_marker.controls.append(copy.deepcopy(control))

# add control for pose publishing.
control.interaction_mode = InteractiveMarkerControl.BUTTON
control.markers.append(makeMarker())
int_marker.controls.append(control)

First, the interactive marker is created (int_marker), and then a Control is associated to maker created by makeMarker and this Control is inserted in int_marker. Then, two more controls are created to give the plannar movement and height, and inserted to int_marker. So far so good.
However, when adding the button functionality, I have to include the extra line control.markers.append(makeMarker()), that is, to create a new visual marker and append it to the Control. Why do I need this? I will not work otherwise.
FINAL SOLUTION: Removing extra appends and thus other extra code:
# create an interactive marker for our server
int_marker = InteractiveMarker()
int_marker.header.frame_id = "world"
int_marker.name = "int_marker"
int_marker.description = "int_marker"
int_marker.scale = 0.7

# add control for position (as it has no marker, RViz decides which one to use).
control = InteractiveMarkerControl()
control.orientation.w = 1
control.orientation.x = 0
control.orientation.y = 1
control.orientation.z = 0
control.interaction_mode = InteractiveMarkerControl.MOVE_PLANE
int_marker.controls.append(copy.deepcopy(control))

# add control for the height (as it has no marker, RViz decides which one to use).
control.interaction_mode = InteractiveMarkerControl.MOVE_AXIS
int_marker.controls.append(copy.deepcopy(control))

# add control for pose publishing. A marker is required in this case, RViz does not
# assign one.
control.interaction_mode = InteractiveMarkerControl.BUTTON
control.markers.append(makeMarker()) # This is required, it will not work otherwise.
int_marker.controls.append(control)

Originally posted by Javier V. G贸mez on ROS Answers with karma: 1305 on 2015-07-07
Post score: 0

A:

Just look at the make marker function, it gives you the visual form of the marker controlled by the interactive object: Cylinder, Box, Sphere ... and its size and color:
marker = Marker()
marker.type = Marker.CYLINDER
marker.scale.x =  0.3
marker.scale.y =  0.3
marker.scale.z =  0.3
marker.color.g = 1.0
marker.color.a = 1.0

UPDATE:
In my opinion I guess it probably should work without the first append, I do not see any reason why it should not do so, maybe the author added it twice by accident.

Originally posted by cyborg-x1 with karma: 1376 on 2015-07-07
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by Javier V. G贸mez on 2015-07-07:
I understand that. My concern is about the second line from the last, why do I have to ad another marker to be able to click on it, and not just add the control as for the other two controls (move plane and move axis)?
Comment by cyborg-x1 on 2015-07-07:
hmm, that's a good point have you tried to compile it without the first append?
In my opinion I guess it probably should work, I do not see any reason why it should not ...
Comment by Javier V. G贸mez on 2015-07-08:
Can you post this last comment as an answer so I can accept it? It solved (and simplified) my code :)
Comment by Javier V. G贸mez on 2015-07-08:
The problem was not the last append, but the first. It solved some other problems I had by just using the last marker.
Comment by cyborg-x1 on 2015-07-08:
Oh yes, I corrected it ;-)

