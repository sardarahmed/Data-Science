Q:

Do rosservice calls from rtt_ros respect orocos operation thread spec?

Say I have an orocos component that has an operation such as,
this->addOperation("do_work", &MyWorker::doWork, this, RTT::ClientThread).doc("Does work");

Where when called, this blocks the callers thread and does not block the task context thread in OROCOS.
I'm unable to find anywhere in the documentation for rtt_ros_integration whether or not ROSServiceService calls respect the orocos operation spec on whether to block the client thread of the task context thread.

Originally posted by jlack on ROS Answers with karma: 78 on 2017-07-30
Post score: 1

Original comments
Comment by gvdhoorn on 2017-07-30:
This is really an OROCOS specific question. I doubt the OROCOS / rtt_ros maintainers frequent this board, so I don't expect an answer to your question soon. We can see what happens (perhaps jmeyer has an account here), but you might want to try the orocos mailing list or their issue tracker.
Comment by jlack on 2017-07-30:
Yeah figured i'd throw it on here and see if I found any takers. Thanks i'll try on the rtt_ros issue board as well.
Comment by gvdhoorn on 2017-07-31:
orocos/rtt_ros_integration#91.

A:

Finally got this working, and long story short the answer is yes, the rosservice functionality offered by rtt_ros does respect the thread spec given when adding an operation.
The rtt_roscomm documentation is quite lacking in functional examples and clear documentation on the specifics, so I end up having to write and get the code working to answer the question.
For others looking to use rosservice call functionality provided by rtt_roscomm I recommend looking at the unit tests to bootstrap the process of getting it up and running, as currently that's the best place to look for figuring out how to get it to work.

Originally posted by jlack with karma: 78 on 2017-08-02
This answer was ACCEPTED on the original site
Post score: 2

