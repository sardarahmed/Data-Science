Q:

rviz doesn't show custom plugin

Hey,
I created a plugin to show a mesh in rviz (basically an adaptation of the Polygon display). I had previously changed the source of the Polygon display to accept my message and display it as a mesh, this works fine. Then I wanted to export this plugin to my own package, however rviz doesn't seem to recognize it.
According to the tutorial, common problems are :
-Not having a plugin_description.xml (I have this located in the same package as the new plugin)
-Not exporting it in a package.xml file (I export it as follows:
<export>
    <rviz plugin="${prefix}/plugin_description.xml"/>
</export>

-Not properly referencing the library file from plugin_description.xml (I reference the path as
<library path="lib/librviz_plugin"> 

I reference the class as:
<class name="mesh_tools/Mesh" type="mesh::MeshDisplay" base_class_type="rviz::Display">

Which is inside the mesh_tools package. The class is called mesh::MeshDisplay and as is done for rviz::Polygon display, it has rviz::Display as base class. When I make everything, I do indeed get a devel/lib/librviz_plugin.so. The plugin_description.xml is not copied to the devel folder however. If I do catkin_make_isolated --install it will get copied, but rviz still can't see the display.
What can I do to debug this further? By the way, I am on Indigo with Ubuntu 14.04.
Best regards,
Hans

Originally posted by Hansg91 on ROS Answers with karma: 1909 on 2014-05-10
Post score: 1

Original comments
Comment by gvdhoorn on 2014-07-24:
What is the output of rospack plugins --attrib=plugin rviz?
Comment by Hansg91 on 2014-08-01:
Just the rviz plugins and the rviz tutorial, not my plugin.
Comment by gvdhoorn on 2014-08-05:
Ok, do you have a run & build depend in your manifest on rviz? For me, rospack only shows my pkg when querying for rviz plugins if I declare a dependency on the rviz pkg.
Comment by Hansg91 on 2014-08-06:
Aha, I wasn't aware I needed the run dependency on rviz, that was indeed the issue. If you add it as an answer, I can approve it. Thanks!

A:

Turns out the OP was missing a run_depend on package rviz, which caused the plugin not to show up (neither in RViz itself, nor in the output of rospack plugins).

Aha, I wasn't aware I needed the run dependency on rviz, that was indeed the issue

I'd say it kind-of makes sense for a plugin for RViz to have a run dependency on it :)

Originally posted by gvdhoorn with karma: 86574 on 2014-08-06
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by Hansg91 on 2014-08-06:
And it probably does make sense ;) oh well, lesson learned.
Comment by gvdhoorn on 2014-08-19:
As a final note: the requirement for the dependency on RViz is actually documented on the pluginlib wiki page:

Important Note: In order for the above export command to work properly, the providing package must depend directly on the package containing the plugin interface.

Comment by Hansg91 on 2014-08-19:
Perhaps it is worth noting there that it should be a run dependency? I had a build_depend on rviz, but that didn't cut it.
Comment by gvdhoorn on 2014-08-19:
The page shows an example manifest, with both a run and build depend. So I think that is already covered. I just kept my quote small.

