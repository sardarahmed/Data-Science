Q:

[navigation stack] How to Navigate using User-defined path?

Hi guys ,
Since i'm working on the Robot Project which using the navigation stack
, The Robot Can Travel based on the shortest path.
But, What if i want to define the static path to the robot
what should i do?
How can i define the Path of the robot in the map .
Example Explanation :
Firstly , Robot is trying to localize itself .
When it can already locate itself , Find the Nearest Checkpoint or User-defined Path .
After that , it tries to get in the path
and
Follow it until the checkpoint which it the nearest to the goal is reached.
thanks ,
Tew

Originally posted by C3MX on ROS Answers with karma: 150 on 2016-02-24
Post score: 3

A:

i've found the solution.
i must implement my own planner .
For Example , i use Simple Navigation Goal (From Tutorial)  and  Mark a lot of points in a list manually (you may need to find the x,y,4 values of quaternian - memmorized it) .
Then Make the robot check the location compared to the Points In List (Waypoints) , which one is the nearest depends on the algorithm you 've chosen .
Choose the list (depends on the goal you want to go) and execute the navigation on those points.
The Short Answer is  You need to implement it by yourself with help of navigation goal.

Originally posted by C3MX with karma: 150 on 2016-03-25
This answer was ACCEPTED on the original site
Post score: 4

Original comments
Comment by Amogh Gupta on 2017-09-03:
But this would mean that the robot is going to stop at each of these waypoints, how can I make it move through these smoothly?
Comment by C3MX on 2017-12-20:
if you want to make robot follow the path i think that you should implement global planner which create path according to static line (maybe create a graph of point to make the robot follow like line tracking - then create path by the edges) like @al-dev mentioned below
Comment by liambroek on 2021-02-04:
If you want it to move smoothly and not stop at each goal, subscribe to the pose of the robot and calculate the distance to the goal. Once the distance is small (you decide how close to get), you send the next goal. That way the robot won't stop at each goal.

