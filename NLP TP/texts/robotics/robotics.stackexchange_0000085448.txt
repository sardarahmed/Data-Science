Q:

can i use rosjava with linux(ubuntu) without android?

I am new to ROS. I intend to use rosjava (as i don't know C++) for robotics research. but according to what i have understood; rosjava was designed to be used with android.
could you explain a little more about that; i couldn't find a clear explanation online
actually i am not intending to use android at all; i just want to do some research on robotics using my linux (ubuntu) desktop   and i might port my code to program an actual robot but all of that has nothing to do with android. so is it possible for me to use rosjava under these conditions?

Originally posted by ZX SPECTRUM on ROS Answers with karma: 1 on 2018-02-21
Post score: 0

Original comments
Comment by gvdhoorn on 2018-02-21:
I only now noticed the r2b3 tag that you added to your question. rosjava and ROS Android are ROS1 packages. r2b3 is a ROS 2 release. Did you add that tag on purpose?
Comment by ZX SPECTRUM on 2018-02-22:
actually no; i don't intend to use r2b3 but  the system demanded that choose this tag in order to post my question
Comment by tfoote on 2018-02-22:
Why did you pick r2b3 instead of a ros1 distros which you would be using like indigo, kinetic, or lunar?

A:

rosjava was designed to be used with android

afaik, rosjava is not dependent on Android. It's most likely the other way around: ROS Android extends (uses/builds on top of) rosjava.
In the past, I've used rosjava to write ROS (toy) applications on Windows. It's not as convenient as a native ROS development environment (especially message generation and artefact resolution are more complex) but it's doable.
If you have the option though (and perhaps the time) you might want to look at rospy: it's not java, but it's definitely not C++, and it is better integrated than rosjava in the general ROS workflow and development approaches.

Edit:

but do i understand from you that rosjava is not full ros? hence, i cannot exploit the full functionality of ROS if i use it through java?

Well .. rosjava is a client library for ROS. It implements the basic infrastructure needed to communicate with other ROS nodes. You can communicate with anything that is also a ROS node (so use services and actions, publish and subscribe to messages, read parameters, etc), but you won't be able to write plugins for the navigation stack, RViz or MoveIt, won't be able to write a ros_control hardware_interface or controller plugin, etc. You can definitely write nodes yourself and entire applications, but not all languages/client libraries provide the same level of support for all the functionality in ROS.
But they also don't have to, as the pub-sub, service and action level of communication (ie: the ROS API) should provide sufficient communication capabilities that you can still do meaningful work with Java.

and i heard there is another java version of ROS other than rosjava; is it usable?

You're going to have to be more specific as I don't know what you are referring to. "another java version of ROS" is too vague.

Originally posted by gvdhoorn with karma: 86574 on 2018-02-21
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by ZX SPECTRUM on 2018-02-22:
no learning python is not an option.
but do i understand from you that rosjava is not full ros? hence, i cannot exploit the full functionality of ROS if i use it through java?
and i heard there is another java version of ROS other than rosjava; is it usable?
Comment by ZX SPECTRUM on 2018-02-23:
"RViz or MoveIt, won't be able to write a ros_control hardware_interface or controller plugin, etc."
do you mean i cannot simulate my own robotic design onRViz using rosjava?
i didn't really understand you
Comment by gvdhoorn on 2018-02-23:
All the things I mentioned are written in C++, and extensions (such as plugins) cannot be written in some arbitrary other language - like Java. You can compose applications (consisting of multiple ROS nodes), but those will always be composed out of multiple processes.
Comment by gvdhoorn on 2018-02-23:
What I meant to say is that extending / adapting some of the pkgs I mentioned will not be possible using Java. You will always only be able to talk to the already provided services, actions and topics, but you won't be able to change any source code unless you do it in those other languages.
Comment by ZX SPECTRUM on 2018-02-23:
very good, i don't intend to participate in developing ros itself, i just want to use it for my PhD research. and as long as i can code my experimental novel path planning algorithms and simulate my designed robotic platform  then i don't really need to extend rvis or ros itself.
Comment by gvdhoorn on 2018-02-23:
Path planning algorithms (if they are 2D) in ROS are typically run as plugins of the navigation stack, which is C++ throughout. You don't have to use the navigation stack, but it does have some nice infrastructure to re-use.
Comment by gvdhoorn on 2018-02-23:\

i don't intend to participate in developing ros itself, i just want to use it for my PhD research

being a code-centric framework, extending/adapting pkgs themselves is typically part of that, but you can definitely try and see how far you can get with just re-using what is already there.
Comment by ZX SPECTRUM on 2018-02-23:
not good.
so how much ++ is this C++ implementation of ros. ?
i know C and i really don't have the time to override my java oop skills with those from C++.
Comment by gvdhoorn on 2018-02-23:
I don't feel like I can give you a useful answer to that.
Comment by gvdhoorn on 2018-02-23:
re: using only services, actions and topics: perhaps the new(er) move_base_flex pkg does things differently wrt planner plugins, but I haven't looked at it in detail.
Comment by ZX SPECTRUM on 2018-02-23:
all i am trying to say is:
do i need actual c++ oop knowlege to use ros (real ros not rosjava)? or just C knowledge without oop would be enough?
i.e is ros implemented using oop
i am asking this because i know C but not C++
Comment by gvdhoorn on 2018-02-23:\

i.e is ros implemented using oop

yes, very much so.

real ros not rosjava

rosjava is as real as any other ros client library.

