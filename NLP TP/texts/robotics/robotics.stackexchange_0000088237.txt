Q:

Godot game engine as ROS node

Hi all,
Godot is a very nice open source game engine. I thought about making a Godot program a ROS node. It could be used as 2D/3D physics engine and for visualization – plus a lot of logic can be easily implemented.
Although the native programming language (GDScript) is python-like, it is probably necessary to implement a new client library. Alternatively there is a mechanism called GDNative (see this slightly outdated article) with which you can use shared libraries in your Godot program.
What do you think? Is it possible with reasonable effort? What would be the way to go?
Cheers,
Thomas

Originally posted by yurumi on ROS Answers with karma: 21 on 2018-07-30
Post score: 2

Original comments
Comment by VictorLamoine on 2018-08-01:
There are C++ bindings in Godot: http://docs.godotengine.org/en/3.0/development/cpp/custom_modules_in_cpp.html (not sure this is the right documentation page)
Comment by yurumi on 2018-08-02:
You are right, this seems to be a feasible way. Godot is super easy to compile (in contrast to gazebo, at least on arch) – maybe it's just convincing scons to build ROS stuff...
Comment by lucasw on 2020-05-04:
https://github.com/ymd-stella/godot_ros_pcviz is a ros godot node, I'll try it out and update later.

A:

godot_ros_pcviz is a good starting point- it can be easily modified to subscribe to something other than a point cloud or publish out of the _process callback.
https://github.com/lucasw/godot_ros_pcviz/tree/experiment_viz has my changes forked from https://github.com/ymd-stella/godot_ros_pcviz - possibly the original author will merge my PRs and their repo could be the primary place to go.
Don't use the docker build method instructions in the readme, just clone the repo into your catkin workspace with the right branch and do a git submodule update --init --recursive then build normally with catkin, then import the project from devel/lib/godot_ros_pcviz/project.godot into godot.
The camera has no controlers, so if you publish a point cloud in you'll just see it from the one angle (I'll likely add a camera controller similar to the one in the godot 3D window next).

Old answer:
Every good 3D engine deserves a ros node, it is a lot of effort but it is usually easy to start small and add features gradually.  I'd like to try it out if you get it working.
If Godot isn't available as a Ubuntu deb install it will likely cut down the potential number of users.
A simple node that can instantiate objects within the godot program via a ros service call is a good starting point.  If the objects are physically simulated then add tf output: query the engine for the current position of the object then update a tf frame (with the frame id specified in the spawning service call).
For visualization supporting all or most of the features of the Marker type is very useful, so a Marker can be published in ros and appears in the godot rendering approximately like it does in rviz (but with whatever extra graphical flair godot adds).
From there it's nice to be able to have the engine render to texture and then publish the texture as a ros image.  Field-of-view and position of the camera ought to be able to be controlled via CameraInfo and tf frames inputs, and any number of cameras can be supported.
urdf-to-godot translation would be good to have later.
The scripting language would eventually need the ability to subscribe and publish on topics for at least the basic std_msgs types.  This sounds harder than any of the above, but perhaps for can be done in a crude/hard-coded/hacky way initially and made more generic and capable later.

Originally posted by lucasw with karma: 8729 on 2018-07-31
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by yurumi on 2018-08-02:
Thanks for the comment. I had a look at the roscpp/rospy/ros* client library sources and it seems that it would be quite a lot of effort to reimplement it in GDScript. The suggestion of @VictorLamoine (see comment above) seems to be very sensible (using the C++ bindings of Godot).
Comment by lucasw on 2018-08-02:
https://godotengine.org/article/beta-release-python-support indicates python-godot integration already exists as well.  I downloaded the prebuilt godot for Linux and it was neat the way it ran and downloaded an example (though slowly) and ran it, so it isn't that big of a hurdle for users.

