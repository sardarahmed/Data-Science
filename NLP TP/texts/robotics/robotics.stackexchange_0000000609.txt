Q:

Including a RaspberryPi within a robot... Does this allow for a "universal API"?

I know this is a broad statement, but when you've got support for both TCP as well as a full fledged computer on board (to integrate/run an arduino), does this essentially allow for anything that would run on a linux box (raspberryPi) to run and operate your robot?
I know clock speed as well as the dependency libraries for a given code base (on the Pi) would add some complexity here, but what are some of the big issues that I'm overlooking in such a vertically-integrated control system?
Including a RaspberryPi within a robot... Does this allow for a "universal API"?

A:

The short answer is "yes". I'm assuming you are describing an architecture that looks broadly ;-) like this:
Real-time system <--> Soft-time system
This is a very common robot architecture. 
The real-time system (RTS) (for example, an Arduino with appropriate firmware) handles the low-level sensor farming (conditioning, data packaging, management, and routing), power management, motor management, and general purpose I/O operations.
The soft-time system (STS) (ex. the Raspberry Pi you mentioned) is a more powerful system designed to handle monitoring, long-range communications, and more elaborate sensor integration and processing tasks. It sits above the RTS, which handles all the intense timing details of waveform generation and low-speed local bus communication so that the STS can work the "harder" problems.
Obviously, this is a big over-simplification, but I think it gets the core ideas across.
I wrote a number of academic papers 1 2 on robot architecture if you would like to explore more deeply. If you have something specific in mind, please feel free to ask me (or the community) some follow-up questions. ;-)

