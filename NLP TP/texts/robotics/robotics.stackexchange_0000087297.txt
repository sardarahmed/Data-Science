Q:

What's the difference between PointCloudConstPtr and PointCloud::ConstPtr

In subscriber callbacks our software stack uses a mixture of two function signatures.  In the case of subscribing to a sensor_msgs::PointCloud, we use the following two signatures:

void callback(const sensor_msgs::PointCloud::ConstPtr& msg)
void callback(const sensor_msgs::PointCloudConstPtr& msg)

These are both defined in the autogenerated header PointCloud.h
template <class ContainerAllocator>
struct PointCloud_
{
  // ---- Snip ----
  typedef boost::shared_ptr< ::sensor_msgs::PointCloud_<ContainerAllocator> const> ConstPtr;
};
typedef ::sensor_msgs::PointCloud_<std::allocator<void> > PointCloud;

typedef boost::shared_ptr< ::sensor_msgs::PointCloud > PointCloudPtr;
typedef boost::shared_ptr< ::sensor_msgs::PointCloud const> PointCloudConstPtr;

Expanding the typedefs myself, I get the following

sensor_msgs::PointCloud::ConstPtr

boost::shared_ptr< ::sensor_msgs::PointCloud_<ContainerAllocator> const>

sensor_msgs::PointCloudConstPtr
boost::shared_ptr< ::sensor_msgs::PointCloud_<std::allocator<void> > const>

It's not clear to me what ContainerAllocator gets set to in case 1, and I'm also not sure what the purpose of ContainerAllocater is.  Why would I choose one incantation over the other?

Originally posted by vpradeep on ROS Answers with karma: 760 on 2018-06-07
Post score: 3

A:

These are the same.
PointCloud_::ConstPtr is templated on the ContainerAllocator, but the PointCloud typedef specifies a default container allocator of std::allocator<void>, so they're the same.
I'm not sure why there are two aliases for the same symbol.

Originally posted by ahendrix with karma: 47576 on 2018-06-07
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by vpradeep on 2018-06-07:
Makes sense.  You're right that PointCloud::ConstPtr uses std::allocator<void>, and hence they're the same.  I guess I just tripped myself up when attempting to expand the typedefs by hand.  Thanks for the clarification.

