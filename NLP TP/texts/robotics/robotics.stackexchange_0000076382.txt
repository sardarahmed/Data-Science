Q:

Package dependencies and include dirs

Hi all,
I have a package1 which generates services via a Type1.srv file. These generated services are located in <catkin_ws>/devel/include/package1/Type1.h. This all works fine.
Now when I want a package2 to also use the services generated in package1 I follow the steps described in here.
Now when building I get the following error:
... fatal error: package1/Type1.h: No such file or directory
 #include "package1/Type1.h"
                                ^
compilation terminated.

Now it turns out package1/Type1.h is well generated and does lie in devel/include/package1/Type1.h.
So I output the content of package1_FOUND, package1_INCLUDE_DIRS and catkin_INCLUDE_DIRS from package2's CMakeLists.txt and it reads:
package1_FOUND : 1
package1_INCLUDE_DIRS : /opt/ros/indigo/include/usr/include
catkin_INCLUDE_DIRS : /opt/ros/indigo/include/usr/include

I would expect to get ../devel/include for these values, no?
Anyone knows what I am missing here? How can I let my system know about the include path to devel/include? I guess I do not have to set these includes by hand, do I?
Kind regards,
Antoine.

Originally posted by arennuit on ROS Answers with karma: 955 on 2016-09-19
Post score: 0

Original comments
Comment by gvdhoorn on 2016-09-19:
No, for headers generated from msgs the include paths should be added automatically. It would help if you could include the relevant CMakeLists.txt (please without all the comments).
Comment by Mark Rose on 2016-09-19:
Make sure you have the right dependencies listed in package.xml and CMakeLists.txt. If you don't have your package1 listed as a dependency, the include path will be wrong. As @gvdhoom points out, if you post them it would be easier for others to help you find what's wrong.

A:

The root of my problem actually lied in my use of orocos. Orocos actually requires to replace catkin_package by orocos_generate_package() and use ${USE_OROCOS_INCLUDE_DIRS}** in addition to **${catkin_INCLUDE_DIRS}.
I already found CMake dirty (because of its lack of clear structure), then catkin added a layer of confusion with its needed redundancy, now I must admit the addition of the orocos build system requirements on top of the former two is a real pain.
Thanks for your help guys, you really helped!

Originally posted by arennuit with karma: 955 on 2016-09-21
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by gvdhoorn on 2016-09-21:
I think you might be able to make some of this more clear and reduce layering by creating separate pkgs for msgs, services and the rest (ie: nodes).
Comment by arennuit on 2016-09-21:
You mean I should split my packages so that a single package does not define services (for instance) and nodes (or orocos components) at the same time, is that right?
Comment by gvdhoorn on 2016-09-21:
Yes.
That is a recommended practice anyway, as it allows users of your services or messages to depend just on your msg pkgs, instead of having to install everything. It would clearly separate your ROS API from your implementation.
Comment by arennuit on 2016-09-21:
This is very clear, thanks a lot!

