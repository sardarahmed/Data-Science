Q:

how to get to know dependence package once for all

Hi all,
Not sure if you meet such situation, that when I down load a package (even s simple toturail package), usually is not native developed for this HW platform.. then when build it usually will report fail by message that short of some other package--then I search it and git clone it from wiki then build--another depedence error jump out... and after 5 round I feel quite boring and anoying.
Do you know some good way that we can get the dependence package once for all?
And more important, many  "dependence package" looks not relevant to my original package at all-- I guess it is just becuase something like "I want package A--> package A need install package B and C" and package C contains package D, E, F..
This could be a infinity game?? any suggestion from your guys?
BR
LM

Originally posted by macleonsh on ROS Answers with karma: 26 on 2019-05-11
Post score: 0

A:

Please see #q252478 for an example workflow when building packages from source.
In general though: try not to build packages in your workspace. Always first try to see whether a package has been released and could be installed using apt. The buildfarm has already done all the dependency resolution for you, keeps you automatically up-to-date and (especially with large packages) it's much more efficient to build something once and re-use the binaries than to have each user compile everything themselves again.

when I down load a package (even s simple toturail package), usually is not native developed for this HW platform.. then when build it usually will report fail by message that short of some other package--then I search it and git clone it from wiki then build--another depedence error jump out... and after 5 round I feel quite boring and anoying.

Not building from source also allows you to avoid this "boring and annoying" part.

Originally posted by gvdhoorn with karma: 86574 on 2019-05-12
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by macleonsh on 2019-05-12:
@gvdhoorn Thanks so much for your advice.
You re correct, but for ROS community, many application are "half-making" and need source-code level modification...
Comment by gvdhoorn on 2019-05-13:
Then the author(s) should provide a .rosinstall file that contains all the repositories required to build the package. wstool can then be used to seed a workspace.

