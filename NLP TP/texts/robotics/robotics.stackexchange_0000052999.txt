Q:

Get topic name in callback?

I have multiple subscriptions to messages of the same type. I want to use the same callback method for all of them, but I'd like to know which topic the message "came from" when the callback is executed. I found some examples online that use boost::bind, but rosmake is not happy with the syntax, and I'm beginning to wonder if they're from an older version of ROS. I also tried using MessageEvent's getConnectionHeader(), but the returned map doesn't contain a value for the key "topic." This seems like it ought to be something that should be readily available. Any ideas? I have to be missing something obvious.

Originally posted by Tom Moore on ROS Answers with karma: 13689 on 2013-07-23
Post score: 7

Original comments
Comment by thebyohazard on 2013-07-24:
A duplicate of my question. The answer is what @William told you to do, though.

A:

Use a ros::MessageEvent type callback:
http://www.ros.org/wiki/roscpp/Overview/Publishers%20and%20Subscribers#MessageEvent_.5BROS_1.1.2B-.5D
void callback(const ros::MessageEvent<std_msgs::String const>& event)
{
  const ros::M_string& header = event.getConnectionHeader();
  std::string topic = header.at("topic");

  const std_msgs::StringConstPtr& msg = event.getMessage();
}

BUT THE ABOVE CODE MIGHT NOT WORK!
There is a related mailing list thread:
http://ros-users.122217.n3.nabble.com/How-to-identify-the-subscriber-or-the-topic-name-related-to-a-callback-td2391327.html
The thread mentions that the topic component of the ConnectionHeader is not always set. So, like the thread suggests, it's probably easier to encode this information into the creation of the subscriber:
#include <ros/ros.h>
#include <std_msgs/String.h>

#include <sstream>

void callback(const std_msgs::String::ConstPtr &msg, const std::string &topic) {
    ; // Do stuff
}

int main(int argc, char **argv)
{
  ros::init(argc, argv, "talker");

  ros::NodeHandle n;

  ros::Subscriber sub1 = n.subscribe<std_msgs::String>("foo", 1, boost::bind(callback, _1, "foo"));
  ros::Subscriber sub2 = n.subscribe<std_msgs::String>("bar", 1, boost::bind(callback, _1, "bar"));

  return 0;
}

Originally posted by William with karma: 17335 on 2013-07-23
This answer was ACCEPTED on the original site
Post score: 6

Original comments
Comment by lindzey on 2013-07-23:
@TheWumpus - this answer is much better than the one I provided. I sure hope you switch and accept it instead =) If, like me, you haven't used boost::bind before, this description made it click for me: http://www.boost.org/doc/libs/1_54_0/libs/bind/bind.html#Purpose
Comment by Tom Moore on 2013-07-24:\

As I noted in the original post, the MessageEvent method does not work:

ros::M_string header = event.getConnectionHeader();
ROS_INFO_STREAM("Topic is: " << header["topic"] << " count of 'topic' key is " << header.count("topic"));
Output:
Topic is:  count of 'topic' keys is 0
Comment by William on 2013-07-24:
@TheWumpus Yeah, I see that they mentioned that in the mailing list thread from 2011. I think the reason for this is that the "ConnectionHeader" is what is received over the wire, and for efficiency reasons the topic is not always set.
Comment by Tom Moore on 2013-07-24:
2. I also read the thread for the second solution you posted, and attempted to implement it before posting, but I must be doing something wrong, as the compiler doesn't care for the overload. The code you posted gives me the same result.
Comment by Tom Moore on 2013-07-24:
@William According to @tbh, your second solution should work, but I need to fight with it some more.
Comment by William on 2013-07-24:
@TheWumpus The second solution works for me too.
Comment by Tom Moore on 2013-07-24:
@William EDIT: Nevermind. I have it sorted. I'll accept this as the answer. Thank you (and you, @tbh)!
Comment by lucasw on 2015-03-11:
What would the boost bind approach look like with a class method callback? (where does 'this' go?)
Comment by Tom Moore on 2015-03-12:
See this for an example.
Comment by flieger19 on 2020-06-29:
Is there a comparable solution for ROS2?

