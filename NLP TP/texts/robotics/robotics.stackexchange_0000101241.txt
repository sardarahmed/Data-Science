Q:

UR5 mounted on table collides with the table at runtime

Hi all,
I have a ur5 robotic arm that is mounted on a table surface. I have created a urdf of the workspace digi2.xacro given as follows:
<?xml version="1.0" ?>
<robot name="ur5" xmlns:xacro="http://ros.org/wiki/xacro">

<xacro:include filename="$(find ur_description)/urdf/ur5.urdf.xacro" />
<xacro:ur5_robot prefix="" joint_limited="true"/>

<link name="world"/>

<link name="table">
    <visual>
      <geometry>
        <box size="2 1.5 0.05"/>
      </geometry>
      <material name="white">
        <color rgba="1 1 1 1"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="2 1.5 0.05"/>
      </geometry>
    </collision>
</link>

<joint name="world_to_table" type="fixed">
  <parent link="world"/>
  <child link="table"/>
  <origin xyz="0 0 1" rpy="0 0 0"/>
</joint>

<joint name="table_to_robot" type="fixed">
  <parent link="table"/>
  <child link="base_link"/>
  <origin xyz="0 0 0" rpy="0 0 0"/>
</joint>

</robot>

I have created by moveit package by running through MoveIt Setup Assistant (MSA). The idea being that, the table surface was taken into account when generating the collision matrix. The screen shot when I run the demo.launch file is shown below.

As, it shows a wide flat table surface beneath the robotic arm. However, when running on the real robotic arm hardware, at times, I see the robotic arm going down the table, hitting and then emergency stopping. Why is it that happening? Do I have to change the origin tag in the xacro file. Do I have to use a mesh, instead of simple box primitive? Please can you provide any suggestions in this regards.
EDIT 1
I've made some small changes to the workcell xacro file. I will add here,

the input xacro file
the generated srdf file
the screenshot from demo.launch

workcell.xacro
<?xml version="1.0" ?>
<robot name="myworkcell" xmlns:xacro="http://ros.org/wiki/xacro">
<xacro:include filename="$(find ur_description)/urdf/ur5.urdf.xacro" />
<xacro:ur5_robot prefix="" joint_limited="true"/>

<link name="world"/>
<link name="table">
  <visual>
    <geometry>
      <box size="1.0 1.0 0.05"/>
    </geometry>
  </visual>
  <collision>
    <geometry>
      <box size="1.0 1.0 0.05"/>
    </geometry>
  </collision>
</link>

<joint name="world_to_table" type="fixed">
  <parent link="world"/>
  <child link="table"/>
  <origin xyz="0 0 0.5" rpy="0 0 0"/>
</joint>

<joint name="table_to_robot" type="fixed">
  <parent link="table"/>
  <child link="base_link"/>
  <origin xyz="0 0 0" rpy="0 0 0"/>
</joint>

</robot>

myworkcell.srdf
<?xml version="1.0" ?>
<!--This does not replace URDF, and is not an extension of URDF.
    This is a format for representing semantic information about the robot structure.
    A URDF file must exist for this robot as well, where the joints and the links that are referenced are defined
-->
<robot name="myworkcell">
    <!--GROUPS: Representation of a set of joints and links. This can be useful for specifying DOF to plan for, defining arms, end effectors, etc-->
    <!--LINKS: When a link is specified, the parent joint of that link (if it exists) is automatically included-->
    <!--JOINTS: When a joint is specified, the child link of that joint (which will always exist) is automatically included-->
    <!--CHAINS: When a chain is specified, all the links along the chain (including endpoints) are included in the group. Additionally, all the joints that are parents to included links are also included. This means that joints along the chain and the parent joint of the base link are included in the group-->
    <!--SUBGROUPS: Groups can also be formed by referencing to already defined group names-->
    <group name="manipulator">
        <chain base_link="base_link" tip_link="tool0" />
    </group>
    <!--GROUP STATES: Purpose: Define a named state for a particular group, in terms of joint values. This is useful to define states like 'folded arms'-->
    <group_state name="home" group="manipulator">
        <joint name="elbow_joint" value="1.5707" />
        <joint name="shoulder_lift_joint" value="-1.5707" />
        <joint name="shoulder_pan_joint" value="0" />
        <joint name="wrist_1_joint" value="-1.5707" />
        <joint name="wrist_2_joint" value="-1.5707" />
        <joint name="wrist_3_joint" value="0" />
    </group_state>
    <!--VIRTUAL JOINT: Purpose: this element defines a virtual joint between a robot link and an external frame of reference (considered fixed with respect to the robot)-->
    <virtual_joint name="virtual_joint" type="fixed" parent_frame="world" child_link="world" />
    <!--DISABLE COLLISIONS: By default it is assumed that any link of the robot could potentially come into collision with any other link in the robot. This tag disables collision checking between a specified pair of links. -->
    <disable_collisions link1="base_link" link2="shoulder_link" reason="Adjacent" />
    <disable_collisions link1="base_link" link2="table" reason="Adjacent" />
    <disable_collisions link1="ee_link" link2="wrist_1_link" reason="Never" />
    <disable_collisions link1="ee_link" link2="wrist_2_link" reason="Never" />
    <disable_collisions link1="ee_link" link2="wrist_3_link" reason="Adjacent" />
    <disable_collisions link1="forearm_link" link2="upper_arm_link" reason="Adjacent" />
    <disable_collisions link1="forearm_link" link2="wrist_1_link" reason="Adjacent" />
    <disable_collisions link1="shoulder_link" link2="table" reason="Default" />
    <disable_collisions link1="shoulder_link" link2="upper_arm_link" reason="Adjacent" />
    <disable_collisions link1="wrist_1_link" link2="wrist_2_link" reason="Adjacent" />
    <disable_collisions link1="wrist_1_link" link2="wrist_3_link" reason="Never" />
    <disable_collisions link1="wrist_2_link" link2="wrist_3_link" reason="Adjacent" />
</robot>

screenshot from demo.launch

EDIT 2
I made a mistake. Previously. I was running the roslaunch ur5_moveit_config ur5_moveit_planning_execution.launch sim:=false which was using the standard srdf from the downloaded repositories of the unviersal_robots pacakge. But, here I have updated my scenario, with correct srdf and other configurations. Now, the problem of hitting the table etc does not occur.
thanks,
Zahid

Originally posted by zahid990170 on ROS Answers with karma: 135 on 2022-02-17
Post score: 0

Original comments
Comment by Kaushik_6 on 2022-06-02:
I tried to do something similar by mounting the ur5e arm on a surface. After doing so my I tried to move to arm to a pose goal but it did not generate a plan. Do I need to create a new move it package after adding the surface into the urdf file?
The following error message was displayed :
manipulator/manipulator[RRTConnectkConfigDefault]: Unable to sample any valid states for goal tree

A:

No, you don't have to use a mesh, the primitive should suffice. You need to provide more info for the troubleshooting of the problem. Please also share your srdf file. If the collision between grippers and the table object are allowed, then this kind of a behavior is normal.

Originally posted by tahsinkose with karma: 46 on 2022-02-18
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by zahid990170 on 2022-02-19:
thanks @tahsinkose, I have made an update on my question. I just added the entire arm as a single planning group from 'base_link' until 'tool_0'  as kinetic chain. I have added the xacro, srdf and screenshots here. thanks.
Comment by zahid990170 on 2022-02-23:
hi, thanks @tahsinkose, I made a mistake. Previously. I was running the roslaunch ur5_moveit_config ur5_moveit_planning_execution.launch sim:=false which was using the standard srdf from the downloaded repositories of the unviersal_robots pacakge. But, here I have updated my scenario, with correct srdf and other configurations. But, now I am getting another problem, as the goal pose is never reached on real robot when sent using move_group_interface in my c++ code. However from the RViz, I can still command different motions. Maybe, you can share some input. thanks,
Comment by tahsinkose on 2022-02-24:
@zahid990170 Please search the forum for similar problems and mark this problem as solved.

