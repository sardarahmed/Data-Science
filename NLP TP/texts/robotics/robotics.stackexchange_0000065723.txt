Q:

Using PointCloud2 data (getting x,y points) in Python

In a Python ROS node, I've subscribed to a sensor_msgs/LaserScan topic, converted them to sensor_msgs/PointCloud2 messages, and am trying to extract X, Y (and Z) point coordinates. The transformation from LaserScan to PointCloud2 uses the LaserProjection class of laser_geometry. What is the data format of sensor_msgs/LaserScan.data? From the documentation and other questions, it's a binary format usually converted in C++ with the pcl_ros or pcl_conversions packages (eg http://answers.ros.org/question/10947/reading-float-from-float32-data-from-kinect-pointcloud2/), but I'm working in Python.
This is my code:
import rospy, math, random
import numpy as np
from sensor_msgs.msg import LaserScan
from laser_geometry import LaserProjection

...
class Lidar():
def __init__(self, scan_topic="/robot_0/base_scan"):
    self.scan_sub = rospy.Subscriber(scan_topic, LaserScan, self.on_scan)
    self.laser_projector = LaserProjection()

def on_scan(self, scan):
    print scan
    rospy.loginfo("Got scan, projecting")
    cloud = self.laser_projector.projectLaser(scan)
    print cloud
    rospy.loginfo("Printed cloud")

Thank you in advance!

Originally posted by Ajay Jain on ROS Answers with karma: 165 on 2015-02-09
Post score: 7

A:

Here is my solution:
import sensor_msgs.point_cloud2 as pc2

...
def on_scan(self, scan):
    rospy.loginfo("Got scan, projecting")
    cloud = self.laser_projector.projectLaser(scan)
    gen = pc2.read_points(cloud, skip_nans=True, field_names=("x", "y", "z"))
    self.xyz_generator = gen

The source/documentation for point_cloud2.py is http://docs.ros.org/indigo/api/sensor_msgs/html/point__cloud2_8py_source.html, which describes the read_points method to parse a PointCloud2. From that method source, the format of PointCloud2.data seems to be a series of fields (x, y, z, intensity, index) packed with the struct library. The deserialization in that file is done by:
fmt = _get_struct_fmt(cloud.is_bigendian, cloud.fields, field_names)
width, height, point_step, row_step, data, isnan = cloud.width, cloud.height, cloud.point_step, cloud.row_step, cloud.data, math.isnan
unpack_from = struct.Struct(fmt).unpack_from

Originally posted by Ajay Jain with karma: 165 on 2015-02-11
This answer was ACCEPTED on the original site
Post score: 5

Original comments
Comment by michaeljaison on 2016-06-20:
How can you build an organized pointcloud in python-pcl?
Comment by Mehdi. on 2016-07-27:
sincerely the deserialization you wrote doesn't make any sense to me. Can you elaborate? And where does _get_struct_fmt come from?
Comment by lr101095 on 2018-05-09:
@Mehdi. Ajay is referring to this (see line 76):
http://docs.ros.org/api/sensor_msgs/html/point__cloud2_8py_source.html#l00060

