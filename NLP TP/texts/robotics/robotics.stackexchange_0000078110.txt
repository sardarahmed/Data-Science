Q:

How to implement complex parameters in cpp?

I have written a package to support simple PWM servo motors. To support some features, the node must be initialized with settings for each servo. Here is an example:
/config_servos "servos: [{servo: 1, center: 333, range: 100, direction: -1}, {servo: 2, center: 336, range: 108, direction: 1}]"
This initialized two servos - each having a center, range, and direction parameter. There can be many servos.
Currently a user of the node, must make a service call to perform the configuration. I'd like to make it possible for this setup to be done via the launch file or some similar external file rather than require it be coded.
Is there an example or best practice for how to initialize objects?
Here is a link to the draft documentation which shows all of the current configuration services:
http://bradanlane.gitlab.io/ros-i2cpwmboard/index.html

Originally posted by suforeman on ROS Answers with karma: 300 on 2016-12-31
Post score: 1

A:

You could load a yaml-file with your parameters: rosparam load
asd.yaml:
base_joint_motor: 
  center: 333
  range: 100
  direction: -1
wrist_joint_motor:
  center: 336
  range: 108
  direction: 1

or if you have a list of similar motors:
servos:
  - id: 1
    center: 333
    range: 100
    direction: -1
  - id: 2
    center: 336
    range: 108
    direction: 1

You can load this file in a launch file or on the command line (with added namespace).
// Added @gvdhoorn's proposal with lists

Originally posted by NEngelhard with karma: 3519 on 2016-12-31
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by suforeman on 2016-12-31:
It looks like the yaml file example shows "simple" data. My code has a few simple parameters such as "PWM frequency". Where I struggle is with "objects" - e.g. The user may need to configure several servos and each servo has several values. Is there a standard method for initializing objects?
Comment by NEngelhard on 2016-12-31:
"It looks like the yaml file example shows "simple" data." It shows exactly the data you provided. Could you tell a bit more about the structure of your parameters? And please include all information into your question. You asked for A, got a solution for A and now complain that it does not solve B.
Comment by suforeman on 2016-12-31:
Sorry, was not trying to complain. I had started my comment response before you had finished updating your comment with example.
Numeric postfixing got quite messy when I had "objects inside objects". I would need to restructure my service calls. I may choose that route if that is best.
Comment by gvdhoorn on 2016-12-31:
@NEngelhard chose to use suffixes, but there is no requirement for that: rosparam supports yaml lists and dictionaries, and those don't require suffixes. ROS parameters in yaml lists do often include numeric IDs (but as separate fields), as those make it easy to identify specific entries.
Comment by gvdhoorn on 2016-12-31:
An example list would be:
servos:
  - id: 1
    center: 333
    range: 100
    direction: -1
  - id: 2
    center: 336
    range: 108
    direction: 1

Comment by suforeman on 2016-12-31:
Ah! I never though of moving the index to be an ID. I hadn't found that example. Thanks for the added suggestion @gvdhoorn. I'll map out my current initialization services and try to get this working.
Comment by suforeman on 2016-12-31:
Followup: I found a starting point which combines my scenario and the above suggestions. The result looks something like this:
/servos          : '1' : {center: 331, direction: -1, range: 101}
/servos/1        : {center: 331, direction: -1, range: 101}
/servos/1/center : 331

Comment by suforeman on 2016-12-31:
the above is based off of this question/answer - http://answers.ros.org/question/198274/read-yaml-parameter-in-c/
Comment by suforeman on 2016-12-31:
Quick follow up: I had odd (aka unusable)  results from the "id" approach. I am not fluent with ROS so I am not sure if it was my implementation or the syntax with multiple "id" instances. I was successful with the "/servos/1", "servos/2" syntax.
Comment by NEngelhard on 2017-01-01:
How did your yaml-file look like? And your result? I tested the added file in my post.
Comment by suforeman on 2017-01-01:
Thanks for your continued patients in answer this question.
Your example works perfectly.
I had a syntax error in my yaml and it was only storing the last servo rather than creating a list.

