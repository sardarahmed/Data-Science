Q:

Add a lidar to O3DE ros2 project

I'm using O3DE 2310.2 from the .deb download in Ubuntu 23.10 and have sourced my ros2 install/setup.bash, then launched o3de.  Next I created a new project using the ROS2 Project template, then made a new level and have the Atom Default Environment with the checkerboard ground, outdoor background image, and shaderball.
What I'd like to do is add a lidar from the ros2 gem, press play game or simulate and then see a ros2 topic appear with a point cloud that could be echoed, bagged, visualized in rviz and so on.
If I make a new entity with a transform there's a drop down list of standard components to add to it- should the ros2 sensors be in that list?
If I instantiate prefab there's LidarOS2.prefab which has makes a nice lidar model appear in the scene, but it's not clear there's any lidar simulation attached to it.

A:

Update - I've made a simple example project that has a lidar, a camera, and box with wheels vehicles that have twist and ackermann control inputs:
https://github.com/lucasw/o3de_ros_example
So far building the latest O3DE entirely from source seems like the best method instead of using the snap or .deb.
The key is to have the o3de-extras ROS2 gem added to the project, then rebuild the project, then relaunch the Editor, after that ROS2 components including the lidar will be available under the right hand panel after clicking 'add component'.
https://www.youtube.com/watch?v=i9g27hR9TWU
(I'll clean up the following text into a better answer)

Following the advice in https://github.com/o3de/o3de/discussions/17652#discussioncomment-8923103 I installed the latest nightly o3de deb build a day or so after the mentioned PRs were merged.
https://o3debinaries.org/download/linux.html
e3193b2a7aaafba0d82eba2c6f25f49ad5321e9a2c3924f6e59f2fc790be3bbd /data/workspace/o3de/build/linux/_CPack_Packages/Linux/DEB/o3de_4.2.0.deb

https://o3debinaries.org/development/Latest/Linux/o3de_latest.deb
https://o3debinaries.org/development/Latest/Linux/o3de_latest.deb.sha256
(not sure how to browse older nightly builds, so it'll be different tomorrow)

On one system I had to remove the o3de snap which was easy (but I had to remove paths to it in ~/.o3de/o3de_manifest.json), on another I had installed the 2310.2 released deb (which was causing problems with regular apt updates, I expect the nightly debs will be similar) and removed it like this:
sudo dpkg --remove --force-all o3de

(and then I dpkg installed the new nightly deb)

I had https://github.com/o3de/o3de-extras updated to latest version (from March 20th) and the manifest gem paths were already pointing at the ROS2 and other gems within it.
I deleted my old ros2 projects and start o3de, then created a new ros2 project.  Running the build from the project manager failed the first time because something couldn't be downloaded, but worked on the second try.  After that I clicked 'open editor' and it appeared to work, then failed for unexplained reasons (the output is going to user/log/Editor.log or another log adjacent to that, not the terminal that o3de was run in), but on the 3rd attempt it made it all the way into the editor.
The DemoLevel partially opens with a panoramic background image but is missing elements like the floor, and I think a warehouse environment?  Wheels and a lidar to the robot are there (but no robot chassis).  Pressing 'simulate' or 'play game' results in the editor exiting (because it crashed?  No error messages because the stdout went somewhere else).
There are a lot of upper right pop-up messages from the Asset Manager when the project loads, probably those are related to the missing scene elements.
Next I ran the built project executable directly and it mostly worked- a ros2 node was started and there was a LaserScan published out (which came installed on that default robot), but because there was no ground the robot was falling through empty spacing forever (which /tf was reflecting).  Publishing to cmd_vel didn't have any effect on wheel rotations.
cd ~/O3DE/Projects/ros2_2024_03_28/build/linux/bin/profile

./ros2_2024_03_28.UnifiedLauncher

I then tried making a new level (which has a floor by default), and pressing play doesn't crash.  Then found and added a ros2 lidar component in the right hand panel, but now pressing play crashes like DemoLevel.  Perhaps if I can make that new level the default starting level the UnifiedLauncher executable will load it and I'll have succeeded at fully answering this question, I'll update it when/if I do.  Or perhaps I could run the Editor directly for my project, and will see useful console output, or maybe it won't crash when the scene is run if launched directly.

Update - by editing the DemoLevel instead of creating a new level I was able to get working lidar, view it in rviz2:

