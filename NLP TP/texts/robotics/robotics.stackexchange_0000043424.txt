Q:

Improve quality of octomap with params

Hi,
I have built a octomap with ocotmap_server. It's a map with mobile objects so it's necessary to actualize frequently. Unfortunately some octomap points doesn't remove themselves. So I look for better parameters in the launch file.
I have well set latch like true but anything change.
I want modify "sensor_model/hit, sensor_model/miss, sensor_model/min and sensor_model/max". I have seen the topic Octomap_server but I don't understand descriptions of parameters.
what does you mean each of them and How I should modify this parameters to select fewer points ?

Originally posted by jep31 on ROS Answers with karma: 411 on 2012-08-21
Post score: 2

Original comments
Comment by jep31 on 2012-08-21:
There is the service reset, it's good but I would a same result without call this service in each loop. I don't want memory.
Comment by AHornung on 2012-08-22:
If you want no map "memory", then why are you mapping at all? Why not simply converting the point cloud into a voxel grid?
Comment by jep31 on 2012-08-28:
Its true, so octomap is mainly used to a static map ?
I should use somethings like collider package for find mobile objects ?
Comment by Gazer on 2013-07-10:
@AHornug, is there a way to convert pointcloud to voxel grid?
Comment by AHornung on 2013-07-10:
@Gazer: You need to do that yourself
Comment by Gazer on 2013-07-11:
@AHornung: I am wondering could you please help me out on this question? http://answers.ros.org/question/67096/octomap-not-updating-the-map-in-real-time/  thank you

A:

For the map to react more quickly to changes, the sensor_model parameters are indeed the right ones to tune. For a detailed description, please read the OctoMap paper available at http://octomap.sourceforge.net/ or an introduction on occupancy grid mapping.
Essentially, each endpoint increases the probability that a voxel is occupied by sensor_model/hit, each other voxel's probability along the ray to the endpoint is decreased by the probability of sensor_model/miss. The minimum and maximum probabilities are given by the thresholds sensor_model/min and sensor_model/max. All operations are performed in log-odds space, so the probabilities are added (hit) or subtracted (miss) until they reach min or max in log-space. If you increase the hit probability and decrease the miss probability, it will make the map trust the sensor more after one measurement. If you increase min and decrease max at the same time, this will enable fast updates at the cost of more sensor noise appearing in the map.
The latch parameter only affects the publishing of visualizations, if your map changes often best set it to false.

Originally posted by AHornung with karma: 5904 on 2012-08-22
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by jep31 on 2012-08-28:
Thanks, I understand better. But I don't see a lot of difference.
Comment by Gazer on 2013-07-10:
@jep31, so do you find a way to optimize the 3d map generated by octomap then? I am having the same issue as the 3d map published from octomap will never updated (never erased or self-correct iteself). Thank you for your contribution!
Comment by AHornung on 2013-07-10:
You need to ensure that there is actually something that can be used to clear, i.e. an obstacle (floor, table surface etc) is seen behind the voxel that you expect to disappear.
Comment by jep31 on 2013-07-15:
I'm not working on it for long time but you can maybe try this to remove NaNs: http://www.ros.org/wiki/pcl_ros/Tutorials/PassThrough%20filtering

