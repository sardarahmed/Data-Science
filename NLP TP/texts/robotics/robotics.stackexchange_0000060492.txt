Q:

rostest code coverage

I'm writing tests in python, and I'm hoping to use rostest and get a coverage report of my code.
I notice on the unittest page it says that this can be done by adding a coverage_packages argument to rostest.rosrun. Doing so gives me the following error in my test output:
TypeError: rosrun() got an unexpected keyword argument 'coverage_packages'
If I omit this argument and the tests actually run, no coverage report is generated anywhere I can see (neither log directory nor project directory).
I see that rosunit even has helper scripts for generating these... is this all deprecated and unsupported? Or is there a way to get code coverage reports?
Basic info:

Ubuntu 12.04
ROS Groovy
rosbuild
python

Originally posted by mbforbes on ROS Answers with karma: 70 on 2014-07-01
Post score: 4

A:

Looking at the code, it seems that rostest.rosrun does not take 5th argument coverage_package.
def rosrun(package, test_name, test, sysargs=None):

Instead, unitrun (seems deprecated) takes it (code).
def unitrun(package, test_name, test, sysargs=None, coverage_packages=None):
    :
    @param coverage_packages: list of Python package to compute coverage results for. Defaults to package
    @type coverage_packages: [str]

It would be beneficial to the community if you could test this method and provide how it goes.
Btw, with coverage_packages I think you need to give actual name of the packages; what your error message indicates is you gave coverage_packages string.

Originally posted by 130s with karma: 10937 on 2014-07-02
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by mbforbes on 2014-07-03:
Thanks Isaac for looking into this!
After seeing unitrun is deprecated, I decided to just add code coverage myself, because it's quite easy. Here's an example for anyone wondering:
http://git.io/__B2wg
(Also thanks for editing my question---my reputation wasn't high enough to post links :-)

