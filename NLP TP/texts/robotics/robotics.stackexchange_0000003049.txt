Q:

How to define conditions for state-machines in roby?

I am searching for a way that allows me to wait for some conditions on ports before applying a new state.
My concrete Problem:
I want to make sure that my AUV aligns to the right pipeline. Therefore before starting the pipeline-tracking, I want to check for the current system heading.
My current state-machine looks like this:

find_pipe_back = state target_move_def(:finish_when_reached => false ,
  :heading => 1 ...)
pipe_detector = state pipeline_detector_def
pipe_detector.depends_on find_pipe_back, :role => "detector"
start(pipe_detector)
  forward pipe_detector.align_auv_event, success_event

roughly I am looking for a way to condition the last-forward.

A:

Such "conditioning" was existing in the pre-syskit days, and it got removed as it made the state machines considerably more complex. Usually, what starts as a simple condition becomes quickly something a lot more involved.
The best way is therefore to create a dedicated composition that would do the monitoring:
class PipelineFinder < Syskit::Composition
  argument :expected_heading
  add PipelineDetector::Task, :as => 'detector'
  def heading_within_tolerance?(current, tolerance)
    # Test for tolerance
  end
  task_script do
    # Don't know the name of the relevant port, so I am making it up
    reader = detector.pipeline_state_port.reader
    wait detector.align_auv_event
    if (data = reader.read_new) && heading_within_tolerance?(data.yaw, tolerance)
      emit :success
    else
      emit :false_positive
    end
  end
end

Note that you could also attach the task script on the detector task in a separate action:
describe('runs the pipeline detector but filters against an expected direction').
   required_arg('expected_heading')
def detect_pipeline_with_validation(arguments = Hash.new)
   detector = pipeline_detector_def
   expected_heading = arguments[:expected_heading]
   detector.task_script do
     # same script than up there, except that expected_heading
     # is in this case a local variable
   end
   detector
end

