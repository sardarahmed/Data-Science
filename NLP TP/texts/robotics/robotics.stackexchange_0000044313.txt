Q:

Requesting different services with the same client node

Hi all!
So I have a ROS client like thus
ros::ServiceClient client

I also have two services:

"start_load_recording": This service basically tells a sensor to start logging force data into a text file. The type of message conveyed over this service is 'startMsg'

"stop_load_recording": This service tells that very same sensor to stop logging the force data, and close down the text file. The type of message conveyed over this service is 'stopMsg'

The thing is, I want to have a client which can request both these services. Thus I am using the client as a sort of 'on-off switch' for logging and un-logging the force data.
Can I do that? For example,
client = n.serviceClient<cell_node::startMsg>("start_load_recording");
//prepare my service message request variables. Lets say its called strt
client.call(strt);
.
.
.
//few lines of code
.
.
.
client = n.serviceClient<cell_node::stopMsg>("stop_load_recording");
//prepare my service message request variables. Lets say its called stop
client.call(stop);

Can I do the above?
Thanks and all help is greatly appreciated!

Originally posted by Nishant on ROS Answers with karma: 143 on 2012-09-20
Post score: 0

A:

Sure. I don't see any problem with your code there. It's just important that the service implementation in the server does not block.
Btw. consider using ROS actionlib instead of services. You could send an action goal and cancel it in the client when you want to stop recording. This avoids synchronization problems when you have, for instance, two clients starting and stopping recording at different points in time. Have a look here for a discussion on when to use services.

Originally posted by Lorenz with karma: 22731 on 2012-09-20
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by Nishant on 2012-09-20:
Thanks for the heads up on the actionlib library! I went through it, and I am almost sure that the next version of my code will get rid of all services and have ActionServers and ActionClients. :)
Comment by Nishant on 2012-09-20:
I had a small question though. When you say the service implementation in the server does not block, what do you mean? Does that mean that the service server gets bound to the client in some way? I thought client-service communication was a quick one time request-response.
Comment by Lorenz on 2012-09-20:
The call in the client blocks as long as the server service callback function is processing and returns only when it returned. That means the server should be quick. For recording, that means you have to have a separate recording thread that is triggered by the start call.

