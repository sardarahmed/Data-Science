Q:

Why is pcl_ros::transformPointCloud changing the frame_id

Hi, if got the following code:
cloud_out->header.frame_id = "<out_frame>";

tf_listener_->lookupTransform( frame_out, frame_in, stamp, transform);

ROS_INFO("Frame before: %s", cloud_out->header.frame_id.c_str());
pcl_ros::transformPointCloud( *cloud_in, *cloud_out, transform );
ROS_INFO("Frame after : %s", cloud_out->header.frame_id.c_str());

The first output, gives out_frame, but after the transformation the frame is set to the frame of cloud_in
For me this looks like an error, is there a reason to change the frame_id like this?

Originally posted by Tobias Neumann on ROS Answers with karma: 179 on 2015-01-23
Post score: 2

Original comments
Comment by paulbovbel on 2015-01-29:
are these sensor_msgs Pointcloud2s or pcl::Pointclouds?
Comment by Tobias Neumann on 2015-01-30:
They are both pcl::PointCloudpcl::PointXYZI::Ptr
Comment by paulbovbel on 2015-01-30:
Which version of ROS?
Comment by Tobias Neumann on 2015-01-30:
sry, its Ubuntu 12.04 with Hydro and pcl-1.7

A:

So, this is not actually a bug.
The cloud_out parameter passed in by reference is pretty much just a placeholder for allocation, and not expected to contain any useful data. These types of functions are everywhere in tf. The Transform object that you feed to ::transformPointCloud actually doesn't have any header information attached (not a StampedTransform), so this function is not expected to be doing anything useful with headers, it simply applies the transform to cloud_in, and overwrites cloud_out.
Anyways, the function call you're actually looking for is http://docs.ros.org/indigo/api/pcl_ros/html/namespacepcl__ros.html#aad1ce4ad90ab784aae6158419ad54d5f, where you supply the target frame and a listener. That call will actually chain to the one you're using, and update the header after the transformation is applied.

Originally posted by paulbovbel with karma: 4518 on 2015-02-03
This answer was ACCEPTED on the original site
Post score: 3

