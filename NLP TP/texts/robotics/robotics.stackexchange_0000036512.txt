Q:

Simulating a custom robot going up a ramp in Gazebo

Hi all,
I tried to simulate a custom 4-wheel robot model (URDF) going up a ramp in gazebo but it cannot do so. It can navigate on the ground plane using a custom base controller but when it tries to go up the ramp it gets stuck.
What am I missing in the URDF?
Some pointers to implement this is appreciated.
Thank you
CS
Here is my URDF
I still dont have a good grasp of the tags anchor, mechanicalReduction

<include filename="$(find rover_base_controller)/urdf/materials.urdf.xacro" />

<!-- This adds the laser macro, including the scan for gazebo and link name -->
<include filename="$(find pr2_description)/urdf/sensors/hokuyo_lx30_laser.urdf.xacro" />

<xacro:property name="scale" value="1.0"/>
<xacro:property name="base_length" value="0.6"/>
<xacro:property name="base_width" value="0.3"/>
<xacro:property name="base_height" value="0.1"/>
<xacro:property name="wheel_base1_length" value="0.02"/>
<xacro:property name="wheel_base1_width" value="0.02"/>
<xacro:property name="wheel_base1_height" value="0.07"/>
<xacro:property name="wheel_base2_length" value="0.02"/>
<xacro:property name="wheel_base2_width" value="0.05"/>
<xacro:property name="wheel_base2_height" value="0.01"/>
<xacro:property name="wheel_base3_length" value="0.02"/>
<xacro:property name="wheel_base3_width" value="0.02"/>
<xacro:property name="wheel_base3_height" value="0.06"/>
<xacro:property name="wheel_thickness" value="0.06"/>
<xacro:property name="wheel_radius" value="0.053"/>
<xacro:property name="mast_height" value="0.2"/>
<xacro:property name="mast_length" value="0.01"/>
<xacro:property name="mast_width" value="0.01"/>
<xacro:property name="mast_vertical_bar_height" value="0.01"/>
<xacro:property name="mast_vertical_bar_length" value="0.01"/>
<xacro:property name="mast_vertical_bar_width" value="0.2"/>
<xacro:property name="M_PI" value="3.14159265"/>

<xacro:macro name="default_inertial" params="mass">
    <inertial>
        <mass value="${mass}" />
        <inertia ixx="0.01" ixy="0.0" ixz="0.0"
                 iyy="0.01" iyz="0.0"
                 izz="0.01" />
        </inertial>
</xacro:macro>

<!-- base_footprint is a fictitious link(frame) that is on the ground right below base_link origin,
         navigation stack depends on this frame -->
    <link name="base_footprint">
        <inertial>
            <mass value="0.0001" />
            <origin xyz="0 0 0" />
            <inertia ixx="0.0001" ixy="0.0" ixz="0.0"
                     iyy="0.0001" iyz="0.0"
                     izz="0.0001" />
        </inertial>

        <visual>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <geometry>
                <box size="0.001 0.001 0.001" />
            </geometry>
                <material name="Green"/>
        </visual>

        <collision>
            <origin xyz="0 0 ${wheel_base1_height + wheel_radius}" rpy="0 0 0" />
            <geometry>
              <box size="0.001 0.001 0.001" />
            </geometry>
        </collision>
    </link>

<link name="base_link">
    <visual>
        <geometry>
            <box size="${base_length*scale} ${base_width*scale} ${base_height*scale}"/>
        </geometry>
        <material name="Blue"/>
    </visual>
    <collision>
        <geometry>
            <box size="${base_length} ${base_width} ${base_height}"/>
        </geometry>
    </collision>
    <xacro:default_inertial mass="50"/>
</link>

<joint name="base_footprint_joint" type="fixed">
    <!-- NB: While you would think this would make it go up, it is oddly reversed.
         This moves the joint to 0,0,0 where we want it for rviz, etc. -->
    <origin xyz="0 0 ${wheel_base1_height - wheel_base2_height + wheel_base3_height + wheel_radius}" rpy="0 0 0" />
    <parent link="base_footprint"/>
    <child link="base_link" />
</joint>

<gazebo reference="base_link">
  <material>Gazebo/Blue</material>
</gazebo>

<!--                                                      -->
<!--           base and caster for wheel                  -->
<!--                                                      -->
<xacro:macro name="wheel_base" params="prefix suffix reflect_x reflect_y *rev_joint">
    <link name="${prefix}_${suffix}_wheel_base1">
        <visual>
            <geometry>
                <box size="${wheel_base1_length} ${wheel_base1_width} ${wheel_base1_height}"/>
            </geometry>
            <material name="Blue"/>
            <origin xyz="0 0 ${-wheel_base1_height/2}" rpy="0 0 0"/>
        </visual>
        <collision>
            <geometry>
                <box size="${wheel_base1_length} ${wheel_base1_width} ${wheel_base1_height}"/>
            </geometry>
            <material name="Blue"/>
            <origin xyz="0 0 ${-wheel_base1_height/2}" rpy="0 0 0"/>
        </collision>
        <xacro:default_inertial mass="1"/>

    </link>

    <joint name="base_to_${prefix}_${suffix}_wheel_base1" type="fixed">
        <parent link="base_link"/>
        <child link="${prefix}_${suffix}_wheel_base1"/>
        <origin xyz="${reflect_x*((base_length/2)-0.1)} ${reflect_y*((base_width/2)+(wheel_base1_width/2))} 0" />
    </joint>

   <link name="${prefix}_${suffix}_wheel_base2">
        <visual>
            <geometry>
                <box size="${wheel_base2_length} ${wheel_base2_width} ${wheel_base2_height}"/>
            </geometry>
            <material name="Blue"/>
            <origin xyz="0 ${-reflect_y*(wheel_base2_width/2)} 0" rpy="0 0 0"/>
        </visual>
        <collision>
            <geometry>
                <box size="${wheel_base2_length} ${wheel_base2_width} ${wheel_base2_height}"/>
            </geometry>
            <material name="Blue"/>
            <origin xyz="0 ${-reflect_y*(wheel_base2_width/2)} 0" rpy="0 0 0"/>
        </collision>
        <xacro:default_inertial mass="1"/>
    </link>

    <joint name="${prefix}_${suffix}_wheel_base1_to_base2" type="continuous">
        <parent link="${prefix}_${suffix}_wheel_base1"/>
        <child link="${prefix}_${suffix}_wheel_base2"/>
        <origin xyz="0 0 -${wheel_base1_height - wheel_base2_height/2}" />
        <axis xyz="0 0 1"/>
        <safety_controller  k_velocity="10" />
        <dynamics damping="0.0" friction="0.0" />
        <xacro:insert_block name="rev_joint"/>
    </joint>

    <transmission type="pr2_mechanism_model/SimpleTransmission" name="${prefix}_${suffix}_wheel_base_trans">
        <actuator name="${prefix}_${suffix}_wheel_base_motor" />
        <joint name="${prefix}_${suffix}_wheel_base1_to_base2" />
        <mechanicalReduction>1.0</mechanicalReduction>
    </transmission>

    <link name="${prefix}_${suffix}_wheel_base3">
        <visual>
            <geometry>
                <box size="${wheel_base3_length} ${wheel_base3_width} ${wheel_base3_height}"/>
            </geometry>
            <material name="Blue"/>
            <origin xyz="0 0 -${wheel_base3_height/2}" rpy="0 0 0"/>
        </visual>
        <collision>
            <geometry>
                <box size="${wheel_base3_length} ${wheel_base3_width} ${wheel_base3_height}"/>
            </geometry>
            <material name="Blue"/>
            <origin xyz="0 0 -${wheel_base3_height/2}" rpy="0 0 0"/>
        </collision>
        <xacro:default_inertial mass="1"/>
    </link>

    <joint name="${prefix}_${suffix}_wheel_base2_to_base3" type="fixed">
        <parent link="${prefix}_${suffix}_wheel_base2"/>
        <child link="${prefix}_${suffix}_wheel_base3"/>
        <origin xyz="0 ${reflect_y * -(wheel_base2_width - wheel_base3_width/2)} 0" />
    </joint>

    <gazebo reference="${prefix}_${suffix}_wheel_base1">
      <material>Gazebo/Blue</material>
    </gazebo>

    <gazebo reference="${prefix}_${suffix}_wheel_base2">
      <material>Gazebo/Blue</material>
    </gazebo>

    <gazebo reference="${prefix}_${suffix}_wheel_base3">
      <material>Gazebo/Blue</material>
    </gazebo>

</xacro:macro>

<xacro:wheel_base prefix="front" suffix="left" reflect_x="1" reflect_y="1">
    <limit effort="100.0" velocity="100"/>
</xacro:wheel_base>
<xacro:wheel_base prefix="back" suffix="left" reflect_x="-1" reflect_y="1">
    <limit effort="100.0" velocity="100"/>
</xacro:wheel_base>
<xacro:wheel_base prefix="front" suffix="right" reflect_x="1" reflect_y="-1">
    <limit effort="100.0" velocity="100"/>
</xacro:wheel_base>
<xacro:wheel_base prefix="back" suffix="right" reflect_x="-1" reflect_y="-1">
    <limit effort="100.0" velocity="100"/>
</xacro:wheel_base>

<!--                                                      -->
<!--           wheel                                      -->
<!--                                                      -->
<xacro:macro name="wheel" params="prefix suffix reflect_x reflect_y">
    <link name="${prefix}_${suffix}_wheel">
        <visual>
            <geometry>
                <cylinder length="${wheel_thickness}" radius="${wheel_radius}"/>
            </geometry>
            <material name="Black"/>
            <origin xyz="0 0 0" rpy="${M_PI/2} 0 0"/>
        </visual>
        <collision>
            <geometry>
                <cylinder length="${wheel_thickness}" radius="${wheel_radius}"/>
            </geometry>
            <origin xyz="0 0 0" rpy="${M_PI/2} 0 0"/>
        </collision>
        <xacro:default_inertial mass="1.0"/>

    </link>

    <joint name="${prefix}_${suffix}_wheel_joint" type="continuous">
        <parent link="${prefix}_${suffix}_wheel_base3"/>
        <child link="${prefix}_${suffix}_wheel"/>
        <!-- origin y changed so that we can have link nicely on its center -->
        <origin xyz="0 ${reflect_y*(wheel_thickness/2 + wheel_base3_width/2)} -${wheel_base3_height}" />
        <axis xyz="0 1 0" />
        <joint_properties damping="0.0" friction="0.0" />
        <limit effort="100" velocity="100" />
        <safety_controller  k_velocity="10" />
        <dynamics damping="0.0" friction="0.0" />
    </joint>

    <gazebo reference="${prefix}_${suffix}_wheel">
      <material>Gazebo/Black</material>
      <mu1 value="100.0" />
      <mu2 value="100.0" />
      <kp  value="1000000.0" />
      <kd  value="1.0" />
    </gazebo>

    <transmission type="pr2_mechanism_model/SimpleTransmission" name="${prefix}_${suffix}_wheel_trans">
        <actuator name="${prefix}_${suffix}_wheel_motor" />
        <joint name="${prefix}_${suffix}_wheel_joint" />
        <mechanicalReduction>1.0</mechanicalReduction>
    </transmission>

</xacro:macro>

<!--                                                      -->
<!--           mast for camera                            -->
<!--                                                      -->
<link name="mast_link">
    <visual>
        <geometry>
            <box size="${mast_length} ${mast_width} ${mast_height}"/>
        </geometry>
        <material name="Blue"/>
        <origin xyz="0 0 0" rpy="0 0 0"/>
    </visual>
    <collision>
        <geometry>
            <box size="${mast_length} ${mast_width} ${mast_height}"/>
        </geometry>
        <material name="Blue"/>
    </collision>
    <xacro:default_inertial mass="0.5"/>
</link>

<gazebo reference="mast_link">
  <material>Gazebo/Blue</material>
</gazebo>

<joint name="mast_to_base" type="fixed">
    <parent link="base_link"/>
    <child link="mast_link"/>
    <origin xyz="0 0 ${base_height/2 + mast_height/2}" />
</joint>

<link name="mast_vertical_bar_link">
    <visual>
        <geometry>
            <box size="${mast_vertical_bar_length} ${mast_vertical_bar_width} ${mast_vertical_bar_height}"/>
        </geometry>
        <material name="Blue"/>
        <origin xyz="0 0 0" rpy="0 0 0"/>
    </visual>
    <collision>
        <geometry>
            <box size="${mast_vertical_bar_length} ${mast_vertical_bar_width} ${mast_vertical_bar_height}"/>
        </geometry>
        <material name="Blue"/>
    </collision>
    <xacro:default_inertial mass="0.2"/>
</link>

<gazebo reference="mast_vertical_bar_link">
  <material>Gazebo/Blue</material>
</gazebo>

<joint name="vertical_bar_to_mast" type="fixed">
    <parent link="mast_link"/>
    <child link="mast_vertical_bar_link"/>
    <origin xyz="0 0 ${mast_height/2}" />
</joint>

<!-- camera
Note that in Gazebo simulation, simulated cameras are defined such that the x axis points forward -->

<xacro:macro name="camera" params="prefix reflect_y">

    <joint name="${prefix}_camera_joint" type="fixed">
      <origin xyz="0 ${reflect_y*mast_vertical_bar_width/2} 0" rpy="0 0 0" />
      <parent link="mast_vertical_bar_link" />
      <child link="${prefix}_camera_link"/>
    </joint>

    <link name="${prefix}_camera_link">
      <inertial>
        <mass value="0.01" />
        <origin xyz="0 0 0" />
        <inertia ixx="0.001"  ixy="0.0"  ixz="0.0"
                 iyy="0.001"  iyz="0.0"
                 izz="0.001" />
      </inertial>
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <box size="0.02 0.05 0.05" />
        </geometry>
        <material name="Green"/>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <box size="0.02 0.05 0.05" />
        </geometry>
      </collision>
    </link>

    <gazebo reference="${prefix}_camera_link">
      <sensor:camera name="${prefix}_camera_sensor">
        <imageSize>640 480</imageSize>
        <imageFormat>R8G8B8</imageFormat>
        <hfov>90</hfov>
        <nearClip>0.01</nearClip>
        <farClip>100</farClip>
        <updateRate>20.0</updateRate>
        <controller:gazebo_ros_camera name="${prefix}_camera_controller" plugin="libgazebo_ros_camera.so">
          <alwaysOn>true</alwaysOn>
          <updateRate>20.0</updateRate>
          <imageTopicName>${prefix}_cam/image</imageTopicName>
          <frameName>${prefix}_camera_link</frameName>
          <interface:camera name="${prefix}_camera_iface" />
        </controller:gazebo_ros_camera>
      </sensor:camera>
      <material>Gazebo/Green</material>
    </gazebo>

    <!-- The optical frame is defined here for book keeping sake of the image frame
         in the usual computer vision notation: with z axis forward -->

    <joint name="${prefix}_optical_joint" type="fixed">
      <origin xyz="0 0 0" rpy="${-M_PI/2} 0.0 ${-M_PI/2}" />
      <parent link="${prefix}_camera_link" />
      <child link="${prefix}_optical_frame"/>
    </joint>

    <link name="${prefix}_optical_frame">
      <inertial>
        <mass value="0.01" />
        <origin xyz="0 0 0" />
        <inertia ixx="0.001"  ixy="0.0"  ixz="0.0"
                 iyy="0.001"  iyz="0.0"
                 izz="0.001" />
      </inertial>
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <box size="0.001 0.001 0.001" />
        </geometry>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <box size="0.001 0.001 0.001" />
        </geometry>
      </collision>
    </link>

</xacro:macro>

<xacro:camera prefix="left" reflect_y="1"/>
<xacro:camera prefix="right" reflect_y="-1"/>

<!--                                                                            -->
<!--           LRF                                                              -->
<!--   xacro is for the tilting joing (Y axis), the box barely visible          -->
<!--   the link that follows is the box we see                                  -->

<xacro:hokuyo_lx30_laser_v0 name="laser" parent="base" ros_topic="lase_scan"
                          update_rate="20" min_angle="-1.57" max_angle="1.57" >
  <origin xyz="${base_length/2} 0 ${base_height/2}" rpy="0 0 0" />
</xacro:hokuyo_lx30_laser_v0>

<!-- This adds a visual box to allow us to see the Hokuyo in rviz/gazebo -->
<joint name="laser_box_joint" type="fixed">
    <origin xyz="0 0 0" rpy="0 0 0" />
    <parent link="laser_link" />
    <child link="laser_box_link"/>
</joint>

<link name="laser_box_link">
<inertial>
  <mass value="0.01" />
  <origin xyz="0 0 0" />
  <inertia ixx="0.001"  ixy="0.0"  ixz="0.0"
           iyy="0.001"  iyz="0.0"
           izz="0.001" />
</inertial>
<visual>
  <origin xyz="0 0 0" rpy="0 0 0"/>
  <geometry>
    <box size="0.05 0.05 0.1" />
  </geometry>
</visual>
<collision>
  <origin xyz="0 0 0" rpy="0 0 0"/>
  <geometry>
    <box size="0.05 0.05 0.1" />
  </geometry>
</collision>
</link>

<gazebo>
    <!-- this publishes empty joint_states due to no transmission, but
    triggering robot_state_publisher to publish tf between fixed joints in erratic,
    (e.g. base_laser_link for the base_scan frame) -->

    <controller:gazebo_ros_controller_manager name="gazebo_ros_controller_manager" plugin="libgazebo_ros_controller_manager.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>100.0</updateRate>
        <interface:audio name="gazebo_ros_controller_manager_dummy_iface" />
    </controller:gazebo_ros_controller_manager>
</gazebo>

<xacro:wheel prefix="front" suffix="left" reflect_x="1" reflect_y="1"/>
<xacro:wheel prefix="front" suffix="right" reflect_x="1" reflect_y="-1"/>
<xacro:wheel prefix="back" suffix="left" reflect_x="-1" reflect_y="1"/>
<xacro:wheel prefix="back" suffix="right" reflect_x="-1" reflect_y="-1"/>

Originally posted by ChickenSoup on ROS Answers with karma: 387 on 2011-12-14
Post score: 0

A:

The way I solved this problem was to drastically increase the effort value in the <limit> tag for the wheel joints. I wrote my controller for those wheels using a PID controller (located in the control_toolbox package). I use this PID controller to control the speed of the wheels. Since the controller subscribes to cmd_vel, the PID will continue to increase the motor power to maintain the desired velocity.
You could also try adding the following inside of your transmission descriptions:
<motorTorqueConstant>200.0</motorTorqueConstant>

You'll have to figure out what value works best for you.

Originally posted by DimitriProsser with karma: 11163 on 2011-12-15
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by DimitriProsser on 2011-12-19:
Perhaps a value of 100 is sufficient with a properly tuned PID controller.
Comment by ChickenSoup on 2011-12-18:
@DimitriProsser I was wondering, however, in the URDF of PR2 base the effort value of  tag is small (100) and there is no tag. But it can still go up the ramp while my model cannot. How come it is possible?
Comment by ChickenSoup on 2011-12-18:
Thank you very much for your response. Yeah, adjusting those parameters I could get the robot to move; still trying to figure out the best values though.

