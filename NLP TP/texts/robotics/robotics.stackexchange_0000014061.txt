Q:

ROS for an autonomous boat

As part of an internship I was asked to design and develop the core control system for an autonomous small-scale (2m length) solar vessel to be able to sail around the Baltic Sea.
The boat should be able to sail following predefined waypoints but, thanks to AIS, Camera (collision avoidance) and a path planning algorithm, redefine its route according to the obstacles sensed. For the hardware part it runs a Raspberry Pi with the high level navigation system and an Arduino to control propeller and actuators as well as provide basic navigation functions in case of Raspberry failure.
Now, before digging into coding I checked for existing solutions and found out the ROS (Robot OS) middleware, which comes with interesting abstractions for the multi-threading and multi-processing, message exchange locally and among diverse hardware architectures (Raspberry and Arduino in this case). However, I am concerned ROS would add considerable load on the Raspberry processor and increase power consumption and it would prevent fine-grained control over hardware, probably system instability too on the long run. The control software has to access sleep functions on sensors and on the Pi itself, in case of power shortages, to dynamically suspend and restart processes and it needs to run 24/7 for months without human interaction.
Is ROS suited for these tasks or should I think about creating a custom software from scratch? Thanks

A:

ROS will work fine for this task. It will add some additional overhead for your Raspberry Pi but it is fairly small provided you only install the Robotic or Base configuration instead of the Full configuration and are using a headless (no GUI) Raspberry Pi install. My company uses ROS on self-driving cars and ROS has, so far, never been the cause of a fault - it has always been hardware- or coding-related. Here is your trade-off:
ROS Pros:

Fairly complete, stable messaging framework.
Allows inter-process message passing without network overhead (see nodelets).
Large library of pre-defined message types and utilities (like tf which does coordinate transforms with very little effort).
Community support for portions of your framework that you wouldn't otherwise have.

ROS Cons:

Some overhead associated with running roscore and the message serialization/deserialization process.
Without implementing the features on your own, there is very little in the way of Quality of Service regarding message transport (this is coming in ROS 2.0).
Only supports Python and C++. This is not a problem for some people but could be a drawback for others.

