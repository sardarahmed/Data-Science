Q:

move_base does not update local_costmap

Hello,
I have problem with navigation stack, move_base node in particular. I have launched everything and the robot is going to the goal, which I specified on rviz. AMCL localization is working and everything is good except 1 thing, the move_base node doesn't publish any data to local_costmap topic and the robot can't avoid new obstacles.
this is the output from

rosparam get /move_base

NavfnROS: {allow_unknown: true, default_tolerance: 0.1, planner_costmap_publish_frequency: 0.5,
  planner_window_x: 0.0, planner_window_y: 0.0, visualize_potential: true}
TrajectoryPlannerROS: {acc_lim_th: 3.5, acc_lim_theta: 1.0, acc_lim_x: 1.0, acc_lim_y: 1.0,
  angular_sim_granularity: 0.05, controller_frequency: 5, dwa: true, escape_reset_dist: 0.1,
  escape_reset_theta: 1.57079632679, escape_vel: -0.1064, gdist_scale: 0.8, global_frame_id: odom,
  goal_distance_bias: 2.5, heading_lookahead: 0.325, heading_scoring: true, heading_scoring_timestep: 0.8,
  holonomic_robot: false, latch_xy_goal_tolerance: true, max_rotational_vel: 1.0,
  max_vel_theta: 1.0, max_vel_x: 1.0, meter_scoring: true, min_in_place_rotational_vel: 0.05,
  min_in_place_vel_theta: 0.55, min_vel_theta: -1.0, min_vel_x: 0.2, occdist_scale: 0.1,
  oscillation_reset_dist: 0.1, path_distance_bias: 0.5, pdist_scale: 0.6, planner_frequency: 0,
  prune_plan: true, publish_cost_grid_pc: false, restore_defaults: false, sim_granularity: 0.25,

sim_time: 4.0, simple_attractor: false, vtheta_samples: 40, vx_samples: 20, xy_goal_tolerance: 0.2,
y_vels: '-0.3,-0.1,0.1,-0.3', yaw_goal_tolerance: 0.2}
aggressive_reset: {reset_distance: 1.84}
base_global_planner: navfn/NavfnROS
base_local_planner: base_local_planner/TrajectoryPlannerROS
clearing_rotation_allowed: true
conservative_reset: {reset_distance: 3.0}
conservative_reset_dist: 2.0
controller_frequency: 5.0
controller_patience: 3.0
global_costmap:
  footprint: '[]'
  footprint_padding: 0.01
  global_frame: map
  height: 10
  inflation_layer: {cost_scaling_factor: 10.0, enabled: true, inflate_unknown: false,
    inflation_radius: 0.4}
  inflation_radius: 0.4
  laser_scan_sensor: {clearing: true, data_type: LaserScan, marking: true, max_obstacle_height: 0.4,
    min_obstacle_height: 0.1, sensor_frame: laser_frame, topic: scan}
  observation_sources: laser_scan_sensor
  obstacle_layer:
combination_method: 1
enabled: true
footprint_clearing_enabled: true
    laser_scan_sensor: {clearing: true, data_type: LaserScan, marking: true, max_obstacle_height: 0.4,
      min_obstacle_height: 0.1, sensor_frame: laser_frame, topic: /scan}
    max_obstacle_height: 2.0
    observation_sources: laser_scan_sensor
    obstacle_range: 2.5
    raytrace_range: 3.0
  obstacle_range: 2.5
  origin_x: 0.0
  origin_y: 0.0
  plugins:
    - {name: static_layer, type: 'costmap_2d::StaticLayer'}
    - {name: obstacle_layer, type: 'costmap_2d::ObstacleLayer'}
    - {name: inflation_layer, type: 'costmap_2d::InflationLayer'}
  publish_frequency: 0.0
  raytrace_range: 3.0
  resolution: 0.05
  robot_base_frame: base_footprint
  robot_radius: 0.2
  static_layer: {enabled: true}
  static_map: true
  transform_tolerance: 1.0
  update_frequency: 3.0
  width: 10
local_costmap:
  footprint: '[]'
  footprint_padding: 0.01
  global_frame: odom
  height: 3
  inflation_layer: {cost_scaling_factor: 10.0, enabled: true, inflate_unknown: false,
    inflation_radius: 0.4}
  inflation_radius: 0.4
  laser_scan_sensor: {clearing: true, data_type: LaserScan, marking: true, max_obstacle_height: 0.4,
    min_obstacle_height: 0.1, sensor_frame: laser_frame, topic: scan}
  map_topic: map
  map_type: costmap
  observation_sources: laser_scan_sensor
  obstacle_layer: {combination_method: 1, enabled: true, footprint_clearing_enabled: true,
    mark_threshold: 0, max_obstacle_height: 2.0, origin_z: 0.0, unknown_threshold: 15,
    z_resolution: 0.2, z_voxels: 10}
  obstacle_range: 2.5
  origin_x: 0.0
  origin_y: 0.0
  plugins:
  - {name: obstacle_layer, type: 'costmap_2d::VoxelLayer'}
  - {name: inflation_layer, type: 'costmap_2d::InflationLayer'}
  publish_frequency: 2.0
  raytrace_range: 3.0
  resolution: 0.05
  robot_base_frame: base_footprint
  robot_radius: 0.2
  rolling_window: true
  static_map: false
  transform_tolerance: 1.0
  update_frequency: 5.0
  width: 3
max_planning_retries: -1
oscillation_distance: 0.5
oscillation_timeout: 0.0
planner_frequency: 3.0
planner_patience: 5.0
recovery_behavior_enabled: true
recovery_behaviors:
- {name: conservative_reset, type: clear_costmap_recovery/ClearCostmapRecovery}
- {name: rotate_recovery1, type: rotate_recovery/RotateRecovery}
- {name: aggressive_reset, type: clear_costmap_recovery/ClearCostmapRecovery}
- {name: rotate_recovery2, type: rotate_recovery/RotateRecovery}
restore_defaults: false
shutdown_costmaps: false

I can add any other information. Thank you in advance if someone will hepl me find out why the node doesn't update local costmap!

Originally posted by Yehor on ROS Answers with karma: 166 on 2020-01-02
Post score: 0

Original comments
Comment by prince on 2020-01-02:
Check whether transform is available from laser_frame to robot's base_link frame
Comment by Yehor on 2020-01-03:
@prince I have checked everything seems to be okay, I'll post the screenshot of tf tree soon

A:

It seems that the problem was in:
min_obstacle_height: 0.1
max_obstacle_height: 0.4
As @Namal Senarathne mentioned.
Now it is working))

Originally posted by Yehor with karma: 166 on 2020-02-12
This answer was ACCEPTED on the original site
Post score: 0

