Q:

robot_state_publisher tf missing frames

I currently have a node publishing /joint_states messages with a urdf loaded to the param server.
When running the robot_state_publisher, I get the following output: (snapshot of ~88 Hz published message)
transforms: []
---
transforms: 
  - 
    header: 
      seq: 0
      stamp: 
        secs: 1332281271
        nsecs: 616639689
      frame_id: /robot_j4
    child_frame_id: /robot_tool_plate
    transform: 
      translation: 
        x: -0.045
        y: -0.3
        z: 0.0
      rotation: 
        x: 0.707106781185
        y: 0.0
        z: 0.0
        w: 0.707106781188
---

The published joint_states message is (snapshot of 100 Hz published message):
header: 
  seq: 19372
  stamp: 
    secs: 1332281452
    nsecs: 512223606
  frame_id: ''
name: ['robot_j1', 'robot_j2', 'robot_j3', 'robot_j4', 'robot_j5', 'robot_j6', 'robot_j7']
position: [0.021256590917843883, -2.0106822865351295, -0.024265641198750076, 3.1044362300610073, 0.18289162692677774, -0.089429498510240221, 0.042228138233154626]
velocity: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05145228488671999]
effort: [-7.8622921298201127e-17, 15.941268784846988, -0.24966792233529578, -4.0081856483693521, -0.043474127200907126, -0.20694576889532121, -0.00066716196395994474]
---

I have checked the correctness of the urdf with the parser, and can verify that the urdf is correctly loaded on the param server with name: robot_description.  The transform that it is publishing (robot_j4 -> robot_tool_plate) is a fixed joint, aka robot_state_publisher is not publishing any moveable joints.
Also, the urdf that I have loaded is a configuration with only four joints (robot_j1, robot_j2, robot_j3, robot_j4).  Does the urdf have to directly correlate the published joint_states?
The joint_state messages are being published at 100Hz, is this too fast for the robot_state_publisher?
Thanks!

Originally posted by kmaroney on ROS Answers with karma: 204 on 2012-03-20
Post score: 1

A:

The tutorial does state that "A source that publishes the joint positions" is required by robot_state_publisher. I've also gotten "missing moveable joints transforms" when I launched robot_state_publisher without launching joint_state_publisher.
I don't quite understand why you would not want urdf to correlate to published joint states. The urdf describes the robot. Wouldn't you want to describe the robot completely (with all joints and links)?
I think the publishing frequency is just limited by your computing speed. The robot_state_publisher would take the latest states available anyway. (I'm using 20Hz, and my simple 2 wheel robot runs fine)

Originally posted by weiin with karma: 2268 on 2012-03-20
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by kmaroney on 2012-03-20:
I am sure that my robot is publishing /joint_states (sensor_msgs/JointState).  This covers the source of the joint position publishing.  The reasoning for the urdf discrepancy is because my robot has multiple configurations, this configuration allows me to avoid redundant messages.
Comment by weiin on 2012-03-20:
I ran my code again, launching only robot_state_publisher and joint_state_publisher. It does seem that the moveable joints are not published all the time. But rosrun tf view_frames would show all joints being published.
Comment by weiin on 2012-03-20:
From the tutorial above, "The map with joints does not contain all the joints that exist in the kinematic model. Note that it is okay for the map to contain extra joints that are not part of the kinematic model." could explain this (urdf discrepancy should not be an issue then)
Comment by kmaroney on 2012-03-21:
I think we may be zeroing in on the issue.. When running rosrun tf view_frames, it does not show all of the joints, only the two previously published.  I will keep looking into this and report back.
Comment by Wim on 2012-03-26:
It would be useful if you could attach the tree representation of your urdf description, and of your tf tree. You can use the commands "rosrun urdf_parser  urdf_to_graphiz  your_urdf.xml" and "rosrun tf view_frames" to generate pdf files that show the tree structure.
Comment by McMurdo on 2014-07-01:
Did you find the answer? I have the same issue!

