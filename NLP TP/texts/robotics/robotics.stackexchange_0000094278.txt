Q:

how to reduce the error in position by Odom?

I created a map and moved the robot using a joystick in our lab. but when it returned to the original point. I see the error.
for example: assume that I see (x:0, y: 0) or at least near to them but I saw
pose: 

  pose: 
    position: 
      x: 2.79429805011
      y: 5.10801896683
      z: 0.0
    orientation: 
      x: -0.0
      y: 0.0
      z: 0.743380636753
      w: -0.668868618565

how to reduce this error.
please help me or any suggustion

Originally posted by Redhwan on ROS Answers with karma: 73 on 2020-01-04
Post score: 0

A:

There are many methods to improve odom.
1 - Tune your odom - make direct measurements of encoder counts vs movement and rotation and use that data to improve the accuracy
2 - Optimize wheels for the environment - reduce slippage and error by using wheels appropriate for the environment - use narrow hard wheel on a flat smooth surface etc
3 - Optimize weight distribution - place the CM in a location that makes any slip when turning low and repeatable - the shape of your robot, wheels, rolling surface will determine that.
4 - someone else can list 3 more way to improve odom
With odom optimized, there will still be drift. You will not get away from it.  Then other methods to mitigate the error are used usually referencing fixed environment like
1 - AMCL
2 - GPS
3 - land marks, etc.

Originally posted by billy with karma: 1850 on 2020-01-05
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by Redhwan on 2020-01-05:
Thank you so much @billy. I observe that one wheel is faster than another.
Is weight distribution the reason for this?
Comment by billy on 2020-01-05:
Kind of depends on what you mean by "faster".
Would need to know more about your system.
Do you have a reason to think the weight distribution is off?
Comment by Redhwan on 2020-01-05:
yes, when I move the robot using a joystick forward and backward, I observe that it doesn't move in a straight line exactly, it moves to the left side a little bit. Also, z has a value greater than zero.
orientation: 
      x: 0.0
      y: 0.0
      z: 0.xxxxxxxxxxx
      w: 1.0

Comment by billy on 2020-01-05:
Is there something about the robot and the way it is built that makes you think the weight distribution is off?
Comment by Redhwan on 2020-01-05:
I am not sure about the weight distribution but I guess that, maybe the issue in a motor.
Comment by Redhwan on 2020-01-05:
I asked here a new question

