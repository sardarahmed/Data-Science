Q:

How to ensure test-dependencies declared in a colcon.pkg file are installed?

I was trying to build Micro-XRCE-DDS-Client library on develop hash bc6e9c361a87f71272cb2033a899a09f0c49f638.
It is a Tier 1 package that can be build with colcon and has tests, but there is no package.xml file. How should I should install dependencies?
According to colcon, it's outside of the design scope of colcon to fetch dependencies.
According to rosdep, it only works with package.xml files.
When I build on my Ubuntu 22.04 system, it cannot find GTest, but it's already installed with apt using libgtest-dev.
libgtest-dev is already the newest version (1.11.0-3).

colcon build --cmake-args -DUCLIENT_BUILD_TESTS=ON
...
CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):
  Could NOT find GMock (missing: GMOCK_LIBRARY GMOCK_INCLUDE_DIR
  GMOCK_MAIN_LIBRARY)
Call Stack (most recent call first):
  /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE)
  cmake/modules/FindGMock.cmake:122 (FIND_PACKAGE_HANDLE_STANDARD_ARGS)
  CMakeLists.txt:447 (find_package)

I have tried editing the supplied colcon.pkg file to declare a dependency with test-dependencies, since it was not declared there, however it has no effect on colcon build. I even tried putting in a bogus fooBar in test-dependencies, nothing happens.
What is the recommended way to install dependencies if you are using colcon.pkg and is there any command in colcon to validate you have dependencies installed prior to calling colcon build?
Edit, sure, I can install libgmock-dev, which fixes the problem, but that a fair bit of googling to find was the right way. There are misleading outdated answers saying this won't work.

A:

As you've noted. This is out of scope of colcon. It is a build tool and it's job is to iterate over packages in your workspace and build them in the appropriate order.
Colcon discovers packages by finding resource files such as package.xml or setup.py which it can attempt to parse. the colcon.pkg file is a way to give it explicit information so it doesn't have to guess/interpret.
In terms of dependencies though, it will assume that any not available in the current workspace are already available on the system and iterate the available packages.
You're right that the standard way in the ROS ecosystem is to use rosdep. This leverages the package.xml files and the rosdep database to manage dependencies.
It is the responsibility of the package maintainer to define the dependencies in a way that you as the user can download and install them. The use of a package.xml is an easy well defined cross platform way to do so. However if the package doesn't provide a package.xml file the best practice is to clearly define the dependencies required. And it's even more helpful to document how to install them. This is usually in the README. There appears to be a link to installation instructions in the README but that doesn't include the dependency resolution. So I would suggest ticketing it as a documentation issue there or considering suggesting adding a package.xml.
Note: that this is a Tier 1 support from Eprosima it's not in the ROS Tier 1 support list.

