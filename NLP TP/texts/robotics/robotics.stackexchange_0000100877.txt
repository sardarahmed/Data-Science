Q:

How to send arrays with std_msgs/UInt8MultiArray and std_msgs/Float64MultiArray?

Hi! I woul like to send arrays to a node, I've tried with this code, but I think there is something wrong when I try to copy the array values in the data structure...
uint8_t SSS_ground_unito[doppio_bins]={0};
immagine::pixel_ned messaggio;
double point_seabed_n[doppio_bins]={0};
double point_seabed_e[doppio_bins]={0};

//funzione per inviare il messaggio al nuovo nodo
void send_immagine(uint8_t SSS_grnd_unito[],double point_sbed_n[], double point_sbed_e[]){
    messaggio.pixel.data=SSS_ground_unito;
    messaggio.nord.data=point_seabed_n;
    messaggio.est.data=point_seabed_e;
    cout <<"send"<< messaggio.pixel.data<<endl;
    write_Out.publish(messaggio);//pubblica il messaggio sul topic 
    ROS_INFO("ping inviato");
 }

this is my msg
std_msgs/UInt8MultiArray  pixel
std_msgs/Float64MultiArray nord
std_msgs/Float64MultiArray est

Originally posted by v.leto on ROS Answers with karma: 44 on 2021-12-23
Post score: 0

A:

The data fields of pixel, nord, and est are all std::vector, and must therefore have array elements allocated with either .resize() (see this) or by using .push_back() (see this).
Both ways will require your code to know how many array elements to expect in the input arguments to the send_immagine function. If you know there are N elements in the input arrays, you could use .resize(N) on each data field to allocate the required number of array elements, then copy each input array element into the corresponding vector element.
Alternatively, loop over the input array and call .push_back() once for each element.

Originally posted by robustify with karma: 956 on 2021-12-26
This answer was ACCEPTED on the original site
Post score: 0

