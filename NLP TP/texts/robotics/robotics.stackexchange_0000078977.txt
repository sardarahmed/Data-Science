Q:

How to specify package version in package.xml or rosdep depends.yaml

I would like to make sure that a specific version of a system package is installed for my ros package.
Let's assume, that I want to make sure, that my rospackage rpkg requires the system dependency foo in version 3.4.  I thus want to have foo in version 3.4 installed when I run rosdep update && rosdep install.
I could either include that in the package.xml for that package (e.g. something like <depends>foo:3.4</depends>), but I don't know how.
I could otherwise include that in the depends.yaml (e.g. something like
foo:
  ubuntu: foo=3.4

) but again I don't know how :-(
I know, that it's possible to require/check the version in the CMakeLists.txt, but that is not what I want.

Originally posted by Michael Kopp on ROS Answers with karma: 65 on 2017-02-16
Post score: 1

A:

Please see if #q207735 answers your question.
Note btw that version info is currently not used by rosdep and friends. It's only used when generating binary packages (such as debs and rpms) on the buildfarm to resolve dependencies.
As far as I know there is currently no way to get rosdep to install specific versions.
As you write, the find_package(..) calls can require specific versions in your CMakeLists.txt.
PS: depends.yaml is a rather old piece of infrastructure. I'm not sure that is still universally supported these days.

Edit:

Could you give me some more pointers about your comment about depends.yaml?  We use a 10-custom.list file in /etc/ros/rosde/sources.list.d and this points to a yaml our_server/depends.yaml which defines packages we provide locally.  Is that a bad practice?

That is something else. From your comment I understand that you were distributing a yaml file with some extra depends with your sources (ie: as a sibling to package.xml). That is something that is / was actually possible, but I haven't seen it done much more these days.
What you are doing is essentially a locally extended rosdep db. That is perfectly fine, as long as you understand and accept that those dependencies will not be resolvable by people that don't have access to your extension.

Originally posted by gvdhoorn with karma: 86574 on 2017-02-16
This answer was ACCEPTED on the original site
Post score: 5

Original comments
Comment by Michael Kopp on 2017-02-17:
I see.  Thank you for your answer.  For other people directed to this question, see also this
rosdep issue.
Do you see any other way with the ros toolchain to do what I want?
Comment by Michael Kopp on 2017-02-17:
Could you give me some more pointers about your comment about depends.yaml?  We use a 10-custom.list file in /etc/ros/rosde/sources.list.d and this points to a yaml our_server/depends.yaml which defines packages we provide locally.  Is that a bad practice?
Comment by gvdhoorn on 2017-02-17:\

Do you see any other way with the ros toolchain to do what I want?

well, you can express the requirement in your CMakeLists.txt, but there's no way to get rosdep to check it for you unfortunately :( (that I know of. I would like to be proven wrong).

