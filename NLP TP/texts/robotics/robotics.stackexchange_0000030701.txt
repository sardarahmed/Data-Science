Q:

How do I test the ROS version in C++ code?

I maintain a package that needs to support both cturtle and diamondback, at least for a while. It includes <roslib/Clock.h>, which is deprecated in diamondback. That generates a compiler warning. I prefer to reserve compiler warnings for actual bugs in my code.
How can I #ifdef this code so it includes <roslib/Clock.h> in cturtle, but uses <rosgraph_msgs/Clock.h> for diamondback?

Originally posted by joq on ROS Answers with karma: 25443 on 2011-03-25
Post score: 7

A:

In the roscpp package roscpp/include/ros/common.h has the following defines:
#define ROS_VERSION_MAJOR 1
#define ROS_VERSION_MINOR 4
#define ROS_VERSION_PATCH 5
#define ROS_VERSION_COMBINED(major, minor, patch) (((major) << 20) | ((minor) << 10) | (patch))
#define ROS_VERSION ROS_VERSION_COMBINED(ROS_VERSION_MAJOR, ROS_VERSION_MINOR, ROS_VERSION_PATCH)

#define ROS_VERSION_GE(major1, minor1, patch1, major2, minor2, patch2) (ROS_VERSION_COMBINED(major1, minor1, patch1) >= ROS_VERSION_COMBINED(major2, minor2,\
 patch2))
#define ROS_VERSION_MINIMUM(major, minor, patch) ROS_VERSION_GE(ROS_VERSION_MAJOR, ROS_VERSION_MINOR, ROS_VERSION_PATCH, major, minor, patch)

Originally posted by tfoote with karma: 58457 on 2011-03-25
This answer was ACCEPTED on the original site
Post score: 7

Original comments
Comment by Keivan on 2018-06-28:
If you have installed ROS through standard way on Linux, common.h is located here: /opt/ros/{ROS_DISTRO}/include/ros/common.h
Comment by Olivier Michel on 2022-04-26:
This include file doesn't seem to exist in ROS 2 distributions (e.g., I searched on rolling, galactic and foxy). What are the alternatives?

