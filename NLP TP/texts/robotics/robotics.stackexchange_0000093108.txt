Q:

Importing std_msgs.msg with Python

Hi guys, I am following the ROS Beginner's Tutorials, on the part Writing a Simple Publisher and Subscriber (Python). In the publisher code given, there is a line which says from std_msgs.msg import String. From my knowledge of python, this means that std_msgs.msg is a module name (i.e. a .py file) and there should be a class definition for String inside that file. However, I can't seem to find this file (i.e. I can't find any file named std_msgs.msg.py). I looked through the documentation and it says that rospy do create python source code for msg files, so there must be this std_msgs.msg.py file somewhere. Anyone knows where this file is located? Or perhaps my understanding is wrong?

Originally posted by Ricky98 on ROS Answers with karma: 3 on 2019-08-26
Post score: 0

A:

From my knowledge of python, this means that std_msgs.msg is a module name (i.e. a .py file) and there should be a class definition for String inside that file.
[..]
I looked through the documentation and it says that rospy do create python source code for msg files, so there must be this std_msgs.msg.py file somewhere [..]

While it is true that Python modules are contained in a single file (ie: one with the same name as the module + .py), there is a second construct called a package that is what is used here in this case.
Any directory with a __init__.py file in it will be considered a package by the Python interpreter. Any files inside that directory (apart from __init__.py) are again modules (which can contain classes and other Python entities), and sub directories of a package's directory will be considered sub packages (as long as they also contain a __init__.py file).
In the case of std_msgs, this is what that looks like:
└── /opt/ros/kinetic/lib/python2.7/dist-packages
  └── std_msgs
    ├── __init__.py
    └── msg
      ├── _Bool.py
      ├── _ByteMultiArray.py
      ├── _Byte.py
      ├── ..
      ├── __init__.py
      ├── ..
      ├── _String.py
      ├── ..
      ├── _UInt8MultiArray.py
      └── _UInt8.py

So all ROS Python (2) packages (note: not necessarily ROS packages, as a single ROS package may contain multiple Python packages) are located in /opt/ros/kinetic/lib/python2.7/dist-packages, in which there is a sub directory called std_msgs. This contains a __init__.py file, marking it as a sub package. This has a sub directory msg, which then contains both a __init__.py as well as all the files that contain the implementations of all the message classes (and which were generated by genpy (not rospy).
When you write from std_msgs.msg import String, the Python interpreter will traverse this directory structure and end up at _String.py, load it and make all the contained symbols available to the session.

Originally posted by gvdhoorn with karma: 86574 on 2019-08-26
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by mgruhler on 2019-08-26:
I'd absolutely support this explanation, if there wouldn't be this distinction in the Python docs:

A module is a file containing Python definitions and statements.

and

Packages are a way of structuring Python’s module namespace by using “dotted module names”.

Though this distinction is kind of strange/unintuitive in my perspective. And as far as I have seen you are absolutely fine going with this explanation.
Comment by Ricky98 on 2019-08-26:
Oh wow, I didn't even know about python packages and importing them, since I just learned python a week ago. Thank you so much for clarifying the whole thing. The link posted by mgruhler was very helpful too.
Comment by gvdhoorn on 2019-08-26:
@mgruhler: you're correct, and I've updated the answer.
Comment by mgruhler on 2019-08-26:
The answer by @gvdhoorn is way more self-contained now, so I suggest to mark this as the correct one.
Comment by Michdo93 on 2021-06-29:
If you have installed and build ROS from source the path is as example ~/ros_catkin_ws/install_isolated/lib/python2.7/dist-packages/ instead of /opt/ros/$ROSDISTRO/lib/python2.7/dist-packages

