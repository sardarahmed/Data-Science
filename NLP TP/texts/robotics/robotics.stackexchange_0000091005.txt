Q:

Please explain how the Subscriber works

Hello,
Could someone explain to me how the rospy.Subscriber('topic', msg, callback) method works. As I noticed we don't need to loop that method to update and check the topic iteratively. It is doing it by itself, and I can't understand how.

Originally posted by Yehor on ROS Answers with karma: 166 on 2019-03-20
Post score: 1

A:

The ROS python library runs additional threads to handle message subscription and publishing. So when you call rospy.Subscribe in your code, it doesn't check for incoming messages and execute callbacks itself. It simply adds the topic and function to a list. This list is regularly checked in a different thread which executes the callbacks as needed. This is why you don't need any polling in your code to make the message callbacks work.
Hope this makes sense.

Originally posted by PeteBlackerThe3rd with karma: 9529 on 2019-03-20
This answer was ACCEPTED on the original site
Post score: 6

Original comments
Comment by Yehor on 2019-03-20:
So, whenever ros topic will be updated, the Subscriber will get it and launch the callback function? Without any looping.
Comment by PeteBlackerThe3rd on 2019-03-21:
Strictly speaking topics are not updated, because they have no state, they are channels for messages to be passed through. So think of a message being received as opposed to an update. But you are correct, the Subscriber object will make sure the callback is executed when a message is received. You don't need any loops in your code to make this happen, there are loops but they are hidden with rospy so you don't need to worry about them.
Comment by Scibot on 2023-05-21:
Wait, the Python descriptor causes there to be no actual "thread" running in the OS. It just fakes the multi-threading by switching between Python threads. Is it still the same as the subscriber callback function is called whenever rospy thinks it needs to be called?

