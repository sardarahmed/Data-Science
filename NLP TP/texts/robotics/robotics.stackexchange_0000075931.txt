Q:

transform composition in tf with python

Hello
In C++, it is possible to have transform composition to determine a relative transform  between two transforms like follow:
tf::Transform relative_transform = init_transform.inverse() * current_transform;
distance_moved= relative_transform.getOrigin().length(); 

However, I could not find similar alternative in Python.
Is there any means in Python to do a similar relative transformation like the C++ code?
Thank you
Anis

Originally posted by Anis on ROS Answers with karma: 253 on 2016-08-23
Post score: 0

A:

The python TF library uses the transformations.py module which is really nice. If you haven't used it, the main idea is it uses 4x4 matrices to represent transformations and there are tons of functions for linear algebra and converting to different representations. It's really just a wrapper around numpy, but it does a good job.
To use it, I do from tf import transformations as t
The whole module is just that one file I linked to, the documentation/examples in the comments are really good.
It has t.inverse_matrix()instead of .inverse(). Also t.translation_from_matrix() will do what .getOrigin() does. And for .length() you would use t.vector_norm()
You can probably figure out the rest, if not I can help in the comments.

Originally posted by Airuno2L with karma: 3460 on 2016-08-23
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by Anis on 2016-08-25:
Thank you very much, it helps a lot.
I will try these hints!

