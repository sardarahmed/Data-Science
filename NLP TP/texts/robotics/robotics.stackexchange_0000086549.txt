Q:

Integrate Packages build using different distros

Greetings,  Is this possible to do bindings of packages which were built using different ROS distributions.
I mean: We have a situation here, where some guys of the team worked on a project using indigo and others using kinetic.
Now, we want to merge those two. I know it may require some extra work (if possible ).
Any help'd be greatly appreciated.
Many Thanks.

Originally posted by RoboRos on ROS Answers with karma: 37 on 2018-04-13
Post score: 0

Original comments
Comment by gvdhoorn on 2018-04-14:
Can you clarify what "merge those two" means exactly? Are you trying to have ROS nodes communicate (ie: via msgs, svcs, actions), trying to link binary artefacts together (ie: libraries), building things from source, something else?
And what is your end goal?
Comment by RoboRos on 2018-04-14:
I mean: one part of the project is built with indigo (using perception, package to be precise). The other part of the project is built using kinetic (implementing slam algorithm and navigation part). V need to merge these 2 parts.
Comment by RoboRos on 2018-04-14:
For Now, i am not sure, ow to make them communciate.... . write a node with subscriber and publisher messages .... ? but i am not sure how to ..?

A:

I'm still slightly uncertain what you mean exactly with "is built with" and "do bindings of", but I see a few options:

exploit the middleware: if you have two (or more) actual different setups (some running Indigo, others Kinetic), then using topics, services and actions to communicate would probably be the most straightforward way to integrate this. As long as message content hasn't changed between ROS releases, communication is possible.
port: if you're actually stating that the code of the different packages has been developed on systems with different ROS versions (and thus OS), and you want to run everything on a single system, you could treat this as a ROS+OS upgrade (or downgrade, depending on in which direction you go). In that case just copy the package sources to the target system and try building the package(s) there. If you're lucky, things will compile. However, quite some libraries that ROS depends on have changed between Indigo and Kinetic (OpenCV, Qt, Boost, etc), so you might have to do some work to get things to compile and work. Significant changes are listed on the kinetic/migration guide.
containerise: if you must run your nodes on a single machine, run into compatibility issues (due to changes in dependencies) but don't want to spend the time resolving those issues (ie: port your nodes), you could look into using a container technology, such as Docker (some ROS specific info: wiki/docker). This would allow you to run Indigo and Kinetic on the same machine (well, not really of course). ROS would treat this as a multi-host network, so all the requirements and constraints of those come into play, but you avoid the need of having to change any sources. This is essentially option 1, but without the need for VMs or multiple physical machines.

Finally: If you have actually built binary packages (ie: debs) of your ROS packages, then those are tied to the OS + ROS version that they were built against. It's not feasible to install (trusty, indigo) packages on a (xenial, kinetic) system.

Originally posted by gvdhoorn with karma: 86574 on 2018-04-15
This answer was ACCEPTED on the original site
Post score: 1

