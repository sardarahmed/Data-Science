Q:

How to investigate the relation between planning frequency and control response?

I have a speed control system which is part of a hierarchical planning and control stack. The final output of this system is torque and the input is desired speed. The system is experiencing some oscillation which seems related to the highest level of the target speed planning frequency. I have a hunch that the different operational frequencies of various levels of the stack might be having an impact, but I am unsure how best to investigate and quantify the impacts. So I am wondering the following:

What are the terms I can use to find information about the impact of input frequency on control response?
Are there any well known approaches to analyzing the relation between input frequency and control response so I can more clearly conclude if this is the issue?

The system is developed using ROS, so if there are any ROS package which might help the analysis please let me know.

A:

On the theory side, this is related to the Nyquist Sampling Rate, which is how frequently you must measure a single to get an accurate reconstruction of it's peaks / valleys.
Not suprisingly, Nyquist as a name appears all over some fundamental results in optimal control like the nyquist stability theorem. I suspect the insight you are looking for is right there, but understanding it will require some study. Begin with Nyquist stability, and follow the keywords "Stability, Optimal Control, Sampling Rate", and probably "Nyqist" on Google Scholar. Start with textbooks on optimal control. Understanding the state of the art is actually near impossible from paper sampling (that's where you go to understand what's just beyond the SoA).
On the practical side, I have never seen anything done except the following:

Increase the low-level controller to the maximum possible rate (e.g., 100Hz). This loop tries to achieve velocities.
Decrease the input to the controller (desired velocities) to the minimum rate and increase only as necessary (e.g 1Hhz). This loop tries to follow paths.
Re-plan paths very infrequently (e.g., every few seconds or slower).
For time-critical events like hazard avoidance, the robot just ceases these loops temporarily and goes into a hard-coded avoidance maneuver (e.g., BRAKES!) until it can replan.

