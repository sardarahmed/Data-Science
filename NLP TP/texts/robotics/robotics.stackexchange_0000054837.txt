Q:

pcl compilation hangs

I'm trying to build groovy on debianAMD64/stable.
catkin_make_isolated seems to hang while building sac_model_cylinder.cpp in PCL.
 cd /media/hd160/robot/ros/catkin_workspace/build_isolated/pcl/install/sample_consensus && /usr/bin/c++ -v -DPCLAPI_EXPORTS -DEIGEN_USE_NEW_STDVECTOR -DEIGEN_YES_I_KNOW_SPARSE_MODULE_IS_NOT_STABLE_YET -Dqh_QHpointer -DQT_GUI_LIB -DQT_CORE_LIB -DQT_NO_DEBUG -Wall -Wno-unknown-pragmas -fno-strict-aliasing -pthread -fopenmp -O2 -g  -march=native -fPIC -isystem /usr/include/eigen3 -I/opt/ros/groovy/include -I/usr/include/qt4 -I/usr/include/qt4/QtGui -I/usr/include/qt4/QtCore -isystem /usr/lib/openmpi/include -isystem /usr/lib/openmpi/include/openmpi -I/media/hd160/robot/ros/catkin_workspace/build_isolated/pcl/install/include -I/media/hd160/robot/ros/catkin_workspace/src/pcl/common/include -I/media/hd160/robot/ros/catkin_workspace/src/pcl/search/include -I/media/hd160/robot/ros/catkin_workspace/src/pcl/sample_consensus/include    -DBOOST_DISABLE_ASSERTS -DEIGEN_NO_DEBUG -o CMakeFiles/pcl_sample_consensus.dir/src/sac_model_cylinder.cpp.o -c /media/hd160/robot/ros/catkin_workspace/src/pcl/sample_consensus/src/sac_model_cylinder.cpp
Using built-in specs.
COLLECT_GCC=/usr/bin/c++
Target: x86_64-linux-gnu
Configured with: ../src/configure -v --with-pkgversion='Debian 4.7.2-5' --with-bugurl=file:///usr/share/doc/gcc-4.7/README.Bugs --enable-languages=c,c++,go,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-4.7 --enable-shared --enable-linker-build-id --with-system-zlib --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --with-gxx-include-dir=/usr/include/c++/4.7 --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --enable-gnu-unique-object --enable-plugin --enable-objc-gc --with-arch-32=i586 --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu
Thread model: posix
gcc version 4.7.2 (Debian 4.7.2-5) 
COLLECT_GCC_OPTIONS='-v' '-D' 'PCLAPI_EXPORTS' '-D' 'EIGEN_USE_NEW_STDVECTOR' '-D' 'EIGEN_YES_I_KNOW_SPARSE_MODULE_IS_NOT_STABLE_YET' '-D' 'qh_QHpointer' '-D' 'QT_GUI_LIB' '-D' 'QT_CORE_LIB' '-D' 'QT_NO_DEBUG' '-Wall' '-Wno-unknown-pragmas' '-fno-strict-aliasing' '-pthread' '-fopenmp' '-O2' '-g' '-march=native' '-fPIC' '-isystem' '/usr/include/eigen3' '-I' '/opt/ros/groovy/include' '-I' '/usr/include/qt4' '-I' '/usr/include/qt4/QtGui' '-I' '/usr/include/qt4/QtCore' '-isystem' '/usr/lib/openmpi/include' '-isystem' '/usr/lib/openmpi/include/openmpi' '-I' '/media/hd160/robot/ros/catkin_workspace/build_isolated/pcl/install/include' '-I' '/media/hd160/robot/ros/catkin_workspace/src/pcl/common/include' '-I' '/media/hd160/robot/ros/catkin_workspace/src/pcl/search/include' '-I' '/media/hd160/robot/ros/catkin_workspace/src/pcl/sample_consensus/include' '-D' 'BOOST_DISABLE_ASSERTS' '-D' 'EIGEN_NO_DEBUG' '-o' 'CMakeFiles/pcl_sample_consensus.dir/src/sac_model_cylinder.cpp.o' '-c' '-shared-libgcc' '-pthread'
 /usr/lib/gcc/x86_64-linux-gnu/4.7/cc1plus -quiet -v -I /opt/ros/groovy/include -I /usr/include/qt4 -I /usr/include/qt4/QtGui -I /usr/include/qt4/QtCore -I /media/hd160/robot/ros/catkin_workspace/build_isolated/pcl/install/include -I /media/hd160/robot/ros/catkin_workspace/src/pcl/common/include -I /media/hd160/robot/ros/catkin_workspace/src/pcl/search/include -I /media/hd160/robot/ros/catkin_workspace/src/pcl/sample_consensus/include -imultiarch x86_64-linux-gnu -D_GNU_SOURCE -D_REENTRANT -D PCLAPI_EXPORTS -D EIGEN_USE_NEW_STDVECTOR -D EIGEN_YES_I_KNOW_SPARSE_MODULE_IS_NOT_STABLE_YET -D qh_QHpointer -D QT_GUI_LIB -D QT_CORE_LIB -D QT_NO_DEBUG -D BOOST_DISABLE_ASSERTS -D EIGEN_NO_DEBUG -isystem /usr/include/eigen3 -isystem /usr/lib/openmpi/include -isystem /usr/lib/openmpi/include/openmpi /media/hd160/robot/ros/catkin_workspace/src/pcl/sample_consensus/src/sac_model_cylinder.cpp -march=k8 -mno-cx16 -mno-sahf -mno-movbe -mno-aes -mno-pclmul -mno-popcnt -mno-abm -mno-lwp -mno-fma -mno-fma4 -mno-xop -mno-bmi -mno-bmi2 -mno-tbm -mno-avx -mno-avx2 -mno-sse4.2 -mno-sse4.1 -mno-lzcnt -mno-rdrnd -mno-f16c -mno-fsgsbase --param l1-cache-size=64 --param l1-cache-line-size=64 --param l2-cache-size=512 -mtune=k8 -quiet -dumpbase sac_model_cylinder.cpp -auxbase-strip CMakeFiles/pcl_sample_consensus.dir/src/sac_model_cylinder.cpp.o -g -O2 -Wall -Wno-unknown-pragmas -version -fno-strict-aliasing -fopenmp -fPIC -o /tmp/cc946wxw.s
GNU C++ (Debian 4.7.2-5) version 4.7.2 (x86_64-linux-gnu)
        compiled by GNU C version 4.7.2, GMP version 5.0.5, MPFR version 3.1.0-p10, MPC version 0.9
GGC heuristics: --param ggc-min-expand=98 --param ggc-min-heapsize=128329
ignoring nonexistent directory "/usr/local/include/x86_64-linux-gnu"
ignoring nonexistent directory "/usr/lib/gcc/x86_64-linux-gnu/4.7/../../../../x86_64-linux-gnu/include"
#include "..." search starts here:
#include <...> search starts here:
 /opt/ros/groovy/include
 /usr/include/qt4
 /usr/include/qt4/QtGui
 /usr/include/qt4/QtCore
 /media/hd160/robot/ros/catkin_workspace/build_isolated/pcl/install/include
 /media/hd160/robot/ros/catkin_workspace/src/pcl/common/include
 /media/hd160/robot/ros/catkin_workspace/src/pcl/search/include
 /media/hd160/robot/ros/catkin_workspace/src/pcl/sample_consensus/include
 /usr/include/eigen3
 /usr/lib/openmpi/include
 /usr/lib/openmpi/include/openmpi
 /usr/include/c++/4.7
 /usr/include/c++/4.7/x86_64-linux-gnu
 /usr/include/c++/4.7/backward
 /usr/lib/gcc/x86_64-linux-gnu/4.7/include
 /usr/local/include
 /usr/lib/gcc/x86_64-linux-gnu/4.7/include-fixed
 /usr/include/x86_64-linux-gnu
 /usr/include
End of search list.
GNU C++ (Debian 4.7.2-5) version 4.7.2 (x86_64-linux-gnu)
        compiled by GNU C version 4.7.2, GMP version 5.0.5, MPFR version 3.1.0-p10, MPC version 0.9
GGC heuristics: --param ggc-min-expand=98 --param ggc-min-heapsize=128329
Compiler executable checksum: 66d178dd81da8c975e003e06d9f5e782

Even after several hours, the display remains the same.
Since this file contains only few lines, what could the problem be ?
#include <pcl/sample_consensus/sac_model_cylinder.h>
#include <pcl/sample_consensus/impl/sac_model_cylinder.hpp>
#include <pcl/point_types.h>
#include <pcl/impl/instantiate.hpp>

// Instantiations of specific point types
#ifdef PCL_ONLY_CORE_POINT_TYPES
  PCL_INSTANTIATE_PRODUCT(SampleConsensusModelCylinder, ((pcl::PointXYZ)(pcl::PointXYZI)(pcl::PointXYZRGBA)(pcl::PointXYZRGB))((pcl::Normal)))
#else
 PCL_INSTANTIATE_PRODUCT(SampleConsensusModelCylinder, (PCL_XYZ_POINT_TYPES)(PCL_NORMAL_POINT_TYPES))
#endif

Originally posted by Fabien R on ROS Answers with karma: 90 on 2013-10-15
Post score: 0

A:

Ok. I found a workaround.
I looked at this page, at the section How are the point types exposed? to see that some compiler may not handle large sets of templated files with optimization. Thus, I removed the -O2 option and it worked.

Originally posted by Fabien R with karma: 90 on 2013-10-17
This answer was ACCEPTED on the original site
Post score: 0

