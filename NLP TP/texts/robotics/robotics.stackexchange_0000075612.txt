Q:

py-faster-rcnn network detection runs on CPU through ROS callback function

Hi there,
I'm trying to test my trained py-faster-rcnn network for object detection through ROS. I have a node running with many similarities to demo.py. Included in the class are commands to execute the network detection on the GPU (given below), however, looking at recall times (~26s) and the system profiler it's fairly clear that the network is running on the CPU. Is there a way to get around this?
caffe.set_mode_gpu()
caffe.set_device(0)
cfg.GPU_ID = 0

Interestingly, if I run demo.py normally (not through ROS), it executes on the GPU in ~2s
UPDATE: after some more detective work, it appears that it is an issue with calling CNN detection within a callback function. Any suggestions? (Other people seem to be experiencing a similar problem - Callback with GPU processing)
Thanks,
Will

Originally posted by WillAndrew on ROS Answers with karma: 20 on 2016-08-03
Post score: 0

Original comments
Comment by ahendrix on 2016-08-03:
I don't know anything about caffe, but I do know that rospy runs callbacks in a separate thread from the main loop. Perhaps that helps?

A:

Solved the issue by having the callback function change a global variable which is checked by the main loop/thread as follows:
while not rospy.is_shutdown():
    if run_test_img == True:
        testImg()
    rate.sleep()

A bit hacky but it does the job.

Originally posted by WillAndrew with karma: 20 on 2016-08-04
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by uzair on 2016-09-19:
Hi Will. I am also trying to implement faster-rcnn inside the ROS framework. I want to run the demo as a ROS node and pass images on ROS topic. I know how to pass images over a ROS topic but was wondering if there are any dependancy issues when I try to integrate faster rcnn within ROS?

