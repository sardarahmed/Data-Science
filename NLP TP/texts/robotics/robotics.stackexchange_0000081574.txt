Q:

How to detect loop closure and do relative pose graph SLAM in ROS+Gazebo?

I'm implementing relative pose graph SLAM with ROS Kinetic + Gazebo. I can use the laser_scan_matcher node generate pose to pose (relative pose) odometry information (it uses canonical scan matcher to compute odometry from successive laser scans). Is there an open source library or a ROS package that allows passing in successive scans and odometry to output loop closure constraints between poses? Once loop closure constraints have been calculated one can use solvers like g2o, GTSAM or LAGO to solve for the robot trajectory, following which the laser scans can be superimposed on the aligned poses to output a map.

Originally posted by Saurav Agarwal on ROS Answers with karma: 246 on 2017-06-29
Post score: 2

A:

Update: Full progress on pose-graph SLAM with ROS will be posted on my blog here.
I'm going for the offline pose-graph SLAM approach where I can run the robot around some environment, gather the data, batch optimize the graph and generate a map which can then be used by AMCL for localization. As of now g2o and GTSAM both look like good options for the backend. I'm also trying out LAGO solver by Luca Carlone @ MIT, this solver is quite robust when the odometry is bad as it separates orientation and position estimation. I will keep updating this answer as I make progress. I see 4 components to this problem; (i) how to generate the pose to pose odometry ?(relatively easy these days in ROS), (ii) how to generate loop closure constraints between various poses? (iii) how to solve the graph optimization problem? (will not focus too much on this as there are bunch of awesome open source solvers like g2o, GTSAM, LAGO etc.) (iv) how to take an optimized graph and construct a usable map?
Finally once I have a map, I should technically be able to use AMCL to localize.

Pose to pose odometry: I tried using laser_scan_matcher to compute the transformation between poses (or keyframes) but soon realized that laser_scan_matcher (which uses CSM  - Canonical Scan Matcher) doesn't work very well in cluttered environments. We have switched to using the scan matching from Hector SLAM which appears to be doing much better as of now.

Front-End (Loop closure detection): open_karto appears to have a good loop closure detection module. Another option is FLIRT LIB https://github.com/tipaldi/flirtlib

Originally posted by Saurav Agarwal with karma: 246 on 2017-07-13
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by ZainMehdi on 2017-07-21:
Laser scan matcher isnt working well for me too. And as of hector slam I tried it with intel data set and it diverges alot. link text is what we need as ICP really fails if the initial guess is wrong.
Comment by scopus on 2017-07-24:
Hiï¼Œ@ZainMehdi, Have you used olson's Correlative Scan Matching method? Would you like to share a copy of code of this scan matching algorithm? Thank you!
Comment by ZainMehdi on 2017-07-24:
@scopus I havnt figured it out yet. Its inaccurate. I will share it with community as soon as I am done with accurate implementation. Meanwhile you can have a look at cartographer's implementation if it helps.
Comment by Saurav Agarwal on 2017-08-14:
Try slam_karto_g2o (it uses open_karto for the front end and g2o for the backend).

