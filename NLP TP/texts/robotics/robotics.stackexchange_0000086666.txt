Q:

How to specify my own OpenCV3 for cv_bridge

The ROS1 package cv_bridge can be downloaded here: https://github.com/ros-perception/vision_opencv.git and be found at vision_opencv/cv_bridge.
I just checked its CMakeLists.txt and I found OpenCV3:
find_package(OpenCV 3 REQUIRED
  COMPONENTS
    opencv_core
    opencv_imgproc
    opencv_imgcodecs
  CONFIG
)

catkin_package(
  INCLUDE_DIRS include
  LIBRARIES ${PROJECT_NAME}
  CATKIN_DEPENDS rosconsole sensor_msgs
  DEPENDS OpenCV
  CFG_EXTRAS cv_bridge-extras.cmake
)
catkin_python_setup()
include_directories(include ${Boost_INCLUDE_DIRS} ${OpenCV_INCLUDE_DIRS} ${catkin_INCLUDE_DIRS})

The OpenCV3 by default is very huge so I want to use a custom one, which is smaller.
I put my own OpenCV3 at /opt/opencv3/ and there are only two directories: include and lib in it.
Now I want to tell the package cv_bridge to look for my own specific OpenCV3 so that I can remove the original OpenCV3 from the source of ROS.
Is it possible? How can I modify the CMakeLists.txt of cv_bridge?

Originally posted by bear234 on ROS Answers with karma: 71 on 2018-04-19
Post score: 2

A:

You do not need to modify cv_bridge source code for this. You can point cmake to your own opencv version by defining the OpenCV_DIR variable when running catkin_make.
For example:
If you compile and install your own OpenCV version like:
cd opencv
mkdir build
cd build
cmake ..
make 
sudo make install

It will be installed to /usr/local
In this case you can force catkin_make to build your workspace against this OpenCV version by running:
catkin_make -DOpenCV_DIR=/usr/local/share/OpenCV
Note that OpenCV_DIR must point to a folder with opencv-conifg.cmake file.
This will compile and link all packages in your workspace against the modified opencv version, rather than the opencv version shipped with ROS.
Alternatively, if you do not want to polute your system directories you can run
make DESTDIR=$HOME/opencv_installation install
when building and installing opencv. This will place the opencv installation in your home folder (or whereever you like) so you can comfortably remove it.
In this case you run
catkin_make -DOpenCV_DIR=$HOME/opencv_installation install/usr/local/share/OpenCV
for building the workspace.
Important note:
All libraries that are linked in an executable have to use the same opencv version, otherwise attempting to run them will cause segfaults. Packages that are installed via sudo apt-get install ros-kinetic-whatever do link against the OpenCV version shipped with ROS. If your exec uses any lib package of ROS (frequently image_transport, image_geometry, image_pipeline, cv_bridge etc) you have to check them out from github and place them in your catkin workspace alongide your own packages so these are also compiled against your modified OpenCV version.

Originally posted by Wolf with karma: 7555 on 2018-04-19
This answer was ACCEPTED on the original site
Post score: 5

