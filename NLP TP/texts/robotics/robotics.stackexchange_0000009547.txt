Q:

Reverse engineering commercial drone control algorithms

I'm wondering if there is a way to figure out the actual controllers used in the commercial drones such as AR drone and Phantom. According to AR drone SDK, users are not allowed to access the actual hardware of the platform yet they are only capable of sending and receiving commands from/to the drone. 

Edit:
I'm hoping to to check the actual controller utilized in the software. When I fly AR drone, it seems the platform can't stabilize itself when I perform aggressive maneuvers, therefore, I can guess that they use linearized model which is applicable for using simple controllers such as PD or PID

A:

I would recommend looking at the PX4 software that runs on the pixhawk. It's open source and is available on github.
You won't be able to see the actual control software flying on the other drones as it's proprietary. 
https://github.com/PX4/Firmware
--
the software on the pixhawk is well put together and maintained. it is likely more accessible than most because processes are split into modules and comminicate via messages. The ardupilot is another open source flight stack. However, the ardupilot is a god object that is a mess of inheritance. If you are not familiar with oop you best stay away.
The only downside to the px4 flight stack is that it uses cascaded pid for attitude control which isn't all that exotic. 
But if you're just looking to get a feel for how controllers are implemented in the real world on embedded systems, the px4 flight stack will be your best bet. 

