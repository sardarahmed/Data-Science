Q:

Calling launch file from node during runtime

Hi all,
Based on some condition in node, I want to start and stop hector slam . (in parallel)
I had looked at different questions and rosspawn but couldn't figure it out.
if(start_node == true)
{
// start node in parallel 
// Here my case is hector SLAM
}
if (stop_node == true)
{
// Stop the node
}

Any suggestions  ?
thanks.
Edit ::
I found starting node in another package in python code from Roslaunch-API Usage. I am looking for similar way in C++ also starting nodes with params and arguments.
import roslaunch

package = 'rqt_gui'
executable = 'rqt_gui'
node = roslaunch.core.Node(package, executable)

launch = roslaunch.scriptapi.ROSLaunch()
launch.start()

process = launch.launch(node)
print process.is_alive()
process.stop()

Originally posted by bvbdort on ROS Answers with karma: 3034 on 2014-09-22
Post score: 2

A:

AFAIK there is no right way to start and stop nodes dynamically. If you're writing the nodes yourself, it's much better to include pause/resume functionality via services.
As @Ricky stated, you can use the system call, however system will block until the command finishes, meaning you have to use the & control operator in the command to spin off a new process. Then you have the issue of trying to track down/parse the PID in order to shutdown when necessary.
I would recommend using Qt's QProcess, which will make it easier to manage the state of the process (destructing the object will kill the roslaunch process, thus shutting down the nodes).

EDIT: Poco also has nice looking Process management, if you want to avoid messing with Qt. ROS's class_loader CMakeLists is an example of how to include Poco in your package.

Originally posted by paulbovbel with karma: 4518 on 2014-09-22
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by bvbdort on 2014-09-22:
Hi Paul, thanks for answer, poco looks better than using direct linux commands, i will try it out. But its not the ROS way of doing.
Comment by Cerin on 2016-12-10:
The problem with writing everything as a service is that ROS can be a memory hog. Even small trivial nodes, doing nothing, can consume 4% of memory. Get a few dozen of those, and you're already out of memory even though your bot's just sitting there doing nothing.

