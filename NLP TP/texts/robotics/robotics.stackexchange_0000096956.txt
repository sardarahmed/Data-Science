Q:

How to subscribe to two images (ROS 2 and C++)

Hi.
I'm trying to use message_filters package (I also tried with image_transport...) to subscribe to two images. I couldn't understand the usage for ROS 2, but I found this short example for ROS 1. So, what changes do I need to do in this code to have it running in ROS 2?
Thanks in advance.
  using namespace sensor_msgs;
  using namespace message_filters;

  void callback(const ImageConstPtr& image, const ImageConstPtr& cam_info)
  {
       // Callback function...
  }

  int main(int argc, char** argv)
  {
         ros::init(argc, argv, "vision_node");
         ros::NodeHandle nh;

         message_filters::Subscriber<Image> image_1(nh, "image_1", 1);
         message_filters::Subscriber<Image> image_2(nh, "image_2", 1);
         TimeSynchronizer<Image, Image> sync(image_sub, info_sub, 10);
         sync.registerCallback(boost::bind(&callback, _1, _2));

        ros::spin();

        return 0;
  }

Originally posted by mirella melo on ROS Answers with karma: 194 on 2020-08-27
Post score: 0

A:

I finally found the equivalent...
 #include "rclcpp/rclcpp.hpp"
 #include "sensor_msgs/msg/image.hpp"
 #include <message_filters/subscriber.h>
 #include <message_filters/synchronizer.h>
 #include <message_filters/sync_policies/approximate_time.h>
 #include <message_filters/time_synchronizer.h>
 #include "boost/bind/bind.hpp"

void callback(const sensor_msgs::msg::Image::ConstSharedPtr& left, const     
       sensor_msgs::msg::Image::ConstSharedPtr& right) {
    // Callback function...
}

int main(int argc, char** argv){
    rclcpp::init(argc, argv);
    auto node = rclcpp::Node::make_shared("my_node");

    message_filters::Subscriber<sensor_msgs::msg::Image> image_1(node, "image_1");
    message_filters::Subscriber<sensor_msgs::msg::Image> image_2(node, "image_2");
    message_filters::TimeSynchronizer<sensor_msgs::msg::Image, sensor_msgs::msg::Image> sync(image_1, image_2, 10);
    sync.registerCallback(boost::bind(&callback, boost::placeholders::_1, boost::placeholders::_2));
    rclcpp::spin(node);
    return 0;
}

Originally posted by mirella melo with karma: 194 on 2020-08-27
This answer was ACCEPTED on the original site
Post score: 1

