Q:

Incomplete turtlebot model on fuerte gazebo

I know questions like this have already come up (here and here). Since I am yet to get a clear solution, I am re-posting. I face the following problems:
Incomplete model of the TurtleBot.
From this, I found that by uncommenting a part of the code in turtlebot_body.urdf.xacro, one can see the complete model of the robot instead of just 2 wheels. After uncommenting the part, I was able to the complete model of the robot in the empty.world but in the world that I built. I am still seeing just two wheels in my world. Does this problem still persist? Is there a solution ?
RaySensor warning.
My gazebo shell in spammed with Warning [RaySensor.cc:206] ranges not constructed yet (zero sized) when I spawn the TurtleBot. I searched for the file which has this line and comment it, but without any luck. Though this isn't a major issue, it still is irritating.
I am running ROS-Fuerte on Unbuntu 12.04.
Thanks,
Prasanna
P.S: I know this could be posted in gazebosim forum. I hope some ROS enthusiasts might help me here.

Originally posted by prasanna.kumar on ROS Answers with karma: 1363 on 2013-03-14
Post score: 0

A:

Besides launching Gazebo and robot.launch at the same time I've found two (very hacky) solutions to the problem of an incomplete Turtlebot model in Fuerte.

Solution 1
After launching turtlebot_world.launch and adding the turtlebot, close the GUI. This should not close the Gazebo server, just the GUI component.
Now you can re-open the GUI from another terminal window by typing rosrun gazebo gui. This will not work every time, but I find that after relaunching the GUI window a few times the entire turtlebot appears.

Solution 2
Find the Turtlebot URDF file
roscd turtlebot_description/urdf

Now modify the turtlebot urdf to remove the "hardware" (supports and such).
vim turtlebot.urdf.xarcro

Comment out the line that includes the hardware urdf file - the result should look something like this:
<?xml version="1.0"?>

<robot name="turtlebot"
       xmlns:sensor="http://playerstage.sourceforge.net/gazebo/xmlschema/#sensor"
       xmlns:controller="http://playerstage.sourceforge.net/gazebo/xmlschema/#controller"
       xmlns:interface="http://playerstage.sourceforge.net/gazebo/xmlschema/#interface"
       xmlns:xacro="http://ros.org/wiki/xacro">
    <!--
    <include filename="$(find turtlebot_description)/urdf/turtlebot_hardware.urdf.xacro" />
    -->
    <include filename="$(find turtlebot_description)/urdf/turtlebot_body.urdf.xacro" />
    <include filename="$(find turtlebot_description)/urdf/turtlebot_calibration.xacro" />
    <include filename="$(find turtlebot_description)/urdf/turtlebot_kinect.urdf.xacro" />

    <property name="M_PI" value="3.14159"/>  <property name="SCALE" value="0.0254"/>

    <!-- Body of TurtleBot, with plates, standoffs and Create (including sim sensors) -->
    <turtlebot_body/>

    <!-- Kinect frames and mounting (includes simulation) -->
    <turtlebot_kinect/>
</robot>

Note that this will result in the turtlebot being rendered without standoffs between the plates, however the simulation seems to work just fine without these.

Originally posted by abencz with karma: 83 on 2013-04-24
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by prasanna.kumar on 2013-04-24:
@abencz Excellent! Awesome! I tried your first solution and it worked. Thanks a lot :-) I do not have the option of giving 10 up-votes! I will try the second one and get back.

