Q:

Can I use a single-point laser range finder with a SLAM algorithm (not a Hokuyo-type/wide-angle type scanner)?

Hello hello,
I've seen plenty of examples of building maps with ROS using Hokuyo laser scanners that can scan at wide angles (270 degrees!). However, from what I've seen, these scanners are way out of my budget, easily weighing in at over a thousand bucks.
Can you use a single-point laser range finder such as this one (http://www.fluke.com/fluke/m3en/Laser-Distance-Meters/Fluke-414D.htm?PID=74281) and still get usable data for mapping, it would just take longer to scan the walls of areas? This particular range finder can be fitted with an interface board (http://porcupineelectronics.com/Laserbotics.html) that allows for USB communication/interfacing with microcontrollers like Arduinos. Should I be able to send the sensor's data to ROS this way? The rangefinder and the interface board would normally cost about $300 in comparison to the $1000+ Hokuyo alternatives.

Originally posted by jc17 on ROS Answers with karma: 39 on 2014-06-17
Post score: 1

A:

Well, just adding my few cents here, indeed, you need to scan the environment that surrounds your robot in order to build a map, BUT, contrary to common sense the speed of this scanning depends on you robot's mission and expected performance.
In other words, you could try mounting the single point range finder on a servo or step motor, but keep in mind you will probably have to stop you robot frequently to update the map, or find a way of building and updating it accordingly. On top of that, not just the speed of a range find matters. Its resolution matters also.
Translating this to our hypothetical case of a servo-mounted range finder, the step of the motor will be your resolution, and, the farther an object is from you sensor, the greater the chance you either miss it completely, of just capture it partially.
Another way would be initializing your brobot, making it do a 360 deg spin around itself (if its mechanics allow for it, like in a turtle), map the initial environment and then start planning its path. Zig-zag it a little bit to cause the "scanning" effect, while it moves. BUT that is over-thinking this solution. Let's use another approach.
You might want to consider the (in)famous Microsoft Kinect from Xbox 360. It can be used for that as well; You will find many videos on youtube with ROS implementations of this device, with a very fair result. It has TWO cameras: an IR (monochromatic) one that works as the range finder, and the regular one for image. (Some ideas about it on youtube: https://www.youtube.com/watch?v=dRPEns8MS2o)
Now, there is more here. Thinking outside the box (an depending on what your robot will do)  you could use the regular camera using an image filter called "edge find", combined with the IR range finder to fine-tune your mapped area. (Check some ideas here on youtube: https://www.youtube.com/watch?v=yQZISXIFjaQ )
Kinect's IR can only detect from 1.2 meters to 3.5 meters. You can use OpenCV to calculate distances smaller than 1 m and greater than 3.5m. There are some applications using Raspberry PI and OpenCV (not necessarily ROS) to implement dashcams that do this. No reason you could not hack it a bit and make a great robot for less money. (yet another example here: https://www.youtube.com/watch?v=dcm9NpMNi68 )
A few hints before you buy a Kninect:
-This thing is BIG and HEAVY. won't fly on a light quad, or, if you are planning on building a terrestrial bot, make sure to take its dimensions into consideration. For reference, it is almost as wide as a Roomba vacuum cleaner.

You want the "original" version, from Xbox 360. Until a few months ago, the new Kninect was not supported (no one found out the communication protocol)

Let's call this device the Kninect 360; It DOES NEED a special adapter: It powers the device with 12 Volts and also converts its special, proprietary, connector into USB. For you robot, you will have to provide 12 V and around 1.5 A to it. The best option is to either cut out the connector or strip down the cable and patch it to your circuits. You will find plenty of references on this cable pinout. (http://freneticrapport.blogspot.com/2011/04/kinect-cable.html)

There is a version of Kinect that was released for Windows development ONLY ! It does NOT work with the open source driver that we use on Linux. (According to some documents I found)

The Kinect 360 has MOTORS inside, that allow you some panning (and extra scanning, or even object tracking). If you do not use them, you may not need the hole 1.5 A.

Asus has a model that is said to be 100% compatible. Plug-and-play direct replacement: (http://www.asus.com/Multimedia/Xtion_PRO_LIVE/).

Happy hacking.

Originally posted by ccapriotti with karma: 255 on 2014-06-18
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by jc17 on 2014-06-19:
Wow thanks so much for all the information and external links. I really appreciate all the effort. I saw a ROSCon 2012 presentation here (http://www.youtube.com/watch?v=ZTR16W0DsEM) that's all about the Kinect's hardware details and capabilities with ROS. Can be helpful for others studying Kinect

