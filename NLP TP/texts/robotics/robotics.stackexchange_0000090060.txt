Q:

Why isnt my executable compiling?

So right now, I have two executables within one package. I had created the first executable a few days back. But after creating the second executable and using the catkin_make command, only the first program gets compiled and not the second. What am I doing wrong? Is it because of the two executables within one package? Also, if I type rosrun package executable2, I get the following error - "Couldn't find executable names executable2"
My Cmake file -
cmake_minimum_required(VERSION 2.8.3)
project(first_package)
find_package(catkin REQUIRED COMPONENTS roscpp geometry_msgs)
catkin_package()
include_directories(${catkin_INCLUDE_DIRS})
add_executable(hello hello.cpp pubvel pubvel.cpp)
target_link_libraries(hello ${catkin_LIBRARIES})

I am pretty sure the error is due to the add_executable part of my CMakeLists.txt. hello.cpp is the first executable whereas pubvel.cpp is the second executable.

Originally posted by TristanNoctis on ROS Answers with karma: 29 on 2019-01-13
Post score: 1

Original comments
Comment by PeteBlackerThe3rd on 2019-01-13:
Can you update your question will your CMakeLists.txt file, and the details of the source files that are needed to compile each executable. We can't help you if we don't know how your workspace is setup.
Comment by Hypomania on 2019-01-13:
We need to see your CMakeLists.txt. As to your last sentence, have you sourced your catkin_ws and restarted the terminal?
Comment by TristanNoctis on 2019-01-13:
Hey I have updated my CMakeLists.txt. Can you please check?
Comment by TristanNoctis on 2019-01-13:
This is my other workspace that I have created other than the 'catkin_ws'. And yes I have sourced it before using the catkin_make
Comment by Hypomania on 2019-01-13:
Try the first part of my answer.
Comment by Hypomania on 2019-01-13:
Also try adding new add_executable and target_link_libraries for pubvel instead of merging them into one (I am not sure if you can do what you are doing).

A:

You have to add appropriate CMake macros at the end of your CMakeLists.txt file:
At the very bottom add these two lines for each executable:

add_executable(node_name src/file_name.cpp)
target_link_libraries(node_name ${catkin_LIBRARIES})

This will tell catkin to build and install the executable in your devel/lib/package_name directory.
If none of the above works I am presuming there's something wrong with your ROS install. Providing your CMakeLists.txt file would be helpful.
EDIT: Update your CMakeLists.txt to:
add_executable(hello src/hello.cpp
target_link_libraries(hello ${catkin_LIBRARIES}

add_executable(pubvel src/pubvel.cpp
target_link_libraries(pubvel ${catkin_LIBRARIES}

Ensure your src is stored in ~/your_ws/src/your_package/src directory.

Originally posted by Hypomania with karma: 120 on 2019-01-13
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by PeteBlackerThe3rd on 2019-01-13:
Although you're correct in the end that the problem was with the add_executable tags in CMakeLists.txt. You absolutely do not have to re-source your workspace every time you run catkin_make.
Comment by TristanNoctis on 2019-01-14:
Your update to the CMakeLists.tst worked! Only problem now is that I have to source the setup.bash each time I open a new terminal.
Comment by Hypomania on 2019-01-14:
@PeteBlackerThe3rd, my apologies, I was meant to say everytime you build a new package, where a new devel and build folders are created!
Comment by Hypomania on 2019-01-14:
@TristanNoctis, you don't, just follow the steps I added in part 1.
Comment by PeteBlackerThe3rd on 2019-01-14:
@Hypomania no problem, could you update your answer so it doesn't include the part about sourcing the work space. It's quite confusing at the moment, as the first half doesn't answer the OPs question and is incorrect. The second half in great though.
Comment by Hypomania on 2019-01-14:
@PeteBlackerThe3rd, initially I thought his ws wasn't source. If it's not sourced it won't get recognized by bash (correct me if I am wrong), is that still irrelevant to the question?
Comment by PeteBlackerThe3rd on 2019-01-14:
That's true, but the question was about compiling multiple binaries. The first binary was okay, then the problem appeared when they tried to compile a second binary. Plus the actual fault in this case was the CMakeLists.txt so that should be the focus of the answer.
Comment by Hypomania on 2019-01-15:
@PeteBlackerThe3rd, that makes sense, I will edit it out.

