Q:

Calculating rotation matrix efficiently

I'm trying to efficiently calculate the vertical offset of each corner of a rectangular base. I have an accelerometer mounted in the middle of the base, ADXL345. The steps I have taken, and seems to work are below. Can anyone advise if this is the most efficient way of doing this. I'm using the raspberry pi pico, with MicroPython:

convert the accelerometer into a unit vector
use the dot product and cross products ( between X =0, y= 0, z= 1 and the accelerometer unit vector) to calculate the quaternion
calculate the quaternion rotation matrix
calculate the rotation of the four corners using the rotation matrix, but only for the z component, as I'm only interested in vertical offset of the corners

A:

The accelerometer measures the gravity vector in the body frame, call it $a$. If you normalize that, say $\hat a$, it's the third row of the rotation matrix $R$ that represents the rotation of the body. i.e.
$$
R^\top \begin{pmatrix}0 \\ 0 \\ 1\end{pmatrix} = \frac{a}{||a||} = \hat a =  z_{\mathcal{W}}^{\mathcal{B}}
$$
So $$ R = \begin{pmatrix} ? \\ ? \\ \hat a \end{pmatrix} $$
Now to get the world coordinates of a corner point $p^{\mathcal{B}}$ expressed in the body frame,
$$
p^{\mathcal{W}} = R p^{\mathcal{B}} = \begin{pmatrix} ? \\ ? \\ \hat a \end{pmatrix} p^{\mathcal{B}} = \begin{pmatrix} ? \\ ? \\ \hat a ^\top p^{\mathcal{B}} \end{pmatrix}
$$
Thus the world $z$ coordinate of the corner point is the dot product between the normalized accelerometer vector and the corner point expressed in the body frame.
If you just need the $z$ coordinate, you do not need to construct the rotation matrix.

