Q:

specifying ur5 robot_description in moveit_commander.RobotCommander() initialization

I'm trying to specify the robot_description parameter in initializing the moveit_commander for my robot. As in the documentation the moveit_commander takes a robot_description, which I expect is a URDF file. Below is how I am attempting to do so:
desc = '/home/team-sewts/catkin_ws/src/fmauch_universal_robot/ur_description/urdf'
klaus_commander = moveit_commander.RobotCommander(robot_description = desc, ns = "klaus")
frank_commander = moveit_commander.RobotCommander(robot_description = desc, ns = "frank")
scene = moveit_commander.PlanningSceneInterface()

group_name = "manipulator" #manipulator in gazebo
klaus_group = moveit_commander.MoveGroupCommander(group_name, desc, "klaus")
frank_group = moveit_commander.MoveGroupCommander(group_name, desc, "frank")

However I am getting an error reading [ERROR] [1575984235.264155297]: Robot model parameter not found! Did you remap '/home/team-sewts/catkin_ws/src/fmauch_universal_robot/ur_description/urdf'?. I am guessing that I am not specifying the urdf correctly - how can I do so for my moveit_commander? Full error output below, please let me know if anything else is needed.
team-sewts@sewts-Legion:~/catkin_ws/src/moveit_scripts$ python x2_coordinate_tester.py
Failed to import pyassimp, see https://github.com/ros-planning/moveit/issues/86 for more info
[ERROR] [1575984235.264155297]: Robot model parameter not found! Did you remap '/home/team-sewts/catkin_ws/src/fmauch_universal_robot/ur_description/urdf'?
Traceback (most recent call last):
  File "x2_coordinate_tester.py", line 290, in <module>
    main()
  File "x2_coordinate_tester.py", line 266, in main
    tutorial = MoveGroupPythonIntefaceTutorial()
  File "x2_coordinate_tester.py", line 30, in __init__
    klaus_commander = moveit_commander.RobotCommander(robot_description = desc, ns = "klaus")
  File "/opt/ros/kinetic/lib/python2.7/dist-packages/moveit_commander/robot.py", line 151, in __init__
    self._r = _moveit_robot_interface.RobotInterface(robot_description, ns)
RuntimeError: RobotInterfacePython: invalid robot model 

team-sewts@sewts-Legion:~/catkin_ws/src/moveit_scripts$ python coordinate_tester.py
Failed to import pyassimp, see https://github.com/ros-planning/moveit/issues/86 for more info
[ERROR] [1576058021.474502119]: Robot model parameter not found! Did you remap '<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from /home/team-sewts/catkin_ws/src/fmauch_universal_robot/ur_description/urdf/ur5_joint_limited_robot.urdf.xacro | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<robot name="ur5" xmlns:xacro="http://wiki.ros.org/xacro">
  <gazebo>
    <plugin filename="libgazebo_ros_control.so" name="ros_control">
      <!--robotNamespace>/</robotNamespace-->
<!--robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType-->
    </plugin>
    <!--
    <plugin name="gazebo_ros_power_monitor_controller" filename="libgazebo_ros_power_monitor.so">
      <alwaysOn>true</alwaysOn>
      <updateRate>1.0</updateRate>
      <timeout>5</timeout>
      <powerStateTopic>power_state</powerStateTopic>
      <powerStateRate>10.0</powerStateRate>
<fullChargeCapacity>87.78</fullChargeCapacity>
      <dischargeRate>-474</dischargeRate>
      <chargeRate>525</chargeRate>
      <dischargeVoltage>15.52</dischargeVoltage>
      <chargeVoltage>16.41</chargeVoltage>
    </plugin>
-->
  </gazebo>
  <!-- measured from model -->
  <link name="base_link">
    <visual>
      <origin rpy="0 0 3.14159265359" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5/visual/base.dae"/>
      </geometry>
      <material name="LightGrey">
        <color rgba="0.7 0.7 0.7 1.0"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 3.14159265359" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5/collision/base.stl"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="4.0"/>
      <origin rpy="0 0 0" xyz="0.0 0.0 0.0"/>
      <inertia ixx="0.00443333156" ixy="0.0" ixz="0.0" iyy="0.00443333156" iyz="0.0" izz="0.0072"/>
    </inertial>
  </link>
  <joint name="shoulder_pan_joint" type="revolute">
    <parent link="base_link"/>
    <child link="shoulder_link"/>
    <origin rpy="0 0 3.14168042022" xyz="0 0 0.0893072092318"/>
    <axis xyz="0 0 1"/>
    <limit effort="150.0" lower="-3.14159265359" upper="3.14159265359" velocity="3.15"/>
    <dynamics damping="0.0" friction="0.0"/>
  </joint>
  <link name="shoulder_link">
    <visual>
      <origin rpy="0 0 3.14159265359" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5/visual/shoulder.dae"/>
      </geometry>
      <material name="LightGrey">
        <color rgba="0.7 0.7 0.7 1.0"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 3.14159265359" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5/collision/shoulder.stl"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="3.7"/>
      <origin rpy="0 0 0" xyz="0.0 0.0 0.0"/>
      <inertia ixx="0.0149723523444" ixy="0.0" ixz="0.0" iyy="0.0149723523444" iyz="0.0" izz="0.01040625"/>
    </inertial>
  </link>
  <joint name="shoulder_lift_joint" type="revolute">
    <parent link="shoulder_link"/>
    <child link="upper_arm_link"/>
    <origin rpy="1.57027963108 0 -0.000256378975585" xyz="8.02597230883e-05 0 0"/>
    <axis xyz="0 0 1"/>
    <limit effort="150.0" lower="-3.14159265359" upper="3.14159265359" velocity="3.15"/>
    <dynamics damping="0.0" friction="0.0"/>
  </joint>
  <link name="upper_arm_link">
    <visual>
      <origin rpy="1.57079632679 0 -1.57079632679" xyz="0 0 0.136"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5/visual/upperarm.dae"/>
      </geometry>
      <material name="LightGrey">
        <color rgba="0.7 0.7 0.7 1.0"/>
      </material>
    </visual>
    <collision>
      <origin rpy="1.57079632679 0 -1.57079632679" xyz="0 0 0.136"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5/collision/upperarm.stl"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="8.393"/>
      <origin rpy="0 1.57079632679 0" xyz="-0.212658283841 0.0 0.136"/>
      <inertia ixx="0.134074052685" ixy="0.0" ixz="0.0" iyy="0.134074052685" iyz="0.0" izz="0.0151074"/>
    </inertial>
  </link>
  <joint name="elbow_joint" type="revolute">
    <parent link="upper_arm_link"/>
    <child link="forearm_link"/>
    <origin rpy="0.000150389826896 0.000670340723934 -0.000129296667033" xyz="-0.425316567681 0 0"/>
    <axis xyz="0 0 1"/>
    <limit effort="150.0" lower="-3.14159265359" upper="3.14159265359" velocity="3.15"/>
    <dynamics damping="0.0" friction="0.0"/>
  </joint>
  <link name="forearm_link">
    <visual>
      <origin rpy="1.57079632679 0 -1.57079632679" xyz="0 0 0.0165"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5/visual/forearm.dae"/>
      </geometry>
      <material name="LightGrey">
        <color rgba="0.7 0.7 0.7 1.0"/>
      </material>
    </visual>
    <collision>
      <origin rpy="1.57079632679 0 -1.57079632679" xyz="0 0 0.0165"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5/collision/forearm.stl"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="2.275"/>
      <origin rpy="0 1.57079632679 0" xyz="-0.212658283841 0.0 0.0165"/>
      <inertia ixx="0.0312142241249" ixy="0.0" ixz="0.0" iyy="0.0312142241249" iyz="0.0" izz="0.004095"/>
    </inertial>
  </link>
  <joint name="wrist_1_joint" type="revolute">
    <parent link="forearm_link"/>
    <child link="wrist_1_link"/>
    <origin rpy="3.13404114506 3.139985598 3.14149191057" xyz="-0.392232740578 0.000835269385168 0.110607503694"/>
    <axis xyz="0 0 1"/>
    <limit effort="28.0" lower="-3.14159265359" upper="3.14159265359" velocity="3.2"/>
    <dynamics damping="0.0" friction="0.0"/>
  </joint>
  <link name="wrist_1_link">
    <visual>
      <origin rpy="1.57079632679 0 0" xyz="0 0 -0.093"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5/visual/wrist1.dae"/>
      </geometry>
      <material name="LightGrey">
        <color rgba="0.7 0.7 0.7 1.0"/>
      </material>
    </visual>
    <collision>
      <origin rpy="1.57079632679 0 0" xyz="0 0 -0.093"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5/collision/wrist1.stl"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="1.219"/>
      <origin rpy="0 0 0" xyz="0.0 0.0 0.0"/>
      <inertia ixx="0.00263096286494" ixy="0.0" ixz="0.0" iyy="0.00263096286494" iyz="0.0" izz="0.0034284375"/>
    </inertial>
  </link>
  <joint name="wrist_2_joint" type="revolute">
    <parent link="wrist_1_link"/>
    <child link="wrist_2_link"/>
    <origin rpy="1.57084155987 0 5.57612237128e-05" xyz="3.88210393792e-05 -0.0949976987238 -4.2970377454e-06"/>
    <axis xyz="0 0 1"/>
    <limit effort="28.0" lower="-3.14159265359" upper="3.14159265359" velocity="3.2"/>
    <dynamics damping="0.0" friction="0.0"/>
  </joint>
  <link name="wrist_2_link">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 -0.095"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5/visual/wrist2.dae"/>
      </geometry>
      <material name="LightGrey">
        <color rgba="0.7 0.7 0.7 1.0"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 -0.095"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5/collision/wrist2.stl"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="1.219"/>
      <origin rpy="0 0 0" xyz="0.0 0.0 0.0"/>
      <inertia ixx="0.00179418220221" ixy="0.0" ixz="0.0" iyy="0.00179418220221" iyz="0.0" izz="0.0021942"/>
    </inertial>
  </link>
  <joint name="wrist_3_joint" type="revolute">
    <parent link="wrist_2_link"/>
    <child link="wrist_3_link"/>
    <origin rpy="1.57047457779 3.14159265359 -3.14148013852" xyz="7.18408705395e-05 0.0828382643859 -2.66531297376e-05"/>
    <axis xyz="0 0 1"/>
    <limit effort="28.0" lower="-3.14159265359" upper="3.14159265359" velocity="3.2"/>
    <dynamics damping="0.0" friction="0.0"/>
  </joint>
  <link name="wrist_3_link">
    <visual>
      <origin rpy="1.57079632679 0 0" xyz="0 0 -0.0818"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5/visual/wrist3.dae"/>
      </geometry>
      <material name="LightGrey">
        <color rgba="0.7 0.7 0.7 1.0"/>
      </material>
    </visual>
    <collision>
      <origin rpy="1.57079632679 0 0" xyz="0 0 -0.0823"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5/collision/wrist3.stl"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.1879"/>
      <origin rpy="0 0 0" xyz="0.0 0.0 -0.01525"/>
      <inertia ixx="8.06247260834e-05" ixy="0.0" ixz="0.0" iyy="8.06247260834e-05" iyz="0.0" izz="0.0001321171875"/>
    </inertial>
  </link>
  <joint name="ee_fixed_joint" type="fixed">
    <parent link="wrist_3_link"/>
    <child link="ee_link"/>
    <origin rpy="0.0 -1.57079632679 1.57079632679" xyz="0.0 0.0 0.0"/>
  </joint>
  <link name="ee_link">
    <collision>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
      <origin rpy="0 0 0" xyz="-0.01 0 0"/>
    </collision>
  </link>
  <joint name="wrist_3_passive_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="wrist_3_link"/>
    <child link="tool0"/>
  </joint>
  <transmission name="shoulder_pan_trans">
<type>transmission_interface/SimpleTransmission</type>
    <joint name="shoulder_pan_joint">
<hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
    </joint>
    <actuator name="shoulder_pan_motor">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <transmission name="shoulder_lift_trans">
<type>transmission_interface/SimpleTransmission</type>
    <joint name="shoulder_lift_joint">
<hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
    </joint>
    <actuator name="shoulder_lift_motor">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <transmission name="elbow_trans">
<type>transmission_interface/SimpleTransmission</type>
    <joint name="elbow_joint">
<hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
    </joint>
    <actuator name="elbow_motor">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <transmission name="wrist_1_trans">
<type>transmission_interface/SimpleTransmission</type>
    <joint name="wrist_1_joint">
<hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
    </joint>
    <actuator name="wrist_1_motor">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <transmission name="wrist_2_trans">
<type>transmission_interface/SimpleTransmission</type>
    <joint name="wrist_2_joint">
<hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
    </joint>
    <actuator name="wrist_2_motor">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <transmission name="wrist_3_trans">
<type>transmission_interface/SimpleTransmission</type>
    <joint name="wrist_3_joint">
<hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
    </joint>
    <actuator name="wrist_3_motor">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <gazebo reference="shoulder_link">
    <selfCollide>true</selfCollide>
  </gazebo>
  <gazebo reference="upper_arm_link">
    <selfCollide>true</selfCollide>
  </gazebo>
  <gazebo reference="forearm_link">
    <selfCollide>true</selfCollide>
  </gazebo>
  <gazebo reference="wrist_1_link">
    <selfCollide>true</selfCollide>
  </gazebo>
  <gazebo reference="wrist_3_link">
    <selfCollide>true</selfCollide>
  </gazebo>
  <gazebo reference="wrist_2_link">
    <selfCollide>true</selfCollide>
  </gazebo>
  <gazebo reference="ee_link">
    <selfCollide>true</selfCollide>
  </gazebo>
  <!-- ROS base_link to UR 'Base' Coordinates transform -->
  <link name="base"/>
  <joint name="base_link-base_fixed_joint" type="fixed">
    <!-- NOTE: this rotation is only needed as long as base_link itself is
                 not corrected wrt the real robot (ie: rotated over 180
                 degrees)
      -->
    <origin rpy="0 0 -3.14159265359" xyz="0 0 0"/>
    <parent link="base_link"/>
    <child link="base"/>
  </joint>
  <!-- Frame coincident with all-zeros TCP on UR controller -->
  <link name="tool0"/>
  <link name="world"/>
  <joint name="world_joint" type="fixed">
    <parent link="world"/>
    <child link="base_link"/>
    <origin rpy="0.0 0.0 0.0" xyz="0.0 0.0 0.0"/>
  </joint>
</robot>

'?
Traceback (most recent call last):
  File "coordinate_tester.py", line 272, in <module>
    main()
  File "coordinate_tester.py", line 250, in main
    tutorial = MoveGroupPythonIntefaceTutorial()
  File "coordinate_tester.py", line 42, in __init__
    robot = moveit_commander.RobotCommander(robot_description)
  File "/opt/ros/kinetic/lib/python2.7/dist-packages/moveit_commander/robot.py", line 151, in __init__
    self._r = _moveit_robot_interface.RobotInterface(robot_description, ns)
RuntimeError: RobotInterfacePython: invalid robot model

Originally posted by shu on ROS Answers with karma: 64 on 2019-12-10
Post score: 1

A:

The robot_description parameter actually should be set to the name of the parameter that contains your robot description.
It's not a file path, but the name of the parameter itself.
By default, that would be robot_description (hence the default value there being robot_description).
You'll have to load the actual contents of the file in /home/team-sewts/catkin_ws/src/fmauch_universal_robot/ur_description/urdf into a parameter and then pass the name of that parameter to the RobotCommander constructor.
But perhaps you could (re)use one of the *_upload.launch files provided with the ur_description package, as it already does all of that for you.
Be sure to select the correct one (ie: the one that matches the robot you're trying to use.

Edit: just to be clear: I'm referrig to ROS parameters there, not the concept of parameters and arguments to functions and constructors as you find in generic programming languages.
You seem to be loading the contents of a urdf file into a Python variable and then passing that as an argument to the RobotCommander constructor. That is not what you should do.
You only need to pass the name of the ROS parameter. No contents.

Edit 2:

Does ur5_upload.launch pass the urdf file into a ros parameter that robot_description is set to?

Yes and no.
Yes: it does load the file into a parameter.
No: it does not load the file into "a ros parameter that robot_description is set to". The .launch file loads it into a parameter that is actually called robot_description. Please note the difference.
The .launch file is stand-alone, it does not know anything about the RobotCommander.
I wouls also recommend to not use any different name for the parameter, as robot_description is standard and unless you have a very good reason, should not be changed.

Typing rosparam get /robot_description (I think that's the same parameter as robot_description, let me know if I'm wrong) returns the whole urdf file.

That is indeed the parameter.
You don't have to interact with it at all actually: just roslaunch the .launch file and start your Python script. Things should just work without specifying any custom name for the robot_description parameter. Your use is not special. The default values should work.

Originally posted by gvdhoorn with karma: 86574 on 2019-12-10
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by shu on 2019-12-11:
Thanks for explaining. Does ur5_upload.launch pass the urdf file into a ros parameter that robot_description is set to? I'm having a look at the file and I'm having trouble understanding how the urdf is passed into robot_description.
Typing rosparam get /robot_description (I think that's the same parameter as robot_description, let me know if I'm wrong) returns the whole urdf file.
edit:
No: it does not load the file into "a ros parameter that robot_description is set to". The .launch file loads it into a parameter that is actually called robot_description. Please note the difference.
So does this mean there are two robot_description parameters? One that the Commander takes during initialization and one that ur5_upload.launch passes the urdf file into?
Comment by shu on 2019-12-11:
Since I'm specifying namespaces for the robots the script will not run unless I specify a robot_description. I am finding that running
klaus_commander = moveit_commander.RobotCommander(robot_description = '/klaus/robot_description', ns = "klaus")
frank_commander = moveit_commander.RobotCommander(robot_description = '/frank/robot_description', ns = "frank")

is at least running, but I'm not sure if this is the correct thing to do as I'm having a different issue which I don't know is caused by specifying the robot_description (all commands are being sent to one robot).
Comment by gvdhoorn on 2019-12-11:
Yes, you'd have to take namespaces into account. But I'm surprised RobotCommander does not look in the namespace you're giving it the ns argument.
re: commands: robot_description is purely used for the robot model (ie: kinematics and visualisation). It's not involved in actuation.

