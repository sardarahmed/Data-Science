Q:

Controller Set Identification Error in MoveIt [/move_group]

Hey, 
I'm trying to control a Stäubli TX-40 robot (CS8C controller) with MoveIt/RViz. 
It's possible to launch RViz with roslaunch tx40_moveit_config moveit_planning_execution.launch sim:=false robot_ip:=<xxx>. 
Also the robot's initial pose is displayed correctly. 
But after I plan and execute a new pose I get the following error messages:
[ERROR] [1622803303.326637667] [/move_group] [ros.moveit_ros_planning.trajectory_execution_manager]: Unable to identify any set of controllers that can actuate the specified joints: [ joint_1 joint_2 joint_3 joint_4 joint_5 joint_6 ]
[ERROR] [1622803303.328418500] [/move_group] [ros.moveit_ros_planning.trajectory_execution_manager]: Known controllers and their joints:
[ERROR] [1622803303.328487897] [/move_group] [ros.moveit_ros_planning.plan_execution]: Apparently trajectory initialization failed

I'm using ROS melodic on a Ubuntu 18.04.5 LTS x64 machine. 
I followed this tutorial. 
This is my moveit_planning_execution.launch:
<launch>
    
      <!-- The planning and execution components of MoveIt! configured to run -->
      <!-- using the ROS-Industrial interface. -->
     
      <!-- Non-standard joint names:
           - Create a file [robot_moveit_config]/config/joint_names.yaml
               controller_joint_names: [joint_1, joint_2, ... joint_N] 
           - Update with joint names for your robot (in order expected by rbt controller)
           - and uncomment the following line: -->
      <!-- The following line is not necessary -->
      <!-- <rosparam command="load" file="$(find tx40_moveit_config)/config/joint_names.yaml"/> -->
      <!--   <rosparam command="load" file="$(find staubli_tx40_support)/config/joint_names_tx40.yaml"/> -->
     
      <!-- the "sim" argument controls whether we connect to a Simulated or Real robot -->
      <!--  - if sim=false, a robot_ip argument is required -->
      <arg name="sim" default="true" />
      <arg name="robot_ip" unless="$(arg sim)" />
     
      <!-- load the robot_description parameter before launching ROS-I nodes -->
      <include file="$(find tx40_moveit_config)/launch/planning_context.launch" >
        <arg name="load_robot_description" value="true" />
      </include>
    
      <!-- run the robot simulator and action interface nodes -->
      <group if="$(arg sim)">
        <include file="$(find industrial_robot_simulator)/launch/robot_interface_simulator.launch" />
      </group>
    
      <!-- run the "real robot" interface nodes -->
      <!--   - this typically includes: robot_state, motion_interface, and joint_trajectory_action nodes -->
      <!--   - replace these calls with appropriate robot-specific calls or launch files -->
      <group unless="$(arg sim)">
        <include file="$(find staubli_val3_driver)/launch/robot_interface_streaming.launch" >
          <arg name="robot_ip" value="$(arg robot_ip)"/>
        </include>
      </group>
    
      <!-- publish the robot state (tf transforms) -->
      <node name="staubli_tx40_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    
      <include file="$(find tx40_moveit_config)/launch/move_group.launch">
        <arg name="publish_monitored_planning_scene" value="true" />
      </include>
    
    <!--   <include file="$(find tx40_moveit_config)/launch/moveit_rviz.launch"> -->
    <!--     <arg name="config" value="true"/> -->
    <!--   </include> -->
    
      <include file="$(find tx40_moveit_config)/launch/moveit_rviz.launch">
        <arg name="rviz_config" value="$(find tx40_moveit_config)/launch/moveit.rviz"/>
      </include>
      
       <!-- <include file="$(find tx60l_moveit_config)/launch/default_warehouse_db.launch" /> -->
    
    </launch>

This is my controllers.yaml:
controller_list:
  - name: tx40_controller
    action_ns: joint_trajectory_action
    default: True
    type: FollowJointTrajectory
    joints: 
      - joint_1
      - joint_2 
      - joint_3 
      - joint_4
      - joint_5
      - joint_6

This is my ros_controllers.yaml:
# Simulation settings for using moveit_sim_controllers
moveit_sim_hw_interface:
  joint_model_group: manipulator
  joint_model_group_pose: all-zeros
# Settings for ros_control_boilerplate control loop
generic_hw_control_loop:
  loop_hz: 300
  cycle_time_error_threshold: 0.01
# Settings for ros_control hardware interface
hardware_interface:
  joints:
    - joint_1
    - joint_2
    - joint_3
    - joint_4
    - joint_5
    - joint_6
  sim_control_mode: 1  # 0: position, 1: velocity
# Publish all joint states
# Creates the /joint_states topic necessary in ROS
joint_state_controller:
  type: joint_state_controller/JointStateController
  publish_rate: 50
controller_list:
  []

Any help is highly appreciated.

Originally posted by jabra on ROS Answers with karma: 3 on 2021-06-04
Post score: 0

Original comments
Comment by gvdhoorn on 2021-06-04:
Could you check whether #q379403 deals with this?
Key point: check the action server is connected.
Comment by jabra on 2021-06-04:
Thanks for your quick reply.
How do I check if the action server is connected?
I tried rostopic list | grep -i goal and rostopic info /joint_trajectory_action/goal from link.
These commands produced the following outputs:
/execute_trajectory/goal
/joint_trajectory_action/goal
/move_group/goal
/pickup/goal
/place/goal

and
Type: control_msgs/FollowJointTrajectoryActionGoal

Publishers: None

Subscribers: 
 * /joint_trajectory_action (<my PC>)

Therefore, I filled the action_ns in my controllers.yaml with joint_trajectory_action.
Comment by gvdhoorn on 2021-06-04:\

How do I check if the action server is connected?

by looking at the output of MoveIt. Like in #q379403, if it's not connected, MoveIt will complain with:
[ WARN] [1622623640.277582609]: Waiting for arm_controller/follow_joint_trajectory to come up

and then finally:
[ERROR] [1622623652.277927833]: Action client not connected: arm_controller/follow_joint_trajectory
[ INFO] [1622623652.287814525]: Returned 0 controllers in list

the fact though that Publishers: None is shown for the FollowJointTrajectory server probably indicates that it's indeed not connected.

Therefore, I filled the action_ns in my controllers.yaml with joint_trajectory_action.

please see my answer to #q379403. Your controllers.yaml is likely incorrect.
Comment by jabra on 2021-06-04:
As far as I understand the problem in #q379403 was that the FollowJointTrajectory server is expected at <controller name>/follow_joint_trajectory. But the driver starts the server at /follow_joint_trajectory. Therefore, I now leave the name value in my controllers.yaml empty. Unfortunately, that didn't help. Regarding the warning and error messages that the action server is not connected: I don't have these messages. But before I start planing in RViz I get:
[ WARN] [1622815253.629201409] [/robot_state] [ros.industrial_utils]: Unable to find user-specified joint names in 'controller_joint_names'
[ WARN] [1622815253.639934450] [/motion_streaming_interface] [ros.industrial_utils]: Unable to find user-specified joint names in 'controller_joint_names'

Comment by jabra on 2021-06-04:
And:
[ WARN] [1622815253.651804291] [/joint_trajectory_action] [ros.industrial_utils]: Unable to find user-specified joint names in 'controller_joint_names'
[ WARN] [1622815253.672325640] [/motion_streaming_interface] [ros.simple_message]: Tried to connect when socket already in connected state
[ WARN] [1622815254.670602137] [/joint_trajectory_action] [ros.industrial_robot_client.joint_trajectory_action]: Trajectory state not received for 1.000000 seconds

A:

I assumed you already had updated the tx40_moveit_controller_manager.launch.xml to load your controllers.yaml (this name is a guess, I'm referring to whatever name that file has in your case).
If you haven't, controllers.yaml is not loaded. The OP in #q379403 has merged it with ros_controllers.yaml, and that is already loaded by default.
Also:
<!--   <rosparam command="load" file="$(find staubli_tx40_support)/config/joint_names_tx40.yaml"/> -->

why did you comment this?
It's likely the cause of the Unable to find user-specified joint names in 'controller_joint_names' you show.

Edit:

So now I merged my controllers.yaml with my ros_controllers.yaml.

it's up to you, but I would not do that.
It will work, but all other information in ros_controllers.yaml is specific to ros_control. The staubli_val3_driver is not ros_control based. To me it seems strange to mix everything into that file then.

I tried that also many times before but I think I didn't leave the name value empty.

Another option would be to remap the topic on the side of the driver. You should then be able to use the name and action_ns you had earlier.

So it was the same problem as in #q379403.

well, not quite: the OP there had already configured MoveIt to create the action client. He just had a minor configuration issue.
You didn't load the controllers.yaml file, causing MoveIt to not even create the client.

By the way: I commented <!--   <rosparam command="load" file="$(find staubli_tx40_support)/config/joint_names_tx40.yaml"/> --> in my moveit_planning_execution.launch because I don't have a joint_names.yaml-file.

you really should create that file, even if the names are the default ones.
There's no guarantee they will stay the default ones, and this way you have a way to load them. The file is also part of the default set of files in a robot support package, and there are good reasons for those packages to contain a standard set of files.

I used standard joint names.

newer versions of industrial_robot_client will not work if you don't configure the joint names. They will find missing parameters, report them and shut down.
Finally:

I'm trying to control a Stäubli TX-40 robot (CS8C controller)

I believe you've had to create the robot support package yourself. Seeing as there is currently no TX40 support in ros-industrial/staubli_experimental: would you be willing to submit a pull request to add that support? It would be greatly appreciated.

Originally posted by gvdhoorn with karma: 86574 on 2021-06-04
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by jabra on 2021-06-04:
IT WORKS!!!
THANK YOU!!!
So now I merged my controllers.yaml with my ros_controllers.yaml.
I tried that also many times before but I think I didn't leave the name value empty.
So it was the same problem as in #q379403.
By the way: I commented <!--   <rosparam command="load" file="$(find staubli_tx40_support)/config/joint_names_tx40.yaml"/> --> in my moveit_planning_execution.launch because I don't have a joint_names.yaml-file. I used standard joint names.
Again, thank you very much.
Comment by jabra on 2021-06-07:
Thank you for your helpful advice. I made the changes you recommended. Regarding the tx-40 support package: I didn't came up with the code myself. I found it there and there respectively.
Comment by gvdhoorn on 2021-06-08:
Looking at that package, technically, without written permission from the author, you cannot (re)use it for your own purposes. The license tag is set to TODO, which means it's currently unlicensed, which means all rights reserved.
There was already an issue about this Tomiliat/Staubli_backup#1, in which the author stated "yes, it can be MIT", but he has not updated the files.

