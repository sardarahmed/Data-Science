Q:

I would like to implement python code with inverse kinematics

Hi,
I am using a CrustCrawler Smart arm, and I would like to feed new coordinates to it via inverse Kinematics in Python, since it is used in our environment. Trac_ik has been used before here, but I can't find anyone to speak about this on how this works, is there anyone who can?

Originally posted by NLBUURMAN on ROS Answers with karma: 3 on 2018-07-02
Post score: 0

A:

The trak_ik repository has documentation about how the Python API works. It also states that the Python API is just a SWIG wrapper around the C API so you could look at the documentation for that, too (although there doesn't seem to be much). Finally, trac_ik claims to be a drop-in replacement for the KDL solver, so look at the KDL API documentation to see how that works. The wiki page for trac_ik says that these are the only differences:

TRAC-IK has a very similar API to
KDL's IK solver calls, except that the
user passes a maximum time instead of
a maximum number of search iterations.
Additionally, TRAC-IK allows for error
tolerances to be set independently for
each Cartesian dimension (x, y, z,
roll, pitch & yaw).

Originally posted by Geoff with karma: 4203 on 2018-07-02
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by NLBUURMAN on 2018-07-10:
thanks! I'll have a look at that :)

