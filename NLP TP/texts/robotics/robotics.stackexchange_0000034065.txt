Q:

How to pass arrays in custom messages

Hello all,
I have a node publishing temperature data from a string of 8 batteries written in python. Each battery has 8 temperature sensors, and so rather than building a message with 64 fields I have it broken down into 8 arrays each of length 8. I have written a healthMap node in C++ and I want to subscribe to the temperature data. What should my message structure look like? Python wants to use a tuple and C++ wants a vector. Does anyone have a code example that illustrates how to approach this? I also have little experience working with vectors in C++, so hopefully you could give me a sketch of what the subscriber looks like as well.
Sorry for the long-winded question
Cheers
Gideon

Originally posted by Gideon on ROS Answers with karma: 239 on 2011-09-02
Post score: 5

A:

This is similar to a previous question. There is a good answer there that has some example code and points to this tutorial. The tutorial has example code for publishers and subscribers.
For C++ vectors you can do something like the following (someone correct my C++ if I'm wrong please):
std::vector<double>::iterator my_iterator;
int i = 0;
for (my_iterator = msg.vector_field.begin(); msg.vector_field.end(); my_iterator++)
{
    my_local_battery_value[i] = msg.vector_field[my_iterator];
    i++;
}

or follow this page.

Originally posted by Thomas D with karma: 4347 on 2011-09-02
This answer was ACCEPTED on the original site
Post score: 4

Original comments
Comment by dornhege on 2011-09-02:
Ignore this ... triggered the 5 comments bug.
Comment by dornhege on 2011-09-02:
You could replace your code with temp = msg.temp; which would copy the vector. If that's even necessary depends on what you want to do with it.
Comment by Thomas D on 2011-09-02:
It should definitely be possible. It might even be easier than my little example code (I just haven't worked with vectors that much either).
Comment by dornhege on 2011-09-02:
Well, you can also just copy the whole vector, no need for a for loop. Or ideally subscribe a shared pointer, that you store, then no copying is needed at all.
Comment by Gideon on 2011-09-02:
Would this work?   for(int i = 0; i<numTemps;i++){ temp[i] = msg->temp[i]; }
Comment by Gideon on 2011-09-02:
so something like this wouldnt work?
Comment by Gideon on 2011-09-02:
Thanks. If my subscriber in written in C++, do I manually copy all of the fields to my local variables with a for loop?

