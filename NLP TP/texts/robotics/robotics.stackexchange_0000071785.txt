Q:

subscribe to sensor_msg::PointCloud2

Hi, my ros subscriber is having trouble entering the callback. I'm using ROS_INFO to tell me if the callback is in.
In the rqt_graph, it shows that the subscriber node is subscribed to the topic that the publisher is publishing. Using rostopic echo "topic", it is displaying a lots of numbers that i'm presuming that it is the pointcloud.
below is my code.
Publisher
typedef pcl::PointCloud<pcl::PointXYZ> PointCloud;

int main(int argc, char** argv) {
 ros::init (argc, argv, "pub_pcl");
 ros::Publisher pub;
 pub = nh.advertise<sensor_msgs::PointCloud2> ("input_cloud", 1);
 pcl::PCLPointCloud2::Ptr cloud_blob (new pcl::PCLPointCloud2);
 pcl::PCDReader reader;
 reader.read (argv[1], *cloud_blob);
 sensor_msgs::PointCloud2 output;
 pcl_conversions::fromPCL(*cloud_blob, output);
 ros::Rate loop_rate(10);
 while (nh.ok())
 {
   pub.publish (output);
   ros::spinOnce ();
   loop_rate.sleep ();
 }
}

Subscriber
void cloud_callback (const sensor_msgs::PointCloud2ConstPtr& cloud_msg){
 ROS_INFO("inside callback");
}

int main (int argc, char** argv) {
 ros::init (argc, argv, "cloud_sub");
 ros::NodeHandle nh;
 ros::Rate loop_rate(10);
 ros::Subscriber sub;
 while (nh.ok()) {
   sub = nh.subscribe ("input_cloud", 1, cloud_callback);
   ros::spinOnce ();
   loop_rate.sleep ();
 }
}

Originally posted by jhlim6 on ROS Answers with karma: 11 on 2016-02-04
Post score: 0

A:

The output of rostopic echo is likely to be OK. To be sure you can open Rviz and visualize the pointcloud. The subscriber declaration.
 sub = nh.subscribe ("input_cloud", 1, cloud_callback);
has to be done outside the while loop. Most likely this will fix your issue, as so far I do not see any other problem.
In fact, defining a rate in the subscriber does nothing helpful in this case. That is, you are executing your callbacks queue at 10 hz, but this frequency is already given by the publisher. Even if you have two publishers and only one subscriber, the 10 hz frequency will not be followed in the callback. Therefore, I would require as:
void cloud_callback (const sensor_msgs::PointCloud2ConstPtr& cloud_msg){
     ROS_INFO("inside callback");
}

int main (int argc, char** argv) {
     ros::init (argc, argv, "cloud_sub");
     ros::NodeHandle nh;
     ros::Rate loop_rate(10);
     ros::Subscriber sub;
     sub = nh.subscribe ("input_cloud", 1, cloud_callback);
     ros::spin();
 }

Originally posted by Javier V. Gómez with karma: 1305 on 2016-02-04
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by jhlim6 on 2016-02-10:
Hi, Its not obvious to me, but why does the ros subscriber fails in the while loop?
Comment by Javier V. Gómez on 2016-05-19:
@jhlim6 Because you are creating a new subscriber every iteration. AFAIK that is not impossible, it is just very bad practice. And sorry for the delay, I do not get notifications, I do not know why.

