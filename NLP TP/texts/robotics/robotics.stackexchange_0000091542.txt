Q:

Robot + Docker + ROS

Hello,
Currently I am working on a project which has following specifications:

A controllable robot base and
sensors
Velodyne LIDARS connected via Ethernet.
Few ros packages with a custom catkin workspace
Nginx webpage based robot controller

Now, for past few days, I am trying to dockerize my system. I have:

Created my own docker file from ros melodic base image which installs necessary packages.
Nginx setup using bridge network
Docker-compose file which opens up ports, mounts volumes and sets up networking mode as host\

Unfortunately, I am still very confused about how to tie everything together. In the tutorials, it is mentioned to create your own network, but I have ros messages coming from host machine (velodyne messages) and bi-directional flow of messages from web based controller. But if I opt for a default docker bridge network, the ros_master_uri is messed up. For easy access, "host" option seems the best, but it does not work well as you cannot use a ros master container. What is the correct way to configure such application?
Thanks,
Shreyas
Edit: Added Links, commented on "host" n/w

Originally posted by elementaryshr on ROS Answers with karma: 28 on 2019-04-30
Post score: 0

Original comments
Comment by gvdhoorn on 2019-04-30:\

In the tutorials, [..]

which tutorials?
Comment by elementaryshr on 2019-04-30:
This one. Related qn: is separate roscore docker container necessary?
Comment by fvd on 2019-05-01:
I run both roscore and nodes in the same docker container. I assume either way would work fine.

A:

But if I opt for a default docker bridge network, the ros_master_uri is messed up. For easy access, "host" option seems the best, but it does not work well as you cannot use a ros master container. What is the correct way to configure such application?

If you have containerized ros nodes that need to connect to other nodes outside the host machine, then provisioning your host's containers with the host network driver is perhaps the simplest method. Additionally, provisioning a container with the host network driver does not prevent you from running ros master from inside that same container. Infact, such may be necessary for other nodes outside the host machine to register themselves in the ros graph, that is if you'd rather not host the ros master process directly on the host OS or other machine on the accessible network.
See this previous answer for more details:
https://answers.ros.org/question/291568/docker-and-ros/

Originally posted by ruffsl with karma: 1094 on 2019-04-30
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by elementaryshr on 2019-05-02:
Thank you for the answer. After reading suggestions, I am going with following route: One roscore container, one ros application node container, and one nginx container (which, by the way, also has roslib js for communication with ros applicattion). Everything has     network_mode: "host".
The host does NOT have ROS.
Now, how to set ROS_MASTER_URI and ROS_HOST or ROS_IP environment variables at runtime when roscore sets this dynamically based on tag of the container. Or somehow I must configure it statically and then set it via docker-compose? (Even if don't use another container for roscore and use the application container itself, the ENV parameters need to be set in nginx)
Also, is it possible to trigger new docker containers based on inputs received in another docker container?
Comment by ruffsl on 2019-05-07:
That a big comment to unpack, perhaps best asked with a separate question, but for the environment variables, when using --net=host, the variables should be equivalent to just running ROS as if it were on the host.

