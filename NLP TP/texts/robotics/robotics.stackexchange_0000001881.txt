Q:

Should you learn assembly language for robotics?

I ask this since assembly language is really close to the micro-controller hardware, and what micro-controller would you reccomend.
The bot has to search for object that I show it before and then I 'lose' the object. Note, I do not know anything about micro-controllers.

A:

In general you don't need to learn assembly to be able to program a microcontroller. As long as you know C, it's enough for you.
Knowledge of assembly of course would help. Specifically, it would help in writing optimized code (or rather, not writing stupid code) as well as having a good estimate of how fast or slow a piece of code could be. Sometimes in very performance critical sections manipulating the assembly may also be needed, but again, in general you wouldn't be needing any of this.
Specially if you are a beginner.

Regarding microcontrollers, there is a wide variety of them, almost all of which are good and useful. Choosing a microcontroller really depends on what you want to attach to it and how complicated its software is going to be. With similar microcontrollers among different brands, I would personally pay attention to how well the microcontroller is documented and how good its compiler/IDE is. Little-explained data-sheet is a headache and a bad IDE an annoyance you don't want to deal with.

A:

This is one of those "open-ended" questions that the moderator doesn't like.  So I'm going to leave you with some short, general answers.  These are based on over 20 years in industry designing various bits of hardware and software for embedded systems:

Learning enough about microprocessors so that assembly language programming comes naturally will be a big plus, but is not necessary.  Just knowing assembly language programming for some processor or another because you've memorized it isn't going to be very useful.
There is no one microcontroller to recommend.  There is such a huge number of factors that come into play that the correct processor for your project could be anything from a slow 8051 clone to a super-fast bazzilion-core desktop processor with liquid cooling.

A:

The major disadvantage of assembly language is that it is different for each processor that you use.  Therefore there is a big learning curve whenever you change processor.
Clearly, if you only ever plan on using a single processor (or family of processors) then this is less of an issue; however, life is rarely that simple.
Equally, assembler allows you to really get things wrong, unless you are very careful. I speak as someone with lots of years commercial experience writing flight-critical assembly code!!
On the other hand, pretty much every processor comes with a suitable C compiler (as @Shahbaz suggests) and porting C from one processor to another is a lot more straightforward than porting assembler.
Unless you already have good assembler experience, I'd be minded to learn C, and leave assembly language for those (very rare) occurrences when C just isn't up for it.

As for which processor... how long is your piece of string?

