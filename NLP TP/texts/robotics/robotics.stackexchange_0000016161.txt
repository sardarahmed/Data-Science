Q:

GraphSLAM equation doubt

I have question about GraphSLAM implementation. 
To find out the path and map using GraphSLAM we rely on this equation:
$$\mu=\Omega^{-1}\xi$$ 
where $\Omega$ is our information matrix which determine the link between two nodes of graph and link between a landmark and a node. The $\xi$ vector give us the value of constraint between two consecutive robot pose or a robot pose and landmark. 
I want to clarify that why a matrix inversion multiplied by a vector give us path and map. What is the mathematical logic, algorithm or assumption behind this?
Is it related to Floyds' shortest path algorithm or any other graph based algorithm related to it?
For reference I studied The GraphSLAM Algorithm with Applications to Large-Scale Mapping of Urban Structures and listened to the lecture series of Udacity.
However, I cannot understand where this equation came from. Also, I have a little bit of doubt about implementing GraphSLAM in a real dataset for the huge dimension on $\Omega$ Matrix and its inversion. Is it possible for a 75000 dataset? 

A:

1) I believe the previous replies/comments already directed you to good online resources. I will just add some comments about the intuition behind the equations.
Putting aside SLAM, in general mathematics, I assume you have an understanding of what the covariance matrix $\Sigma$ represents for a multivariate Gaussian.
Now the information matrix is defined as its inverse:
$$
\Omega = \Sigma^{-1}
$$
and the information vector is defined as:
$$
\xi = \Sigma^{-1} \mu
$$
Note that these are mathematical definitions, you don't have to worry about the meaning of these quantities just yet.
From these definitions, you obviously get:
$$
\Sigma = \Omega^{-1}
$$
$$
\mu = \Omega^{-1} \xi
$$
Now what do these quantities represent in GraphSLAM? 
Remember that the objective of the GraphSLAM algorithm is to compute a Gaussian approximation of the posterior over the entire robot trajectory and the map. This gaussian approximation, like all gaussian distributions, has a mean $\mu$ and a covariance matrix $\Sigma$, which means that you can also define its information matrix $\Omega$ and information vector $\xi$ using the definitions above.
If you have $\Omega$ and $\xi$ you can get $\Sigma$ and $\mu$ (and vice-versa), it's as simple as that.
The real question is, why would you bother with the information form ($\Omega$ and $\xi$) instead of trying to find the mean $\mu$ and the covariance $\Sigma$ of your posterior directly?
Thrun answered this question previously, in 2002, when he published another algorithm, the Sparse Extended Information Filters (SEIFs). SEIFs was a variation of the Extended Information Filter (EIF), the dual of the very popular Extended Kalman Filter (EKF). The SEIFs paper showed that sparsity in the information form of the SLAM problem:
1) had a 'physical' meaning as a graphical network of locally-interconnected features (which is actually a Gaussian Markov Random Field), and 
2) enabled us to use well-known, highly efficient algorithms from linear algebra for matrix factorization.
I highly suggest that you check out the SEIFs paper - or section 3.4 of Probabilistic Robotics as others have suggested - if you want to understand the information form of SLAM.
Now GraphSLAM (2006) is very closely related to SEIFs, but it introduces several new things: 
1) it is an offline algorithm (estimates entire trajectory + map) instead of an online algorithm/'filter' (estimates current trajectory + map), 
2) after linearizing constraints, it uses a factorization trick (see Fig. 3 in the paper) to shift information between poses and features to information between pairs of poses. This gives you a new structure constraining poses only, making it easier to compute them. Once they are computed, the feature location are computed too, based on the original feature-to-pose information.
Regardless of the specificities of GraphSLAM, if you understand the information form of SLAM from SEIFs and you understand that GraphSLAM is offline instead of online, you should be able to understand $\mu = \Omega^{-1} \xi$.
2) Now on to your 2nd question regarding the dataset. By '75000 dataset' I suppose you mean a dataset of 75000 landmarks. By asking if it is 'possible' I am not sure whether your are concerned about the accuracy of the map, the computational complexity, or both?
Inverting a large $\Sigma$ matrix is what initially deterred people from investigating the EIF-route, until they figured out the inherent sparsity of the SLAM problem.
As I explained above, this sparsity allows for efficient matrix factorization.
Section 7 of the GraphSLAM paper has some quantified results that should answer your question. If not, please clarify.

