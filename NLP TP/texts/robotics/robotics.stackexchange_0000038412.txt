Q:

what is the best way to follow a moving target?

Hi there!
I am trying to make my robot to follow a moving target, using move_base. However, so far my results are very bad. If I use move_base default global planner, and even if the target moves very little, my robot seems to spend most of the time planning/replanning and pretty much does not move.
I tried to use other global planners as carrot_planner (the robot keeps turning around without following a path) and goal_passer (the robot turns around some times and move_base aborts saying it could not find a path).
Does anyone have any suggestions on how to use move_base to follow a target? The algorithm can be as dumb as it can get, I just need to move along with the target.
Thanks

Originally posted by Procópio on ROS Answers with karma: 4402 on 2012-03-02
Post score: 4

A:

move_base is a state-based controller. It has three states of operation: PLANNING, CONTROLLING, and RECOVERY. The problem that you're going to encounter in your application is that every time the target (the object being tracked) moves, move_base will re-enter the planning state, and it cannot drive in that state. It's unlikely that you'll be able to use move_base for this purpose.
It seems that what you're trying to do is similar to a visual servo. You want to publish motor commands that will keep you a certain distance from your target. It doesn't seem to me like this would require much path-planning. It might be solved using simple motor commands (drive forward, turn left, etc) and using the sensor data as feedback.

Originally posted by DimitriProsser with karma: 11163 on 2012-03-06
This answer was ACCEPTED on the original site
Post score: 8

Original comments
Comment by Pi Robot on 2012-03-06:
@Procópio Silveira Stein If you'd like some sample code to do the kind of visual servoing that @DimitriProsser describes, you might want to check out the TurtleBot follower program.  Assuming you have the turtlebot_apps stack installed, just do a 'roscd turtlebot_follower/src' and look at follower.cpp.
Comment by Procópio on 2012-03-06:
thanks for your suggestion @Pi Robot

