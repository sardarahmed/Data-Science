Q:

Do the calculations are processed on the server in python format?

I followed the official instructions to write simple Service Node, and I find there are some different places between C++ and Python formats.
In pyhton formats code of add_two_ints_client.py:
#!/usr/bin/env python

import sys
import rospy
from beginner_tutorials.srv import *

def add_two_ints_client(x, y):
    rospy.wait_for_service('add_two_ints')
try:
    add_two_ints = rospy.ServiceProxy('add_two_ints', AddTwoInts)
    resp1 = add_two_ints(x, y)
    return resp1.sum
except rospy.ServiceException, e:
    print "Service call failed: %s"%e

def usage():
     return "%s [x y]"%sys.argv[0]

if __name__ == "__main__":
if len(sys.argv) == 3:
    x = int(sys.argv[1])
    y = int(sys.argv[2])
else:
    print usage()
    sys.exit(1)
print "Requesting %s+%s"%(x, y)
print "%s + %s = %s"%(x, y, add_two_ints_client(x, y))

It seems that the addition is done within the client code:
add_two_ints = rospy.ServiceProxy('add_two_ints', AddTwoInts)
resp1 = add_two_ints(x, y)
return resp1.sum

But in C++ code it seems that the addition is done within the server and send the result back to the client. I will attach the link of the official tutorials: python service, c++ service. Is the python format code against Server/Client rule?

Originally posted by little_bob on ROS Answers with karma: 88 on 2019-02-18
Post score: 0

A:

But in C++ code it seems that the addition is done within the server and send the result back to the client.

Correct. That is how the service server & service client examples are set up.

Is the python format code against Server/Client rule? [..] It seems that the addition is done within the client code:

add_two_ints = rospy.ServiceProxy('add_two_ints', AddTwoInts)

resp1 = add_two_ints(x, y)
return resp1.sum

I can understand why you'd have the impression that add_two_ints(..) is executed on the client, but if you examine the server code carefully, you'll see the addition is actually performed by the server (from the tutorial you linked):
def handle_add_two_ints(req):
    print "Returning [%s + %s = %s]"%(req.a, req.b, (req.a + req.b))
    return AddTwoIntsResponse(req.a + req.b)

The "extra code" in the Python client example just wraps the following steps:

making sure the add_two_ints service exists and is available
creating the actual service client object (ie: ServiceProxy)
invoking the service
waiting for the result
returning the result
(optionally) handling errors (in this case simply printing the exception)

My guess is that the example author felt it would be cleaner to wrap all of that in a function, instead of placing all of those lines in the main() directly.

Originally posted by gvdhoorn with karma: 86574 on 2019-02-18
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by little_bob on 2019-02-18:
Got it, thank you for your reply. I wrongly thought that "add_two_ints(x,y)" is a method, actually, it is a service proxy object, just like the code in C++:client.call(srv).

