Q:

A strange problem about ros::init()

Hello! I encounter a really strange problem about ros::init(). I successfully compile the whole program, and of course the ros::init function is called at the first line of the "main program" as usual, then the creation of ros::NodeHandle is called. But when I run the program, the ros tells me that "You must call ros::init() before creating the first NodeHandle", then stops the program. And I also checked the related source code which says it is because the ros initiation fails (well, naturally), but why? Can anyone provide some clues? Really appreciate!

Originally posted by Mike Gao on ROS Answers with karma: 108 on 2012-02-09
Post score: 0

Original comments
Comment by dornhege on 2012-02-09:
Take the first/minimal example from the tutorials and that should work. You can compare it to your code and see what's different. Without any more information, people can just guess what you are doing.
Comment by DimitriProsser on 2012-02-09:
By "main program" do you mean main()?

A:

Do you have any ROS-related variables outside of main? For example, when I write a small node (too small be rolled up inside a class), I usually end up with global variables; main initializes them, and then my callback uses them.
But: global variables get constructed before main is called, so if you're using something that refers to a NodeHandle internally, you'll get this error. I almost always get it with tf::TransformListener, just because I forget that it's going to happen.
The solution is to store a pointer (I generally use a boost::shared_ptr<T>) to that object, not just a raw object, and then fill the pointer in in main after you call ros::init().

Originally posted by Mac with karma: 4119 on 2012-02-09
This answer was ACCEPTED on the original site
Post score: 9

Original comments
Comment by Proc√≥pio on 2012-03-02:
That is my problem. Can you give more details on your solution? Thanks.
Comment by Mac on 2012-03-02:
All of my ROS-aware global variables are declared as boost::shared_ptrs, rather than just objects; those pointers get set in main(), after ros::init().
Comment by 2ROS0 on 2014-11-25:
Could you provide a code sample? Thank you.
Comment by feixiao on 2015-08-31:
i tryed your suggessedboost::shared_ptr<Robot> tars(new Robot());it doesn`t work:^(

