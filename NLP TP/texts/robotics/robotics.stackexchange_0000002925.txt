Q:

Why does a ID controller not exist?

Why doesn't a PID only consisting of ID exist?

A:

You almost never see ID controllers because they generally don't do anything useful. Here is what they can do:
1) The D part will respond to changes in the system. It will try to correct and move the system back to 0, but once it reaches steady steady the D part is no longer active. Note that it does NOT matter where that steady state is; it could be 0 or 10 or 100.
2) Now imagine that the system is moving very slowly, so the D part is negligible. The I part will drive the integral of the error to 0. Again, this is NOT the same as driving the error to zero. Imagine the system is disturbed from 0 to -5. Now the integral will start to become negative and the controller will send positive commands. Once the system reaches 0 again, the integral is still negative so the controller is still applying positive commands and the system moves positive. Eventually the integral reaches zero but the system is now far into positive territory so the whole process repeats itself in the reverse.
Without P, the controller just doesn't reliably do what a control system is supposed to do: drive the error to 0.

A:

The short answer to this is that the P (Proportional) part of the PID controller is the base function of the controller and that the I (Integral) and D (Derivative) parts merely attempt to fix the very commonly encountered downsides of the P-only controller.
If we have a look at the general actuating force in the system - the motor or "actuator" the PID controls - the explanation becomes quite obvious. For the PID, the actuation is:
u = Kp*(e) + Kd*derivative(e) + Ki*integral(e)

where e is the error from the desired system position, and Ki, Kd and Kp are user-defined numbers. Now, imagine that the system indeed is in its desired position, meaning the error e=0; then u would also be zero! So, the question then becomes how to get u = 0 when the system is in the state we would like it to be in. This can explain why you typically only see P, PD, PI, or PID controllers used, because these combinations usually coincide with an actuation u=0 that gives the desired system state. There is, however, nothing wrong about the I, D, ID, or even ABC-controller - you can literally add any additional party to u that you find useful for the system you are working with. You could for instance say that
u  = 0,  if |e| < 5 and
u  = 1,  otherwise

which effectively would be a simple on-off switch like your typical thermostat.
Hope this help!

A:

While a simple D controller is merely useless for the reasons outlined by ryan0270 in his answer, there are cases where a simple I controller does perform perfectly well. It pretty much depends on the characteristics of the system we have to control.
Real Example Case
Stabilize the head motion of a humanoid robot by sending counter-velocity commands to the neck while we can sense velocity disturbances by means of a IMU device that are caused by the movements of the torso (or whatever disturbances, e.g. the robot can walk).
It comes out that the velocity response of the group Head+IMU when solicited by a velocity step can be described by the following second order under-damped process:
$$
G(s)=\frac{0.978}{1+2 \cdot 0.286 \cdot 0.016s+(0.016s)^2}e^{-0.027s}.
$$
Therefore, the goal is to design a controller that provides a sufficient counter-action in the following classical disturbance rejection diagram:

A I-only controller with gain $K_I=11$ (discrete controller running @ 100 Hz) suffices to accomplish the job making the closed-loop system Type I and performing great in real experiments. No need for P then.
This is shown in the plot below, where three system responses are drawn for three corresponding controllers counteracting a step-wise velocity disturbance. The proportional part starts becoming helpful only for very tiny value of the gain P. The integral part is dominant, doing almost all the task.

