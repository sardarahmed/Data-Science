Q:

ROS_INFO can't print a ROS message?

I just spent around almost 2 hrs trying to fix a problem, that didn't even exist in the first place. All because ROS_INFO was printing the wrong thing (essentially printing garbage) when I tried to do something like
std::string s = "..."
ROS_INFO("result: %s", s)

I had to print an std::string because I was trying to print a ROS message, which I had to parse myself, because I couldn't JUST PRINT THE MESSAGE:
void soemclass::jointPositionsCallback(const some_msgs::JointsPositions::ConstPtr& msg){
    ROS_INFO(msg); // <- COMPILE ERROR
}

Is there really no way to JUST PRINT THE MESSAGE? Why can't I just print the std::string as well?
I feel this should be so much easier.

Originally posted by db on ROS Answers with karma: 138 on 2020-08-14
Post score: 0

A:

The non-stream versions take C-style strings (a null terminated character array), so they work with something like this:
ROS_INFO("a c-style string");

If you want to print a std::string you can do it one of two ways:
ROS_INFO(s.c_str());  // this prints a C-style string
ROS_INFO_STREAM(s);

For your message, this should work:
ROS_INFO_STREAM(msg);

Originally posted by fergs with karma: 13902 on 2020-08-14
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by gvdhoorn on 2020-08-14:
Obligatory link to the wiki page: roscpp/Overview/Logging.
Comment by db on 2020-08-16:
Ok, I didn't know about the ROS_INFO_STREAM, thank you. Do you know if the ROS message objects have a built-in "to_string()" method?
Comment by db on 2020-08-16:
@gvdroorn I saw this documentation. But, as you can see, I just wanted to make a simple logging of an std::string and a ros message. This is a very complicated documentation for such a basic function, and the documentation doesn't even mention the supposedly correct method to do this, which is ROS_INFO_STREAM(). The purpose of this question is also to bring awareness to this issue, these little things make ROS unnecessarily hard to use.
Comment by fergs on 2020-08-17:
Yes, the ROS messages have a "<<" operator, which is how streams work.

