Q:

ros2 how to get non-ros parameter argument count

I have code like:
int main(...)
{
   rclcpp::init(argc, argv);

   if(argc != 3) {
      printf("Error, missing arguments for a, b\n");
 }
...

The problem with this is that when using launch_testing.launch_test, or any launch file and specifying arguments for my application, these tools/libraries are adding extra parameters like:
mcu_sim_test 20 -50 --ros-args -r __node:=test -r __ns:=/mcu_sim_namespace

These additional --ros-args are throwing off the argument counts even though they aren't being used by my package but rather used by ros2.
I did see that this is an intentional change from ros1 where the argc/argv were being altered and that makes a ton of sense. Where I'm stuck is how to address it.

Originally posted by cmorgan on ROS Answers with karma: 35 on 2020-04-08
Post score: 2

A:

For rclcpp, in #include <utilities.hpp> you have the following two functions that return a std::vectorstd::string with the argv trimmed down of any ROS arguments:
std::vector<std::string>
init_and_remove_ros_arguments(
  int argc,
  char const * const * argv,
  const InitOptions & init_options = InitOptions());

and:
std::vector<std::string>
remove_ros_arguments(int argc, char const * const * argv);

In python rclpy, you have args = rclpy.utilities.remove_ros_args(sys.argv) which does the same thing.

Originally posted by guru_florida with karma: 280 on 2022-02-10
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by guru_florida on 2022-02-10:
I know this is a reply to a 2yo question, but it's worthy of an answer. :)

