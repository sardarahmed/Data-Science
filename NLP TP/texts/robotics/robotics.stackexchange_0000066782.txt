Q:

Why prefer to use uvc_camera instead of cv::Capture when working with OpenCV?

Hi!
ROS offers its own way of grabbing data from cameras (for example: a normal web cam most of us have integrated in our notebooks) using the uvc_camera driver. Now I'm not asking why use this at all. I'm simply curious when exactly should I use it? Imagine you have a web cam and the first thing you want to do with the image data from it is to process it with OpenCV and then publish it to the rest of the running ROS nodes in the system. This means that no other node except the one running with OpenCV in it has access to the camera hence why would I go in this case first for uvc_camera and then for the cv::Mat format, which is required for OpenCV? Note that in the situation above I presume that OpenCV supports capturing from the device and also have in mind that I'm not asking about image_transport, which has the role of hiding the complexity of transferring images between nodes (subscriber/publisher for example) and is not directly responsible for the capturing of data from the device.
Thanks!
RB

Originally posted by rbaleksandar on ROS Answers with karma: 299 on 2015-04-01
Post score: 0

A:

If you separate your camera driver and the image processing into two nodes (as i think it's the most common pattern when using ROS) you can e. g. record the images of your camera driver into a ros bag file and then replay the recorded images for testing your image processing algorithm as often as you like without having to be connected to any physical camera device/robot hardware. The main advantage of using ros for such approach is that for your processor node it will be completely transparent from where the images are coming (rosbag/real camera/whatever). You do not have to change any line of code in your processor node for running it with rosbag or with the camera driver.
The drawback of two nodes is of course that the image data will be copied when it is published from driver to processor node. This might have some computational costs, exp. for images at high resolution/frame rate. But you can even overcome this problem if you put your driver and processor into nodelets (http://wiki.ros.org/nodelet) and use shared_ptrs when for the publish/subscribe methods/calbacks. This implements separable code without unrequired copies.

Originally posted by Wolf with karma: 7555 on 2015-04-14
This answer was ACCEPTED on the original site
Post score: 2

