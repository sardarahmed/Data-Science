Q:

Getting a Node::SharedPtr from "this"

A number of functions expect a rclcpp::Node::SharedPtr, but when you are in an rclcpp::Node subclass it is not available, and of course something like foo(rclcpp::Node::SharedPtr(this)); is a great way to crash your program. Is there some registry of these SharedPtrs to query?

Originally posted by KenYN on ROS Answers with karma: 541 on 2020-06-02
Post score: 3

A:

rclcpp::Node inherits from std::enable_shared_from_this<>. You can get a shared pointer to a node by calling shared_from_this() in your subclass. There's more info about std::enable_shared_from_this<> here.

Originally posted by sloretz with karma: 3061 on 2020-06-02
This answer was ACCEPTED on the original site
Post score: 7

Original comments
Comment by jdlangs on 2020-06-08:
An important caveat is you can't call shared_from_this in your class's constructor because the object doesn't yet fully exist to make a shared_ptr from. There you can only use APIs that use either a raw pointer or individual node interfaces.
Comment by swiz23 on 2023-03-06:
I realize this thread is old, but what is the reason you can still do this->create_publisher<std_msgs::msg::String>("topic", 10); in the constructor? Wouldn't the same reason - that the object doesn't fully exist yet - still apply?
Comment by jdlangs on 2023-03-13:
@swiz23 Looks like I phrased it badly. The object does exist from the time the constructor body starts since initialization is completed at that point. But shared_from_this requires a shared_ptr to already be managing the object and that won't be created until after the constructor returns (assuming you're using something like make_shared).

