Q:

Calculating Error of Arm Manipulator

How can we calculate the error position of arm manipulator?
Let's say we have a Transformation Matrix:
$$\begin{bmatrix}
R_{00} & R_{01} & R_{02} & x\\ 
R_{10} & R_{11} & R_{12} & y\\ 
R_{20} & R_{21} & R_{22} & z\\ 
0 & 0 & 0 & 1
\end{bmatrix}$$
and target Position: x', y', z'.
I've found out the error for x, y, z is:
$$\epsilon_x = x-x' \\
\epsilon_y = y-y' \\
\epsilon_z = z-z'$$
From a reference I found, the position error is:
$$\epsilon = \sqrt{(x-x')^2 + (y-y')^2 + (z-z')^2}$$
Is this the correct formula to find position error? I may be confusing it with Root Mean Square Error/Standard Deviation from statistical methods.

A:

The interpretation of error for a robot manipulator pose is subjective in terms of what is the error being used for. A robot manipulator pose is combination of both position (x, y, z) and the orientation (quaternions or euler angles) and thus, designing the error could partially or completely include all terms. 
Your representation of error is essentially scalar Euclidean distance for robot pose, acceptable for tasks where the orientation of the end-effector is not important. These applications are very few and a general example would be planar robots like the SCARA. It could also be useful in cases where the error is to be decoupled(position and orientation errors are differently analyzed/).
In a lot of cases, the error is left as a vector representation instead. That allows for tracking attempts are made for all individual directions. 
Error = [(x-x') (y-y') (z-z')]'
The current scalar representation fails to convey the actual information. It could be misleading where a deviation of 1 cm along all individual axes would result in a error of 1.73205081 cm which would be equivalent to the error that a deviation of 3 cm along the one of the axes would result in. The former sounds acceptable for pick and place task because there would be some tolerance in all directions while the latter means there needs to be considerably larger tolerance.
I would propose decoupled vector representation of position and orientation error in the robot pose.

