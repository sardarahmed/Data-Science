Q:

Custom rosdep.yaml in my package

Hey ROS geeks, I have a custom dependency (in my case acpi) which is not available in the public rosdep rules.
So I found this page: http://wiki.ros.org/rosdep/rosdep.yaml , which says every package can have its own rosdep.yaml file which will be used to satisfy dependencies in its package.xml.
So I added a rosdep.yaml file in catkin_ws/src/my_package/rosdep.yaml, ran rosdep update. However, rosdep resolve acpi tells me it can't find any satisfying rosdep rule for acpi (I run it in a ROS-enabled terminal).
Is there something more needed to do to have it working?
NB: Adding a link to /etc/ros/rosdep/sources.list.d is not an option for me, since I want the package to work "out of the box" when someone clones the repo and calls rosdep-update; rosdep install --from-paths src -i.
Thanks for advices.

Originally posted by peci1 on ROS Answers with karma: 1366 on 2015-04-24
Post score: 2

Original comments
Comment by gvdhoorn on 2015-04-24:
Not a real answer, but is there anything preventing you from contributing the rules for acpi to the main repository?
Comment by peci1 on 2015-04-24:
I can imagine some of our custom dependencies could go in the public list, but I'm not sure it'd be wise to add all of them (since we're not going to release our codes in the upcoming year or two, and a lot of things can change in the end and the dependecies can change or disappear).

A:

That page was out of date. Please see the documentation here: http://docs.ros.org/independent/api/rosdep/html/contributing_rules.html
It used to be that you could add rosdep.yaml files in your source space, but because rosdep is a system wide setting we don't support source space modifications any more. The above link tells you how to setup a custom source.

Originally posted by tfoote with karma: 58457 on 2015-04-24
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by peci1 on 2015-04-25:
Don't tell me it's gone :( It still seems to me being able to specify the rosdep rules directly in you ROS package's source would be of some use. Anyway, rosdep makes use of catkin to resolve dependencies in your workspace, so why couldn't it also read rosdep.yaml files in the packages?
Comment by tfoote on 2015-04-25:
It is convenient, however it leads to unresolvable conflicts. If two local packages define a rosdep which is either in conflict or incompatible you can get a workspace which cannot be built.
Comment by peci1 on 2015-04-26:
Well, it seems like I have to accept this new way rosdep works. Just out of curiosity - are the conflicting rosdeps a real use-case you've faced, or is it just theoretical?
Comment by tfoote on 2015-04-26:
The conflicting rosdep rules were a very real problem, especially picking versions of packages or libraries. This was a while ago and even within the Willow Garage development teams we had trouble.
Comment by peci1 on 2015-04-27:
And what about the option to provide a bash script instead of package name? Has it also been removed? I tried it right now and it doesn't seem to be working
Comment by peci1 on 2015-04-27:
Ahh, I see I can "misuse" the source installer by creating an rdmanifest file and pointing to it. Great.

