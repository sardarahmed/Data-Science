Q:

Accessing layers in Velodyne Point cloud

Hi,
Is it possible to access layer by layer scans from velodyne HDL 32-E sensor.
If no, Is there any other way round about way to get this functionality ?

Originally posted by sai on ROS Answers with karma: 1935 on 2014-02-24
Post score: 2

A:

By "layer" I suppose you mean the points associated with each of the 32 individual lasers.
The velodyne_pointcloud package reports the source of each point as a "ring number", using a sequential numbering of the lasers from 0 (lowest) to 31 (highest). For details, see my answer to this question.
EDIT: The velodyne_pointcloud package provides several nodes and nodelets for transforming raw data packets into a point cloud containing PointXYZRI with X, Y, Z, ring number, and intensity.
There is also a simple class which reads the point cloud and colors the points according to ring number, useful for visualization. Its message callback shows how to read the data and access the ring number of each point.
EDIT2: You can transform the point cloud for a single revolution into an organized 32xN cloud based on ring number, if you want. But, I don't see much advantage to doing that if the device is moving and the points are being transformed into the odom frame of reference.

Originally posted by joq with karma: 25443 on 2014-02-25
This answer was ACCEPTED on the original site
Post score: 4

Original comments
Comment by sai on 2014-02-25:
Thats exactly what I am looking for, but  i m not able to figure how to convert the sensor_msgs::PointCloud2 to pcl::PointXYZIR format.
Comment by sai on 2014-02-27:
Thanks for the edit, I was able to get access to each ring. I was thinking of creating a organized point cloud from velodyne. Accessing ring information will give the vertical relationship but how can i get the horizontal relation b/w the points in each ring ? Or can I have a buffer to accumulate rings and then just stack them ? Please correct me if I am wrong
Comment by joq on 2014-02-28:
Not sure what buffer you have in mind. You can use normal PCL operations to extract points from a cloud or combine multiple clouds. The 3D Euclidean distance between pairs of points is computed in the usual fashion.
Comment by mayuzumi on 2017-02-02:
Using a vector of pcl::PointCloud pointers should be a good way to accumulate the points of each ring.
Comment by joq on 2017-02-04:
Agreed, @mayuzumi, thanks!

