Q:

specific odom frame responsibility

I am trying to understand the responsibility I have with regards to publishing the odom TF frame.  Specifically, we have a mobile robotic system that is intended to (and does) operate via ROS and are finalizing complete robotic control stack.
There is a lot written (and have read/reread) about the map --> odom --> base_link relationship.  I understand that the odom frame is 1) where the robot starts in a map and 2) can "drift."   But what I would like to understand is what, specifically, needs to be/should be done programatically to move the odom frame as my robot progresses.   It seems to be my responsibility to translate what is going on into this "drift", and thus, I should publish a map->odom->base_link transform tree and should be "drifting" the odom frame?  But how should this be done?  Move it where and by how much relative to the uncertainty?  Or am I not understanding: I often read that it is the localization nodes that publish the map->odom relationship.
(it also seems strange to me that, if I understand correctly, I am to drift the odom transform which is where the robot starts as opposed to base_link, where it is presently)
I understand that wheel odometry error and uncertainty accumulates as the robot moves and I too understand how calculate and keep track of that uncertainty.  Again, seeking clarification on what one is supposed to do with that knowledge with regards to moving the odom frame?  Where do I move it and by how much?
(Most of what is written on the subject [and there is a fair amount] is helpful if you are writing a client or trying to get a platform performing SLAM in gazebo, but it isn't clear how it is supposed to work if you are authoring the actual controlling components and stack. Have read rep 105, and all postings I can find on ROS answers, but would greatly appreciate some clarification.)

Originally posted by codenotes on ROS Answers with karma: 261 on 2015-12-15
Post score: 8

A:

I'll try to answer your remaining question from your comment:

The only question that remains is this; a localizer will reposition/move the odom->base_link tree branch by placing it in the "correct" position in the map...but how does it position this branch exactly? Does it place the base_link on top of the corrected pose and odom shifts accordingly?

So a localization node like amcl typically localizes the base_link frame (or internally possibly directly a sensor frame such as laser_link instead), so lets assume for a time-stamp t (e.g. the laser message time stamp) it has computed the transformation map -> base_link. It then can look up the corresponding odometry estimate from tf as the odom -> base_link transformation at time t. By computing map -> odom = (map -> base_link) x inverse(odom -> base_link) it knows what to publish to tf as the map -> odom transformation.
You can think of map -> odom as the correction of the dirft of the odometry. Initially, when the robot is just starting and odom -> base_link is 0 (identity transformation), it simply corresponds to the starting position of the robot, which is the initial offset of odometry (which typically always starts with 0). As the robot moves, the odometry computed e.g. from wheel encoders accumulates error over time, i.e. odom -> base_link does not correctly estimate the robot position relative to the starting position, but rather drifts away from the correct value more and more. Localization algorithms such as amcl that reference the robot absolutely with respect to a map do not have this unbound dirft, so in each step they correct for the odometry drift by adjusting map -> odom a little more. In other words, map -> odom changes in correspondance to your odometry drift. The overall result is that combined transformation map -> odom -> base_link corresponds to the correct robot pose with respect to the map. The intermediate frame odom may drift away more and more, but until you eventually run into numerical issues, it does not matter, since any other nodes that want to know the true position of your robot will look up map -> base_link from TF and nodes that need a smooth relative estimate of the robot motion can observe how odom -> base_link changes over time.

Originally posted by demmeln with karma: 4306 on 2015-12-15
This answer was ACCEPTED on the original site
Post score: 7

Original comments
Comment by codenotes on 2015-12-16:
Got it, have complete understanding now.  Thank you sincerely.
Comment by demmeln on 2015-12-16:
Sure thing. Maybe you could mark one of the answers as accepted, such that it is clear to everyone that this is solved?
Comment by Will Chamberlain on 2017-03-19:
Better summary than the tutorials, I think.

