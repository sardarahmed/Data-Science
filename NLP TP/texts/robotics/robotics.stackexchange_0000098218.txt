Q:

Motion performance between fanuc_driver/fanuc_driver_exp vs offline trajectory generation

Hi,
We are using a Fanuc robot model for dense cartesian trajectories.
I have read a few topics to understand what would be the best way to interface with ROS to do that (#q299442, #q291577 and gavanderhoorn/fanuc_driver_exp#18), but I need some clarifications on the difference between using fanuc_driver or driver_exp and generating a TP program with an offline post-processor.
From what I understood, motion performance using fanuc_driver or fanuc_driver_exp is lower because they use position streaming, so the robot velocity is fixed by the robot controller and there is no "look-ahead" functionality. Is this the only reason?
Generating the TP program offline will still result in keeping the CNT vs accuracy limitation as far as I understand, but could this limitation be removed some other way?
Thanks for the clarification

Originally posted by dq18 on ROS Answers with karma: 15 on 2021-02-05
Post score: 1

A:

First: let me start by saying this answer is based on my personal understanding, which is based on a few years of experience with Fanuc robots and writing external trajectory generation programs (or drivers) for them. I could be completely wrong, or have misunderstood some critical aspect of how they work. Keep that in mind when reading this.

From what I understood, motion performance using fanuc_driver or fanuc_driver_exp is lower because they use position streaming, so the robot velocity is fixed by the robot controller and there is no "look-ahead" functionality.

The 'fixed velocity' is not really a result of position streaming, it's just how fanuc_driver was implemented. fanuc_driver_exp does pass on velocities (or segment durations) to the Fanuc controller.
The biggest problem with the available implementations is the lack of look-ahead (or: both implementations deprive the controller of the possibility to use its look-ahead functionality, as it only ever has a single PR which is also constantly updating).

Is this the only reason? Generating the TP program offline will still result in keeping the CNT vs accuracy limitation as far as I understand

Whatever interface you use, as long as you use TP programs, there will always be the smoothness vs accuracy problem.
You can mitigate it somewhat by using CR termination types instead of CNT, as the former allows you to specify a radius instead of a percentage, but that is not supported by default in either fanuc_driver or fanuc_driver_exp (there is a branch in fanuc_driver_exp which was the result of some testing, see gavanderhoorn/fanuc_driver_exp@linear_support, which uses CR, but there is still no look-ahead (note: you cannot use the regular industrial_robot_client nor fanuc_driver nodes with that branch, as it uses a custom message type)).

could this limitation be removed some other way?

If "this limitation" refers to the smoothness vs accuracy then fundamentally all (industrial) robots suffer from this problem: smooth motions require continuity (up to the Nth derivative) so with sparse trajectories, you must introduce some form of cornering/blending/rounding (the robot cannot change direction instantaneously). Planners which are capable of taking jerk constraints (for instance) or higher into account and produce dense trajectories might get away with very little blending, but it'll probably still be there/necessary.
Off-line generation of TP programs is not inherently any better. It will however allow the controller to fully use look-ahead, which will improve motion smoothness. Dense trajectories will still slow-down the controller.
With newer controllers and the newest software versions, you have some alternatives to full off-line-and-upload approaches:

J519 (or Stream Motion): this is a real-time external motion interface which gets you 125 Hz joint and Cartesian position control over a UDP connection. Requires a real-time system and is difficult to buy from Fanuc (except in the US)
R912 (or Remote Motion Interface): this is essentially a drip-feed for TP programs. Look-ahead works, but same smoothness-vs-accuracy with CNT termination. Main advantage: unlimited program length and programs can be generated on-the-fly
use the spline motions on V9.30 and up: Fanuc added support for spline motions in V9.30 system software, which is a different interpolation method (from J and L). Instead of considering only the current and next (and next) point, spline motions allow for the definition of trajectories. You essentially control the control points of a spline which runs through all the trajectory points added to it

The first allows closed-loop control applications over Fanuc hardware (in the traditional sense of the word, ie: real-time closed-loop in the millisecond range).
The second not really: minimum motion length is 40 ms and there is a minimum queue depth (due to look-ahead requirements).
The third is different from the first two in that it's not an external interface, but it does affect motion performance: the controller should do much better with dense trajectories as it considers the spline and not the individual trajectory segments when interpolating.
ROS support for the first two options is limited. Or at least: support in publicly available packages is limited.
I've not tested spline motions in a ROS context yet.

Originally posted by gvdhoorn with karma: 86574 on 2021-02-05
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by gvdhoorn on 2021-02-05:
Note: there isn't really anything ROS specific here. Any software using any of the available motion interfaces to Fanuc controllers should run into the same limitations/problems/performance issues.
Comment by dq18 on 2021-02-05:
Very detailed answer as usual. Thanks for that! I am trying to find which industrial robot brand would give less difficulty to use in our application, so your answer definitely helps.
I am in China, so I am expecting even less support from Fanuc concerning the J519 and R912 interfaces, but will try and see with them.
I am leaving this thread open for a bit longer, in case someone wants to add something or his/her personal opinion
Comment by gvdhoorn on 2021-02-28:
So what did you end up using/trying?
Comment by dq18 on 2021-03-01:
We are just using fanuc_driver for now and testing offline TP generation. I would like to test with J519 as we have the option but I need to do some more research before
Comment by robertdagenais on 2021-12-14:
I'm interested in knowing what the results/findings of your tests yielded. Any updates would be appreciated dq18, thank you.
Comment by dq18 on 2021-12-17:
The main finding is that Fanuc is not great for this kind of project :)
We could not access J519 so we ended up using offline planning with a post-processor, similar to link text, but repurposed to our needs. That gave the best motion performance when motion is cartesian.
To get a kind of "control" loop (i.e. reading stuff from the controller), we were using fanuc_driver_exp mostly for reading robot state and dominh.
We eventually switched to ABB after pushing for months, but I left the project before I could see how much better it is.
Comment by robertdagenais on 2022-01-06:
Thanks for the update dq18!

