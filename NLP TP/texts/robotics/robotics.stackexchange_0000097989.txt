Q:

ZeroDivisionError: float division by zero

How to fix this issue.
I followed this video here
This full code:
#!/usr/bin/env python
import rospy

from std_msgs.msg import String

rate1 = 30
rate2 = 1
msg1 = "30 hz"
msg2 = "1 hz"

def callbsck1(event):
  pub_1.publish(msg1)

def callbsck2(event):
  pub_2.publish(msg2)

if __name__ == '__main__':
  rospy.init_node('async_publish')
  pub_1 = rospy.Publisher ('topic1', String, queue_size=10)
  pub_2 = rospy.Publisher('topic2', String, queue_size=10)
  rospy.Timer(rospy.Duration(1/rate1), callbsck1)
  rospy.Timer(rospy.Duration(1 / rate2), callbsck2)
  rospy.spin()

This error:
Exception in thread Thread-5:
Traceback (most recent call last):
  File "/usr/lib/python2.7/threading.py", line 801, in __bootstrap_inner
    self.run()
  File "/opt/ros/kinetic/lib/python2.7/dist-packages/rospy/timer.py", line 221, in run
    r = Rate(1.0 / self._period.to_sec(), reset=self._reset)
ZeroDivisionError: float division by zero

Originally posted by Redhwan on ROS Answers with karma: 73 on 2021-01-07
Post score: 0

A:

Python 2 treats the division operator / differently, depending on the operands. If both operands are integers (this is what you have here with 1 and 30) it is an integer division (and float division, if one of the operands is a float).
Integer division only returns the "integer" part, the fractional part is discarded. Thus, you'll end up with 1/30=0.
(In Python 3, / is always float division. // is integer division)
There are multiple ways to fix this:

make at least one of the operands a float by adding a dot, i.e. 1.0, 30.0 or even 1. or 30.

cast one of the operands explicitly to float: float(1), float(30)

"activate" the Python 3 behavior of having / always as float division using a future import
 from __future__ import division

(Note that  __future__ imports have to come before any other import statement)

Originally posted by mgruhler with karma: 12390 on 2021-01-07
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by Redhwan on 2021-01-07:
Thanks, it is fine now

