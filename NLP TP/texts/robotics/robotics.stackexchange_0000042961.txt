Q:

What's difference between rosrun and register_ros_package?

I followed knowrob tutorials KnowRob basics and Computables.
The way to use rosrun is:
  rosrun rosprolog rosprolog mod_vis
  ?- register_ros_package(ias_semantic_map).

The way to use register_ros_package:
  rosrun rosprolog rosprolog ias_semantic_map

I know the second way can use something like this
  rdf_triple(knowrob:'on-Physical', Top, Bottom).

But what's the major difference idea between them?
Thank you~

I run:
  sam@sam:~/code/ros/test$ rosrun rosprolog rosprolog ias_semantic_map
  % library(swi_hooks) compiled into pce_swi_hooks 0.00 sec, 3,616 bytes
  %     library(error) compiled into error 0.00 sec, 17,688 bytes
  %    library(lists) compiled into lists 0.00 sec, 41,424 bytes
  %   library(shlib) compiled into shlib 0.00 sec, 62,200 bytes
  %   library(option) compiled into swi_option 0.01 sec, 15,080 bytes
  %  library(process) compiled into process 0.01 sec, 93,400 bytes
  % /opt/ros/electric/stacks/knowrob/rosprolog/prolog/init.pl compiled 0.01 sec, 100,848 bytes
  %     library(jpl) compiled into jpl 0.01 sec, 285,496 bytes
  %         library(sgml) compiled into sgml 0.00 sec, 38,464 bytes
  %           library(quintus) compiled into quintus 0.00 sec, 21,384 bytes
  %          rewrite compiled into rewrite 0.00 sec, 34,768 bytes
  %          library(uri) compiled into uri 0.01 sec, 10,880 bytes
  %          library(record) compiled into record 0.00 sec, 31,072 bytes
  %         rdf_parser compiled into rdf_parser 0.01 sec, 161,832 bytes
  %          library(gensym) compiled into gensym 0.00 sec, 4,432 bytes
  %         rdf_triple compiled into rdf_triple 0.00 sec, 37,192 bytes
  %        library(rdf) compiled into rdf 0.01 sec, 271,360 bytes
  %         library(debug) compiled into prolog_debug 0.00 sec, 21,320 bytes
  %         library(assoc) compiled into assoc 0.01 sec, 22,640 bytes
  %        library(sgml_write) compiled into sgml_write 0.01 sec, 105,272 bytes
  %        library(nb_set) compiled into nb_set 0.00 sec, 5,968 bytes
  %         library(utf8) compiled into utf8 0.00 sec, 14,112 bytes
  %        library(url) compiled into url 0.00 sec, 113,584 bytes
  %        rdf_cache compiled into rdf_cache 0.01 sec, 15,904 bytes
  %       library(semweb/rdf_db) compiled into rdf_db 0.03 sec, 681,176 bytes
  %      comp_similarity compiled into comp_similarity 0.03 sec, 708,664 bytes
  %     /opt/ros/electric/stacks/knowrob/ias_prolog_addons/prolog/init.pl compiled 0.03 sec, 709,544 bytes
  %      library(broadcast) compiled into broadcast 0.00 sec, 7,344 bytes
  %     library(semweb/rdf_edit) compiled into rdf_edit 0.01 sec, 86,744 bytes
  %     library(semweb/rdfs) compiled into rdfs 0.00 sec, 25,992 bytes
  %     library(semweb/owl) compiled into t20_owl 0.01 sec, 68,496 bytes
  %       library(socket) compiled into socket 0.00 sec, 10,232 bytes
  %       library(base64) compiled into base64 0.00 sec, 17,400 bytes
  %      library(http/http_open.pl) compiled into http_open 0.00 sec, 77,136 bytes
  %     library(thea/owl_parser) compiled into owl_parser 0.01 sec, 156,080 bytes
  %      library(odbc) compiled into odbc 0.00 sec, 37,344 bytes
  %     library(semweb/rdfs_computable) compiled into rdfs_computable 0.01 sec, 87,536 bytes
  %    /opt/ros/electric/stacks/knowrob/semweb/prolog/init.pl compiled 0.10 sec, 1,475,208 bytes
  %        library(tf_prolog) compiled into tf_prolog 0.00 sec, 19,296 bytes
  %       /opt/ros/electric/stacks/knowrob/tf_prolog/prolog/init.pl compiled 0.00 sec, 20,424 bytes
  %        library(knowrob_owl) compiled into knowrob_owl 0.00 sec, 13,512 bytes
  %        library(knowrob_perception) compiled into knowrob_perception 0.01 sec, 22,128 bytes
  %       library(knowrob_objects) compiled into knowrob_objects 0.01 sec, 77,472 bytes
  %       library(knowrob_coordinates) compiled into knowrob_coordinates 0.01 sec, 18,048 bytes
  %      /opt/ros/electric/stacks/knowrob/knowrob_objects/prolog/init.pl compiled 0.02 sec, 128,384 bytes
  %      library(owl_export) compiled into owl_export 0.00 sec, 23,096 bytes
  %     /opt/ros/electric/stacks/knowrob/knowrob_common/prolog/init.pl compiled 0.03 sec, 163,632 bytes
  %     library(knowrob_actions) compiled into knowrob_actions 0.00 sec, 12,488 bytes
  %    /opt/ros/electric/stacks/knowrob/knowrob_actions/prolog/init.pl compiled 0.03 sec, 187,504 bytes
  %     library(util) compiled into util 0.00 sec, 27,328 bytes
  %    library(classifiers) compiled into classifiers 0.00 sec, 47,864 bytes
  %    library(jython) compiled into jython 0.01 sec, 24,256 bytes
  % Parsed "owl.owl" in 0.00 sec; 169 triples
  % Parsed "rdf-schema.xml" in 0.00 sec; 87 triples
  % Parsed "knowrob.owl" in 0.08 sec; 3,721 triples
  %   /opt/ros/electric/stacks/knowrob/ias_knowledge_base/prolog/init.pl compiled 0.77 sec, 3,506,928 bytes
  % Parsed "comp_temporal.owl" in 0.01 sec; 164 triples
  %    library(comp_temporal) compiled into comp_temporal 0.60 sec, 344,904 bytes
  %   /opt/ros/electric/stacks/knowrob/comp_temporal/prolog/init.pl compiled 0.76 sec, 495,768 bytes
  % Parsed "comp_spatial.owl" in 0.02 sec; 459 triples
  %   library(comp_spatial) compiled into comp_spatial 0.23 sec, 371,056 bytes
  %  /opt/ros/electric/stacks/knowrob/comp_spatial/prolog/init.pl compiled 1.94 sec, 4,540,456 bytes
  %   library(semweb/actionmodel) compiled into actionmodel 0.00 sec, 106,752 bytes
  % Parsed "ccrl2_semantic_map.owl" in 0.04 sec; 2,226 triples
  %  ccrl2_semantic_map compiled 0.61 sec, 1,038,040 bytes
  %  semantic_map_utils compiled into ias_semantic_map 0.00 sec, 15,136 bytes
  % /opt/ros/electric/stacks/knowrob/ias_semantic_map/prolog/init.pl compiled 2.55 sec, 5,599,600 bytes
  ?- visualisation_canvas(C).
  ERROR: toplevel: Undefined procedure: visualisation_canvas/1 (DWIM could not correct goal)
  ?-                                                            

Originally posted by sam on ROS Answers with karma: 2570 on 2012-08-06
Post score: 0

A:

Both methods add the project directory to Prolog's library search path and load the prolog/init.pl file inside the respective package.
rosrun is a shell command that you call from e.g. your Bash shell. It starts Prolog and initially loads the init.pl of the package you give as argument, which then recursively loads all init.pl of all dependencies.
Once you have started a Prolog shell, you can use register_ros_package (which is a Prolog predicate, no shell/bash command) to load additional packages.
In the examples you gave, mod_vis and ias_semantic_map are independent of each other (none of them depends on the other). You therefore can't load both with a single command but have to load one first and then the other.

Originally posted by moritz with karma: 2673 on 2012-08-06
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by sam on 2012-08-06:
If two way both can load ias_semantic_map, why the way which use rosrun couldn't run visualisation_canvas? I have edited on the orginal post. Thank you~
Comment by moritz on 2012-08-06:
You either need to use
$ rosrun rosprolog rosprolog mod_vis
  ?- register_ros_package(ias_semantic_map).
or 
  $ rosrun rosprolog rosprolog ias_semantic_map
?- register_ros_package(mod_vis).
Comment by moritz on 2012-08-06:
You can check with rospack, neither package depends on the other one, so neither will be initialized if you launch KnowRob with the other one as argument. You need to load the package you haven't use as argument to rosprolog manually using register_ros_package.

