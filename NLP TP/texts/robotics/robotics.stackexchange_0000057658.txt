Q:

Custom robot and ROS

Hello,
My question is kind of really general in some sense but I don't think it's an endless question.
I'm currently trying to build a custom robot similar to a turtle bot and I'm thinking about having ROS onboard, having heard  lot of good things about it. So I'm fairly familiar with how everything is working but some stuff don't really make sense to me. For exemple it seems to be a pain to have ROS running on a custom robot which limit a lot its use from my point of vue.
It is really hard to find information about start from scratch a robot with ROS for example and it seems really complicated to build from scratch something especially because of the motor part. So, either you use what is already available or it feels to me that the other choice is pretty much like building everything again but just following a certain "convention".
I see no way to reuse ROS code on a custom robot. I can just see way of adding sensor, encoder and stuff on an already on ROS robot. And when I search how to build ROS on a custom robot, I can not find any clear information on what to do or where to start.
I'm pretty sure my conception is wrong and I'm just waiting for someone to prove me wrong. I've been reading a lot about ROS those day and my head is full of new stuff so I might be confusing everything.
So in the end my question would be : is there an "easy way" to put ROS on a custom robot or does it has to be a painful process ? Am I missing something or is it just not in ROS philosophy ?
I'm sorry if I'm not really clear or if does not really make sense. Just tell me and I'll try to reformulate it.

Originally posted by Maya on ROS Answers with karma: 1172 on 2014-03-04
Post score: 0

A:

Is there an easy way to put ROS on a
custom robot?

It depends what you are comparing it to... Creating a robot from scratch is not easy, no matter what software you use. You will have to write drivers for your actuators and sensors anyway.
At least ROS gives you:

good design conventions
the messaging part that helps you write modular code
the ros parameter server to help you configure your code
the logging and visualization tool that will help you debug

then once the base of your robot is working with ROS it will be easier to plug in new sensors (they might be a ROS driver for them), and new algorithms (think localization and navigation for instance)
To get started: let's say you have non ROS drivers for your robot or some of its parts. It's should be relatively straight forward to wrap them in ROS. You might have to create a few custom messages, and wrap the driver calls in some nodes. If you don't have any existing code, then starting from scratch is not difficult either (if you know how to write drivers, but this has nothing to do with ROS).
Good luck

Originally posted by brice rebsamen with karma: 1001 on 2014-03-04
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by Maya on 2014-03-04:
So basically the idea is mostly to have a convention and then reusable code.
It is more a question of help "in the long term". Thanks as well for the explanation about the integration of the non ROS driver, I was getting confused about that.

