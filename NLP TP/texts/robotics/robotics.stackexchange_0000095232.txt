Q:

How to connect Turtlebot in Gazebo to a Web Interface

I would like to create a web interface (website) using HTML/Bootstrap to control the movement of a Turtlebot in Gazebo. I have tried many tutorials but none of them have worked (most of the tutorials are dated a few years back). Does anyone have any tips on how to do this?
I'm currently using Ubuntu 18.04 with ROS Melodic, Gazebo v9, Turtlebot3.

Originally posted by saintdere on ROS Answers with karma: 15 on 2020-03-30
Post score: 1

Original comments
Comment by viktor.holova on 2020-03-30:
Do you mean that you want to run only control user interface in the browser or also Gazebo user interface in the browser?
Comment by saintdere on 2020-03-30:
i want to control user interface in the browser (for example have up, down, left, right buttons on the website) that when pressed moves the robot in gazebo

A:

That is quite easy - there is a standard powerful way ROS community has opened up ROS to the web technologies - roslibjs
In a nutshell you need take 3 key steps:
1) Install ros-melodic-rosbridge-server package (adopted from this tutorial ):
 $ sudo apt-get install ros-melodic-rosbridge-server

2) Includerosbridge_websocket.launch into the launch of your system along with turtlebot launch (adopted from this tutorial ):

<include file="$(find rosbridge_server)/launch/rosbridge_websocket.launch"

3) Include rolslib.js or rolslib.min.js into your HTML page and you will be able to easily publish/subscribe to/from topics, work with action servers as well as execute other ROS functionality like setting/getting parameters, etc. See this tutorial.
For example, publishing to a topic is as simple as following code:
 //declare reference to the topic that already exists in ROS backend
 var cmdVel = new ROSLIB.Topic({ros : ros,  
                                name : '/cmd_vel', 
                                messageType : 'geometry_msgs/Twist' });
 
 //create command message
 var command = new ROSLIB.Message({
     linear : {
       x : 0.1,
       y : 0.2,
       z : 0.3
     },
     angular : {
       x : -0.1,
       y : -0.2,
       z : -0.3
     } });
 
 //publish the command to the topic 
 cmdVel.publish(command);

EDIT: important note about 3):
Websocket server in ROS Melodic version of rosbridge-server enforces more web security then older versions. Therefore, you are not able to connect to the rosbridge-server from a HTML page that is not served from the same origin. For example, if you simply try to open your HTML page directly from a file on your local PC then websocket connection will fail because websocket server inside of rosbridge-server will refuse such connection. to
The way to solve connection issue is to have a web server serving your HTML page which you want to do eventually for your system anyway.
Here you have options. For example:

For simple tests running on your local Ubuntu 18.04 you can serve your HTML page(s) by running simple HTTP server provided by Python3 on your Ubuntu (see this answer)
cd /my/html/files  #directory where your HTML page is located
python3 -m http.server 8080

Then you can run your page by pointing any browser to http://localhost:8080/your_page.html  (tested in both FireFox and Chrome)

Eventually if would like to have ROS-based system using this technology you can consider using roswww ROS package to serve your application's HTML pages. We have been successfully using it for a few years now

Originally posted by viktor.holova with karma: 201 on 2020-03-30
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by saintdere on 2020-03-30:
Hi, do you mean I have to include :
 <include file="$(find rosbridge_server)/launch/rosbridge_websocket.launch" <arg="" name="port" value="8080"/>  
into the Turtlebot simulator launch file? Also, will the port value 8080 work with Turtlebot or do I have to change it? Thank you for the help!
Comment by saintdere on 2020-03-31:
Hi - I have tried creating a HTML page to control a ROS TurtleSim using rosbridge_websocket.launch and rolslib.js follwing this tutorial. However, I received the following errors in terminal :
[-] failing WebSocket opening handshake ('WebSocket connection denied: origin 'null' not allowed')
[-] dropping connection to peer tcp4:127.0.0.1:41290 with abort=False: WebSocket connection denied: origin 'null' not allowed
Comment by viktor.holova on 2020-03-31:
Answering your 3 questions:
1. Yes - if you don't want to start rosbridge manually as listed in the tutorial you found you need to include rosbridge_websocket.launch into simulator launch file or your own launch file that can start both simulator and rosbridge.
2. Any port number should work as long as it is not used by something else. For example, ports 8080 or 9090 will usually be fine
3. To resolve the error I would need to first look into at least two things - a) what port did you use on rosbridge side and in HTML  - they must be the same (looks like port 9090 is default when you start rosbridge  manually) b) You need to make sure you use correct host name or IP address in the URL of ROS (e.g. url : 'ws://localhost:9090') - did you run everything on a single computer or did you run your browser on a different computer ?
Comment by saintdere on 2020-04-01:
a) I used the default port 9090 for both rosbridge and HTML.
b) I'm running everything on the same computer, and in the URL of ROS I'm using ws://localhost:9090 exactly like the tutorial.
In the Web Console in the browser it shows the error message:
Firefox canâ€™t establish a connection to the server at ws://0.0.0.0:9090/.
Comment by viktor.holova on 2020-04-02:
I just tested exactly how it is outlined in the tutorial you used and it worked for me except that I needed to change URL of roslibjs and EventEmitter2 scripts as specified in official ROS tutorial.
As far as localhost connection everything worked. There must be something on your PC preventing local connection. Are you following exactly tutorial exactly and running ROS on the host and not inside of Docker container for example ?
I just realized that I am running with Chrome browser on Ubuntu 16.04 though so maybe Chrome browser is stricter with more web security features running on newer Ubuntu OS...
Comment by saintdere on 2020-04-03:
Yes I'm following the tutorial exactly. I'm not sure if the issue is just on my PC as I tried it on another laptop and faced the same issue. (also Ubuntu 18.04)
I am indeed running ROS on the host (directly through Terminal).
What did you change the URL of roslibjs and EventEmitter2 scripts to? I didn't change anything and kept the code the same as the tutorial's.
Comment by viktor.holova on 2020-04-03:
I changed URLs to the roslibjs and EventEmitter2 to what current ROS tutorial is pointing too
Comment by viktor.holova on 2020-04-03:
This has been bothering me as we have been using this technology for  years now. So I upgraded my laptop to Ubuntu 18.04 and ROS Melodic and was able to solve the issue. Please see updated answer
Comment by saintdere on 2020-04-14:
Thank you very much for your help. I would just like to ask what is the roswww package used for?
Comment by viktor.holova on 2020-04-15:
If you would like to have web/HTML-based user interface for your ROS application you need a web server that serves your web/HTML user interface. There is a lot of web servers out there which you can use, however, you need to learn how to set them, run along with your ROS application, etc. This takes extra time and work. That is where roswww comes in. Because roswww is a ROS package, it means that once you include it
into your ROS application/workspace you get a webserver automatically which saves you time. I will be glad to answer more details on a separate question. More details at http://docs.ros.org/indigo/api/roswww/html/

