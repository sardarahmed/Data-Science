Q:

Can ROS run on a Raspberry Pi?

Can ROS run on a Raspberry Pi?
ROS is resigned to run on a network of machines, with different machines, even different cores on the same machine doing different jobs. Can one of those machines be a Raspberry Pi?
I am considering using an R-Pi as the EtherCAT master on a mobile robot, communicating with the main PC over WiFi, using a dongle.

Can an R-Pi even run ROS at all?
Would an R-Pi have enough processing power to do some 1kHz servoing?
Would it be possible to run some servoing on the host through the WiFi connecion?

A:

The official RaspberryPi operating system is a version of Debian, but there's also an ArchLinux version on their website.
Despite ROS's claim of being cross-platform, they only officially support Ubuntu at the moment. However, experimental installations have been made for the following OSes, according to ros.org:

OS X (Homebrew)
Fedora
Gentoo
OpenSUSE
Debian
Arch Linux
Windows

While I don't have any first-hand experience (my two Pis are shamefully sitting in the corner), ros.org has a quick and dirty setup guide.
There are similar instructions on answers.ros.org.
In case you run into any problems, the RaspberryPi forums might also be of some help. And, of course, SE's got it's very own PI.SE (Thanks to @Jivings and @ppumkin for the reminder).
Otherwise, just google "ros raspberry pi" and you should find plenty more information.

A:

This question was well-answered by ThomasH, but in addition I just want to suggest the possibility of wireless tethering the quadcopter to a laptop. That is, just write a nice-and-fast wireless (wifi?, bluetooth?) communication protocol for the quadcopter, then do the heavy CPU stuff on a laptop, while transmitting the instructions and sensor queries to the R-PI. We tried many implementations, and settled on a similar setup for all our small robots. Also almost every jaw-dropping quadcopter implementation is set up in this way. It makes life easy, and allows you to use the big-hitter libraries without sacrificing speed. 
Let's be honest here, that quadcopter is very likely not going to get outside wireless range of your laptop anyway.

A:

Robotics is hard enough as it is when all your dependencies are working.  The last thing you need are additional problems coming from incompatible components or unsupported combinations.
I looked into this a little and here was my progression:
Raspberry Pi doesn't support Ubuntu because it's ARM CPU uses an older instruction set (ARM v6 I believe?) and the Ubuntu team dropped support for this back in like 2009.
Beaglebone is similar to a Raspberry Pi in many ways and has a newer instruction set so it will run Ubuntu.  However the 'best' Ubuntu ARM distribution is coming out of the Linaro project and they dropped support for the Beaglebone a few revisions back (last was Linaro 12.03) because it's using an older TI OMAP 3 processor (welcome to the wonderful world of rapid smartphone progress).
My next step was to look at the TI Pandaboard which uses the newer OMAP 4 processor that is currently supported, but it costs closer to the $200 range.
But now Ubuntu officially released for the Nexus 7.  At 200 dollars, the Nexus 7 gets you everything a Raspberry Pi offers plus a lot more.  Keep in mind that even with a Raspberry Pi, once you add in the charger, wifi adapter, storage card, and cables you're creeping up closer to 100 dollars than 35 dollars so imho the Nexus 7 is a much better deal.
Lastly, don't try and output a 1 khz signal out of a non real time OS.  Attach yourself a cheap microcontroller like the PJRC Teensy (Arduino clone) and let it handle the simple real time tasks for you.  This way you dedicate the inexpensive CPU to these simple time sensitive tasks.  At 16 MHz with support for multiple timers, a little AVR MCU can handle a half dozen tasks like this without issue.

