Q:

Need information from two different topics at once

This is an architectural question - or a best practices question. I am writing a node which will be computing based on a subscription to /LaserScan and /cmd_vel. As those messages will come in asynchronously I wonder if there's a best practice for holding onto one while I wait for the other, or how one does this.
The natural idea is this:

have two variable in the "main" part of the node (which I believe is a separate process and so will survive)
whenever the callback of either message is called, store the updated value in the corresponding variable
do the computation using whatever was there from the last time the other callback was called.
Each time the computation is done, publish the result on a different topic.

Is this right? Will the variables persist over the lifetime of the node? Are there race conditions to worry about? Or other concurrency or design problems?

Originally posted by pitosalas on ROS Answers with karma: 628 on 2018-07-31
Post score: 0

A:

The best practice I believe is to use message_filters. You have several options:

use Cache to create caches for both messages and explicitly retrieve messages at specific times in your 'computation'
use a policy based synchroniser, with either an ExactTime policy or an ApproximateTime one

The first would be similar to what you sketch in your question, but a bit more robust and explicit, while the latter is a different approach, but it might be even more appropriate, depending on the temporal relationship there is between the incoming messages.

Originally posted by gvdhoorn with karma: 86574 on 2018-07-31
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by gvdhoorn on 2018-07-31:
Note: there is also a tf_message_filter.
Comment by pitosalas on 2018-08-01:
Thanks! Skimming the doc for message filters, they look like just what I need. I am working in python though, and it seems like the python bindings are less complete, or is that just an absence of doc?
Comment by gvdhoorn on 2018-08-02:
Python support should be there, but it's been some time since I've used it (mostly C++). The tutorials aren't as extensive, no.
Comment by sejego on 2022-01-26:
Hey! What about publishing a message that is computed based on filtered callback? If publisher method works separately from the callbacks, are there gonna be race conditions (since callback writes to the same variable the publisher reads from? Are mutexes a good practice to use here to avoid it?
Comment by gvdhoorn on 2022-01-26:
You should really post a new question instead of a comment under an answered question (ie: basically a closed one) from 2018.

