Q:

/tf topic is not published with specified namespace

I am working on a project involving multiple TurtleBots, using Ubuntu 22.04 and ROS2 Humble. I would like to control them individually by running a separate navigation stack (with unique namespace) for each robot. I have been able to set up individual stacks for Gazebo-simulated bots, but when trying to run the stack on physical robots (following the guide here), I cannot get /tf and /tf_static to conform to the specified namespaces. All other topics publish as expected:
ubuntu@ubuntu:~$ ros2 topic list
/parameter_events
/rosout
/tb3_0/battery_state
...
/tb3_0/scan
/tb3_0/sensor_state
/tf
/tf_static

I suspect it is an issue with the robot_state_publisher node, which is launched in the tb3_0 namespace, but still publishes to /tf and /tf_static.
ubuntu@ubuntu:~$ ros2 node info /tb3_0/robot_state_publisher
/tb3_0/robot_state_publisher
  Subscribers:
    /parameter_events: rcl_interfaces/msg/ParameterEvent
    /tb3_0/joint_states: sensor_msgs/msg/JointState
  Publishers:
    /parameter_events: rcl_interfaces/msg/ParameterEvent
    /rosout: rcl_interfaces/msg/Log
    /tb3_0/robot_description: std_msgs/msg/String
    /tf: tf2_msgs/msg/TFMessage
    /tf_static: tf2_msgs/msg/TFMessage
  Service Servers: 
  ...

What might be the reason for this, and how could I go about fixing it?

A:

I was able to address the problem through remapping the topic names when the offending nodes are initialized. robot_state_publisher itself publishes to /tf and /tf_static, and diff_drive_controller (initialized by turtlebot3_node) publishes to /tf. To allow the namespace to be prefixed on those channels, I had to remap '/tf' to 'tf' and '/tf_static' to 'tf_static'.
Where robot_state_publisher is initialized (turtlebot3_state_publisher.launch.py in the base bringup package):
Node(
            package='robot_state_publisher',
            executable='robot_state_publisher',
            name='robot_state_publisher',
            namespace='tb3_0',
            output='screen',
            parameters=[rsp_params, {'use_sim_time': use_sim_time}],
            remappings=[('/tf','tf'),('/tf_static','tf_static')]
            )

And where turtlebot3_node is initialized (robot.launch.py in the base bringup package):
Node(
            package='turtlebot3_node',
            executable='turtlebot3_ros',
            namespace='tb3_0',  # <------------------- ADD THIS!
            parameters=[tb3_param_dir],
            arguments=['-i', usb_port],
            remappings=[('/tf','tf'),('/tf_static','tf_static')],
            output='screen'
            )

And voila!
ubuntu@ubuntu:~$ ros2 topic list
/parameter_events
/rosout
/tb3_0/battery_state
...
/tb3_0/sensor_state
/tb3_0/tf
/tb3_0/tf_static

It'd be nice to be able to set this as an automated launch argument, rather than having to manually configure every bot. But for now, this is good enough.

