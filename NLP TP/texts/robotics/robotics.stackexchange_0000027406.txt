Q:

How to replace event::ConnectionPtr with ros::Timer in gazebo model PLUGIN?

In example gazebo plugin codes, it seems to be a convention that people use event::Events::ConnectWorldUpdateBegin to let a portion of code running every simulation iteration. For example, I want to let World_Model::update method to run like this:
update_connection_ = event::Events::ConnectWorldUpdateBegin(boost::bind(&World_Model::update, this));

where update_connection is of type event::ConnectionPtr.
But since I have 3 plugins in the model and it makes the simulaton work pretty slow, I don't want all the 3 plugins to run every simulation iteration. Instead, I think I can use ros::Timer as an alternative solution, so I modify the code above to this:
worldmodel_update_timer_ = nh->createTimer(ros::Duration(0.03),&World_Model::update,this);

where worldmodel_update_timer is of type ros::Timer. Now the running of method World_Model::update does not depend on gazebo simulation update rate; now it should be handled by ros::Timer. I think it should work, but there comes the compilation error:
    In file included from /usr/include/boost/bind/mem_fn.hpp:215:0,
                 from /usr/include/boost/mem_fn.hpp:22,
                 from /usr/include/boost/bind/bind.hpp:26,
                 from /usr/include/boost/bind.hpp:22,
                 from /home/winston/workspace/nubot_gazebo_ws_extended/src/nubot/nubot_simulation/world_model/include/nubot/world_model/world_model.h:4,
                 from /home/winston/workspace/nubot_gazebo_ws_extended/src/nubot/nubot_simulation/world_model/src/world_model.cpp:5:
/usr/include/boost/bind/mem_fn_template.hpp: In instantiation of ‘R boost::_mfi::mf0<R, T>::call(U&, const void*) const [with U = const ros::TimerEvent; R = void; T = nubot::World_Model]’:
/usr/include/boost/bind/mem_fn_template.hpp:63:38:   required from ‘R boost::_mfi::mf0<R, T>::operator()(const U&) const [with U = ros::TimerEvent; R = void; T = nubot::World_Model]’
/usr/include/boost/function/function_template.hpp:225:11:   required from ‘static void boost::detail::function::function_void_mem_invoker1<MemberPtr, R, T0>::invoke(boost::detail::function::function_buffer&, T0) [with MemberPtr = void (nubot::World_Model::*)(); R = void; T0 = const ros::TimerEvent&]’
/usr/include/boost/function/function_template.hpp:934:38:   required from ‘void boost::function1<R, T1>::assign_to(Functor) [with Functor = void (nubot::World_Model::*)(); R = void; T0 = const ros::TimerEvent&]’
/usr/include/boost/function/function_template.hpp:722:7:   required from ‘boost::function1<R, T1>::function1(Functor, typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type) [with Functor = void (nubot::World_Model::*)(); R = void; T0 = const ros::TimerEvent&; typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type = int]’
/usr/include/boost/function/function_template.hpp:1069:16:   required from ‘boost::function<R(T0)>::function(Functor, typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type) [with Functor = void (nubot::World_Model::*)(); R = void; T0 = const ros::TimerEvent&; typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type = int]’
/home/winston/workspace/nubot_gazebo_ws_extended/src/nubot/nubot_simulation/world_model/src/world_model.cpp:96:93:   required from here
/usr/include/boost/bind/mem_fn_template.hpp:40:43: error: no matching function for call to ‘get_pointer(const ros::TimerEvent&)’
         BOOST_MEM_FN_RETURN (get_pointer(u)->*f_)();
                                           ^
/usr/include/boost/bind/mem_fn_template.hpp:40:43: note: candidates are:
In file included from /usr/include/boost/bind/bind.hpp:25:0,
                 from /usr/include/boost/bind.hpp:22,
                 from /home/winston/workspace/nubot_gazebo_ws_extended/src/nubot/nubot_simulation/world_model/include/nubot/world_model/world_model.h:4,
                 from /home/winston/workspace/nubot_gazebo_ws_extended/src/nubot/nubot_simulation/world_model/src/world_model.cpp:5:
/usr/include/boost/ref.hpp:182:29: note: template<class T> T* boost::get_pointer(const boost::reference_wrapper<T>&)
 template<class T> inline T* get_pointer( reference_wrapper<T> const & r )
                             ^
/usr/include/boost/ref.hpp:182:29: note:   template argument deduction/substitution failed:
In file included from /usr/include/boost/bind/mem_fn.hpp:215:0,
                 from /usr/include/boost/mem_fn.hpp:22,
                 from /usr/include/boost/bind/bind.hpp:26,
                 from /usr/include/boost/bind.hpp:22,
                 from /home/winston/workspace/nubot_gazebo_ws_extended/src/nubot/nubot_simulation/world_model/include/nubot/world_model/world_model.h:4,
                 from /home/winston/workspace/nubot_gazebo_ws_extended/src/nubot/nubot_simulation/world_model/src/world_model.cpp:5:
/usr/include/boost/bind/mem_fn_template.hpp:40:43: note:   ‘const ros::TimerEvent’ is not derived from ‘const boost::reference_wrapper<T>’
         BOOST_MEM_FN_RETURN (get_pointer(u)->*f_)();
                                           ^
In file included from /usr/include/boost/bind/mem_fn.hpp:25:0,
                 from /usr/include/boost/mem_fn.hpp:22,
                 from /usr/include/boost/bind/bind.hpp:26,
                 from /usr/include/boost/bind.hpp:22,
                 from /home/winston/workspace/nubot_gazebo_ws_extended/src/nubot/nubot_simulation/world_model/include/nubot/world_model/world_model.h:4,
                 from /home/winston/workspace/nubot_gazebo_ws_extended/src/nubot/nubot_simulation/world_model/src/world_model.cpp:5:
/usr/include/boost/get_pointer.hpp:20:23: note: template<class T> T* boost::get_pointer(T*)
 template<class T> T * get_pointer(T * p)
                       ^
/usr/include/boost/get_pointer.hpp:20:23: note:   template argument deduction/substitution failed:
In file included from /usr/include/boost/bind/mem_fn.hpp:215:0,
                 from /usr/include/boost/mem_fn.hpp:22,
                 from /usr/include/boost/bind/bind.hpp:26,
                 from /usr/include/boost/bind.hpp:22,
                 from /home/winston/workspace/nubot_gazebo_ws_extended/src/nubot/nubot_simulation/world_model/include/nubot/world_model/world_model.h:4,
                 from /home/winston/workspace/nubot_gazebo_ws_extended/src/nubot/nubot_simulation/world_model/src/world_model.cpp:5:
/usr/include/boost/bind/mem_fn_template.hpp:40:43: note:   mismatched types ‘T*’ and ‘ros::TimerEvent’
         BOOST_MEM_FN_RETURN (get_pointer(u)->*f_)();
                                           ^
In file included from /usr/include/boost/bind/mem_fn.hpp:25:0,
                 from /usr/include/boost/mem_fn.hpp:22,
                 from /usr/include/boost/bind/bind.hpp:26,
                 from /usr/include/boost/bind.hpp:22,
                 from /home/winston/workspace/nubot_gazebo_ws_extended/src/nubot/nubot_simulation/world_model/include/nubot/world_model/world_model.h:4,
                 from /home/winston/workspace/nubot_gazebo_ws_extended/src/nubot/nubot_simulation/world_model/src/world_model.cpp:5:
/usr/include/boost/get_pointer.hpp:27:23: note: template<class T> T* boost::get_pointer(const std::auto_ptr<T>&)
 template<class T> T * get_pointer(std::auto_ptr<T> const& p)
                       ^
/usr/include/boost/get_pointer.hpp:27:23: note:   template argument deduction/substitution failed:
In file included from /usr/include/boost/bind/mem_fn.hpp:215:0,
                 from /usr/include/boost/mem_fn.hpp:22,
                 from /usr/include/boost/bind/bind.hpp:26,
                 from /usr/include/boost/bind.hpp:22,
                 from /home/winston/workspace/nubot_gazebo_ws_extended/src/nubot/nubot_simulation/world_model/include/nubot/world_model/world_model.h:4,
                 from /home/winston/workspace/nubot_gazebo_ws_extended/src/nubot/nubot_simulation/world_model/src/world_model.cpp:5:
/usr/include/boost/bind/mem_fn_template.hpp:40:43: note:   ‘const ros::TimerEvent’ is not derived from ‘const std::auto_ptr<T>’
         BOOST_MEM_FN_RETURN (get_pointer(u)->*f_)();
                                           ^
In file included from /usr/include/boost/bind/mem_fn.hpp:25:0,
                 from /usr/include/boost/mem_fn.hpp:22,
                 from /usr/include/boost/bind/bind.hpp:26,
                 from /usr/include/boost/bind.hpp:22,
                 from /home/winston/workspace/nubot_gazebo_ws_extended/src/nubot/nubot_simulation/world_model/include/nubot/world_model/world_model.h:4,
                 from /home/winston/workspace/nubot_gazebo_ws_extended/src/nubot/nubot_simulation/world_model/src/world_model.cpp:5:
/usr/include/boost/get_pointer.hpp:34:23: note: template<class T> T* boost::get_pointer(const std::unique_ptr<T>&)
 template<class T> T * get_pointer( std::unique_ptr<T> const& p )
                       ^
/usr/include/boost/get_pointer.hpp:34:23: note:   template argument deduction/substitution failed:
In file included from /usr/include/boost/bind/mem_fn.hpp:215:0,
                 from /usr/include/boost/mem_fn.hpp:22,
                 from /usr/include/boost/bind/bind.hpp:26,
                 from /usr/include/boost/bind.hpp:22,
                 from /home/winston/workspace/nubot_gazebo_ws_extended/src/nubot/nubot_simulation/world_model/include/nubot/world_model/world_model.h:4,
                 from /home/winston/workspace/nubot_gazebo_ws_extended/src/nubot/nubot_simulation/world_model/src/world_model.cpp:5:
/usr/include/boost/bind/mem_fn_template.hpp:40:43: note:   ‘const ros::TimerEvent’ is not derived from ‘const std::unique_ptr<T>’
         BOOST_MEM_FN_RETURN (get_pointer(u)->*f_)();
                                           ^
In file included from /usr/include/boost/bind/mem_fn.hpp:25:0,
                 from /usr/include/boost/mem_fn.hpp:22,
                 from /usr/include/boost/bind/bind.hpp:26,
                 from /usr/include/boost/bind.hpp:22,
                 from /home/winston/workspace/nubot_gazebo_ws_extended/src/nubot/nubot_simulation/world_model/include/nubot/world_model/world_model.h:4,
                 from /home/winston/workspace/nubot_gazebo_ws_extended/src/nubot/nubot_simulation/world_model/src/world_model.cpp:5:
/usr/include/boost/get_pointer.hpp:39:23: note: template<class T> T* boost::get_pointer(const std::shared_ptr<_Tp1>&)
 template<class T> T * get_pointer( std::shared_ptr<T> const& p )
                       ^
/usr/include/boost/get_pointer.hpp:39:23: note:   template argument deduction/substitution failed:
In file included from /usr/include/boost/bind/mem_fn.hpp:215:0,
                 from /usr/include/boost/mem_fn.hpp:22,
                 from /usr/include/boost/bind/bind.hpp:26,
                 from /usr/include/boost/bind.hpp:22,
                 from /home/winston/workspace/nubot_gazebo_ws_extended/src/nubot/nubot_simulation/world_model/include/nubot/world_model/world_model.h:4,
                 from /home/winston/workspace/nubot_gazebo_ws_extended/src/nubot/nubot_simulation/world_model/src/world_model.cpp:5:
/usr/include/boost/bind/mem_fn_template.hpp:40:43: note:   ‘const ros::TimerEvent’ is not derived from ‘const std::shared_ptr<_Tp1>’
         BOOST_MEM_FN_RETURN (get_pointer(u)->*f_)();
                                           ^
/usr/include/boost/bind/mem_fn_template.hpp:40:51: error: return-statement with a value, in function returning 'void' [-fpermissive]
         BOOST_MEM_FN_RETURN (get_pointer(u)->*f_)();
                                                   ^
make[2]: *** [nubot/nubot_simulation/world_model/CMakeFiles/world_model.dir/src/world_model.cpp.o] Error 1
make[1]: *** [nubot/nubot_simulation/world_model/CMakeFiles/world_model.dir/all] Error 2
make: *** [all] Error 2
Invoking "make -j8 -l8" failed

Any suggestion would be greatly appreciated!

Originally posted by winston on Gazebo Answers with karma: 449 on 2015-04-27
Post score: 1

A:

I finally find out the answer. Actually, I can safely replace event::ConnectionPtr with ros::Timer and let the method run every ros::Duration. The only problem is in the declaration and definition of the callback function.
In gazebo event::ConnectionPtr case, I define the method as:
void World_Model::update(void)

However, if I want to use ros::Timer, the method should be defined as:
void World_Model::update(const ros::TimerEvent& event)

That is to say, I have to put a ros::TimerEvent parameter to the update method.

Originally posted by winston with karma: 449 on 2015-04-28
This answer was ACCEPTED on the original site
Post score: 1

