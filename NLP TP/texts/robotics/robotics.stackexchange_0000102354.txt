Q:

How to render raw Lidar scan data to PointCloud2?

I am very new to ROS. I am running ROS in MacOS with the ROS (version 1.5) inside the conda environment. I have tried reading raw data from lidar with hex code output via the serial port using Python (version 3.9). Later, I tried publishing parsed data from lidar to PointCloud2.data with this format:
[convertedhex1,convertedhex2,convertedhex3....convertedhexN]

*generated with looping and reading each 2 hex to integer data with PointCloud2.fields:
name:"x",offset:0,count:1,datatype:7
name:"y",offset:1,count:1,datatype:7
name:"z",offset:2,count:1,datatype:7

Assuming every offset in iteration reading XYZ points.
The PointCloud2 data is not rendering in RViz with the same topic and frame id, but the "messages received"  field is incrementing. Rendering the scan to LaserScan is successful, but drawing using circles is looking like this.
I am using solid-state Lidar CygLidar D1 with 120° horizontal FOV and 65° vertical FOV (not rotating Lidar). I think LaserScan is showing wrong, or I parsed error data? Based on the user Manual  with a 3D response sample, the data show like on the screenshot with LaserScan.
Is PointCloud2.data support a 3-dimensional array?  Or can someone maybe help me? I am literally stuck here.

Originally posted by mrezzaaa on ROS Answers with karma: 3 on 2022-09-06
Post score: 0

A:

There is no need to reinvent the wheel. Please read page # 18 of the user manual. I am attaching it below for reference:

The package CygLiDAR-ROS/cyglidar_d1 is designed to visualize the 2D/3D distance dataset in real time. This is exactly what you are trying to achieve. Feel free to look at the source code for more details.

Undoubtedly, PointCloud2 supports 3D. I think this is what a point cloud is designed for!

PS: Given the explanation in the question, I strongly recommend going through ROS/Tutorials. These tutorials are easy to understand and are worth spending time, please!

Originally posted by ravijoshi with karma: 1744 on 2022-09-07
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by mrezzaaa on 2022-09-07:
Hi, thanks for the response first.

I need to re-write in python because i need to fusion with another sensor
Already tested but failed in compile (this one of the reason i want to rewrite in python)
I mean 3 dimensional array not 3D, like [ [x,x,x,x,x],[y,y,y,y,y],[z,z,z,z,z] ] so i can put the point data cleanly ( if supported, that's great!)

Comment by ravijoshi on 2022-09-07:\

You can always look up to the package and understand how they have done it. Later you can mimic it in Python. BTW, a fusion of point clouds in Python could take time.
You can share those errors in a new question. But please do not post them in this question.
A point cloud is defined as a set of data points in space. In 3 dimensional space, it is a set of XYZ points. If you are interested in the PointCloud2 message definition, please check sensor_msgs/PointCloud2.

Comment by mrezzaaa on 2022-09-07:\

Yeah, thanks for advice
No, i wont post in this question. Better i find the raw data and proccess the data and make it on my own :D
Already trying , but in rviz did not showing anything. Can you make an example the data format inside uint8 data[] ? It will very helping me. Like [ x,y,z,x,y,z....] or [x,x,x,y,y,y,z,z,z], which one correct formatting for Pointcloud2.data? I have read the docs and still confused. Many tutorial i read just throwing scan data as params to topic publisher, not how the data look like(in format). Just a numbers in array.

Comment by ravijoshi on 2022-09-07:
You seem to skip essential readings in this stage which is not recommended. The best I can do is provide references. Quoting from the documentation:

The newly revised ROS point cloud message (currently the de facto standard in PCL) now represents arbitrary n-D (n-dimensional) data. Point values can now be of any primitive data types (int, float, double, etc.), and the message can be specified as 'dense', with height and width values, giving the data a 2D structure, e.g., to correspond to an image of the same region in space. For more information on the rationale behind the new structure, see: PCL_March_2010.pdf and pcl_icra2010.pdf

Comment by mrezzaaa on 2022-09-08:
Big thanks!
This is help me out to understanding how properly generating PointCloud2 data.
Comment by ravijoshi on 2022-09-08:
Glad you made it!
Comment by mrezzaaa on 2022-09-08:
More question about PointCloud2.data:
Field data is uint8[] , so maximum value is 255.
What if i scaled measured distance by percentage its resulting float data, but the field only accept integer, how to putting data value to showed correctly in rviz ?
Little bit confused about pointCloud2.fields with datatype with many numbers datatype but the pointcloud2.data is only accept uint8.
Comment by ravijoshi on 2022-09-08:
You can push float data to point cloud. I am sharing following snippet;
// reserve the memory at the beginning
cloud.data.resize(total_size);
// do something here such as shown below
// define a 3D vector of float
Eigen::Vector3f xyz;
// initializing with dummy values
xyz << 1.2f, 3.4f, 5.6f; 
// copy x to our point cloud
std::memcpy(&cloud.data[curr[0]], &xyz[0], sizeof(float));
// copy y to our point cloud
std::memcpy(&cloud.data[curr[1]], &xyz[1], sizeof(float));
// copy z to our point cloud
std::memcpy(&cloud.data[curr[2]], &xyz[2], sizeof(float));

Comment by mrezzaaa on 2022-09-08:
I've tried to put float data into PointClou2.data, and python rejected by this message:
rospy.exceptions.ROSSerializationException: field data[] must be unsigned integer type

