Q:

Sampling based planning methods for 2D-Navigation

Hi ROS community!
Navigation and sbpl stack (which are used for robot base navigation) have classes which implement the nav_core::global_planner interface. AFAIK they use discrete search methods like A* and they're based on grid map representations (cost-maps).
Are there any simple way to use sampling based methods (like those which ompl provides) for robot navigation?
Should I implement the adapter for the global_planner interface? or it is already implemented?
What do you think about using sampled-based methods for 2d navigation? is it like using a sledgehammer to crack a nut?

Originally posted by Pablo I침igo Blasco on ROS Answers with karma: 2982 on 2011-04-01
Post score: 1

A:

Hi Pablo,
Christian Connette had built up a global planner for navigation using ompl. His code is here: https://code.ros.org/svn/wg-ros-pkg/branches/trunk_cturtle/sandbox/ompl_planner_base . It essentially implements the planners in ompl as global planner plugins for the navigation stack. Note that this code is unreleased and the API to ompl has changed since then but its a good start (he also got it working on the PR2 - http://www.willowgarage.com/blog/2010/12/28/path-optimization-elastic-band).
Regards,
Sachin

Originally posted by Sachin Chitta with karma: 1304 on 2011-04-03
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by Proc칩pio on 2012-02-07:
Hey. I found out that the repository changed to: https://code.ros.org/svn/wg-ros-pkg/branches/trunk_dturtle/sandbox/ompl_planner_base/
Comment by Pablo I침igo Blasco on 2011-04-05:
Right Sachin. ompl_planner_base is working with some minor changes. It's interesting to see the poor quality of ompl paths in comparison with nav_fn ones. It would be interesting research to have a performance comparison with different map sizes, paths longitude and other parametrizations. Thanks.
Comment by Sachin Chitta on 2011-04-04:
https://code.ros.org/svn/wg-ros-pkg/branches/trunk_cturtle/sandbox/ompl_planner_base/ does use ompl - check src/ompl_planner_base.cpp. It has not been updated in a while and ompl's interface has changed a bit but you should be able to get it working with a few fixes.
Comment by Pablo I침igo Blasco on 2011-04-03:
Thanks Sachin. It seems a very good start point. However, I see it doesn't use ompl. It's standalone. The pkg is broken on diamondback but It's working with some minor changes on eband_visualization.cpp changing AngleAxis and Quaternion with eigen2_AngleAxisd and eigen2_Quaterniond.

