Q:

[MoveIt!] Can't plan to a pose goal

Hi,
I'm using a simple 4 DoF arm and want to use MoveIt! to calculate and execute trajectories for it.
I followed the setup tutorial and the Move Group Python Interface Tutorial which allow me to give the pr2 a pose goal to which he then plans a trajectory.
However, when I'm using this approach on my own model it doesn't work.
I tried various Cartesian coordinates as pose goal, some that he is definitively able to reach, but I always receive:
Fail: ABORTED: No motion plan found. No execution attempted.

and
RRTConnect: Unable to sample any valid states for goal tree

I even (unsuccessfully) tried to move to the current position using:
pose_target = group.get_current_pose()
group.set_pose_target(pose_target)

The second application from the tutorial of planning to a joint-space goal is working correctly.
The planning group I use contains all 4 joints of the arm nothing else (I also tried a group containing all joints and links).
I also added an end-effector in the setup, but it didn't help.
This problem is annoying me for some time already, every hint or solution is welcomed :)

Originally posted by F4bich on ROS Answers with karma: 79 on 2016-08-26
Post score: 0

Original comments
Comment by gvdhoorn on 2016-08-28:
Seeing as joint space targets work, but Cartesian ones don't: what kind of IK plugin are you using? KDL? That is known to not work that well with < 6 DoF. See if 'enable position only IK' works for you. Other options: try trac_ik or IKFast.
Comment by F4bich on 2016-08-29:
I was using KDL. I now tested it with tracik, but it is not working any better.
However, I noticed that occasionally the ik solver does find a path, but only very rarely and without any pattern.

A:

As gvdhoorn pointed out correctly, the IK solver had problems with the < 6 DoF robot. Using trac_ik didn't help, however, adding more DoF did.

Originally posted by F4bich with karma: 79 on 2016-10-11
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by gvdhoorn on 2016-10-11:
Planning for 4DOFs should actually be possible, but does require a working IK solver. Have you tried using IKFast, or writing your own?
Comment by F4bich on 2016-10-11:
Not yet, I used the 4DoF robot only for testing purposes and now moved to a more complex robot.

