Q:

#include error using ROS in VS Code

I'm very new to using ROS and when I use #include it says that there is 'No such file or directory'. My includePaths are correct and I have believe I have all the necessary extensions (ROS, CMake, C++, Python) so am not sure why it's not working.
I've kept my code very simple for now until I can get it working:
#include <ros/ros.h>

This is what the error looks like when I run the code:

The following is my CMakeFiles:
cmake_minimum_required(VERSION 3.0.2)
project(tut)

find_package(catkin REQUIRED COMPONENTS
  roscpp
  rospy
  std_msgs
)

include_directories(
# include
  ${catkin_INCLUDE_DIRS}
)

The following is my c_cpp_properties.json:
{
    "configurations": [
        {
            "browse": {
                "databaseFilename": "${default}",
                "limitSymbolsToIncludedHeaders": false
            },
            "includePath": [
                "${workspaceFolder}/**",
                "/opt/ros/noetic/include/**",
                "/opt/ros/noetic/share/**",
                "~/catkin_ws/devel/include/**",
                "/usr/include/**"
            ],
            "name": "ROS",
            "compilerPath": "/usr/bin/gcc",
            "cStandard": "gnu11",
            "cppStandard": "c++14",
            "intelliSenseMode": "gcc-x64"
        }
    ],
    "version": 4
}

The following is my workspace structure:

I believe the issue might be with my compiler because I am able to import libraries fine using python script.

A:

I managed to solve the error. Below I will detail the steps that need to be taken after setting up the workspace in the usual way and include all relevant code.
After setting up you workspace open up the folder in VS Code. Add a .cpp file located in ~/catkin_ws/src/package_name/src/
To test it works add some simple code to the .cpp file, I recommend the following code (my .cpp file is called 'testcode.cpp'):
#include <ros/ros.h>
#include <geometry_msgs/Point.h>

int main(int argc, char** argv) {
    ros::init(argc, argv, "tester_node");
    ros::NodeHandle nh;

    // Your node's logic here

    ros::spin();
    return 0;
}

Alter your CMakeLists.txt so it looks like this:
cmake_minimum_required(VERSION 3.0.2)
project(package_name)

find_package(catkin REQUIRED COMPONENTS
  geometry_msgs
  roscpp
  rospy
  std_msgs
)

catkin_package()

include_directories(
# include
  ${catkin_INCLUDE_DIRS}
)

add_executable(testcode src/testcode.cpp)

target_link_libraries(testcode
   ${catkin_LIBRARIES}
 )

Make sure the c_cpp_properties.json file has the correct include path then edit/add the launch.json and tasks.json so they look like this:
launch.json (this code will only be correct if your CMakeFiles.txt is correct):
{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Run My ROS Node",
            "type": "cppdbg",
            "request": "launch",
            "program": "${workspaceFolder}/devel/lib/package_name/testcode",
            "args": [],
            "stopAtEntry": false,
            "externalConsole": true,
            "MIMode": "gdb",
            "cwd": "${workspaceFolder}",
            "serverLaunchTimeout": 5000
        }
    ]
}

tasks.json (only if you use catkin_make to build your workspace). Before running your code you will have to build you workspace in VS Code by going ctrl+ shift+ P, Tasks: Run Task, Build ROS Workspace
{
    "version": "2.0.0",
    "tasks": [
        {
            "type": "shell",
            "label": "Build ROS Workspace",
            "command": "catkin_make",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "group": {
                "kind": "build",
                "isDefault": true
            }
        }
    ]
}

Now that all your files are correct, it's time to run your code. Open a terminal in VS Code and type roscore Click the run button in the top right, then debug options should appear, select 'Run my ROS Node'
This should run your node without any errors. If you have any questions feel free to leave a comment!

