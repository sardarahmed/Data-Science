Q:

Motion Model for Holonomic Robot

We are working with an holonomic robot equipped with three (120 degree shifted) omnidirectional wheels. The relative movement is estimated by dead reckoning using wheel encoders. To improve this estimation we installed an gyroscope to measure the change in orientation. Furthermore the robot has a 270 degree laser range finder. 
In order to solve the kidnapped robot problem we implemented a particle filter. In every step each particle is updated according to the odometry and gyroscope readings. Since these readings are distorted by noise we need a motion model to include these errors. As described in Probabilistic Robotics by Thrun (Page 118 - 143) there are two commonly used motion models (velocity motion model and odometry motion model). However these models seem to describe the behavior of differential drive robots not omnidirectional robots. I base this thesis on the fact that the error in relative y-direction is proportional to the error in orientation as far as the motion models by Thrun are concerned. This is appropriate for differential drive robots as the orientation and the heading of the robot are identical. For omnidirectional robots this assumption can not be made since the heading and the orientation are completely independent. Even if we assume perfect information about the robots orientation we can still obtain error in relative y-direction.
I would like to discuss if my assumption - that the velocity/odometry motion model fails for omnididrectional robots - is correct or not as i am not sure about that. Furthermore  i am curious if there are any other motion models for omnidirectional robots that might fit better.

A:

I agree that the motion models in Probabilistic Robotics are badly suited for omnidirectional robots. I always interpreted the models presented there as examples only that should enable you to devise a custom model for your own robot.
First of all you need to model and solve the forward kinematics for this kind of omnidirectional drive. I guess you already managed to do that, but just in case you might want to check Section III.b) in this paper.
Second, there are many ways of turning a kinematic model into a probabilistic model. The easiest way is to just take the kinematic model and add some "process noise" in pose space. A probably better alternative is assuming noisy wheel encoders, i.e. sample and add noise to wheel encoder readings before transforming these according to the kinematic model.
I had good results applying a particle filter to a robot with the same geometry with the latter option a while ago, but your mileage may vary.

