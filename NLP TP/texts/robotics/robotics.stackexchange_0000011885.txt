Q:

Is it possible to use an arduino in hard real time

I am using the ros_arduino_bridge to control a robot, by connecting the Arduino to a main pc with a usb cable. I was thinking of using the Arduino with main pc with a serial cable and then doing real time control of the Arduino by using the real time clock. 
Is it possible to communicate with the Arduino in hard real time by using the real time clock and serial connections? I want to use Arduino board as a bridge between the main computer and the sensor and motors. And i want to control those sensors and motors in real time. All the high level processing tasks like computer vision and motion planning will be running in the main computer which then sends the commands to motors from the Arduino. So it is just acting like a bridge. 
The reason I want hard real time is so that my robot can control its joints at very high and accurate speed so that the robot can do human level tasks like running, jumping, assembling some parts, balancing its body while moving(walking, running, jumping) at any speed (which requires the joints to be controlled at very high speed and accuracy) etc. I will be using gazebo simulator to test most of the tasks.

A:

The short answer is no, you will not be able to create a distributed system that meets the criteria of 'hard real time' using the approach you describe.
The more nuanced answer is: It is theoretically possible with a heck of a lot of work. You will have the most problems in achieving hard real time from the USB communications, the ROS code, and using python. You will need understand the details of how USB communications work, how your USB bus is physically arranged, and use a real time capable driver like usb4rt. ROS is not real time capable, but once you have finished the difficult effort of achieving realtime in the USB communications, an orocos module to replace the functionality of ros_arduino_bridge should be easy for you. Python can be used in realtime if you are careful.
One small change you could make to simplify the amount of work would be to use direct RS232 serial communications instead of USB communications. I would expect realtime serial drivers to be easier to set up and work with.
Distributed real time systems are difficult to get right. If you are able to design your system such that there is only the main PC and no arduinos, you will simplify things and be able to make progress towards your goals much more quickly.
However, it's likely that you don't really need hard real time. After all, humans do all the tasks you want to do and we do not have hard real time processing. Many robotics algorithms have a basic assumption of a constant time period, and these are the ones that cause robots to work incorrectly when realtime processing is not maintained. It is possible to derive alternate algorithms that do the same thing, but without the constant time period assumption for most of them. 

