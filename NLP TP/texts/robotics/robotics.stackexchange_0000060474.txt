Q:

undefined reference

Hi all
I know that undefined reference error comes from the edition links during the compilation.
So what I want to do is to add an external libraries (contain method's class definition) to my package to use it in my program, so how can I do that ?

I'm working with ROS hydro-64bits.
I have a folder contains files *.so .

This is my CmakeList.txt
    cmake_minimum_required(VERSION 2.4.6)
    include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)
    
    # Set the build type.  Options are:
    #  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage
    #  Debug          : w/ debug symbols, w/o optimization
    #  Release        : w/o debug symbols, w/ optimization
    #  RelWithDebInfo : w/ debug symbols, w/ optimization
    #  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries
    #set(ROS_BUILD_TYPE RelWithDebInfo)
    
    rosbuild_init()
    
    #set the default path for built executables to the "bin" directory
    set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
    #set the default path for built libraries to the "lib" directory
    set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)
    
    #uncomment if you have defined messages
    #rosbuild_genmsg()
    #uncomment if you have defined services
    #rosbuild_gensrv()
    
    #common commands for building c++ executables and libraries
    #rosbuild_add_library(${PROJECT_NAME} src/example.cpp)
    #target_link_libraries(${PROJECT_NAME} another_library)
    #rosbuild_add_boost_directories()
    #rosbuild_link_boost(${PROJECT_NAME} thread)
    #rosbuild_add_executable(example examples/example.cpp)
    #target_link_libraries(example ${PROJECT_NAME})
    #target_link_libraries(MCORE /home/jros/roskinectueye/kinectueye/lib)
    #target_link_libraries(MCORE /lib)
    
    rosbuild_add_executable(kinectueye src/kinect_ueye.cpp)
    set(LIB_DIR ${PROJECT_SOURCE_DIR}/lib10)
    set(MY_LIBS ${LIB_DIR}/libMINTERFACE.so.0)

   target_link_libraries(kinectueye
    ${catkin_LIBRARIES} 
    ${MY_LIBS}
     )

Thank you

Originally posted by ROSkinect on ROS Answers with karma: 751 on 2014-07-01
Post score: 0

A:

List the libraries you want to link in the target_link_libraries section of your CMakeLists.txt.
Edit:
The auto generated CMakeLists.txt states the solution.
Just use target_link_libraries
Look at this example line in your CMakeLists.txt
#target_link_libraries(MCORE /home/jros/roskinectueye/kinectueye/lib)

Modify it to your needs and you should be fine.

Originally posted by BennyRe with karma: 2949 on 2014-07-01
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by ROSkinect on 2014-07-01:
What is the syntax? this what I need !
I have a folder named lib10 contains *.so files (Exemple of the files "libMINTERFACE.so.0")
Comment by ROSkinect on 2014-07-02:
If I do like that I can't generate my executable file !!
Comment by BennyRe on 2014-07-02:
Sorry I'm a little bit confused. I got a notification that it works but the comment has been deleted and now theres a comment that this does not work. Does it work now or not? In the notification I saw that you are using rosbuild. Please always add the fact that you are using rosbuild.
Comment by BennyRe on 2014-07-02:
With rosbuild my answer will not work.
Comment by ROSkinect on 2014-07-02:
I thought that it worked because when I compile I don't get any error but it's generate another error that I can't get the executable file !!
no I'm not using rosbuild
Comment by BennyRe on 2014-07-03:
Did you replace 'your_node' with the name of your node and are your libs also in a directory called 'lib'?
Comment by ROSkinect on 2014-07-03:
Yes I did, as I told you I can compile it but I can't get my executable file !
"so I can't really know If it works or not"
Comment by McMurdo on 2014-07-03:
Please post the entire CMakeLists.txt file. It is very difficult to help without knowing what you already know. :-)
Comment by ROSkinect on 2014-07-03:
OK I just posted it
Comment by BennyRe on 2014-07-03:
You ARE using rosbuild. My original answer will not work for you. I updated my answer.
Comment by ROSkinect on 2014-07-03:
yes I thought that you're talking about rosbuild in catkin
anyway thank you
Comment by ROSkinect on 2014-07-03:
It works for me now but with the first answer you gave.
Thank you so much
Comment by ROSkinect on 2014-07-03:
keep the first one, the second doesn't work
Or you can keep the two for people who will have the same problem
Comment by ROSkinect on 2014-07-04:
the last question: what is the name of a library:
is the name of the folder or the name of the file for exemple I have libopencv_calib3d.so.2.2.0 file in MCORE.. what is the name of a library ?
Comment by BennyRe on 2014-07-04:
In target_link_libraries you have to provide the absolute path to the library, e.g. /home/jros/roskinectueye/kinectueye/lib/libopencv_calib3d.so.2.2.0 . The first argument to target_link_libraries is the name of your executable (kinectueye).
Comment by BennyRe on 2014-07-04:
Another question: Why do you link against your own libopencv_calib3d.so.2.2.0? ROS also provides libopencv_calib3d.so
Comment by ROSkinect on 2014-07-04:
OK thank you (y)
Yes but I'm using my own software of calibration

