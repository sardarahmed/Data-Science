Q:

Using a service to perform an action. Is it the wrong way around?

I have two different pieces of hardware (grippers) that are run by an action server. Their behavior is slightly different, and I need to write a piece of software that can run both grippers using the same syntax. So I need something like
open_gripper(distance)

close_gripper(distance)

and just need to specify somewhere which piece of hardware we are using.
Now someone suggested using a service to perform the action - the service performs the action in the appropriate way, and returns some feedback, and responds to the main program.
However, I'm still not sure when is the right time to use actions, and when is the right time to use a service. Based on what I've read, this seems like an upside down approach, but I'm not sure. Are there any examples of this sort of setup, or is it considered bad form?

Originally posted by paturdc on ROS Answers with karma: 157 on 2014-05-21
Post score: 0

A:

Now someone suggested using a service to perform the action - the service performs the action in the appropriate way, and returns some feedback, and responds to the main program.

Took me awhile to understand what you mean by above, but I think you mean "'an end client' calls ROS Service, then Service server calls ROS Action, and return Action's output via ROS Service' return value".
If that's correct, I think that's a legit usecase in certain situation e.g. when the end client doesn't have an access to the existing Action Server (although I've never done that). You can run Action Client somehow in your ROS Service' callback, then once the Action Client returns the value, re-pack the value to the ROS Service and return it.
Following can be a simple pseudo-code in Python that I modified the code from the Service' tutorial:
#!/usr/bin/env python
import actionlib
from beginner_tutorials.srv import *
import rospy

def handle_add_two_ints(req):
    # Call action client's sendGoal
    
    # Return with the output action client received.

def add_two_ints_server():
    rospy.init_node('add_two_ints_server')
    s = rospy.Service('add_two_ints', AddTwoInts, handle_add_two_ints)
:

Originally posted by 130s with karma: 10937 on 2018-07-03
This answer was ACCEPTED on the original site
Post score: 0

