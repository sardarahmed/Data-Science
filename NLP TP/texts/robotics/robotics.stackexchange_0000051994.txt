Q:

Turtlebot 2 with Kobuki base - Jerky movement and Warning message

I am running the turtlebot 2 with c++ code I wrote.  I continuously get an error message stating:
Is robot stalled? Motors current is very high

After the predetermined halt message I input (5 second delay) the turtlebot will continue moving again, and then halt after another second or so.  Is there anything that I can do?
Here is how I am publishing velocity commands:

 #include "ros/ros.h"
//The following have the  symbols removed so that they appear in ros answers.
 #include iostream
 #include string
 #include vector
 #include math.h
 #include stdlib.h
 #include time.h
 #include diagnostic_msgs/DiagnosticStatus.h
 #include diagnostic_msgs/DiagnosticArray.h
 #include sensor_msgs/LaserScan.h
 #include geometry_msgs/Twist.h
 #include std_msgs/Int32.h
 using namespace std; 

 double secondsLaptop = 0;
 double secondsCreate = 0;

 //abort flag turned on if bump or wheeldrop sensors activated, or warning or error  messages are thrown
 bool ab0rt = 0;

 bool rotateDirSet=0;

 //velocities 
 double linearVel = 0.0;
 double angularVel = 0.0; 

 //vector containing laserscan readings within kinect's field of view
 std::vector rangeReadings;

 //these hold average distance values for leftmost and rightmost laser readings
 double distToLeftWall;
 double distToRightWall;
 double centerLeft;
 double centerRight;

//flag turned on when vector containing laserscan readings is initalized
bool rangesInit=0;

void laserAggCallback(const sensor_msgs::LaserScan::ConstPtr &msg)
{
  //sensor_msgs::LaserScan points = msg->ranges[i];

  //purge vector immediately before fresh values are pushed on
  rangeReadings.clear();
  
  //fill vector with full range of values from laserScan message (320 degrees)
  for(int i=0; iranges[i]);
    int k = i-1;
    if(i==0 && rangeReadings[i] != rangeReadings[i])
    {
      rangeReadings[i] = 0.0;
      //cout = 9.0)
    if(avgDist =0.5 && rangeReadings[r]=0.5 && rangeReadings[l] 20)
        {
          linearVel = 0.0;
          angularVel = 1.0;
        }
      else if((centerRight - centerLeft) > 20)
        {
          linearVel = 0.0;
          angularVel = -1.0;
        }
      else if ((centerRight + centerLeft) > 50)
        {
          linearVel = 0.0;
          angularVel = 1.0;
        }
      else if ((distToLeftWall - distToRightWall)  0.5)
      {
        linearVel = 0.2;
        angularVel = 0.5;
      }
      else
      {
        linearVel = 0.2;
        angularVel = 0;
      }
    }
  }
}

void diagAggCallback(const diagnostic_msgs::DiagnosticArray::ConstPtr &msg)
{
  // flag is changed from 1 to 0 if any of the 14 diagnostic status messages contains errors or warnings
  bool allClear=1;

  for (int i=0; istatus[i];
    int level = diagStatus.level;

    if (level==1)
    {
      std::cout ("/mobile_base/commands/velocity", 1);
  
  geometry_msgs::Twist msg;

  while(ros::ok())
  {
    if (ab0rt == 0)
    {
      //call driveCentered to determine course of action and set velocities
      driveCentered();

      msg.linear.x = linearVel;
      msg.angular.z = angularVel;
    }
    /* if ab0rt flag has been set, we know a bump or wheeldrop sensor has been activated,
     * a warning or error has been thrown, or the wifi signal strength is low.  We stop
     * everything and wait for 5 seconds. If the condition has resolved itself after 5 seconds,
     * we resume our previous course of action. If not, we wait another 5 seconds.
     */
    else
    {
      // if abort flag is active, stop immediately and wait for 5 seconds
      msg.linear.x = 0.0;
      msg.angular.z = 0.0;
      rotateDirSet=0;
      ros::Duration(5).sleep();
    }
    
    cmdvelPub.publish(msg);

    ros::spinOnce();
    loop_rate.sleep();
  }

  return 0;
}

Launch file:
<launch>
  <arg name="base"       value="$(optenv TURTLEBOT_BASE kobuki)"/>  <!-- create, rhoomba -->
  <arg name="battery"    value="$(optenv TURTLEBOT_BATTERY /proc/acpi/battery/BAT0)"/>  <!-- /proc/acpi/battery/BAT0 -->
  <arg name="stacks"     value="$(optenv TURTLEBOT_STACKS hexagons)"/>  <!-- circles, hexagons -->
  <arg name="3d_sensor"  value="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>  <!-- kinect, asus_xtion_pro -->
  <arg name="simulation" value="$(optenv TURTLEBOT_SIMULATION false)"/>
  
  <param name="/use_sim_time" value="$(arg simulation)"/>
      <param name="/acceleration_limiter" value="true" />
  <include file="$(find turtlebot_bringup)/launch/includes/_zeroconf.launch"/>
  <include file="$(find turtlebot_bringup)/launch/includes/_robot.launch">
    <arg name="base" value="$(arg base)" />
    <arg name="stacks" value="$(arg stacks)" />
    <arg name="3d_sensor" value="$(arg 3d_sensor)" />
  </include>
  <include file="$(find turtlebot_bringup)/launch/includes/_mobile_base.launch">
    <arg name="base" value="$(arg base)" />
  </include>
  <include file="$(find turtlebot_bringup)/launch/includes/_netbook.launch">
    <arg name="battery" value="$(arg battery)" />
  </include>
  <include file="$(find turtlebot_bringup)/launch/includes/_app_manager.launch"/>
</launch>

Originally posted by mickey11592 on ROS Answers with karma: 3 on 2013-06-14
Post score: 0

Original comments
Comment by bit-pirate on 2013-06-18:
Please put code snippets into the code block to improve readability. I took the freedom to edit your post accordingly.
Comment by mickey11592 on 2013-06-19:
Thank you very much, I forgot how to place the code into a code block.

A:

How did you setup your robot? What are you launching to run it?
The Turtlebot 2 launches come with a velocity mux preconfigured. If you run that, maybe your velocity commands are fighting other things like the joystick. In that case you probably want to use the input/navi topic in the mobile base launch.

Originally posted by dornhege with karma: 31395 on 2013-06-14
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by mickey11592 on 2013-06-14:
I've edited the question to include the launch file
Comment by jorge on 2013-06-18:
can you post the full code? Cannot see the loop rate nor the velocities you send
Comment by dornhege on 2013-06-19:
It's also missing where the abort flag that causes the robot to stop comes from.
Comment by mickey11592 on 2013-06-19:
The high loop rate was changed gradually from 10 up until the 8000 it is because I noticed that when I increased it (up to a certain point) the turtlebot would receive the error less often and would move a little more smoothly.
Comment by dornhege on 2013-06-19:
8000 seems very extreme... Can you try publishing to /cmd_vel_mux/input/navi instead of the mobile_base directly?
Comment by mickey11592 on 2013-06-19:
I changed the loop rate to 10 and published to /cmd_vel_mux/input/navi like you said and it appears to work perfectly.  Thank you!
Comment by RB on 2014-02-05:
cmd_vel_mux (http://wiki.ros.org/cmd_vel_mux) is written for Groovy/hydro. I am using P3AT robot on Fuerte. So can I use this package directly by simply modifying subscriber and publisher? Is there any problem with communication between nodelet and normal nodes? I have seen in here http://www.isep.ipp.pt/roswiki/kobuki(2f)Tutorials(2f)Kobuki(27)s(20)Control(20)System.html Where mobile_base has to be a nodelet as well. PLEASE REPLY
Comment by dornhege on 2014-02-05:
Please open a question if you have a new question. In short: I don't know if that works in fuerte, but it very well might.
Comment by RB on 2014-02-06:
I have added a question here http://answers.ros.org/question/126391/nodelet-usage-and-its-role-in-designing-a-complex-controller/.

