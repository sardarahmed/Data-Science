Q:

ROS Subscribe to multiple topics with single function

Thanks for feedback and help in advance,
I want to give input of topic names, initial data and data_type as dictionary to a function, and that function will subscribe to each topic and save data to dictionary. This is what I have done so far.
Example input
ros_topics = {"rosTopic1": {"data": None,
                            "type": "msg_type1"},
              "rosTopic2": {"data": None,
                            "type": "msg_type2"},
              "rosTopic3": {"data": None,
                            "type": "msg_type3"}}

I can subscribe to multiple topics and show their output message, however I couldn't save them into dictionary.
My function so far
def subscribe_topics(self):
    for key in self.ros_topics.keys():
        rospy.Subscriber(name=key,
                         data_class=self.ros_topics[key]["type"],
                         callback=self.common_callback)

def common_callback(self, msg):
    print("####")
    # Want to store msg.data to ros_topics[key]["data"], however I couldn't transfer **key**
    print(msg)
    print("####")

Stackoverflow Question Link

Python 3.8
ROS Noetic
Ubuntu 20.04

Originally posted by FurkanEdizkan on ROS Answers with karma: 33 on 2022-10-11
Post score: 2

Original comments
Comment by shrini96 on 2023-05-23:
As someone fairly new to ROS, the "msg_type1" within double inverted commas sort of threw me off. So for anyone else stuck there, it is apparently not supposed to be a string containing the name of the type of message (for e.g. NOT ... {"rosTopic1": {"data": None, "type": "nav_msgs/Odometry"} ...).
Rather, here is supposed to be the object itself, for eg ... {"rosTopic1": {"data": None, "type": Odometry} ...
This is with the assumption that you have already added the required import line. For this case:
from nav_msgs.msg import Odometry
Comment by FurkanEdizkan on 2023-07-14:
Yes, you are correct, I write them in that way to just show any msg type

A:

You need to use callback_args parameter of the Subscriber class.
In your case, you can set the key as shown below:
    rospy.Subscriber(name=key,
                     data_class=self.ros_topics[key]["type"],
                     callback=self.common_callback,
                     callback_args=key)

And then change the callback signature to accommodate key as shown below:
def common_callback(self, msg, args):
    key = args

I have not tested the above code. In case of an error, please inform and change the callback_args to a tuple.
For more information, please check this answer.

Originally posted by ravijoshi with karma: 1744 on 2022-10-11
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by ljaniec on 2022-10-11:
This question scratches the same itch: https://answers.ros.org/question/398554/dynamic-publishers-subscribers-and-callbacks/#398555
Comment by FurkanEdizkan on 2022-10-12:
Yes, it perfectly works. Thank you
Comment by FurkanEdizkan on 2022-10-12:
I can open an other question for this topic but since we are here, is this usage a good way to use ros subscriber?
Comment by ravijoshi on 2022-10-12:
@FurkanEdizkan I am glad it worked. Yes, it is all right to use callback_args. If you face any problems with it, feel free to open a new question, as you said.
Comment by FurkanEdizkan on 2022-10-12:
Thank you for answer

