Q:

Building a controllable "knob"

I am trying to build a semi-analog timer. Something like those old egg timers that you rotate the face of. I want a knob that I can turn that can be read by a microcontroller, and I also want the microcontroller to be able to position the knob. I'd like to implement "stops" by letting the microcontroller push the knob towards certain positions. As it runs down, the knob should turn. This is my first project of this kind; I've built small robots in the past, but it's been many years.
I've considered hacking a servo motor to read its position, but the small hobby servos I've tried are too hard to turn, very noisy, and pick up too much momentum when turned. They don't act like a good knob.
I'm now considering a rotary encoder connected to a motor, but after hunting at several sites (SparkFun, ServoCity, DigiKey, Trossen, and some others), I haven't been able to find anything that seemed appropriate. I'm not certain how to find a motor that's going to have the right kind of low torque.
This seems like it shouldn't be a really uncommon problem. Is there a fairly normal approach to creating a knob that can be adjusted both by the user and a microcontroller?

A:

I have a couple of options for you.
Option 1, build your own servomechanism
As you only need a very low torque to move a knob, a very small motor should do the job nicely. You will probably need to add some friction so that it it doesn't move too easily, or use a small stepper motor with a decent detent torque and a little gearing.
A very cheap way of getting your position feedback is to find an old opto-mechanical mouse.
 Opto-mechanical mouse
Connect up the shaft to your motor/knob shaft and then either roll your own quadrature encoder (taking the A/B phase inputs directly into your microcontroller) or reuse the entire circuit board and hook up the 'mouse' to a serial port and read back the X or Y mouse position through software.
The article Recycle PS/2 Mice into Rotary Pulse Generators is a nice example of someone doing this.
Option 2, persevere with the RC servo
The reason why your RC servo's are hard to turn is that they have a high ratio gear train to give them the torque they need, and this makes them difficult to backdrive. Take a look at this exploded diagram from the wikipedia Servomechanism page:

 Small R/C servo mechanism

electric motor
position feedback potentiometer
reduction gear
actuator arm

A small turn of the actuator shaft of this RC servo would result in a large (many turn) movement of the motor, if you could get it to move without stripping the gears.
Again, since in your application you only need enough torque to turn the knob, you may be able to get rid of that gearing and use the motor position directly. By removing or reducing the gearing, you should find the motor moves very freely indeed. In fact, you may need to add some friction (or leave some gearing in place) in order to prevent the motor being very jittery.

