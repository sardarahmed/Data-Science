Q:

Impossible to set a PlanningScene

Hi all.
I'm trying to call the "environment_server/set_planning_scene_diff" service to get a PlanningScene to perform some collision checking. However, after a couple of days trying and searching in ROS Answers and more I didn't get any advance. My situation is the same that jbarry describes in this thread but this solution doesn't work in my case, I continue getting this:
[ WARN] [1345114122.403491890, 1345114122.395468950]: Incomplete robot state in setPlanningScene
[ERROR] [1345114122.403650694, 1345114122.395468950]: Setting planning scene state to NULL

I tried to debug manually searching through the different classes involved as Adolfo Rodriguez suggest in this thread (collision_models.cpp, collision_models_interfaces.cpp, model_utils.cpp) but I didn't find anything special except that if I print the joint_names.size() I get 13 joints (I expected 7). I also observed that when I launch the service I get 0 joints and the interactive markers in the RViz stops working.
I have also checked as bit-pirate suggest that /joint_state are correctly published (/world_joint and the 7 joints of my arm).
Can you say me what I'm doing wrong? Thanks in advance!

Originally posted by mbj on ROS Answers with karma: 197 on 2012-08-16
Post score: 1

Original comments
Comment by dornhege on 2012-08-16:
The problem seems different from the question you linked. The request looks like it's malformed. Can you say, where you are getting the different joint name/position sizes? You do set them correctly?
Comment by mbj on 2012-08-16:
Hi dornhege. As I saw in all the other cases, the request is only a empty arm_navigation_msgs::SetPlanningSceneDiff:Request. I don't understand why I have to set it. I was obtaining the different joint name/position sizes when I put a ROS_ERROR to debug after the 44 line in the model_utils.cpp. Thx!
Comment by dornhege on 2012-08-16:
OK, that should definitely work. An empty diff is a common use case.
Comment by mbj on 2012-08-16:
Indeed, in all examples is sent an empty message and it works. So, do you have any idea where can be the error? I tried to generate the arm_navigation package with the wizard for different robots and I obtained the same result. Thanks.
Comment by yangyangcv on 2012-08-31:
i'm stuck with the same problem, "incomplete robot state"...have you solved this problem yet?
Comment by mbj on 2012-09-02:
No, I reviewed and tested again the code after 2 weeks and the result is the same: "incomplete robot state". Can help us @dornhege?

A:

After days of work, now i can answer this question.

put the line above your main:
static const std::string SET_PLANNING_SCENE_DIFF_NAME = "/environment_server/set_planning_scene_diff";

put the code below in appropriate position within your main.
ros::NodeHandle nh;
planning_environment::CollisionModels* collisionModels;
planning_models::KinematicState* kinematicState;
collisionModels = new planning_environment::CollisionModels("robot_description");
kinematicState = new planning_models::KinematicState(collisionModels->getKinematicModel());
ros::ServiceClient set_planning_scene_diff_client;
while(!ros::service::waitForService(SET_PLANNING_SCENE_DIFF_NAME, ros::Duration(1.0)))
{
ROS_INFO_STREAM("Waiting for planning scene service " << SET_PLANNING_SCENE_DIFF_NAME);
}
set_planning_scene_diff_client = nh.serviceClient<arm_navigation_msgs::SetPlanningSceneDiff> (SET_PLANNING_SCENE_DIFF_NAME);
arm_navigation_msgs::SetPlanningSceneDiff::Request planning_scene_req;
arm_navigation_msgs::SetPlanningSceneDiff::Response planning_scene_res;
//THE LINE BELOW IS VERY IMPORTANT!
planning_environment::convertKinematicStateToRobotState(*kinematicState, ros::Time::now(), collisionModels->getWorldFrameId(), planning_scene_req.planning_scene_diff.robot_state);
if(!set_planning_scene_diff_client.call(planning_scene_req, planning_scene_res))
{
ROS_WARN("Can't get planning scene");
exit(-1);
}
else
{
ROS_INFO("Successfully get planning scene!");
}
collisionModels->revertPlanningScene(kinematicState);
//must call revertPlanningScene() first before calling setPlanningScene(). otherwise you'll be blocked in setPlanningScene()
collisionModels->setPlanningScene(planning_scene_res.planning_scene);

btw, you don't need to change other config files. just use the ones generated by the planning_description_configuration_wizard.

Originally posted by yangyangcv with karma: 741 on 2012-09-05
This answer was ACCEPTED on the original site
Post score: 0

Original comments
Comment by dornhege on 2012-09-05:
Your way doesn't set an empty planning scene, but provides a robot state.
Comment by yangyangcv on 2012-09-06:
what's the difference between an empty planning scene and my method? in my trial, it doesn't affect the following operations, like FK, path planning, etc,  with my method.
Comment by mbj on 2012-09-06:
Hi @yangyangcv, thanks for share the code, effectively, it works! However, when I try to get a complete state with "collision_models_->setPlanningScene(planning_scene_res.planning_scene)" don't works (it get blocked at this point). Do you tried it? I think that it can be related with @dornhege says.
Comment by yangyangcv on 2012-09-06:
@mbj: i do get blocked in that call, don't know why. but i just edited my answer and added two lines at the buttom. now it works. but still i don't quite understand what's happening with the planning scene.
Comment by yangyangcv on 2012-09-06:
in fact most of my above code are from planning_components_visualizer.cpp which is under the folder stacks/arm_navigation/src. the codes there are very clean and clear. so you can just refer that file.
Comment by dornhege on 2012-09-06:
The difference is that it should work regardless, so there might still be something wrong somewhere else.
Comment by yangyangcv on 2012-09-06:
@mbj: in the function setPlanningScene() which is in planning_environment/src/models/collision_models.cpp
i find this:
if(planning_scene_set_) {
ROS_WARN("Must revert before setting planning scene again");
return NULL;
}
Comment by yangyangcv on 2012-09-06:
so you need to call collisionModels->revertPlanningScene(kinematicState); before to call setPlanningScene()

