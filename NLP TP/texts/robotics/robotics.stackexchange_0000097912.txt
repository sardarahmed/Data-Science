Q:

Idiomatic way to tell whether code is on simulator or real robot

The simulation (Gazebo) can differ from the actual robot (GoPiGo3) is particular ways, e.g the number of readings in a scan topic - in my case 360 in gazebo and 720 on Ydlidar X4. So I often have either a constant GAZEBO=True or an inline if True: both of which are kind of ugly. Is there a more typical way of making code behave a little differently depending on where it is running?

Originally posted by pitosalas on ROS Answers with karma: 628 on 2020-12-23
Post score: 0

A:

Is there a more typical way of making code behave a little differently depending on where it is running?

I would say "no".
And I don't believe there should be one, as ideally your nodes (or other nodes) don't have to realise there is a simulation "on the other side" of topics/services/actions.
If you need different settings, which I believe is what you are asking for, then I would suggest creating multiple .launch files. For your simulation case, you'd load the .launch file which initialises your application with "simulation settings". For use with real hw, you'd create a similar .launch file, but then it loads settings which work for your real hw.
In your specific case, you'd have a setting for the nr of points in a LaserScan to the appropriate value.
(but I'm not entirely sure why you can't len(msg.ranges) or msg.ranges.size() instead)

So I often have either a constant GAZEBO=True or an inline if True: both of which are kind of ugly

yes, that is indeed really rather ugly, and I would really recommend you avoid doing that.

Originally posted by gvdhoorn with karma: 86574 on 2020-12-24
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by gvdhoorn on 2020-12-24:
I always tell "my" students to treat Gazebo as "just a piece of hw", and don't think of it as a special simulator or anything like that.
You really want to avoid embedding special cases / code paths "for this simulator I always use" in your code, as the minute someone else uses something else, those tend to break.
They also reduce the reuse potential of your code significantly.

