Q:

tf2_ros::Buffer.transform() missing timestamp

Hello everyone
I use tf2_ros::Buffer.transform() to transform a geometry_msgs::WrenchStamped into ageometry_msgs::WrenchStamped in another frame at the same time. So the syntax is:
tf2_ros::Buffer.transform(geometry_msgs::WrenchStamped wrenchStamped1, geometry_msgs::WrenchStamped wrenchStamped2, const std::string & target_frame, ros::Duration timDur);

It seems to work fine but the wrenchStamped2 has an empty timestamp. Is this on purpose by the function and do I need to manually assign the timestamp?
The code looks basically like this (msg is the message from the subscriber callback function this code snippet is part of):
 geometry_msgs::WrenchStamped msgWrench = msg->wrench;
 msgWrench.header = msg->header;
 msgWrench.header.frame_id = "EE_FORCETORQUESENSOR";

 geometry_msgs::WrenchStamped worldFrameWrenchFTSensorStamped;
  try 
  {
    ros::Duration timDur(0.1);
    std::string target_frame_("world");
    buffer_.transform(msgWrench, worldFrameWrenchFTSensorStamped, target_frame_, timDur);
  }
  catch (tf2::TransformException &ex) 
  {
    ROS_WARN("Failure %s\n", ex.what()); //Print exception which was caught
  }

  worldFrameWrenchFTSensorStamped.header = msgWrench.header;

Originally posted by dimitri on ROS Answers with karma: 54 on 2020-09-14
Post score: 0

Original comments
Comment by Josh Whitley on 2020-09-15:
Can you provide the actual code in which you're using your tf2_ros::Buffer object? Just the surrounding function or a few lines above and below would help.
Comment by dimitri on 2020-09-24:
Sorry. I added the code. I hope it is clear what i am doing there.

A:

tf2_ros::Buffer.transform() is a templated function that calls tf2::doTransform(in, out, lookupTransform(target_frame, tf2::getFrameId(in), tf2::getTimestamp(in), timeout)); under the hood. The lookupTransform() part is the one we care about here, because it is the one that generates a geometry_msgs::TransformStamped with a timestamp that gets passed to doTransform. Through a few redirections, this eventually ends up with a call to BufferCore::doTransform() here. Looking at that function doesn't help a ton because it requires knowledge of how the TF frame cache works, but, essentially, if both the input WrenchStamped and the TF that gets published between the two frames have valid timestamps, the output WrenchStamped should have a valid timestamp too. Verify this on both of those messages - I'm guessing this will point to the source of your problem.

Originally posted by Josh Whitley with karma: 1766 on 2020-09-24
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by dimitri on 2020-09-25:
Thanks. You were right. The problem was not with the code but with the data in the messages I was using.

