Q:

Can a single service client be used from multiple threads?

I have a use case where I have a changing number of threads needing to make service calls to the same service. I don't want to bring service clients up and down each time these threads start as they are short lived and need to start quickly, and I don't want to need to create a "service client pool" if I don't need to.
So:

Are ServiceClients thread-safe enough to be called from multiple threads?
If not, is it sufficient to mutex around the ServiceClient::call?
Do the answers to the previous questions depend on ROS release? (I'm stuck on electric for this project)

Originally posted by Asomerville on ROS Answers with karma: 2743 on 2012-12-20
Post score: 4

Original comments
Comment by Eric Perko on 2012-12-20:
I assume you are talking about roscpp (I have tagged your question as such). If that's incorrect, please change the tag.
Comment by Asomerville on 2012-12-20:
Yes. Thanks, forgot about the distinction.

A:

If you are not using a persistent service, it does not matter if you create a new instance per call since non-persistent services always first query the core for the the service server, connect to it and drop the connection after the service call finishes. Even if you don't create a new service client, according to the source code, a new link is established for each call which should be thread safe.
With persistent services, the same socket is used for multiple calls. According to the roscpp source code, it seems like service calls are synchronized, i.e. using the same service server in multiple threads is safe, but all calls will be processed sequentially. For maximal performance, you probably should create something like a service client pool and your server should run multiple spin-threads (at least as many as you have service clients in your client pool).

Originally posted by Lorenz with karma: 22731 on 2012-12-21
This answer was ACCEPTED on the original site
Post score: 3

