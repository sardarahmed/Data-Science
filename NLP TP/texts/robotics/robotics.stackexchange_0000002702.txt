Q:

How does one calculate the angular motion of each node in a robotic arm

A robotic usually consists of joints with sections of possibly varying width connected together. Considering we know how much each is bent and the length of each section, and their location in 3D space (not local coordinates) at time zero; how do we determine how much each joint should rotate to goto position B from position A. Both A and B are defined in world cartesian coordinates.
Now each joint can move in terms or all at once, so should all joints move simultaneously or in turns?

A:

Inverse kinematics (a very hard field in its own right) is the correct answer, but it gets even more complicated than that. The path that your arm takes might really matter. Say that you need to get the end effector (gripper or hand) to a specific point, but there is a wall with a window in the way. The arm might need to snake around that hole so that it doesn't collide with the wall. This leads to the field of motion planning.
Motion Planning
One motion planning method that might help you work out the angles needed to get the hand to a specific position while taking the environment into account (the environment can also be free of clutter and all you want is the angles to get to a specific point) is to use a RRT.
RRT - Rapidly exploring Random Tree
This method would randomly close in on a solution in a "smart" way.

