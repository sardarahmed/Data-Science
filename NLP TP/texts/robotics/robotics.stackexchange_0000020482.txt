Q:

How to take prediction step in particle filter?

I am working on particle filter. I have studied it thoroughly, but stucked at one point during implementation. I have to implement it using MatLab. The issue is this that I am unable to implement the prediction step. As far as I know, it is dependent upon the motion model. motion model is generally dependent upon the noise and previous value of its output.
                      x(t)= P[x(t) | x(t-1)] = f(x(t-1))+noise  //motion model

But I am not getting this point that what should be my prediction step depends upon the motion model. As at time t, it is dependent upon the x(t) and X_predict(t-1), but how do I arrange it, so that my actual and estimated output will have small error. I have tried different methods, but still having the same issue that my actual and estimated values are not approximated, and giving large errors. 
I know that weights depend upon the X_predict(t), and if it is not correct, so my estimated output will be wrong. 
Kindly guide me how do I proceed.

A:

The prediction step generates a new set of states from the old set of states. The motion model of the system is used to make this best estimate of what we think the new state might be. The motion model basically uses the information about the previous state and the current control input to determine the new state. Some noise is also added for stochasticity. In cases where you do not have a motion model or any information about the control input, just adding noise is an option but most likely gives a less accurate estimate.
In a particle filter, the the accuracy of your best estimate/particle really depends on how well you have propagated your new particles into the next time step using the motion model. As you can imagine, having a higher number of particles to represent the distribution increases the chances that one of them is very close to the actual state. 

