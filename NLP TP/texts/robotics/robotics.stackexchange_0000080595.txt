Q:

How Timer Callback Function Does the Timing?

I want to know how accurate ROS timer is. So for example, I create the timer as follows:
timer1=n.createTimer(ros::Rate(500),&HWController::Timer1_Process,this);

There is a callback function here HWController::Timer1_Process, which takes an argument of C++ class ros::TimerEvent. There are several member variables in this class, one of which is current_expected_. I want to know when current_expected_ is calculated. In ROS documentation, the explanation of this variable is

In a perfect world, this is when the current callback should be happening.

However, no further information is given. I want this accurate value because I need to calculate the time error as shown below.
void HWController::Timer1_Process(const ros::TimerEvent &e)
{
    ros::Duration time_err = e.current_real_ - e.current_expected_;
   .....
}

So, to be more specific, is current_expected_ calculated after this callback function exits (i.e. after the '}' symbol) where it adds the timer period (in this case, 0.0002s) to the current ROS time upon exiting the function? Or is it calculated at the beginning of the function? Actually I prefer to the first explanation because it should not take into account the execution time of this function. I hope someone could clarify this by providing some source codes of its implementation rather than random guessing. I tried to find its implementation but failed. :(

Originally posted by Winston on ROS Answers with karma: 180 on 2017-05-03
Post score: 0

A:

current_expected is computed after the callback is called. But that is only relevant when the timer jumps. In normal operation, the value is computed incrementally from the time the timer was started.
Keep in mind that ros timers and controllers don't go hand in hand. The ros timer's rate varies, and if you dare to set a high rate, the actual rate is going to vary by a lot.

Originally posted by nlamprian with karma: 366 on 2017-05-05
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by Winston on 2017-05-05:
Here is event.current_expected = current_expected_;. It only assigns the value of event.current_expected  but I cannot find where it computes the value of current_expected which confused me.
Comment by nlamprian on 2017-05-06:
It's next_expected that gets updated. current_expected gets its value from next_expected when a TimerQueueCallback instance is created.
Comment by Winston on 2017-05-06:
Please fix your last link. So in this way, does it mean that once the timer loop exits, a TimerQueueCallback instance is created, which means the current_expected updates once the timer loop exits?
Comment by nlamprian on 2017-05-06:
Here is the last link. A TimerQueueCallback instance is created each time an iteration is scheduled for execution.
Comment by Winston on 2017-05-06:
"A TimerQueueCallback instance is created each time an iteration is scheduled for execution." Could you show me how did you come to this conclusion from the source code? Is it because threadFunc(), but I could not see where it is called?

