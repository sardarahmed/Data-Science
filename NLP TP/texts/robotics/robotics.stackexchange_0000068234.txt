Q:

ros_canopen driver node throws internal error right after initializing schunk_lwa4p arm

Hi there,
I am using a schunk lwa and ros_canopen.
Recently, I am having issues with the driver node: After initializing the arm, the driver node throws an internal error (but normally it does not crash), just a few seconds after initializing the arm or right after starting a movement.
The usual error message looks similar to this:
[ INFO] [1435053398.073349599]: waitForService: Service [/powerball/robot/controller_manager/load_controller] is now available.
[ INFO] [1435053398.259478563]: joint_trajectory_controller loaded
[ INFO] [1435053398.429607440]: joint_group_position_controller loaded
[ INFO] [1435053398.509686775]: joint_group_velocity_controller loaded
[ INFO] [1435053398.519499166]: Switched Controllers. From no_stop_controller_defined to joint_trajectory_controller
error: 4
[ INFO] [1435053405.571193079]: Current state: 2 device error: system:0 internal_error: 4 (controller problems;)
[ INFO] [1435053405.571277714]: Current state: 1 device error: system:0 internal_error: 4 (controller problems;)
ID: 4
error: 64
[ INFO] [1435053405.571372578]: Current state: 1 device error: system:0 internal_error: 64 (bus off;)
ID: 64

Sometimes, it only is the controller problems error.
Besides this error, all works well, I can move the arm and have no further troubles, but this is very annoying. I am very thankful for any piece of advice.
Best regards, Marcel
edit: I read the state/ error state of the arm's modules:
state 0x8228: Fault
error register 0x21: Generic + Device profile specific error
manufacturer status 0x8810: SMP command code = CMD_ERROR, SMP error code = INFO_TIMEOUT
0x1003/1 predefined_error_field 0x00108250: CANopen error code = RPDO timeout, SMP error code = INFO_TIMEOUT
0x1003/2 predefined_error_field 0x00E16100: CANopen error code = Internal software û generic, SMP error code = ERROR_INTERNAL
error_detail 1501.000000

After above described error occured, the arm's modules are set to this state. Simple disabling and enabling cleares the error. When using another software (SCHUNK LWA Tool), I do not get any of these errors.
Second edit: Using the newest indigo dev version of ros_canopen (0.6.4, built from source), about 15 seconds after initialization
[ INFO] [1435070986.332901665]: Initializing XXX
[ INFO] [1435070986.333176067]: Current state: 1 device error: system:0 internal_error: 0 (OK)
[ INFO] [1435070986.333333000]: Current state: 2 device error: system:0 internal_error: 0 (OK)
[ INFO] [1435070988.006267810]: waitForService: Service [/powerball/robot/controller_manager/load_controller] has not been advertised, waiting...
[ INFO] [1435070993.026895499]: waitForService: Service [/powerball/robot/controller_manager/load_controller] has not been advertised, waiting...
[ INFO] [1435070998.044590351]: waitForService: Service [/powerball/robot/controller_manager/load_controller] has not been advertised, waiting...
[ INFO] [1435070999.420373195]: waitForService: Service [/powerball/robot/controller_manager/load_controller] is now available.
[ INFO] [1435070999.524246324]: joint_trajectory_controller loaded
[ INFO] [1435070999.584108329]: joint_group_position_controller loaded
[ INFO] [1435070999.703987054]: joint_group_velocity_controller loaded
[ INFO] [1435070999.724046596]: Switched Controllers. From no_stop_controller_defined to joint_trajectory_controller

I get
[ERROR] [1435071040.303861963]: CAN not ready
[ERROR] [1435071050.303888404]: CAN not ready; RPDO timeout; RPDO timeout; RPDO timeout; RPDO timeout; RPDO timeout; RPDO timeout; RPDO timeout; RPDO timeout; RPDO timeout; RPDO timeout; RPDO timeout; RPDO timeout; CAN not ready

instead of the above messages. When sending a goal right after initialization, I get
error: 4
[ INFO] [1435071040.297516982]: Current state: 2 device error: system:0 internal_error: 4 (controller problems;)
[ INFO] [1435071040.297602617]: Current state: 1 device error: system:0 internal_error: 4 (controller problems;)
ID: 4
[ERROR] [1435071040.303861963]: CAN not ready
[ERROR] [1435071050.303888404]: CAN not ready; RPDO timeout; RPDO timeout; RPDO timeout; RPDO timeout; RPDO timeout; RPDO timeout; RPDO timeout; RPDO timeout; RPDO timeout; RPDO timeout; RPDO timeout; RPDO timeout; CAN not ready

Third edit: Using the ros_canopen and ros_control from the ros distro and setting the qlen to 20
sudo ip link set <network> txqueuelen 20

I got the very first error once in five test cycles while moving the arm (at first try). This is way fewer than before, but there is still the chance, it happens.

Originally posted by Marcel Usai on ROS Answers with karma: 200 on 2015-06-23
Post score: 1

Original comments
Comment by felixwatzlawik on 2015-06-23:
hi, I am working with the same hard and software. can i pass you my email adress and ask you some questions? felix.watzlawik@googlemail.com

A:

It looks like  the CAN device driver has problems while sending out messages.
The ros_canopen driver sends updates in burst writes, so the queue just might have run full.
Which CAN driver do you use?
For the mainline kernel driver it might help to set the TX queuelen to a higher value with:
sudo ip link set  txqueuelen 15 # it defaults to 10.
If this does not help, can you please provide a candump? (e.g. via gist.github.com).
I have just filed an issue for the queue overrun: https://github.com/ros-industrial/ros_canopen/issues/102

Originally posted by Mathias Lüdtke with karma: 1596 on 2015-07-06
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by Marcel Usai on 2015-07-21:
I use PEAK driver, version 7.12. I set txqueuelen to 20, this resulted in the CAN not ready error being delayed.
candump see here
Comment by Mathias Lüdtke on 2015-07-21:
I am not sure if the PEAK driver uses txqueuelen.
According to your candump the driver issued 20000004#000C000000000000 (see linux/can/error.h for reference).
The TX and RX errors reach the warning level and the driver stops.
Comment by Mathias Lüdtke on 2015-07-21:
Which bitrate do you use? And have you tried the mainline kernel driver?
How often does the error occur? Do you have an end resistor at the PEAK side of the CAN bus?
Comment by Marcel Usai on 2015-07-22:
using ip -details -statistics link show can0, I could see qlen rise from 10 to 20, so I think, it uses txqueuelen. Bitrate is 500k. Not tried mainline kernel driver.
Comment by Marcel Usai on 2015-07-22:
This error occurs always after a certain period of time. When using qlen of 10, it occurs right after initialization, whereas using a qlen of 20, it takes some time and I can even move the arm in this time.
I have an end resistor set at the peak side.
Comment by Marcel Usai on 2015-07-22:
using the ros_control and ros_canopen version from the ros distro, I do not get CAN not ready errors.
But therefore, I got the other errors (see first block of code in question) once in five tries of a test sequence. This is less than before I submitted the question, might be the greater qlen.
Comment by Mathias Lüdtke on 2015-07-22:
You should get the CAN not ready in the new driver as well, I will have a look for regressing bugs..
Your CAN dump lists only 9 messages in each cycle, so I do not think that it is related to the txqueuelen.
Comment by Mathias Lüdtke on 2015-07-22:
If you want to stick to the PEAK driver, then please update to the latest version. v7.15.1 was released today, it includes some fixes for the USB device, so it might help.
However, I recommend the mainline kernel driver ;)
Comment by Mathias Lüdtke on 2015-07-22:
I had some time to run tests with a LWA4D, and I got the same problems with the mainline kernel driver. Further I have discovered that the driver crashes on shutdown, I have filed an issue for this: https://github.com/ros-industrial/ros_canopen/issues/107
This might influence the kernel driver..
Comment by Marcel Usai on 2015-07-22:
This seems to grow bigger... But somehow good to know, its not only me who got this error.
Comment by Mathias Lüdtke on 2015-07-23:
Can you please test these patches: https://github.com/ros-industrial/ros_canopen/pull/109?
I was not able to reproduce the CAN not ready errors anymore..
Update: I had to alter the PR, please merge again, if needed.
Comment by Marcel Usai on 2015-07-29:
Tried the (updated) patches with kernel driver and a txpueuelen up to 100  (and still lwa4p).CAN not ready error occurs irregularly, but only if 2nd joint (CAN ID 4) has to carry some load (no extra weights).
this results in error 5082 21 1000a0bb for all nodes.
is this driver or arm related?
Comment by Mathias Lüdtke on 2015-07-29:
The problem I solved just addressed issues if the driver was restarted multiple times.
txqueuelen 100 is quite high, 20 should be more than sufficient.
This error code means RPDO timeout, did you get it for all axes?
Was axis 2 in motion or just in an horizontal position?
Comment by Mathias Lüdtke on 2015-07-29:
it sound like a connectivity issues, the powerballs have switchable end resistors, so maybe one was switched on by accident. Or one module got a little bit loose and the spring contacts make some trouble now.
Comment by Marcel Usai on 2015-07-29:
I got it for all axes (all axes same error) and all axes were in motion.
I will re-check all end resistors, but they should be set correctly.
Comment by Marcel Usai on 2015-07-29:
end resistors are set correctly. could the gripper be a problem? (it shouldn't be) I have a pg-plus70 gripper on top of the arm, end resistor is set for the gripper.
edit: I don't think, it is a connectivity issue, because I can move the arm and gripper freely without issues using a windows program
Comment by Marcel Usai on 2015-07-29:
got same error without gripper
Comment by Mathias Lüdtke on 2015-07-29:
It might depend on the cycle time.. (and therefore be a connectivity issue)
Is the gripper is connected to the same CAN bus?
Can you provide me a CAN dumps of the current ros_canopen version and the Windows program?

