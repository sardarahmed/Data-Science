Q:

How to handle actionlib conflicts

Is there any pre-existing strategy for preventing conflicting actionlib actions from running at the same time?
Say I write two action servers to 1) wander around aimlessly, and 2) goto a specific location. Is it up to me to write code to ensure they don't run at the same time, or is there an existing mechanism to help prevent this?
Ideally, I'd like to design actions the way a database regulates transactional access to tables. Each action should publish a list of resources that it "locks", and while it's running, no other action that requires those same resources should be able to run.

Originally posted by Cerin on ROS Answers with karma: 940 on 2016-04-21
Post score: 0

A:

It's up to you. There is no real notion of a resource as that could be anything. The only thing you could use from actionlib is that both actions are one action with different modes. In that case the action must be canceled before running another one.

Originally posted by dornhege with karma: 31395 on 2016-04-21
This answer was ACCEPTED on the original site
Post score: 1

Original comments
Comment by gvdhoorn on 2016-04-21:
I've seen implementations that essentially do this: write an 'advanced' action server, make the 'goal accept' callback/method check the state of the server and based on that decide whether or not to accept an incoming goal. State machines are helpful here, or plain mutexes fi.
Comment by Cerin on 2016-04-21:
But different actions may need different types of arguments. How do you design a single action server that accepts multiple argument collections? e.g. "wander" takes nothing, but "goto" takes an (x,y) coordinate, and "gofoward" might just take a distance.

