Q:

How can I control the grippers in YuMi using the new abb_robot_driver

Hi,
I'm using the new abb_robot_driver to control ABB YuMi IRB 14000 using MoveIt, now I can neither read the position of the grippers in order to remap it into the joint states, nor command the grippers.
I have noticed that there are some services to control the grippers such as:

/yumi/rws/sm_addin/set_sg_command
 Node: /yumi/rws_service_provider
 Type: abb_rapid_sm_addin_msgs/SetSGCommand
 Args: task command target_position

and:

/yumi/rws/sm_addin/run_sg_routine

but I didn't know how to use them, can you please tell me how can I deal with the grippers [Read/Write]? thanks in advance.

Originally posted by bhomaidan on ROS Answers with karma: 114 on 2021-11-29
Post score: 1

A:

To command the grippers according to here, I called the service:

rosservice call /yumi/rws/sm_addin/set_sg_command 'T_ROB_R' 7 0.0

to open the gripper, but to activate this command I had to call the other service which is:

rosservice call /yumi/rws/sm_addin/run_sg_routine.

Here is the list of the  grippers command services:
uint8 SG_COMMAND_UNKNOWN      = 1
uint8 SG_COMMAND_NONE         = 2
uint8 SG_COMMAND_INITIALIZE   = 3
uint8 SG_COMMAND_CALIBRATE    = 4
uint8 SG_COMMAND_MOVE_TO      = 5
uint8 SG_COMMAND_GRIP_IN      = 6
uint8 SG_COMMAND_GRIP_OUT     = 7
uint8 SG_COMMAND_BLOW_ON_1    = 8
uint8 SG_COMMAND_BLOW_ON_2    = 9
uint8 SG_COMMAND_BLOW_OFF_1   = 10
uint8 SG_COMMAND_BLOW_OFF_2   = 11
uint8 SG_COMMAND_VACUUM_ON_1  = 12
uint8 SG_COMMAND_VACUUM_ON_2  = 13
uint8 SG_COMMAND_VACUUM_OFF_1 = 14
uint8 SG_COMMAND_VACUUM_OFF_2 = 15

Still, I don't know how to read the position of the grippers, if you know how to do it, please feel free to leave a comment or even another answer, please.

Originally posted by bhomaidan with karma: 114 on 2021-11-29
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by Mahdi65 on 2022-10-10:
Hi, Did you find the answer on how to read the gripper's position?
Comment by bhomaidan on 2022-10-11:
@Mahdi65 not yet, but if you did let me know, please.
Comment by Mahdi65 on 2022-10-12:
@bhomaidan There is a g_GetPos() method exist. But, the question is how to publish that value like joints on a separate topic? I could confirm it by printing the value on the Flex pendant.
Comment by bhomaidan on 2022-10-13:
@Mahdi65, g_GetPos() is a RAPID instruction, bridging that to ROS is not straight forward, especially in realtime without delays!
Comment by Mahdi65 on 2022-10-13:
@bhomaidan That is true. It is not really clear how they bridge the joint_states through RWS.
Comment by bhomaidan on 2022-10-13:
@Mahdiford State Machine AddIn is the link between the robot and the ROS system, there might be a way to Get things in a similar way to Seting them, for instance GetRAPIDNum, but that might not work perfectly in real time!.
Comment by Mahdi65 on 2022-10-13:
@bhomaidan I tried to dig both sides (RAPID and RWS). I did remove the EGM license to simplify the process. Even when the modules are not running, the robot keeps publishing the joint_states. I use this for the sake of simplicity. I don't understand how they do that. The only part that I understand now is that they are using this function (void RWSStatePublisher::pollingTimerCallback(const ros::TimerEvent& event)) in the rws_state_publisher.cpp to access mechanical unit status, which is not presented in three main RAPID files (I am using just RWS as mentioned before).

