Q:

What is more efficient: writing to disk or message passing a huge amount of data as an array between a Python node and CPP node?

Does anyone have experience with the following scenario:
A Python node that needs to pass a large amount of float values (an array of images) as a multidimensional numpy array to a CPP node.
The dilemma: What is better (in terms of memory or speed):
a) To pass the data as a serialized float32[] message array between these nodes?
b) To write the data to a binary file and just communicate the file's location as a string msg?

Originally posted by ubuntuslave on ROS Answers with karma: 347 on 2016-10-28
Post score: 2

Original comments
Comment by gvdhoorn on 2016-10-29:
Can you quantify huge?

A:

Sending data as a message (ie memory copies) is significantly faster than writing it to disk.
Have a look at these latency numbers for a comparison of the speed of different operations, and remember that ROS message passing (network traffic) between different nodes on the same computer is actually just a memory copy, and never uses the network hardware.

Originally posted by ahendrix with karma: 47576 on 2016-10-28
This answer was ACCEPTED on the original site
Post score: 3

Original comments
Comment by ubuntuslave on 2017-02-14:
My message size is an array (i.e. float32[] of about 648*480*300 or 93312000 elements or 355 MB size). I noticed that writing/reading the array to/from disk takes less time than passing it via a ROS Service. Anyways to speed up the message passing? It takes 5 seconds now to receive the msg.
Comment by ubuntuslave on 2017-02-14:
I would like to note that this slow performance happens even when the service client is set to be persistent.
Comment by ahendrix on 2017-02-15:
I'd expect python would take a while to serialize python datatypes, but I wouldn't think it would take 5 seconds to serialize that much data using the optimized numpy methods.

