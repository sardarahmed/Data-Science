Q:

How do we write a STOP to a continuous Servo?

I'm using processing to send strings to Arduino, using functions like 
else {
    int u=90;
    port.write(u+"z");
}

on the processing side and in the Arduino side I'm using calls like 
  case 'z':
    z.write(v);
    v = 0;
    break;
  case 'L':
    z.write(0);
    //v = 0;
    break;
}

yet I can't get the servo to stop at all. How do I make it shut off?
If it was a regular servo I wouldn't even ask because that's easy but I write 0 or 90 or LOW and nothing, it just keeps spinning in one direction but when it meets one of the conditions in my statements it switches polarity/direction and that's good - I want that but I made this function to make it stop and it is not doing so, does anyone have any ideas ?
I am using a Parallax Continuous Rotation Servo.

A:

There should be some intermediate value of degrees or microseconds that minimizes rotation speed.  You can run calibration tests to find the best value, for example by sweeping the angle or time through a range of values, while writing the current value to LCD or Serial; or by setting an initial value then using two buttons or an analog control voltage to tell the sketch to raise or lower the value, jogging up or down until the servo stops or runs at very slow speed.
Note, you will get finer control (hence, closer to the proper value) using  Servo.writeMicroseconds() rather than Servo.write().  In some Servo library versions, Servo.writeMicroseconds() resolution is half-microsecond, vs about 10 Î¼s/degree Servo.write() resolution.
Also note, in some Servo library versions, Servo.write() accepts microsecond values as well as degree values, distinguishing the former from the latter by number size; ie, numbers less than 544 are clipped to the range 0 to 180 and treated as degrees, while numbers in the range 544 to 2400 are treated as microsecond values. [See example code in related answer at arduino.stackexchange.]

