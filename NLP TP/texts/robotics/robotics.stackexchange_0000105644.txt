Q:

octomap_msgs/conversions.h: No such file or directory

Using 64-bit Ubuntu 22.04.3 LTS
On "colcon build" I'm recieving the following error:
/home/ajifoster3/dev_ws/src/octomap_publisher/src/octomap_publisher_node.cpp:2:10: fatal error: octomap_msgs/conversions.h: No such file or directory
    2 | #include <octomap_msgs/conversions.h>
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
compilation terminated.
gmake[2]: *** [CMakeFiles/octomap_publisher_node.dir/build.make:76: CMakeFiles/octomap_publisher_node.dir/src/octomap_publisher_node.cpp.o] Error 1
gmake[1]: *** [CMakeFiles/Makefile2:137: CMakeFiles/octomap_publisher_node.dir/all] Error 2
gmake: *** [Makefile:146: all] Error 2
---
Failed   <<< octomap_publisher [0.17s, exited with code 2]

opt/ros/humble/include/octomap_msgs has a file called conversions.h
My ros node:
#include <octomap/OcTree.h>
#include <octomap_msgs/conversions.h>
#include <rclcpp/rclcpp.hpp>

class OctomapPublisher : public rclcpp::Node {
public:
    OctomapPublisher() : Node("octomap_publisher") {
        this->declare_parameter<std::string>("octomap_file", "/home/ajifoster3/occupancy_map_full.txt");
        std::string octomap_file;
        this->get_parameter("octomap_file", octomap_file);

        auto tree = std::make_shared<octomap::OcTree>(octomap_file);
        octomap_msgs::msg::Octomap octomap_msg;
        octomap_msgs::binaryMapToMsg(*tree, octomap_msg);

        publisher_ = this->create_publisher<octomap_msgs::msg::Octomap>("octomap", 1);
        timer_ = this->create_wall_timer(
            std::chrono::milliseconds(1000),
            [this, octomap_msg]() {
                publisher_->publish(octomap_msg);
            });
    }

private:
    rclcpp::Publisher<octomap_msgs::msg::Octomap>::SharedPtr publisher_;
    rclcpp::TimerBase::SharedPtr timer_;
};

int main(int argc, char** argv) {
    rclcpp::init(argc, argv);
    rclcpp::spin(std::make_shared<OctomapPublisher>());
    rclcpp::shutdown();
    return 0;
}

my CMakeLists.txt is the following
cmake_minimum_required(VERSION 3.8)
project(octomap_publisher)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(octomap_msgs REQUIRED)

add_executable(octomap_publisher_node src/octomap_publisher_node.cpp)

ament_target_dependencies(octomap_publisher_node rclcpp octomap_msgs)

install(TARGETS
  octomap_publisher_node
  DESTINATION lib/${PROJECT_NAME}
)

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  ament_lint_auto_find_test_dependencies()
endif()

ament_package()

package.xml:
<?xml version="1.0"?>
<?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?>
<package format="3">
  <name>octomap_publisher</name>
  <version>0.0.0</version>
  <description>TODO: Package description</description>
  <maintainer email="ajifoster3@gmail.com">ajifoster3</maintainer>
  <license>TODO: License declaration</license>

  <buildtool_depend>ament_cmake</buildtool_depend>

  <depend>rclcpp</depend>
  <depend>octomap_msgs</depend>

  <test_depend>ament_lint_auto</test_depend>
  <test_depend>ament_lint_common</test_depend>

  <export>
    <build_type>ament_cmake</build_type>
  </export>
</package>

A:

I'm not exactly sure of the solution to my problem, but I resolved it.
The following is my current source code, CMakeList.txt and package.xml.
octomap_publisher_node.cpp
#include <rclcpp/rclcpp.hpp>
#include <octomap/octomap.h>
#include <octomap_msgs/conversions.h>
#include <octomap_msgs/msg/octomap.hpp>
#include <iostream>

class OctomapPublisher : public rclcpp::Node
{
public:
    OctomapPublisher(const std::string& octree_file)
        : Node("octomap_publisher"), octree_file_(octree_file)
    {
        publisher_ = this->create_publisher<octomap_msgs::msg::Octomap>("octomap", 10);
        timer_ = this->create_wall_timer(
            std::chrono::milliseconds(500),
            std::bind(&OctomapPublisher::publishOctomap, this));
    }

private:
    void publishOctomap()
    {
        octomap::OcTree* tree = nullptr;

        // Load the octree from the OT file
        tree = dynamic_cast<octomap::OcTree*>(octomap::AbstractOcTree::read(octree_file_));
        if (!tree) {
            RCLCPP_ERROR(this->get_logger(), "Failed to read octree from file");
            return;
        }

        // Convert the octree to a message
        octomap_msgs::msg::Octomap msg;
        octomap_msgs::binaryMapToMsg(*tree, msg);
        msg.header.frame_id = "map";
        msg.header.stamp = this->now();
        
        // Publish the message
        publisher_->publish(msg);

        delete tree; // Clean up
    }

    std::string octree_file_;
    rclcpp::Publisher<octomap_msgs::msg::Octomap>::SharedPtr publisher_;
    rclcpp::TimerBase::SharedPtr timer_;
};

int main(int argc, char **argv)
{
    rclcpp::init(argc, argv);

    if (argc < 2) {
        std::cerr << "Usage: octomap_publisher <octree_file.ot>" << std::endl;
        return 1;
    }

    auto octomap_publisher = std::make_shared<OctomapPublisher>(argv[1]);
    rclcpp::spin(octomap_publisher);

    rclcpp::shutdown();
    return 0;
}

CMakeList.txt
cmake_minimum_required(VERSION 3.5)
project(octomap_publisher)

# Default to C99
if(NOT CMAKE_C_STANDARD)
  set(CMAKE_C_STANDARD 99)
endif()

# Default to C++14
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 14)
endif()

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# Find dependencies
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(octomap REQUIRED)
find_package(octomap_msgs REQUIRED)
find_package(octomap_server REQUIRED)

# Include C++ libraries
include_directories(
  include
)

# Declare a C++ executable
add_executable(octomap_publisher_node src/octomap_publisher_node.cpp)

ament_target_dependencies(octomap_publisher_node
  rclcpp
  octomap
  octomap_msgs
  octomap_server
  )
  
# Specify libraries to link a library or executable target against
target_link_libraries(octomap_publisher_node
  ${OCTOMAP_LIBRARIES}
)

# Specify libraries to link a

# Install targets
install(TARGETS
  octomap_publisher_node
  DESTINATION lib/${PROJECT_NAME}
)
ament_package()

package.xml
<?xml version="1.0"?>
<?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?>
<package format="3">
  <name>octomap_publisher</name>
  <version>0.0.0</version>
  <description>TODO: Package description</description>
  <maintainer email="ajifoster3@gmail.com">ajifoster3</maintainer>
  <license>TODO: License declaration</license>

  <buildtool_depend>ament_cmake_auto</buildtool_depend>

  <depend>octomap_msgs</depend>
  <depend>octomap</depend>
  <depend>rclcpp</depend>
  <depend>octomap_server</depend>
  
  <test_depend>ament_lint_auto</test_depend>
  <test_depend>ament_lint_common</test_depend>

  <export>
    <build_type>ament_cmake</build_type>
  </export>
</package>

