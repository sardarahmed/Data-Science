Q:

How do you document your ROS packages?

There are 100s of places where one can put documentation info about their ROS package code: <documentation> strings in package.xmls, Github readme pages (assuming your code is hosted on Github), Github pages of your repos, your project website, ROS wiki pages, tutorials on ROS wiki or your website or wherever else, Sphynx doc generator and other doc tools, man pages, in-code comments, obviously, etc. etc. (of course, many of these are supposed to be used on different levels of detail). It gets especially problematic when your project is separated into multiple subprojects, each hosted in their own repository, which makes it harder to get the big picture.
So, to those few out there that actually have experience documenting their (preferably open-source) code, any hints on how you organize this for huge projects and, if the documentation is not only in one place, how do you maintain it to reflect the ongoing changes in the code?

Originally posted by gaya on ROS Answers with karma: 311 on 2015-09-18
Post score: 0

A:

I don't have any experience with this and I'm not sure how up-to-date this page is: link, but it has recommendations. Also there is the rosdoc_lite tool (not to be confused with the old "rosdoc" tool.
Hope that helps.

Originally posted by Airuno2L with karma: 3460 on 2015-09-18
This answer was ACCEPTED on the original site
Post score: 2

Original comments
Comment by Airuno2L on 2015-09-18:
I want to add that as a user, I much prefer when people use just the wiki and auto-generated documentation (doxygen for C++ and Sphynx or Epydoc for python). Any deviations from that like putting important info in readmes and github pages makes things unorganized imo.

